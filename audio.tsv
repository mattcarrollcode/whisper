start	end	text
0	2520	I don't know what those letters meant in blue.
21660	22980	I'm obsessed.
30000	32000	I don't know what those letters meant in blue.
60000	62000	I don't know what those letters meant in blue.
90000	92000	I don't know what those letters meant in blue.
120000	122000	I don't know what those letters meant in blue.
180000	182000	I don't know what those letters meant in blue.
210000	212000	I don't know what those letters meant in blue.
240000	242000	I don't know what those letters meant in blue.
270000	272000	I don't know what those letters meant in blue.
300000	302000	I don't know what those letters meant in blue.
330000	332000	I don't know what those letters meant in blue.
360000	362000	I am obsessed.
362000	364000	I am obsessed.
364000	366000	I am obsessed.
366000	368000	I am obsessed
368000	370000	I am obsessed
370000	372000	I am obsessed
372000	374000	I am obsessed
374000	376000	I am obsessed
376000	378000	I am obsessed
378000	380000	I am obsessed
380000	382000	I am obsessed
382000	384000	I am obsessed
384000	386000	I am obsessed
386000	388000	I am obsessed
388000	390000	I am obsessed
390000	392000	I am obsessed
392000	394000	I am obsessed
394000	396000	I am obsessed
396000	398000	I am obsessed
398000	400000	I am obsessed
400000	402000	I am obsessed
402000	404000	I am obsessed
404000	406000	I am obsessed
406000	408000	I am obsessed
408000	410000	I am obsessed
410000	412000	I am obsessed
412000	414000	I am obsessed
414000	416000	I am obsessed
416000	418000	I am obsessed
418000	420000	I am obsessed
420000	422000	I am obsessed
422000	424000	I am obsessed
424000	426000	I am obsessed
426000	428000	I am obsessed
428000	430000	I am obsessed
430000	432000	I am obsessed
432000	434000	I am obsessed
434000	436000	I am obsessed
436000	438000	I am obsessed
438000	440000	I am obsessed
440000	442000	I am obsessed
442000	444000	I am obsessed
445000	447000	Yeah, I think we will
447000	449000	I think we'll at least explain
449000	451000	My goal is to explain like
451000	453000	mental model, way to think about it
453000	455000	and maybe build a little something
455000	457000	along the way. No promises it'll look good
457000	459000	but it should be at least functional
459000	461000	But yeah
461000	463000	So I also
463000	465000	like before we started just wanted to like
465000	467000	sort of catch up and see how you've been
467000	469000	doing with all this like
469000	471000	working with React for the past
471000	473000	few years. It feels like React Server Components
473000	475000	has been going
475000	477000	for a long time or I've heard about it
477000	479000	for a long time and it's taken many forms
479000	481000	and I'm kind of curious like what did
481000	483000	it take to get to this point
483000	485000	like what was the process
485000	487000	there and the collaboration
487000	489000	Yeah
491000	493000	So I think we first
493000	495000	started like specifically
495000	497000	Sebastian
497000	499000	is like the person who tends
499000	501000	to
501000	503000	kind of look at our vision
503000	505000	going forward like he started thinking
505000	507000	about this maybe in 2016
507000	509000	so
509000	511000	there he had a
511000	513000	internal document
513000	515000	called perhaps provocatively
515000	517000	what comes
517000	519000	after GraphQL
519000	521000	and the idea
521000	523000	was
523000	525000	basically the architecture
525000	527000	like the architecture we had
527000	529000	at Meta for
529000	531000	like
531000	533000	for web apps
533000	535000	was using GraphQL
535000	537000	and Relay for
537000	539000	data access and that worked pretty
539000	541000	well but what ends up
541000	543000	happening is you
543000	545000	you push more and more code
545000	547000	to the client
547000	549000	and so like the client bundle really
549000	551000	grows but that's
551000	553000	also not the whole story it's like
553000	555000	you also push a lot
555000	557000	data like the traditional kind
557000	559000	of rich client architecture
559000	561000	is you push all the data
561000	563000	that you might kind of plausibly
563000	565000	need into a client cache
565000	567000	and then your components pick parts
567000	569000	of the data and somehow massage it
569000	571000	and so what you
571000	573000	the problem you kind of run into
573000	575000	you know as you scale it up is
575000	577000	you end
577000	579000	up having all the data
579000	581000	and all the code you might possibly need
581000	583000	even if actually
583000	585000	it's not needed for the specific
585000	587000	case and
587000	589000	like a canonical
589000	591000	example of this could be
591000	593000	you know like when you want
593000	595000	to show you know a post was
595000	597000	liked by
597000	599000	like your friend
599000	601000	like I don't know
601000	603000	Dan and like Anna
603000	605000	and like five others
605000	607000	something like this and so you don't
607000	609000	actually need for example
609000	611000	their avatars
611000	613000	or
613000	615000	and like you need like very specific bits
615000	617000	of information and really like it's just
617000	619000	you don't even need like the links to their
619000	621000	profiles it's really
621000	623000	just the string that you want to get
623000	625000	but even though the GraphQL
625000	627000	of course like GraphQL lets you be very selective
627000	629000	about what you fetch
629000	631000	and like how you use it so it does
631000	633000	solve this problem partially
633000	635000	but you still
635000	637000	the shape of the data you
637000	639000	download is dictated by the GraphQL
639000	641000	endpoint and so if you
641000	643000	like transform a bunch of
643000	645000	stuff and
645000	647000	get you know like get something
647000	649000	that you know just the
649000	651000	data for the UI layer you kind of
651000	653000	have to do it on the client
653000	655000	and this problem
655000	657000	it's like an inefficiency problem
657000	659000	I think that's like one way
659000	661000	you know one way to think of this is like
661000	663000	we'd like to optimize it so
663000	665000	that like the natural way
665000	667000	to optimize it if you think about it is
667000	669000	okay like you're on the server anyway
669000	671000	why not have some kind of
671000	673000	abstraction kind of like view models
673000	675000	that used to be like a thing
675000	677000	in I don't know 20
677000	679000	2010 or something like this there was
679000	681000	this idea of like view models that
681000	683000	massage the actual model from the
683000	685000	database for the view kind of
685000	687000	preparing just what the view
687000	689000	needs
689000	691000	and I think that's one
691000	693000	angle and it doesn't
693000	695000	have to do like I also want to clarify
695000	697000	it doesn't have to do with like just like big
697000	699000	pages or anything like
699000	701000	a classic kind of low
701000	703000	scale example of this is a documentation
703000	705000	website where you
705000	707000	have like you have many
707000	709000	MDX components
709000	711000	like you know code
711000	713000	snippets or interactive code
713000	715000	editor and so on and
715000	717000	the way you would do this today
717000	719000	probably is you just have
719000	721000	like all of them in a single
721000	723000	bundle and then like all of them get
723000	725000	loaded but ideally what you want
725000	727000	is like if a page has no
727000	729000	interactive code snippets and also
729000	731000	only has like static code
731000	733000	examples you probably don't want to like
733000	735000	download the parser you kind of want to have
735000	737000	that output instead
737000	739000	so I think like that is like
739000	741000	one part of it is this idea
741000	743000	like let's not download the data
743000	745000	we're not going to need let's not
745000	747000	download the code we might
747000	749000	not need let's
749000	751000	just you know download
751000	753000	the things that we actually do need and then
753000	755000	if you need to like pre-process a bunch of stuff
755000	757000	we'll just do that on the server because
757000	759000	we're going to the server anyway
759000	761000	why not do it there
761000	763000	but I think another
763000	765000	way to look at it is just from the
765000	767000	mental model perspective
767000	769000	so if you've been coding
769000	771000	you know like for a while
771000	773000	like especially like before
773000	775000	like before all the client
775000	777000	stuff explosion
777000	779000	which you know it was warranted like people
779000	781000	wanted to do more stuff on the client
781000	783000	because they wanted to have like
783000	785000	zero latency
785000	787000	for like interactions and like really
787000	789000	reach interactions without reloading the page
789000	791000	but then if you think in terms of
791000	793000	like mental model
793000	795000	kind of thinking in terms of
795000	797000	like state management and
797000	799000	caching and like all of this stuff
799000	801000	it gets really complicated
801000	803000	like how do you even know like what to
803000	805000	fetch for the next page how do you
805000	807000	avoid waterfalls
807000	809000	like it gets pretty complex and then if you
809000	811000	think of like the way we used to write
811000	813000	web apps in you know
813000	815000	in 2000s before
815000	817000	like in traditional server
817000	819000	client model the mental model is
819000	821000	so much simpler because you just describe
821000	823000	like I'm going to go to the database
823000	825000	I'm going to fetch these different things I'm going to spit
825000	827000	out this response and then
827000	829000	if you want to like go to another page
829000	831000	that cycle repeats again
831000	833000	and so I think like server components
833000	835000	is you know kind of this idea of
835000	837000	let's keep the user
837000	839000	experience where like things
839000	841000	don't you know you don't reload the page
841000	843000	all the time but let's
843000	845000	keep also like the mental model
845000	847000	of the kind of traditional
847000	849000	request response
849000	851000	where you just
851000	853000	describe what you want to see on the page
853000	855000	and then it somehow reconciles
855000	857000	and also like
857000	859000	let's while we're here why
859000	861000	not like apply a bunch of optimizations
861000	863000	now that we know you know like let's not download
863000	865000	more code than we need let's not
865000	867000	download more data and so
867000	869000	in terms of like historical scale
869000	871000	I think we so we
871000	873000	started with this
873000	875000	I think like idea of
875000	877000	and we knew we also knew that
877000	879000	you know this approach was also
879000	881000	not new exactly it was more about
881000	883000	bringing it to react
883000	885000	because for
885000	887000	like we've had
887000	889000	at Facebook we've had XHP
889000	891000	so this is
891000	893000	Wait what is XHP?
893000	895000	It's sort of like an alternative universe
895000	897000	and I think we're kind of
897000	899000	seeing this again with
899000	901000	you know like when JSX was weird
901000	903000	to everyone when react came out
903000	905000	and we didn't even realize that it
905000	907000	would be controversial
907000	909000	I think like with server components maybe
909000	911000	it's a little bit similar because
911000	913000	the thing we had
913000	915000	before react
915000	917000	the way like the
917000	919000	Facebook website was built
919000	921000	was with like PHP and later
921000	923000	changed to hack
923000	925000	but we have this syntax for
925000	927000	defining
927000	929000	components there
929000	931000	so it was a very different
931000	933000	mindset from
933000	935000	I guess dominant solutions like
935000	937000	Rails or
937000	939000	you know like the old school
939000	941000	server solutions
941000	943000	like in the open source
943000	945000	XHP was pretty different because it felt
945000	947000	more like react as in
947000	949000	you have no like there are no
949000	951000	additional controllers in
951000	953000	this kind of MVC sense
953000	955000	it's more like there's a component
955000	957000	tree, components can be
957000	959000	asynchronous so they can like fetch
959000	961000	some data and then return what they render
961000	963000	and you can compose them
963000	965000	and you can have your own components
965000	967000	and so this is actually like
967000	969000	where JSX came from
969000	971000	is like people writing XHP
971000	973000	code wanted to keep writing
973000	975000	something similar like on the client
975000	977000	but the problem with that paradigm is that
977000	979000	it couldn't refresh
979000	981000	without like losing the entire page
981000	983000	and so
983000	985000	we had this thing as inspiration
985000	987000	and we also had
987000	989000	our native apps also kind of worked
989000	991000	like at least some
991000	993000	parts of them worked with that model where
993000	995000	the actual logic for how
995000	997000	to massage data and like turn it
997000	999000	into UI tree was on the server
999000	1001000	it was written in XHP
1001000	1003000	Is that kind of like PHP?
1003000	1005000	I mean I see the similarity
1005000	1007000	conceptually of just like you're
1007000	1009000	wild-westing your database queries here
1009000	1011000	you're turning that into server markup
1011000	1013000	and then you're sending it down. It's just there was no
1013000	1015000	like server-client relationship yet
1015000	1017000	so I kind of see that React like took that
1017000	1019000	bit out, the templating was the good part
1019000	1021000	let's do the client thing first because that's
1021000	1023000	kind of a no-brainer of like yeah that's
1023000	1025000	like the end of the spectrum
1025000	1027000	that's what you need and now
1027000	1029000	we're kind of cycling back
1029000	1031000	when we realized oh yeah we probably could
1031000	1033000	have a dynamic setup here
1033000	1035000	yeah I think it's
1035000	1037000	it's just that we already
1037000	1039000	had a solution to the server part
1039000	1041000	and like XHP was actually
1041000	1043000	pretty sophisticated so
1043000	1045000	there was another part that was
1045000	1047000	related to it called BigPipe
1047000	1049000	which we you know like we published
1049000	1051000	an article about it in
1051000	1053000	2011 maybe
1053000	1055000	and it's just
1055000	1057000	this idea that if you have
1057000	1059000	this kind of like asynchronous
1059000	1061000	component abstraction on the server
1061000	1063000	you also don't want to
1063000	1065000	like hold the entire page
1065000	1067000	before starting to
1067000	1069000	like emit output
1069000	1071000	and I was actually
1071000	1073000	surprised like I learned that in
1073000	1075000	PHP or Rails like you would
1075000	1077000	usually just you know
1077000	1079000	fetch everything and kind of then
1079000	1081000	start rendering and like that's
1081000	1083000	not efficient
1083000	1085000	and so yeah
1085000	1087000	so the way like BigPipe worked is that
1087000	1089000	it had this ability to chunk
1089000	1091000	the page like your feed your
1091000	1093000	like I don't know like the sidebar
1093000	1095000	something else those could be
1095000	1097000	parallelized
1097000	1099000	so like all of them could have some data
1099000	1101000	dependencies but we could stream
1101000	1103000	kind of the initial shell and then fill
1103000	1105000	them in and so we wanted to bring
1105000	1107000	like so I think like we had
1107000	1109000	these solutions
1109000	1111000	but then we needed client
1111000	1113000	interactivity and so React
1113000	1115000	kind of started solving that
1115000	1117000	and then as we kind of did more
1117000	1119000	with React
1119000	1121000	there was like this split between
1121000	1123000	technologies that became very noticeable
1123000	1125000	because they did not really
1125000	1127000	integrate well
1127000	1129000	no they were used together
1129000	1131000	so you could in XHP
1131000	1133000	you could render a React component
1133000	1135000	but this would only
1135000	1137000	work kind of once so this
1137000	1139000	would just say you know like
1139000	1141000	in this like tree
1141000	1143000	when it loads on the client like put
1143000	1145000	this React component there but then there
1145000	1147000	was no way to update the tree because
1147000	1149000	it was just HTML in the end
1149000	1151000	so there was no
1151000	1153000	way to kind of refresh it without losing
1153000	1155000	the page
1155000	1157000	okay so there was no
1157000	1159000	like client side routing story
1159000	1161000	is kind of the big part there
1161000	1163000	yeah well it's not just
1163000	1165000	routing necessarily it's just there was no
1165000	1167000	way to refresh the server
1167000	1169000	output without like losing everything
1169000	1171000	and so
1171000	1173000	I think the
1173000	1175000	yeah so I think
1175000	1177000	the story kind of
1177000	1179000	it really became
1179000	1181000	I think like
1181000	1183000	the way to explain it
1183000	1185000	conceptually
1185000	1187000	makes more
1187000	1189000	sense like if you do this in a different
1189000	1191000	order then things actually happen
1191000	1193000	chronologically yeah it does make
1193000	1195000	sense because server components are like it's fitting
1195000	1197000	this thing that's actually a new starting
1197000	1199000	point instead of a new feature
1199000	1201000	so it's like if you want to use it
1201000	1203000	properly you
1203000	1205000	refactor from the top you're not refactoring
1205000	1207000	by just let's add a server component right here
1207000	1209000	and see how it goes exactly
1209000	1211000	yeah and I think it's because
1211000	1213000	like we've already like we've had a piece
1213000	1215000	you know that works on the server so we did
1215000	1217000	the client part and now okay let's
1217000	1219000	rethink the server piece
1219000	1221000	to work with the client part seamlessly
1221000	1223000	because we now know you know the entire
1223000	1225000	like how to fit them
1225000	1227000	together and so that
1227000	1229000	took a long time and I think like suspense
1229000	1231000	is especially interesting as a feature
1231000	1233000	because the original
1233000	1235000	the
1235000	1237000	motivation for his design which
1237000	1239000	I think was in like 2016 or
1239000	1241000	2017 yeah was
1241000	1243000	like how do we adopt this
1243000	1245000	big pipe architecture like
1245000	1247000	this idea of streaming things
1247000	1249000	in and like having them kind of appear
1249000	1251000	as they're ready like
1251000	1253000	how do we fit this into React
1253000	1255000	server rendering model
1255000	1257000	and so we started there that let
1257000	1259000	that let the like design of suspense
1259000	1261000	then but the first
1261000	1263000	way we shift suspense was actually on the client
1263000	1265000	only and it was not supported for
1265000	1267000	SSR because we didn't have a streaming
1267000	1269000	server render yet and then we did like
1269000	1271000	streaming server rendering and then
1271000	1273000	we realized actually this still leads
1273000	1275000	to waterfalls because like then
1275000	1277000	your app lives on the client
1277000	1279000	and you need to somehow prevent
1279000	1281000	client server waterfalls
1281000	1283000	and so then we're like okay maybe we need like
1283000	1285000	to actually like do something like
1285000	1287000	XFP first or you know like
1287000	1289000	do something that actually lets you avoid
1289000	1291000	client server waterfalls
1291000	1293000	and this idea of like splitting
1293000	1295000	components into two types
1295000	1297000	was actually using like
1297000	1299000	almost the same mechanism as
1299000	1301000	Sebastian explored in
1301000	1303000	2015 but for
1303000	1305000	using Reacting workers
1305000	1307000	so it's
1307000	1309000	exactly the same idea but applied
1309000	1311000	like a different so it's like many things
1311000	1313000	came together that were developed
1313000	1315000	in like in different years and
1315000	1317000	now like we have this consistent vision
1317000	1319000	but it's it's a bit hard
1319000	1321000	to unpack how it happened exactly
1321000	1323000	it yeah and it's
1323000	1325000	it's cool to hear the context of like
1325000	1327000	where this was born inside
1327000	1329000	of Facebook because it starts
1329000	1331000	to make a little more sense with that I just know it
1331000	1333000	as like an outsider that used
1333000	1335000	React first with create React app
1335000	1337000	then with Next.js and just kind of learn
1337000	1339000	patterns from there for small scale things
1339000	1341000	without ever really thinking about the server
1341000	1343000	it was like I learned about client stuff
1343000	1345000	then I learned about SSR and now
1345000	1347000	I'm pushing everything that I can to the server
1347000	1349000	it's backwards from how like
1349000	1351000	the progress of web
1351000	1353000	dev happened like it started with Rails
1353000	1355000	and then we started exploring client side
1355000	1357000	but I'm like in a generation
1357000	1359000	that started with Angular 1 like
1359000	1361000	I was middle school before
1361000	1363000	that so I just didn't even know what was
1363000	1365000	going on in web dev before that
1365000	1367000	so it's just different
1367000	1369000	yeah I guess the other
1369000	1371000	thing that's like relevant is I think a lot
1371000	1373000	of people because like the
1373000	1375000	word server is so like overloaded
1375000	1377000	in like for us at
1377000	1379000	least because we
1381000	1383000	we try to solve like a more
1383000	1385000	general problem so
1385000	1387000	like server components for example
1387000	1389000	they can run during the
1389000	1391000	build right so it doesn't
1391000	1393000	mean that you literally need to like have
1393000	1395000	a server it's more like
1395000	1397000	the server client distinction
1397000	1399000	for us is just
1399000	1401000	the stuff that runs first and kind of
1401000	1403000	the stuff that runs later and so
1403000	1405000	the stuff that runs first that could run
1405000	1407000	during the build time or
1407000	1409000	where actually
1409000	1411000	it won't do and it also gets confusing
1411000	1413000	right because like client components
1413000	1415000	they kind of also run on the server
1415000	1417000	during like SSR
1417000	1419000	so it's not
1419000	1421000	exactly this like client
1421000	1423000	stuff is like in the browser server
1423000	1425000	stuff is like on the machine
1425000	1427000	it's more like just two stages and we need
1427000	1429000	some names for the stages
1429000	1431000	and we also want to support
1431000	1433000	running server components
1433000	1435000	on the client
1435000	1437000	of course you wouldn't be able to
1437000	1439000	read a database but it's just
1439000	1441000	using the same mental model
1441000	1443000	if you really don't have a server and
1443000	1445000	also you don't want to
1445000	1447000	you know generate things
1447000	1449000	at the build time but you want to structure
1449000	1451000	your code like in the same way so that
1451000	1453000	it's later possible to like extend
1453000	1455000	it or like port it
1455000	1457000	so it's really about the paradigm
1457000	1459000	of like this you know
1459000	1461000	two component types
1461000	1463000	rather than specific places where you put
1463000	1465000	them
1465000	1467000	yeah exactly and I've heard
1467000	1469000	the thought in the past
1469000	1471000	of like maybe it should have been called use
1471000	1473000	interactive or something like that
1473000	1475000	where it implies like I'm not a fan of
1475000	1477000	that personally but it
1477000	1479000	implies that it's adding things
1479000	1481000	that could basically
1481000	1483000	change state after the fact
1483000	1485000	it's not just passing things down through server
1485000	1487000	components and it's like
1487000	1489000	I get it I think my bigger
1489000	1491000	maybe not issue but
1491000	1493000	when you hear React server components you think server
1493000	1495000	immediately that's definitely a thing
1495000	1497000	but it really just means
1497000	1499000	thing that doesn't run in the browser
1499000	1501000	necessarily usually
1501000	1503000	you would do like a static build up front
1503000	1505000	and then ship anything down that you can
1505000	1507000	or if you want to stream and suspense
1507000	1509000	stuff then you can go
1509000	1511000	boot up the server and
1511000	1513000	Next.js is pretty graceful with that where it's like
1513000	1515000	actually figuring out what could
1515000	1517000	be sandwiched into a big cache and what
1517000	1519000	can't so you don't really have to think about that
1519000	1521000	but if you're building it on your own
1521000	1523000	I totally agree that server components
1523000	1525000	are just like
1525000	1527000	pre-rendering I think is one word I've heard
1527000	1529000	also like build time versus
1529000	1531000	server it could be either one
1531000	1533000	so build time components it just
1533000	1535000	depends where you're running it
1535000	1537000	yeah
1537000	1539000	it's confusing I think it's
1539000	1541000	one of those cases where everybody has
1541000	1543000	suggestions on how to name them but then
1543000	1545000	they don't seem
1545000	1547000	they all have weird cases
1547000	1549000	where it's not exactly true
1549000	1551000	and server client is
1551000	1553000	like
1553000	1555000	maybe this is one of those
1555000	1557000	cases where we just
1557000	1559000	redefine the terms
1559000	1561000	like rendering
1561000	1563000	in React rendering
1563000	1565000	doesn't mean updating the
1565000	1567000	the graphical
1567000	1569000	like it's a different concept
1569000	1571000	from rendering in graphics
1571000	1573000	programming because like in React I
1573000	1575000	re-render it doesn't mean that
1575000	1577000	a bunch of stuff actually changes on the screen
1577000	1579000	it just means we recompute what should
1579000	1581000	be on the screen and like maybe we change something
1581000	1583000	maybe we don't and so people have
1583000	1585000	intuitions like oh I have to avoid re-rendering
1585000	1587000	but actually you don't it's
1587000	1589000	just a question of like is it actually slow
1589000	1591000	if it's not slow you're fine
1591000	1593000	like everything is fine and so
1593000	1595000	we kind of hijacked this definition
1595000	1597000	like in React rendering means
1597000	1599000	something different and I feel like maybe
1599000	1601000	this is another example of like yeah we kind of
1601000	1603000	we need some words to describe
1603000	1605000	the relationship and these are the best words
1605000	1607000	we found but it's gonna
1607000	1609000	be a bit confusing and we haven't
1609000	1611000	found any better options so far
1611000	1613000	yeah
1613000	1615000	it goes all down the stack and
1615000	1617000	I work at Astro right now
1617000	1619000	and you know maintaining a meta framework
1619000	1621000	we were dealing with these really primitive ideas
1621000	1623000	where it's like you don't want to use
1623000	1625000	complicated names for this stuff you want it
1625000	1627000	to feel accessible but
1627000	1629000	it also needs to describe what it does
1629000	1631000	pretty well I also know
1631000	1633000	with React like a big debacle came around
1633000	1635000	use as just like a term
1635000	1637000	that you can use to unwrap
1637000	1639000	something that happens later
1639000	1641000	and like I'm getting used
1641000	1643000	to it I suggested
1643000	1645000	unwrap and people are like well not always
1645000	1647000	sometimes use is used for this
1647000	1649000	use use that's also
1649000	1651000	a thing so it's hard
1651000	1653000	you want it to be simple and you want
1653000	1655000	it to encompass whatever use
1655000	1657000	cases it's actually trying to do
1657000	1659000	and yeah I feel like at
1659000	1661000	least with server components it strikes a decent
1661000	1663000	balance of like you're gonna think about this differently
1663000	1665000	it's not running in the client
1665000	1667000	yeah I think
1667000	1669000	sometimes
1669000	1671000	I don't know
1671000	1673000	maybe we'll come to regret this but I
1673000	1675000	think sometimes you
1675000	1677000	you know when people
1677000	1679000	talk about oh like I wish this was
1679000	1681000	more explicit
1681000	1683000	I think one thing we've noticed is that people
1683000	1685000	always say that in the beginning
1685000	1687000	and then six months later everyone is
1687000	1689000	like oh I want like a shortcut I want
1689000	1691000	to you know this term is too long or
1691000	1693000	it's like API name like I know what
1693000	1695000	it is already why do I have to type all
1695000	1697000	of this and so we
1697000	1699000	kind of I think we discount a little
1699000	1701000	bit of this initial knee-jerk reaction
1701000	1703000	because we just know yeah you know when
1703000	1705000	it's a common thing it's gonna feel different
1705000	1707000	like for example with use
1707000	1709000	like yeah I just gonna search for react use
1709000	1711000	that's gonna be like a top result in Google
1711000	1713000	because like we have enough
1713000	1715000	like mode to
1715000	1717000	you know to actually bubble up
1717000	1719000	so I think that helps
1721000	1723000	but it's also sometimes
1723000	1725000	sometimes you just
1725000	1727000	can't have an intuitive term because
1727000	1729000	the whole idea is different and
1729000	1731000	you might as well kind of
1731000	1733000	realize that
1733000	1735000	no this doesn't make sense I need to like
1735000	1737000	sit down and understand what this is about
1737000	1739000	none of my intuitions are
1739000	1741000	helping and like that's fine that's
1741000	1743000	because it's a new thing it is different
1743000	1745000	like it's good if you realize
1745000	1747000	that it's different
1747000	1749000	yeah I definitely think
1749000	1751000	it's signaling that but the
1751000	1753000	main thing people are wondering which I'm hoping
1753000	1755000	we can get through like with the live
1755000	1757000	coding today is like up until
1757000	1759000	now I've been able to just
1759000	1761000	spin up you know V or something like
1761000	1763000	that put a div with an ID of
1763000	1765000	main and hydrate a thing
1765000	1767000	in there and now we're basically saying
1767000	1769000	no there's there's more than that if you
1769000	1771000	really want to think about it this way having set
1771000	1773000	up my own service for
1773000	1775000	a week I can
1775000	1777000	say there is more to it and
1777000	1779000	I don't know if the react
1779000	1781000	team has any opinions on that right now of like
1781000	1783000	is DIY server components
1783000	1785000	something that's like does it matter
1785000	1787000	is it something we need or
1787000	1789000	is next.js just the way you should try it
1789000	1791000	yeah I think
1791000	1793000	so well there's
1793000	1795000	a bunch of different things there so
1795000	1797000	yeah I think like one thing
1797000	1799000	question yeah because like you kind
1799000	1801000	of alluded to this thing like I can
1801000	1803000	just like have a div and like put something
1803000	1805000	in there and so I think that
1805000	1807000	was more about not about
1807000	1809000	frameworks per se it was about like
1809000	1811000	client only versus
1811000	1813000	like build time or
1813000	1815000	SSR and so I think
1815000	1817000	like that's that's one question
1817000	1819000	the other question is like
1819000	1821000	do you know do it yourself
1821000	1823000	set up versus like a
1823000	1825000	framework or like should there be one
1825000	1827000	framework or many and I think that's that's a separate
1827000	1829000	question so which which one
1829000	1831000	which one of those do you want to go into
1833000	1835000	I'm more interested in the second one I guess
1835000	1837000	because the first one I've already
1837000	1839000	I pretty much agreed like yeah
1839000	1841000	I probably wouldn't point people to
1841000	1843000	just feed and react or
1843000	1845000	create react app to build something
1845000	1847000	I would if you're going to deploy it
1847000	1849000	anywhere I'm probably going to point you
1849000	1851000	to next.js or astro or
1851000	1853000	more likely next.js if you really want to
1853000	1855000	try server components
1855000	1857000	I think like on the first one my
1857000	1859000	perspective is that
1859000	1861000	and I mean that that's also
1861000	1863000	by you know we know that
1863000	1865000	the recommendation change was
1865000	1867000	pretty controversial
1867000	1869000	but we also didn't try to motivate it
1869000	1871000	like we do have like a deep dive there
1871000	1873000	that's like can I use react without the framework
1873000	1875000	sure yeah I think
1875000	1877000	it's a really nice documentation page
1877000	1879000	looking through it
1879000	1881000	the specific thing I think
1881000	1883000	that gets a bit lost is like
1883000	1885000	nobody
1885000	1887000	is you know it's not
1887000	1889000	about like the push
1889000	1891000	like the reason we don't suggest
1891000	1893000	Vite is
1893000	1895000	an option for you know you want to make
1895000	1897000	an app fully with react use Vite
1897000	1899000	like the reason we don't say this is
1899000	1901000	again because like default Vite
1901000	1903000	you know when you say Vite you probably
1903000	1905000	mean like a template that's blindside
1905000	1907000	only because if you use like a template
1907000	1909000	that has SSR and a bunch of other
1909000	1911000	stuff let's be real it is a framework
1911000	1913000	it's not a template
1913000	1915000	like it's an ad hoc framework
1915000	1917000	that is maybe a good framework but
1917000	1919000	if you compare it in terms of usage
1919000	1921000	community it's like a very
1921000	1923000	niche framework with you know
1923000	1925000	a very small community which is maybe
1925000	1927000	what you want but let's not fool ourselves
1927000	1929000	saying that this isn't
1929000	1931000	a framework and then if we talk
1931000	1933000	about like a default Vite setup with
1933000	1935000	this just like blindside
1935000	1937000	only the problem with this is
1937000	1939000	it's not that client
1939000	1941000	only is bad I don't think that's true
1941000	1943000	I think like for some cases it totally makes
1943000	1945000	sense it's more
1945000	1947000	that you're kind of
1947000	1949000	locking yourself into this
1949000	1951000	setup it's like let's say like later
1951000	1953000	you want to add a landing page
1953000	1955000	and you want the landing page
1955000	1957000	to have HTML in it and
1957000	1959000	because it's like it's silly not
1959000	1961000	to like why would you not have
1961000	1963000	HTML in a webpage
1963000	1965000	it's like it's better for SEO
1965000	1967000	sure like crawlers can understand
1967000	1969000	JavaScript but like not as fast
1969000	1971000	it's like better for
1971000	1973000	just like your users you don't have to
1973000	1975000	download the bundle to like show anything
1975000	1977000	and there are many
1977000	1979000	of these like benefits like you
1979000	1981000	you don't have like to spin up
1981000	1983000	like a separate project with like a static site
1983000	1985000	generator you just add a page
1985000	1987000	for this page you use
1987000	1989000	kind of you know static
1989000	1991000	static build whereas for
1991000	1993000	another page maybe you like opt
1993000	1995000	out and you return like
1995000	1997000	just a shell or like even
1997000	1999000	null for the server pass
1999000	2001000	for the build pass
2001000	2003000	then you do client only so it's
2003000	2005000	really about like encouraging you to use
2005000	2007000	a tool that lets you
2007000	2009000	even start with client only
2009000	2011000	but then the moment you want to have a page
2011000	2013000	or like a part of your
2013000	2015000	even enhance existing
2015000	2017000	pages
2017000	2019000	to be like generated at build time
2019000	2021000	or the server features
2021000	2023000	you don't have to migrate to another tool
2023000	2025000	you don't have to like redo your whole project
2025000	2027000	because your router wasn't designed
2027000	2029000	for this it's kind of like
2029000	2031000	it's also kind of like you used to put
2031000	2033000	the router inside
2033000	2035000	the you know your react app
2035000	2037000	and this is kind of like no the router
2037000	2039000	belongs outside
2039000	2041000	because if you put the router outside
2041000	2043000	then that lets you have like multiple
2043000	2045000	pages that are automatically
2045000	2047000	code split that have all these like different
2047000	2049000	optimization modes
2049000	2051000	it's really about like architectural question of pulling it out
2051000	2053000	so this is why
2053000	2055000	yeah this is why we don't recommend
2055000	2057000	the you know even though if you
2057000	2059000	want to do client side rendering only
2059000	2061000	that's fine but we do recommend
2061000	2063000	to do it in a way that lets you
2063000	2065000	enhance it with
2065000	2067000	build time or server logic later if you
2067000	2069000	want to
2069000	2071000	which kind of goes back to that point of like server
2071000	2073000	components can run in multiple ways
2073000	2075000	and you don't want a tool that just locks you
2075000	2077000	into one like I've definitely
2077000	2079000	had well at least for
2079000	2081000	most of the things I build I think this could
2081000	2083000	go on serverless if I just had
2083000	2085000	one query per RAM I could put this on something
2085000	2087000	and it would be way better and I don't
2087000	2089000	want to change frameworks to do that I just want to flip
2089000	2091000	a switch and this route is now on SSR
2091000	2093000	which is something a lot of
2093000	2095000	frameworks already do and it's
2095000	2097000	something like something like VEET
2097000	2099000	which is like a half framework
2099000	2101000	it's like a batteries included tool for
2101000	2103000	framework authors is how I kind of think
2103000	2105000	about it like you can go nuts
2105000	2107000	trying to build your own world inside of
2107000	2109000	VEET but the default is just like
2109000	2111000	sort of showing React on a workbench
2111000	2113000	without any opinions of where you put it
2113000	2115000	which for like
2115000	2117000	Ruby on Rails and stuff like that you're embedding a
2117000	2119000	React component in something that's fine and
2119000	2121000	I think the docs come out really well of like
2121000	2123000	if you have a stack right now here's
2123000	2125000	how you can put it in
2125000	2127000	as simply as possible wire up Babel
2127000	2129000	here you go but yeah
2129000	2131000	it lists out any other frameworks that
2131000	2133000	put those opinions on top so you
2133000	2135000	can deploy it somewhere which is
2135000	2137000	what 99% of people are going to do
2137000	2139000	even for like a hello world
2139000	2141000	yeah and
2141000	2143000	then like for your second question
2143000	2145000	about you know it should be like
2145000	2147000	should there be like a next only thing or
2147000	2149000	should there be many frameworks
2149000	2151000	or should you like do it yourself
2151000	2153000	I think it's still
2153000	2155000	an open question of what people will actually
2155000	2157000	want to do like I'm not sure
2157000	2159000	I think like personally I'd like
2159000	2161000	to see many solutions
2161000	2163000	I think there's like a
2163000	2165000	natural question of like how
2165000	2167000	I think there's like a
2167000	2169000	tension there with differentiation
2169000	2171000	because
2171000	2173000	if you're a framework like if you look
2173000	2175000	at next app router API
2175000	2177000	you'll notice like a lot of
2177000	2179000	next APIs are kind of gone
2179000	2181000	so it kind of
2181000	2183000	feels more vanilla in a weird
2183000	2185000	way because it feels like
2185000	2187000	well there's no like gets that you know
2187000	2189000	there is
2189000	2191000	something for like static generation because it can
2191000	2193000	it can be handled directly but
2193000	2195000	there's no like gets
2195000	2197000	server side props it's just async
2197000	2199000	await right there's
2199000	2201000	you know like there's no like special APIs
2201000	2203000	for a bunch of stuff that used
2203000	2205000	to have special APIs
2205000	2207000	you know exports which is
2207000	2209000	like the big thing yeah
2209000	2211000	there are I think there are some
2211000	2213000	but you know for metadata and a few
2213000	2215000	other things that react doesn't handle
2215000	2217000	by itself but for
2217000	2219000	a bunch of things there isn't and
2219000	2221000	you can also compare it to remix I think
2221000	2223000	in like you don't render
2223000	2225000	an outlet you just accept children
2225000	2227000	which is like accepting children is
2227000	2229000	the most react
2229000	2231000	API possible it's like the most
2231000	2233000	vanilla thing and so
2233000	2235000	there's this question of like if
2235000	2237000	frameworks can and that was
2237000	2239000	the goal really with server components
2239000	2241000	is to get rid of
2241000	2243000	these framework concepts and kind of
2243000	2245000	fold them into react in a way that feels
2245000	2247000	vanilla and so
2247000	2249000	there's a question of like okay if other
2249000	2251000	frameworks
2251000	2253000	jump on the same train and try
2253000	2255000	to do a similar thing there
2255000	2257000	is a natural push to kind of
2257000	2259000	become more similar to
2259000	2261000	next app router maybe there's
2261000	2263000	ways to differentiate there like I don't
2263000	2265000	know but I think there
2265000	2267000	is like tension between
2267000	2269000	okay but how do you choose between frameworks then
2269000	2271000	if they're kind of
2271000	2273000	looking the same because we've
2273000	2275000	taken the primitives and like put
2275000	2277000	them into react
2277000	2279000	so I think that's something
2279000	2281000	that remains to be seen
2281000	2283000	but if
2283000	2285000	you compare it to like do it yourself
2285000	2287000	setup I think that's just kind of
2287000	2289000	exceedingly hard today and
2289000	2291000	it's mostly because server components
2291000	2293000	is a very futuristic
2293000	2295000	architecture I think maybe we
2295000	2297000	undersold like it
2297000	2299000	like for the bundling side
2299000	2301000	it relies on features that just don't
2301000	2303000	exist in bundlers today like
2303000	2305000	it has a whole you know like it
2305000	2307000	relies on a next generation bundler
2307000	2309000	and like a next generation router
2309000	2311000	and these things are being
2311000	2313000	built right now right like
2313000	2315000	we have some like we have
2315000	2317000	a backpack plugin that's like not very good
2317000	2319000	so some frameworks kind of
2319000	2321000	I wrestled it for a while I'm reading
2321000	2323000	commit messages from Sebastian like everything
2323000	2325000	is experimental like it's
2325000	2327000	very very experimental right now
2327000	2329000	if you want to DIY I actually got it working in ES
2329000	2331000	build because I reverse engineered what
2331000	2333000	the bundler is adding and I like
2333000	2335000	monkey patched it in which
2335000	2337000	like it's a way but I
2337000	2339000	agree like what it's doing is fundamentally
2339000	2341000	like it looks at each module
2341000	2343000	it figures out what it is and then
2343000	2345000	adds a lot of information and metadata so
2345000	2347000	we can like trace it back putting the client
2347000	2349000	components where they're supposed to go
2349000	2351000	and to set that all up yourself it's not as
2351000	2353000	simple as just like webpack
2353000	2355000	target JSX files react
2355000	2357000	plugin like there's
2357000	2359000	more to it yeah
2359000	2361000	I wouldn't say that the like I'd say
2361000	2363000	the bundler I think like
2363000	2365000	one thing I
2365000	2367000	I feel a bit
2367000	2369000	I think sometimes people
2369000	2371000	say oh it's so complicated
2371000	2373000	and I think if you really look at the ideas
2373000	2375000	the ideas are very simple it's just
2375000	2377000	that implementing them is complicated
2377000	2379000	because the tools were not designed for
2379000	2381000	these ideas so
2381000	2383000	if you think of the bundler integration
2383000	2385000	it's really about
2385000	2387000	supporting this use client directive
2387000	2389000	like that's a feature
2389000	2391000	with like one line
2391000	2393000	API it's not you know
2393000	2395000	it's not something that's like super
2395000	2397000	it's not some Java monstrosity right
2397000	2399000	it's a very simple idea
2399000	2401000	but the bundlers
2401000	2403000	like the today's generation
2403000	2405000	of bundlers was not designed
2405000	2407000	for this kind of feature
2407000	2409000	because it's like fundamentally different
2409000	2411000	it's on a similar scope
2411000	2413000	as you know if you went
2413000	2415000	back in time to like 2007
2415000	2417000	and was
2417000	2419000	trying to explain code splitting
2419000	2421000	to somebody who uses
2421000	2423000	if you
2423000	2425000	I don't know if you remember there was like require.js
2425000	2427000	which was like a bundler
2427000	2429000	that people used at the time
2429000	2431000	and I think like it didn't support
2431000	2433000	I don't think it supported code splitting
2433000	2435000	it was kind of loaded
2435000	2437000	like the optimizing bundler would put everything
2437000	2439000	into the same file
2439000	2441000	but it's a similar feature to like dynamic import
2441000	2443000	that lets you do code splitting
2443000	2445000	except it's like a different kind of
2445000	2447000	code splitting that splits apart
2447000	2449000	like the client parts
2449000	2451000	from the server parts
2451000	2453000	and so an ideal bundler would
2453000	2455000	treat all of this
2455000	2457000	as a single you know as a built in feature
2457000	2459000	and be able to
2459000	2461000	kind of process the
2461000	2463000	server tree and the client tree as like a
2463000	2465000	single pass with multiple
2465000	2467000	bundle outputs for different
2467000	2469000	targets and that's not something
2469000	2471000	that bundlers are great at today so
2471000	2473000	we can try to add it as plugins which is what
2473000	2475000	we've been doing but really ideally
2475000	2477000	you would redesign a bundler
2477000	2479000	around this idea and I think
2479000	2481000	you know TurboPack is like
2481000	2483000	one you know implementation
2483000	2485000	that currently treats it as a first class feature
2485000	2487000	and I think with time
2487000	2489000	other bundlers will and like I know
2489000	2491000	Devon from Parcel is also working on this
2491000	2493000	and I think with time we'll see
2493000	2495000	this feature adopted more broadly
2495000	2497000	and then I think we'll see
2497000	2499000	other libraries now that the feature
2499000	2501000	is in the bundlers I think we'll see
2501000	2503000	maybe Vue or
2503000	2505000	Svelte or others taking advantage
2505000	2507000	of that in like implementing similar
2507000	2509000	architectures on top of those features
2509000	2511000	yeah I actually
2511000	2513000	saw a stream yesterday with Evan Yu
2513000	2515000	who hopped on with Theo to talk
2515000	2517000	about what they're doing with Vite and Vue
2517000	2519000	and all of that and one part of that
2519000	2521000	discussion was Vapor which I believe
2521000	2523000	is like an early exploration of like what
2523000	2525000	could server stuff look like in
2525000	2527000	Vue and it doesn't mean Vaporware by the way
2527000	2529000	I'm hoping it doesn't anyways
2529000	2531000	but it's definitely
2531000	2533000	spreading right now and
2533000	2535000	if the creator of Vite is exploring
2535000	2537000	it that could mean it sort of
2537000	2539000	you know spreads out to anyone else
2539000	2541000	who's using Vite which as far as I know
2541000	2543000	is most frameworks that aren't Next.js
2543000	2545000	or Remix even Remix is
2545000	2547000	trying Vite as far as I know
2547000	2549000	so TurboPack for me is like a
2549000	2551000	wait and see I'm very curious about it
2551000	2553000	because I got to speak with Jared
2553000	2555000	a little bit in person
2555000	2557000	and it's definitely about like
2557000	2559000	build caching being very
2559000	2561000	focused on you know compiling
2561000	2563000	everything down to the very function
2563000	2565000	that you're trying to get and doing it
2565000	2567000	efficiently so I think
2567000	2569000	there will be sort of two competing
2569000	2571000	threads of like Vite is using
2571000	2573000	all the tech we have today and
2573000	2575000	TurboPack is kind of adapting Webpack
2575000	2577000	into something that could work
2577000	2579000	better tomorrow
2579000	2581000	I think TurboPack is
2581000	2583000	TurboPack is a completely new
2583000	2585000	codebase right it's not related to
2585000	2587000	Webpack so it's a rethinking
2587000	2589000	of
2589000	2591000	yeah it's complicated
2591000	2593000	because I heard the talk that said this is the
2593000	2595000	successor to Webpack even though it's
2595000	2597000	entirely different as far as
2597000	2599000	I can tell like I don't think it uses the same
2599000	2601000	config or conventions but
2601000	2603000	I haven't tried to use any of it yet
2603000	2605000	yeah I think it's successor just in the sense
2605000	2607000	that like Tobias
2607000	2609000	is working it so it's like
2609000	2611000	what did Tobias learn
2611000	2613000	from like I don't
2613000	2615000	know how many years of Webpack
2615000	2617000	and
2617000	2619000	yeah how do you design it again
2619000	2621000	now that you know all these lessons
2621000	2623000	which is kind of similar but you know with like
2623000	2625000	server components that's kind of what we've
2625000	2627000	seen and
2627000	2629000	I want actually to mention because
2629000	2631000	you know you were asking about the history and like
2631000	2633000	influences and for server
2633000	2635000	components it's really many
2635000	2637000	it's like it's our old
2637000	2639000	XHP stuff it's our
2639000	2641000	native stack that you know
2641000	2643000	works let's just do native
2643000	2645000	apps but driven by server
2645000	2647000	server driven UI
2647000	2649000	it's really so a lot of
2649000	2651000	a lot of contributions to server
2651000	2653000	components model came from Relay
2653000	2655000	and Joe Savona and
2655000	2657000	you know people on the Relay team
2657000	2659000	it was early exploration
2659000	2661000	like some of the earliest
2661000	2663000	design drafts were collaboration
2663000	2665000	with the Chrome team
2665000	2667000	and with
2667000	2669000	the Next.js team
2669000	2671000	so Next.js was kind of
2671000	2673000	because like get initial props was one
2673000	2675000	of the inspirations for this kind of API
2675000	2677000	so
2677000	2679000	that like we were kind of
2679000	2681000	like talking about it with Next.js team a long
2681000	2683000	time ago and so it's really
2683000	2685000	it's unifying many
2685000	2687000	many branches and there's
2687000	2689000	a lot you know there's a lot that we were
2689000	2691000	inspired by while working
2691000	2693000	on it. Yeah
2693000	2695000	and I kind of let that GraphQL point drop
2695000	2697000	earlier but it's a really
2697000	2699000	I never made that parallel but it makes
2699000	2701000	sense of like it has that same
2701000	2703000	goal of only send data to the
2703000	2705000	client that is necessary
2705000	2707000	in order to render what's on the page
2707000	2709000	and today like if you want to render
2709000	2711000	anything you can optimize your
2711000	2713000	API as hard as you can to make sure
2713000	2715000	it only sends the data that you want
2715000	2717000	but people kind of realize GraphQL is hard
2717000	2719000	to set up sometimes it's too heavy weight
2719000	2721000	so if there was a way that basically filters
2721000	2723000	it out for you where you're writing
2723000	2725000	your own back end to grab that data
2725000	2727000	and just hydrate the little pieces you want down
2727000	2729000	the chain like that's oddly
2729000	2731000	a successor to that idea
2731000	2733000	of like making sure all
2733000	2735000	the data you send down is actually lightweight
2735000	2737000	and I'm curious if we'll ever
2737000	2739000	end up with dev tools around I'm sure we will
2739000	2741000	end up with dev tools around that but
2741000	2743000	it's something I've never really thought about is like
2743000	2745000	how big are my props like I'm probably
2745000	2747000	sending a ton of props right now and I have no idea
2747000	2749000	what it is and the easiest thing
2749000	2751000	is to just send all the props
2751000	2753000	but if there was a way to debug like
2753000	2755000	your props bundle is like 10 kilobytes
2755000	2757000	of JSON are you sure you wanted to do that
2757000	2759000	like I think that would really make
2759000	2761000	server components start to make even more sense
2761000	2763000	yeah it's
2763000	2765000	pretty tricky
2765000	2767000	I think like the whole
2767000	2769000	kind of monitoring story
2769000	2771000	like the other piece
2771000	2773000	of the puzzle there is
2773000	2775000	you don't really have much
2775000	2777000	like you don't have a network timeline
2777000	2779000	for the server which
2779000	2781000	I think makes people anxious like
2781000	2783000	oh is it going to have so many waterfalls
2783000	2785000	and like you can have waterfalls
2785000	2787000	you know with something like Remix too
2787000	2789000	like it's actually pretty trivial
2789000	2791000	to have one
2791000	2793000	but it's not obvious like
2793000	2795000	I think if we had better tooling
2795000	2797000	for just visualizing
2797000	2799000	what actually happens on the server
2799000	2801000	how did your requests get processed
2801000	2803000	I think that would ease a lot of this anxiety
2803000	2805000	and it would also be useful
2805000	2807000	for other frameworks like it's not
2807000	2809000	server component specific
2809000	2811000	so I think like we need a lot more
2811000	2813000	like I think the
2813000	2815000	kind of the optimizations and developer
2815000	2817000	experience would get like
2817000	2819000	a lot better when we have better
2819000	2821000	observability into
2821000	2823000	what happens on the server
2823000	2825000	and what crosses the boundary
2825000	2827000	yeah and like what is contributing
2827000	2829000	to that like which components have
2829000	2831000	really like
2831000	2833000	you know a lot of output and then
2833000	2835000	you're like okay let's make this one client
2835000	2837000	component and then increases
2837000	2839000	the bundle size a bit but then we don't have to send
2839000	2841000	the stuff it generates
2841000	2843000	on like every navigation
2843000	2845000	but that's also the beauty of this paradigm is you can
2845000	2847000	you know you can flip it back and forth
2847000	2849000	you can flip it back and forth
2849000	2851000	yeah I remember for that space I was like
2851000	2853000	that's the one thing Astro doesn't do very well
2853000	2855000	because it's like you use styling
2855000	2857000	or you can do styling differently which can get
2857000	2859000	in the way I also do want to shout out
2859000	2861000	Joshua who rated and
2861000	2863000	apparently works at Code Academy as well
2863000	2865000	he was chiming in a bit
2865000	2867000	oh I tried to shout out but it said it doesn't exist
2867000	2869000	sorry go follow Joshua everyone
2869000	2871000	but he was saying like
2871000	2873000	yeah definitely run into the
2873000	2875000	big props bundle at Code Academy
2875000	2877000	of like the slowdowns were really just
2877000	2879000	slamming a bunch of data down the pipe that
2879000	2881000	didn't need to be and it was just delaying
2881000	2883000	the amount because it had to
2883000	2885000	get initial props which was a lot
2885000	2887000	and then hydrate it all onto the page
2887000	2889000	and there was no way to sort of
2889000	2891000	introspect that like
2891000	2893000	because you're on the client you're not really introspecting
2893000	2895000	what your server is doing
2895000	2897000	when you're on that boundary
2897000	2899000	yeah so the other thing that maybe
2899000	2901000	is not obvious but you know when I
2901000	2903000	talk about server components
2903000	2905000	also including like
2905000	2907000	10 years of hard thinking about
2907000	2909000	optimizations it's also stuff like this
2909000	2911000	so like with server components
2911000	2913000	you don't actually have
2913000	2915000	this kind of waterfall
2915000	2917000	where like in
2917000	2919000	traditional server rendered
2919000	2921000	React frameworks including
2921000	2923000	Next.js you would have this
2923000	2925000	you have to download all the code
2925000	2927000	then like
2927000	2929000	enough to hydrate your page
2929000	2931000	like the main chunk
2931000	2933000	you have to get all the data
2933000	2935000	like inlined into HTML
2935000	2937000	and only then you can start hydrating
2937000	2939000	so server components doesn't work like this
2939000	2941000	in server components you only need
2941000	2943000	like enough to
2943000	2945000	get the initial shell
2945000	2947000	to hydrate so actually
2947000	2949000	your components
2949000	2951000	your client component chunks
2951000	2953000	they're loaded asynchronously
2953000	2955000	and so React can start hydrating
2955000	2957000	before all the data arrives
2957000	2959000	before all the code arrives
2959000	2961000	we actually want to start as early as possible
2961000	2963000	and then we kind of
2963000	2965000	make a tree interactive
2965000	2967000	as like chunks of code
2967000	2969000	chunks of data
2969000	2971000	streaming, they're like separated
2971000	2973000	if you see like how Next
2973000	2975000	kind of generates the stuff
2975000	2977000	it emits separate script tags
2977000	2979000	that add a little bit more data
2979000	2981000	as it becomes available
2981000	2983000	and we update the UI
2983000	2985000	as it becomes available
2985000	2987000	even before React actually loads
2987000	2989000	we're able to update the UI to progressively show
2989000	2991000	more output from the server
2991000	2993000	it's all designed to be very
2993000	2995000	incremental so that you don't
2995000	2997000	have these things where you have to do
2997000	2999000	the whole pass
2999000	3001000	of one thing and then the whole pass
3001000	3003000	of another thing it's like you do small bits
3003000	3005000	here and there so it progressively
3005000	3007000	becomes more and more interactive
3007000	3009000	yeah exactly
3009000	3011000	and I think that's a good segue into
3011000	3013000	a little bit of code that I have to
3013000	3015000	demo that's outside of Next.js
3015000	3017000	so
3017000	3019000	it looks like you can still see my live share
3019000	3021000	but I'll start
3021000	3023000	by giving a little context on
3023000	3025000	what we might try to build today
3025000	3027000	it's meant to have multiple
3027000	3029000	steps so if we don't get to all of them
3029000	3031000	we at least have something at the end of the day
3031000	3033000	but let me also
3033000	3035000	screen share for the lovelies out there
3035000	3037000	guest screen share, cool
3037000	3039000	so
3039000	3041000	this is just a basic mockup
3041000	3043000	that I put together of something you might
3043000	3045000	try to build when you're building
3045000	3047000	an application. I called it
3047000	3049000	abramix as a pun on abramov
3049000	3051000	I tried, I really tried here
3051000	3053000	sorry about that
3053000	3055000	well thank you
3055000	3057000	but this is like a basic song
3057000	3059000	interface you might have where
3059000	3061000	you just have a readout of all of your albums
3061000	3063000	you might have a search bar that filters
3063000	3065000	which albums are showing on the page
3065000	3067000	and I'd love to talk about how would you
3067000	3069000	do search, where would you do that logic
3069000	3071000	client versus server since
3071000	3073000	I've wondered that a lot
3073000	3075000	and maybe you
3075000	3077000	have individual routes for every album
3077000	3079000	where you click into one, it goes to
3079000	3081000	slash album name and then it shows you
3081000	3083000	more information and that can be
3083000	3085000	client side routing
3085000	3087000	we use Next.js for that
3087000	3089000	I think it's a pretty clear
3089000	3091000	upgrade journey
3091000	3093000	but as a workbench
3093000	3095000	to try that out I have
3095000	3097000	a server running over here
3097000	3099000	on what I called simple
3099000	3101000	RSC which is a
3101000	3103000	repo that people can go try out now
3103000	3105000	if they want to, it only runs on node
3105000	3107000	version 18.13
3107000	3109000	because I'm bad at testing things before I
3109000	3111000	deploy, but if you want to
3111000	3113000	try it out, it's just a node
3113000	3115000	server that builds
3115000	3117000	some React components using esbuild
3117000	3119000	and lets you see
3119000	3121000	a single route on the page, there's no
3121000	3123000	routing, there's no opinions around really
3123000	3125000	anything, all that's coded into this
3125000	3127000	is a way to write a server component
3127000	3129000	and a debugging view
3129000	3131000	at the bottom of the page that shows
3131000	3133000	you all of the stuff that is
3133000	3135000	coming down from the server as the page
3135000	3137000	is rendering in real time
3137000	3139000	and you can see a basic example
3139000	3141000	of that off to the right
3141000	3143000	where we have our server
3143000	3145000	component over here in our editor
3145000	3147000	there's some stale imports that we're not using
3147000	3149000	right now, but all this is doing
3149000	3151000	is it's creating a server component
3151000	3153000	it's rendering an h1 saying
3153000	3155000	welcome to server components
3155000	3157000	oh is the repo still private, oh dang
3157000	3159000	thank you for the call out
3159000	3161000	let me
3161000	3163000	make my screen share and change it to public
3163000	3165000	so I don't dox myself
3165000	3167000	and then I will show it again
3167000	3169000	if I go to settings
3169000	3171000	change visibility, change to public
3171000	3173000	I want to make this repository
3173000	3175000	public, please please
3175000	3177000	please, I have to send an
3177000	3179000	SMS to myself to make it public
3179000	3181000	oh my god
3181000	3183000	there's three dialogues
3183000	3185000	and a text message, that's crazy
3185000	3187000	605
3187000	3189000	043
3189000	3191000	okay, now
3191000	3193000	it should be public, if anyone wants to
3193000	3195000	click on that link
3195000	3197000	you can go try it out
3197000	3199000	and now I have to go back
3199000	3201000	to code, hold that up
3201000	3203000	and send in the chat
3203000	3205000	alright
3205000	3207000	but yeah, I heard your opinions
3207000	3209000	earlier of like, you're probably not going to
3209000	3211000	do this to do anything production ready
3211000	3213000	which is why I only set this up with the dev
3213000	3215000	server, I only set it up with
3215000	3217000	a panel of everything
3217000	3219000	that's going on, and there's no way
3219000	3221000	to actually deploy this to production right now
3221000	3223000	because that's not really the intended use case
3223000	3225000	but yeah, off to
3225000	3227000	the right is the most user-friendly
3227000	3229000	feed that I could create
3229000	3231000	and it is literally
3231000	3233000	showing you all of the stuff that is coming down the
3233000	3235000	wire when you stream something
3235000	3237000	so here, what we're rendering on the page
3237000	3239000	is just some instructions
3239000	3241000	as I would call them, from the server
3241000	3243000	to go make some JSX DOM elements
3243000	3245000	and then append them to the page
3245000	3247000	as we're seeing here, and there's no
3247000	3249000	hydration or server rendering going on, it's just like
3249000	3251000	a client that fetches a server
3251000	3253000	component and shows it to you
3253000	3255000	yeah, first
3255000	3257000	do you have any initial questions on
3257000	3259000	this setup and everything that I have going on
3259000	3261000	because there is a lot under the hood
3261000	3263000	are you asking
3263000	3265000	me or the viewers?
3265000	3267000	a little bit, just to
3267000	3269000	slow down for a second
3269000	3271000	no, no, I'm saying, is it a question
3271000	3273000	to me, do I have questions, or are you
3273000	3275000	asking somebody?
3275000	3277000	yeah, maybe one thing
3277000	3279000	I'm not sure about
3279000	3281000	is
3281000	3283000	how did you get the build setup?
3283000	3285000	you said you did your own
3285000	3287000	bundle plugin
3287000	3289000	yes, I did
3289000	3291000	so, the build
3291000	3293000	is actually pretty interesting
3293000	3295000	it's inside of this handler.js
3295000	3297000	file, and this is going
3297000	3299000	right in the weeds, but I don't really mind it
3299000	3301000	where
3301000	3303000	I set up a simple
3303000	3305000	request response handler, that's all this is
3305000	3307000	it just takes in a web standard request
3307000	3309000	sends a response, and
3309000	3311000	in order to get the server
3311000	3313000	I set it up to import
3313000	3315000	a built server
3315000	3317000	and the bundle map is
3317000	3319000	something that's generated separately, as it
3319000	3321000	crawls through the page, it discovers client
3321000	3323000	components, and puts them into this map
3323000	3325000	that it's able to match up at the end of the day
3325000	3327000	that gets into client components
3327000	3329000	which I guess we'll explore in a moment
3329000	3331000	but that's all it really
3331000	3333000	does for that, the more interesting
3333000	3335000	file, actually I just remembered
3335000	3337000	that I moved the build step out
3337000	3339000	over here
3339000	3341000	I can jump over here, but this
3341000	3343000	is using esbuild to do everything
3343000	3345000	so not necessarily plugins, but
3345000	3347000	it's got a two step
3347000	3349000	build process right now
3349000	3351000	where it looks for that server component
3351000	3353000	and it will output it
3353000	3355000	just using a JSX transform
3355000	3357000	it's not going to resolve any modules or anything
3357000	3359000	it's literally just going to output it
3359000	3361000	with the JSX transform, leave everything else alone
3361000	3363000	and the one weird piece
3363000	3365000	is this part right here
3365000	3367000	anyone watching at home, don't do
3367000	3369000	this, but I am reading
3369000	3371000	the file, whenever it discovers
3371000	3373000	a client component, I'm checking for
3373000	3375000	the use client directive
3375000	3377000	and I'm doing this wild line
3377000	3379000	right here that
3379000	3381000	inserts a few things that Webpack
3381000	3383000	looks for in order to decide if something
3383000	3385000	is a client component
3385000	3387000	so it imports it inline
3387000	3389000	it tells it that it's a client
3389000	3391000	reference, and then it returns
3391000	3393000	that in order to import onto the page
3393000	3395000	and I figured out
3395000	3397000	it works! It's not using Webpack
3397000	3399000	and it still does technically work
3399000	3401000	but that's an under the hood view
3401000	3403000	I'm sure you don't have
3403000	3405000	pleasant opinions about it, but
3405000	3407000	it works
3409000	3411000	I think I don't fully understand
3411000	3413000	the handler part
3413000	3415000	this runs
3415000	3417000	what is the
3419000	3421000	oh sure
3421000	3423000	why is there a
3423000	3425000	path, oh so this is the thing
3425000	3427000	you fetch, right?
3427000	3429000	this is the thing you fetch
3429000	3431000	yeah, so this is
3431000	3433000	the server components endpoint
3433000	3435000	so to speak
3435000	3437000	yeah, and I could have
3437000	3439000	it's a bit confusing because
3439000	3441000	it looks like I'm
3441000	3443000	fetching JSX and I'm like
3443000	3445000	what is this about?
3445000	3447000	I named it that thinking that's how it worked
3447000	3449000	and realized that's not what I'm doing
3449000	3451000	I'm actually sending you the stream
3451000	3453000	I'm not sending you the file
3453000	3455000	this is kind of more like
3457000	3459000	like RSC or
3459000	3461000	yeah
3461000	3463000	it's just like an API
3463000	3465000	it's like a
3465000	3467000	GraphQL endpoint I think, except
3467000	3469000	instead of GraphQL it's like
3469000	3471000	React
3471000	3473000	okay, now that makes sense, I get it
3473000	3475000	yep, I should have explained that part
3475000	3477000	because I realized after the fact that's not
3477000	3479000	what it is, and I also looked through
3479000	3481000	some of the React docs and
3481000	3483000	the content type of what this sends down is
3483000	3485000	like X component is
3485000	3487000	one way to put it, it's special
3487000	3489000	it's something that React understands
3489000	3491000	is the way that I would put it
3491000	3493000	yeah, okay
3493000	3495000	that sounds good
3495000	3497000	yeah, I don't
3497000	3499000	think I have any more questions
3499000	3501000	so we can
3501000	3503000	maybe try to do something
3503000	3505000	I do want to clarify
3505000	3507000	though for people watching that
3507000	3509000	if I understood correctly what you're saying
3509000	3511000	like, the architecture here essentially
3511000	3513000	is that the browser
3513000	3515000	will load like an empty HTML shell
3515000	3517000	which is kind of like
3517000	3519000	a traditional CRA app actually
3519000	3521000	like a web app
3521000	3523000	it loads empty HTML
3523000	3525000	then requests the
3525000	3527000	server component endpoint
3527000	3529000	and server component streams in
3529000	3531000	you know, what the server output is
3531000	3533000	so it's not super efficient because
3533000	3535000	it has this client-server waterfall
3535000	3537000	for the first load
3537000	3539000	whereas a proper setup would
3539000	3541000	actually do SSR as well
3541000	3543000	so it would
3543000	3545000	do that on the server instead
3545000	3547000	like when it hits index.html
3547000	3549000	it would
3549000	3551000	actually talk to the RSC endpoint
3551000	3553000	on the server
3553000	3555000	load that HTML, stream the HTML
3555000	3557000	to the client, and that's how the
3557000	3559000	initial page would be
3559000	3561000	actually have content without
3561000	3563000	an extra waterfall
3563000	3565000	but this is much harder to do
3565000	3567000	manually, and there's already enough
3567000	3569000	of manual setup, so this is just
3569000	3571000	the simplified version
3571000	3573000	yeah, and that's the callout
3573000	3575000	that's definitely worth making
3575000	3577000	because I'll admit, I tried, but I realized
3577000	3579000	doing that without blocking
3579000	3581000	on suspense boundaries
3581000	3583000	and not just reading the whole stream
3583000	3585000	I was like, I can't, I don't know
3585000	3587000	what I'm supposed to do here, I know
3587000	3589000	Next.js knows, they figured it out
3589000	3591000	but yeah, it's a different
3591000	3593000	problem
3593000	3595000	it's doable, like we actually have
3595000	3597000	an example in the React repo
3597000	3599000	so we go to fixtures slash
3599000	3601000	flight, it has like a super
3601000	3603000	believe me, I've had
3603000	3605000	every page visited at this point
3605000	3607000	yeah, so it shows
3607000	3609000	how to do it, but it is confusing
3609000	3611000	it's a lot
3611000	3613000	oh yeah, for a client
3613000	3615000	emulator, this is the page that
3615000	3617000	I was reading for a little bit
3617000	3619000	I don't actually see
3619000	3621000	because I think you're sharing just the part of the screen
3621000	3623000	so I don't know
3623000	3625000	I shared an individual tab
3625000	3627000	which means I would have to visit it in this
3627000	3629000	tab, and then it would work
3629000	3631000	it also
3631000	3633000	might be delayed
3633000	3635000	yeah
3635000	3637000	this is the weird part, and this
3637000	3639000	definitely speaks to what you said about client
3639000	3641000	isn't really browser
3641000	3643000	client is just whoever wants to consume
3643000	3645000	that server component, and it could
3645000	3647000	be the server itself in order to render it
3647000	3649000	to HTML, or it could be the client
3649000	3651000	when you're trying to do client-side routing
3651000	3653000	which is usually what you'd end up with
3653000	3655000	here, like yeah, the initial load
3655000	3657000	of, now I have to hit back
3657000	3659000	the initial load of this
3659000	3661000	that's not good, you want to have the server rendered
3661000	3663000	but if I want to load this as
3663000	3665000	another route coming in, then
3665000	3667000	it actually makes sense, I actually want to get this
3667000	3669000	full stream and just render it onto the page
3669000	3671000	of JavaScript
3671000	3673000	yeah, I think another thing that's
3673000	3675000	worth highlighting maybe is
3675000	3677000	I think
3677000	3679000	sometimes people have this
3679000	3681000	wrong mental model of
3681000	3683000	when you have a server component in the tree
3683000	3685000	you go to the server, and it's
3685000	3687000	like each individual server component
3687000	3689000	is kind of rendered independently
3689000	3691000	but it's really not like this
3691000	3693000	it's more like
3693000	3695000	it's just, there's
3695000	3697000	I think in a simple setup, like
3697000	3699000	the one you have, the only
3699000	3701000	server component that you talk
3701000	3703000	to or render is the
3703000	3705000	top-level one, so it's really about
3705000	3707000	top-down rendering
3707000	3709000	the whole page, and if you
3709000	3711000	refetch, it's going to go to the
3711000	3713000	server component
3713000	3715000	server and re-render the
3715000	3717000	app, the top-level thing
3717000	3719000	and get the new output for that
3719000	3721000	and then that's of course not super
3721000	3723000	efficient, so this is why with something
3723000	3725000	like Next.js, you have nested routing
3725000	3727000	where the granularity
3727000	3729000	is to the
3729000	3731000	sub-route level
3731000	3733000	so you can't update
3733000	3735000	one small server component
3735000	3737000	that doesn't make sense in the model, because they
3737000	3739000	all have to be consistent
3739000	3741000	with each other, but what you can do
3741000	3743000	is you can invalidate the sub-route
3743000	3745000	so that would be like, for example, if you have
3745000	3747000	a shell of the page, and then they have
3747000	3749000	some kind of tab interface
3749000	3751000	like about, photos,
3751000	3753000	memories, whatever,
3753000	3755000	then when you switch those things,
3755000	3757000	it's just this part that
3757000	3759000	gets independently refetched
3759000	3761000	from the server, but if you want
3761000	3763000	to refetch something
3763000	3765000	broader, like you want to change
3765000	3767000	there's a mutation that affected something
3767000	3769000	else on the screen, you just refetch
3769000	3771000	the whole thing, and this might sound like
3771000	3773000	oh, this is going to be super slow, but let's remember
3773000	3775000	that this is literally what happens if the
3775000	3777000	user just opens the page and
3777000	3779000	opens the tab, so it's not
3779000	3781000	that different from
3781000	3783000	traditional web models.
3783000	3785000	Yeah, it's not.
3785000	3787000	And that is a real big thing of like
3787000	3789000	routes aren't necessarily
3789000	3791000	full routes, they're layers of an
3791000	3793000	onion or individual components
3793000	3795000	that you can just slot into view
3795000	3797000	like this server component that we've created
3797000	3799000	here, this could be fetched from
3799000	3801000	some other route on the page, and it could just add
3801000	3803000	welcome to server components below
3803000	3805000	a navigation bar and other things
3805000	3807000	that are being rendered. It's just a way to
3807000	3809000	officially fetch server stuff.
3809000	3811000	Yeah, but then for that you kind of
3811000	3813000	need a framework because
3813000	3815000	implementing this kind of nested thing
3815000	3817000	in this demo, that's yet
3817000	3819000	another level of complexity, and that's why
3819000	3821000	DIY is
3821000	3823000	actually really hard today because you just
3823000	3825000	don't have a router like this
3825000	3827000	that's, you know, there is no RSC
3827000	3829000	router you can use off the shelf.
3829000	3831000	But you can build one.
3831000	3833000	You can write one.
3833000	3835000	I'm not going to invite myself to do that.
3835000	3837000	I've already sunk too much time into this.
3837000	3839000	But yeah, that's
3839000	3841000	why I guess the main goal of this project
3841000	3843000	was like, I just want a way to workbench
3843000	3845000	one server component and have a
3845000	3847000	dev panel of the stuff coming down the pipe.
3847000	3849000	And that's it. Like, no opinions
3849000	3851000	on routing because, as you kind of mentioned,
3851000	3853000	React is
3853000	3855000	I don't know if you said this yet, but React
3855000	3857000	is more of an architecture
3857000	3859000	and a library than it is a
3859000	3861000	framework. And in
3861000	3863000	order to have any opinions about, like, where
3863000	3865000	do the routes go? What is the
3865000	3867000	nesting strategies that you probably
3867000	3869000	want? Like, that's immediately framework
3869000	3871000	opinions. And that's already taking
3871000	3873000	things to a new space.
3873000	3875000	Yeah.
3875000	3877000	Yeah.
3877000	3879000	So with this, I'm thinking
3879000	3881000	like, maybe we can put some albums
3881000	3883000	on the page and render them out to start.
3883000	3885000	I have some
3885000	3887000	really basic endpoints here.
3887000	3889000	And this is literally just
3889000	3891000	fetching some JSON. And I say
3891000	3893000	fetch, it's just an
3893000	3895000	import with an artificial
3895000	3897000	wait time to make it feel like it's a server
3897000	3899000	but it's not. It was just
3899000	3901000	the easiest way.
3901000	3903000	Where should that be looking? I'm not sure.
3903000	3905000	Sorry. Right.
3905000	3907000	I was just looking at this DB fetch file.
3907000	3909000	Oh, okay.
3909000	3911000	This part isn't too important
3911000	3913000	but I just made some JSON dumps
3913000	3915000	of good albums that I
3915000	3917000	like. That's why I actually mentioned
3917000	3919000	earlier, like, if you want to put an album on here, we can.
3919000	3921000	Because you put out those really
3921000	3923000	good tweets of just, like, a random song on Spotify.
3923000	3925000	Like, this is great. Like, you know
3925000	3927000	what, you're right. It's really good.
3927000	3929000	But yeah, that's all this is
3929000	3931000	doing. I have a get all, which will
3931000	3933000	wait 300 milliseconds and send you all the
3933000	3935000	albums. And get by ID, where
3935000	3937000	you can pass in an individual ID
3937000	3939000	slug, whatever you want. So if you
3939000	3941000	want to do routing, that's how you would get, like,
3941000	3943000	an individual entry.
3943000	3945000	But yeah.
3945000	3947000	I hopped back over here. I think I have to
3947000	3949000	keep, like, focusing you to bring you
3949000	3951000	into the model. Yeah, yeah.
3951000	3953000	We're trying VS Code live share, by the way.
3953000	3955000	So
3955000	3957000	we'll see how it goes.
3957000	3959000	Anything goes
3959000	3961000	is the idea here. If we want to jump
3961000	3963000	in and type code, either one of us can do it.
3963000	3965000	But yeah.
3965000	3967000	In order to render all of the albums
3967000	3969000	onto the page,
3969000	3971000	well, I've already kind of done it.
3971000	3973000	I kind of spoiled it.
3973000	3975000	Where in a server company, you can just
3975000	3977000	say, wait, get all the albums,
3977000	3979000	and then to put them on the page, I guess we could just
3979000	3981000	do a map over whatever's
3981000	3983000	going on.
3983000	3985000	There's one thing I asked about earlier
3985000	3987000	where I was wondering
3987000	3989000	why you would need an
3989000	3991000	ID prop or a key. That's what
3991000	3993000	I'm thinking of.
3993000	3995000	Because that's always been the thing with React
3995000	3997000	Lists that I forget.
3997000	3999000	Which is adding a key onto every entry.
3999000	4001000	So is that still
4001000	4003000	required? And if so,
4003000	4005000	what is sort of the benefit to that?
4005000	4007000	Yeah, so maybe
4007000	4009000	I think to answer that question,
4009000	4011000	do you know why it's required?
4011000	4013000	If we put server components out of the
4013000	4015000	story, do you know why it's required on the client?
4015000	4017000	Yeah, I know why it's required
4017000	4019000	on the client. Usually for
4019000	4021000	if the list updates
4021000	4023000	and you need things to
4023000	4025000	reorient and you want it to re-render
4025000	4027000	efficiently, then a key will actually tell
4027000	4029000	React, this is the part that was removed.
4029000	4031000	This is the part that got moved up.
4031000	4033000	So if you want to animate that transition
4033000	4035000	of the
4035000	4037000	item with a key of 4 moved
4037000	4039000	from this position to this position,
4039000	4041000	React can track, oh, that's
4041000	4043000	the thing with the key of 4. I know how to animate
4043000	4045000	that up if you're using some external
4045000	4047000	library for it. Is that kind of right?
4047000	4049000	I know there's more reasons.
4049000	4051000	Sort of. I think maybe the focus
4051000	4053000	on efficiency is a mistake.
4053000	4055000	I think we've kind of maybe explained
4055000	4057000	it badly in the old docs where
4057000	4059000	we explain it as, oh, if
4059000	4061000	you want it to be fast, then you should use
4061000	4063000	a key. It has nothing to do with being
4063000	4065000	fast.
4065000	4067000	Yeah, not fast.
4067000	4069000	Just to do it at all.
4069000	4071000	If you want to do it in transition.
4071000	4073000	Well, I don't think it has to do with animations
4073000	4075000	either. It's
4075000	4077000	really
4077000	4079000	about
4079000	4081000	kind of identity
4081000	4083000	across re-renders.
4083000	4085000	So it's
4085000	4087000	about state. And I don't mean just
4087000	4089000	React state. I mean even
4089000	4091000	input state.
4091000	4093000	If you just render an input
4093000	4095000	that's uncontrolled
4095000	4097000	or focus or
4097000	4099000	scroll position or any
4099000	4101000	of the things that are kind of
4101000	4103000	stateful,
4103000	4105000	it's about
4105000	4107000	like imagine you render
4107000	4109000	a list of components
4109000	4111000	and then each of those components has
4111000	4113000	an input inside. And again,
4113000	4115000	this input doesn't have to be
4115000	4117000	controlled value
4117000	4119000	proper or anything like this. It could just be
4119000	4121000	browser input, React doesn't touch it.
4121000	4123000	You could do whatever with it.
4123000	4125000	And so you type into each of those
4125000	4127000	inputs and then suppose
4127000	4129000	the first item in the
4129000	4131000	list was deleted. And so
4131000	4133000	there's a re-render and
4133000	4135000	React now sees that
4135000	4137000	there's the
4137000	4139000	item, like you're
4139000	4141000	rendering two items instead
4141000	4143000	of three. The first one is gone.
4143000	4145000	And so if you don't provide the key,
4145000	4147000	React has no idea which of
4147000	4149000	these items correspond.
4149000	4151000	How do the old items kind of
4151000	4153000	match to the new ones?
4153000	4155000	Because it could be like this.
4155000	4157000	But it could be like this.
4157000	4159000	So it can't
4159000	4161000	know which one was deleted
4161000	4163000	because it
4163000	4165000	just doesn't have the knowledge.
4165000	4167000	And so if you get
4167000	4169000	it wrong, so if it just tries to
4169000	4171000	for example, it just matches up
4171000	4173000	like this.
4173000	4175000	And that's the default.
4175000	4177000	It goes in the direction.
4177000	4179000	This is the first one, used to be here,
4179000	4181000	now it's here. This is the second one, used to be here,
4181000	4183000	now it's here.
4183000	4185000	So the inputs
4185000	4187000	will be preserved.
4187000	4189000	And so if what
4189000	4191000	actually happened is this,
4191000	4193000	so the first item got deleted,
4193000	4195000	then you're going to see
4195000	4197000	wrong inputs at wrong positions.
4197000	4199000	And that is really the issue.
4199000	4201000	If you've already modified them,
4201000	4203000	but then things shifted, you're just
4203000	4205000	going to see
4205000	4207000	it's kind of the same.
4207000	4209000	Imagine you're in a bus
4209000	4211000	and there's like
4211000	4213000	20 people in the bus and
4213000	4215000	everybody has
4215000	4217000	a seat.
4217000	4219000	And you leave
4219000	4221000	some stuff on your seat. Maybe you leave your
4221000	4223000	headphones on the seat. I've done that once
4223000	4225000	and they disappeared.
4225000	4227000	And so imagine
4227000	4229000	the situation.
4229000	4231000	You leave the bus.
4231000	4233000	When you come back to the bus,
4233000	4235000	you want to go to your seat, even
4235000	4237000	if there's fewer people. Even if some people
4237000	4239000	got off the bus, you want to remember which
4239000	4241000	seat is yours. You don't want to
4241000	4243000	sit somewhere else. And so what happens
4243000	4245000	if you don't specify a key,
4245000	4247000	it's like you don't know what
4247000	4249000	your seat is.
4249000	4251000	So by
4251000	4253000	default, you're going to be seated in
4253000	4255000	the order.
4255000	4257000	That's kind of the default for the key. It's just like index.
4257000	4259000	So it's like the first people who gets
4259000	4261000	on the bus goes to the first seat.
4261000	4263000	The second person
4263000	4265000	goes to the second seat and so on.
4265000	4267000	And so if one of the people has
4267000	4269000	left, then everybody
4269000	4271000	else will get the wrong seat because
4271000	4273000	the order has shifted. And that's why
4273000	4275000	you need keys.
4275000	4277000	And so it's the same with
4277000	4279000	server components. You don't notice it all the time.
4279000	4281000	But I've definitely run into
4281000	4283000	why can't you just use the index
4283000	4285000	in the array? It's like, well, if you do that,
4285000	4287000	you actually get a clearer idea of why
4287000	4289000	keys are bad or why
4289000	4291000	you need a key. Where if you remove
4291000	4293000	the first item in the list, now
4293000	4295000	all of a sudden, item 0 became 1,
4295000	4297000	item 1 became 2, item 2 became
4297000	4299000	3. So it's like they're all different people
4299000	4301000	now. It's like everyone on the bus
4301000	4303000	traded seats all of a sudden
4303000	4305000	when that actually didn't need to happen.
4305000	4307000	And you don't always notice it.
4307000	4309000	But with efficient libraries, it's like you do.
4309000	4311000	Yeah, so this is very interesting
4311000	4313000	because you don't always notice it.
4313000	4315000	And like one
4315000	4317000	way to notice it is, yes, animations,
4317000	4319000	because they make it obvious that, wait,
4319000	4321000	a thing disappearing is a
4321000	4323000	very different thing from, you know, things
4323000	4325000	reordering and updating.
4325000	4327000	But another way to notice
4327000	4329000	it is, and that is
4329000	4331000	the most insidious thing, it's like
4331000	4333000	initially you don't add a key because
4333000	4335000	it seems to work fine. And then
4335000	4337000	like five months later,
4337000	4339000	somebody adds a little bit piece
4339000	4341000	of state somewhere deep down
4341000	4343000	in the item components,
4343000	4345000	like even like five levels down.
4345000	4347000	And this piece
4347000	4349000	of state will get misplaced when they
4349000	4351000	reorder because you didn't give the right key
4351000	4353000	to the top level thing.
4353000	4355000	So it's like if everybody leaves the bus
4355000	4357000	but nobody has headphones on the seat,
4357000	4359000	the seats kind of don't matter.
4359000	4361000	It's okay to sit anywhere. But if
4361000	4363000	you start leaving your valuables,
4363000	4365000	now it becomes
4365000	4367000	important. So that's why, and sometimes
4367000	4369000	index as a key is fine
4369000	4371000	when that actually corresponds to
4371000	4373000	the identity. So it's like
4373000	4375000	literally it's important, you know, the first thing
4375000	4377000	is the first thing, the second thing is the second.
4377000	4379000	That's what, you know, like a list of
4379000	4381000	words in a sentence or something
4381000	4383000	like this, or like the first line
4383000	4385000	of code, the second line of code.
4385000	4387000	Then it kind of makes sense that, yeah, the index
4387000	4389000	is actually the identity
4389000	4391000	of that thing. It makes sense that
4391000	4393000	the, you know, so.
4393000	4395000	Yeah, I agree.
4395000	4397000	But I'll say specifically
4397000	4399000	the server components part of this is
4399000	4401000	it's important for server components too
4401000	4403000	because server component output can
4403000	4405000	be refreshed. So if you have
4405000	4407000	for example like a refresh
4407000	4409000	button that will
4409000	4411000	cause, you know, the server component output
4411000	4413000	to update, maybe you deleted
4413000	4415000	that album from the database and they're all
4415000	4417000	going to like shift by one. And so this
4417000	4419000	is again why you want to have a key.
4419000	4421000	Yeah, that's the
4421000	4423000	part that I like, I don't know what it looks like
4423000	4425000	because I've only played with server components
4425000	4427000	in a read only model
4427000	4429000	where it's like I funnel all my data down
4429000	4431000	it renders on the page and
4431000	4433000	any mutations beyond that are
4433000	4435000	handled with client. And
4435000	4437000	it sounds like there are ways
4437000	4439000	with server components to like sort of
4439000	4441000	refresh, refetch
4441000	4443000	like the same fragment of components
4443000	4445000	and actually have it re-render
4445000	4447000	like server only search or something like that.
4447000	4449000	Yeah, that's exactly the
4449000	4451000	point. Like you're not supposed to be
4451000	4453000	copying, you know, props
4453000	4455000	from the server into state and then like
4455000	4457000	updating that state. Like the
4457000	4459000	whole point is not to have to do that
4459000	4461000	and to just be like something changed
4461000	4463000	just like you refresh
4463000	4465000	an API call except here you refresh
4465000	4467000	the output.
4467000	4469000	Yeah, exactly. And I do
4469000	4471000	want to try that. We might have to move to Next.js
4471000	4473000	to try it, I have no idea.
4473000	4475000	But we'll just see.
4475000	4477000	But I think that also speaks to like what
4477000	4479000	we're getting over here.
4479000	4481000	So what I did is
4481000	4483000	I just rendered out the album titles
4483000	4485000	as list items and
4485000	4487000	the immediate thing that
4487000	4489000	you sort of notice in that dev panel
4489000	4491000	at the bottom is
4491000	4493000	it's not passing down the entire
4493000	4495000	list of albums. It's only passing
4495000	4497000	down a set of like instructions
4497000	4499000	to like write out
4499000	4501000	the name with the ID and that's
4501000	4503000	it. Like there's no images in here,
4503000	4505000	there's no albums that we weren't
4505000	4507000	searching for. Well, I guess we're getting all of them.
4507000	4509000	But there's also a big list of songs
4509000	4511000	that could have been sent down the wire.
4511000	4513000	But because we're doing all these
4513000	4515000	instructions on the server, it's only
4515000	4517000	going to send this. We basically wrote our own
4517000	4519000	GraphQL query in a way of like
4519000	4521000	get album and just the title
4521000	4523000	field and then render that
4523000	4525000	into something.
4525000	4527000	Yeah, I would maybe slightly reframe
4527000	4529000	what you're saying instructions
4529000	4531000	and it's kind of correct in a way
4531000	4533000	but it is a bit
4533000	4535000	I think like there's a way to misinterpret it
4535000	4537000	where you think the server is kind of sending
4537000	4539000	commands whereas
4539000	4541000	the mental model is more like
4541000	4543000	the server just sends a response
4543000	4545000	that's essentially
4545000	4547000	you can think of this response
4547000	4549000	as it's almost like JSON.
4549000	4551000	So it's almost like a big
4551000	4553000	JSON tree that
4553000	4555000	includes your
4555000	4557000	kind of your HTML
4557000	4559000	components, like your React
4559000	4561000	components, you know like things like
4561000	4563000	native and so on except
4563000	4565000	formatted as JSON
4565000	4567000	kind of like the virtual DOM
4567000	4569000	as well as like if you have client components
4569000	4571000	it will send also render
4571000	4573000	this like like button with these
4573000	4575000	props and so these props are also
4575000	4577000	going to be kind of like JSON, right?
4577000	4579000	So you can imagine the response as
4579000	4581000	just like big JSON object
4581000	4583000	except that would not be efficient because then
4583000	4585000	you would have to wait for that entire
4585000	4587000	object before you can like start
4587000	4589000	rendering it properly
4589000	4591000	Our protocol is just
4591000	4593000	a thing that splits this JSON into
4593000	4595000	parts. It's like JSON
4595000	4597000	with holes. So it says like here's
4597000	4599000	a hole that's going to be filled in later
4599000	4601000	and so they're sent as
4601000	4603000	they become available it sends more
4603000	4605000	and more. But conceptually it's more
4605000	4607000	like you know
4607000	4609000	filling in the remaining content. It's
4609000	4611000	not so much like it's not imperative
4611000	4613000	as like do this then do this.
4613000	4615000	It's just filling in the parts as
4615000	4617000	they become available.
4617000	4619000	Yep. Yeah I kind of say instructions
4619000	4621000	where it's like React is going to
4621000	4623000	take this blob and convert it
4623000	4625000	to JSX which becomes
4625000	4627000	actual like DOM queries to
4627000	4629000	render stuff on the page. But
4629000	4631000	I agree it's like
4631000	4633000	it's not just the data
4633000	4635000	it's the HTML
4635000	4637000	in a different shape. It's actually
4637000	4639000	filtering out what needs to be rendered
4639000	4641000	based on well what are you trying to
4641000	4643000	render? Like you're not going to use
4643000	4645000	we're not going to send the album image down the pipe
4645000	4647000	because you didn't render an image. You never
4647000	4649000	accessed it. So it's not sending
4649000	4651000	down like the album object. It's sending down
4651000	4653000	the values that have been
4653000	4655000	put in there.
4655000	4657000	I'm curious. Do you want to
4657000	4659000	kind of
4659000	4661000	show what happens if
4661000	4663000	we
4663000	4665000	if we kind of split it into the components
4665000	4667000	so that you can
4667000	4669000	delay. So you can send. Okay
4669000	4671000	yeah let's do that.
4671000	4673000	Let's see it.
4673000	4675000	I mean I can type
4675000	4677000	it out since I think all we have to do is this.
4677000	4679000	So now I'm going to make
4679000	4681000	a separate albums call and
4681000	4683000	Perdo's curious like
4683000	4685000	you know a wait is always going to be
4685000	4687000	a blocking thing. It's not going to send
4687000	4689000	this until this is done.
4689000	4691000	So if you wanted to
4691000	4693000	you know delay that or control
4693000	4695000	when this runs you can move the query
4695000	4697000	somewhere else or even pass down the promise
4697000	4699000	as a prop which is something that I've
4699000	4701000	seen the experiments with.
4701000	4703000	And in here I'm going
4703000	4705000	to just pass down the list
4705000	4707000	without the other stuff.
4707000	4709000	And do you want me
4709000	4711000	to put a suspense around this or just put
4711000	4713000	albums. Let's maybe start
4713000	4715000	with just albums and then we'll add
4715000	4717000	suspense and see how it changes
4717000	4719000	things. Okay. Oh it's
4719000	4721000	thinking that's the thing.
4721000	4723000	There we go.
4723000	4725000	Too helpful.
4725000	4727000	And don't worry about the
4727000	4729000	squiggle. That's just because
4729000	4731000	it doesn't know about async being a thing.
4731000	4733000	I know that's like a patch you can
4733000	4735000	make in next JS.
4735000	4737000	But yeah what we get here.
4737000	4739000	I think you want to get rid of this line too right.
4739000	4741000	Oh you're totally right.
4741000	4743000	Yeah.
4743000	4745000	Okay that's better.
4745000	4747000	So now yeah everything comes down in
4747000	4749000	one chunk it looks like.
4749000	4751000	And this isn't split perfectly.
4751000	4753000	This was supposed to split out like this
4753000	4755000	part from this part. I'm still trying to figure out how
4755000	4757000	to parse it because sometimes things come so
4757000	4759000	quickly it's like part of the same message.
4759000	4761000	But generally
4761000	4763000	what you're going to get is like you're going to get
4763000	4765000	the welcome to server components and then
4765000	4767000	immediately you're going to get
4767000	4769000	the next chunk and
4769000	4771000	you're going to load in tandem.
4771000	4773000	Yeah so what I want to call attention to
4773000	4775000	can I
4775000	4777000	like yeah.
4777000	4779000	So what I want to call attention to is like this
4779000	4781000	protocol that you're showing in the dev panel
4781000	4783000	like that's an implementation detail
4783000	4785000	so it's not actually something you're supposed to
4785000	4787000	be able to like read or care about
4787000	4789000	except for I don't know maybe some kind of debugging
4789000	4791000	but mostly if you're debugging
4791000	4793000	React like if you're working on React yes
4793000	4795000	that's useful but it's not something we want
4795000	4797000	you to kind of think about and it's going to change
4797000	4799000	over time it's not you know it's not
4799000	4801000	super optimized yet.
4801000	4803000	But if we're
4803000	4805000	using it as an instructional tool
4805000	4807000	you know to kind of teach how this works
4807000	4809000	I think it's interesting to notice
4809000	4811000	yeah I see your formatting
4811000	4813000	is a bit messed up because you see it says
4813000	4815000	0 colon blah blah
4815000	4817000	blah and then it says 1 colon blah blah
4817000	4819000	blah I think those were supposed to be separate
4819000	4821000	lines because like in the response
4821000	4823000	there are separate lines
4823000	4825000	but I want you to notice how it's
4825000	4827000	structured like do you notice
4827000	4829000	it's like
4829000	4831000	0 is like the first line
4831000	4833000	and it says at 1
4833000	4835000	and I don't remember the exact syntax again
4835000	4837000	that's not the point but it kind of references
4837000	4839000	like this is a hole it says like
4839000	4841000	the result of 0 is
4841000	4843000	going to be streamed under
4843000	4845000	number 1 and then you see like number
4845000	4847000	1 says you need
4847000	4849000	to have like a header with
4849000	4851000	welcome to server components
4851000	4853000	and then the rest is going to be streamed under
4853000	4855000	number 2 you see it says like
4855000	4857000	L2 is like I don't remember
4857000	4859000	what L means but it says
4859000	4861000	that that's going to be coming later and then
4861000	4863000	2 is like the remaining response
4863000	4865000	and so these are these like
4865000	4867000	that's the key thing that makes it possible
4867000	4869000	to stream parts because we just leave
4869000	4871000	holes and we're like yeah this thing
4871000	4873000	number 42 is going to be filled in later
4873000	4875000	and then we're able to like stream
4875000	4877000	that part
4877000	4879000	yep and yeah I agree
4879000	4881000	like you're not going to be looking at this
4881000	4883000	I didn't really care about the formatting so much
4883000	4885000	as like what data is coming down
4885000	4887000	and what's the order
4887000	4889000	like this data came down a second later
4889000	4891000	why and
4891000	4893000	yeah the dev tools are split up by like
4893000	4895000	the order to stream comes in
4895000	4897000	and I don't split it up by these like numbers
4897000	4899000	but that's the indicator
4899000	4901000	that's where the holes are which is probably what you're looking
4901000	4903000	for if you're thinking like
4903000	4905000	first bit is this second bit is this
4905000	4907000	and you can see like 2 matches up with 2
4907000	4909000	and all that stuff
4909000	4911000	maybe if I add the
4911000	4913000	pre wrap
4913000	4915000	or whatever the CSS thing to preserve
4915000	4917000	new lines maybe then it will
4917000	4919000	split 0 and 1 because
4919000	4921000	0 and 1 are I think they arrive
4921000	4923000	in the same response chunk
4923000	4925000	but they are like separate lines
4925000	4927000	they're separate things
4927000	4929000	but it doesn't matter
4929000	4931000	it doesn't matter
4931000	4933000	and sometimes changes where it's like
4933000	4935000	I decided this chunk should load with
4935000	4937000	the next one and sometimes it's like no it's more
4937000	4939000	efficient to put it up here so there's some
4939000	4941000	optimization going on but
4941000	4943000	in this example am I right
4943000	4945000	that at least as
4945000	4947000	the user sees it you're going
4947000	4949000	to see all of this stuff coming in
4949000	4951000	at once like you're not
4951000	4953000	going to see like one then the next
4953000	4955000	exactly
4955000	4957000	and the idea here is
4959000	4961000	the way you structure
4961000	4963000	your
4963000	4965000	the way you decide
4965000	4967000	which components do what kind of data
4967000	4969000	fetching and like moving
4969000	4971000	data fetching calls between them should not
4971000	4973000	affect the visual output for
4973000	4975000	the user because
4975000	4977000	I think that is like
4977000	4979000	there's a bunch of things we've learned that
4979000	4981000	we haven't communicated super well
4981000	4983000	but I think like this is one of them
4983000	4985000	like you want to have the freedom to move
4985000	4987000	the data fetching code around
4987000	4989000	without any effect on the
4989000	4991000	user experience or like the way
4991000	4993000	the user perceives it and then
4993000	4995000	you want the people who are not necessarily
4995000	4997000	super skilled
4997000	4999000	in like how data fetching
4999000	5001000	works like you know like a designer
5001000	5003000	to be able to
5003000	5005000	say I want like this piece
5005000	5007000	of JSX to have its own
5007000	5009000	loading indicator
5009000	5011000	like its own skeleton
5011000	5013000	and to be able to do that completely
5013000	5015000	declaratively just by
5015000	5017000	you know putting it into JSX
5017000	5019000	tree without worrying about
5019000	5021000	how you know how it's
5021000	5023000	how it's actually kind of streamed
5023000	5025000	in so the
5025000	5027000	way the loading the progression
5027000	5029000	the loading sequence that
5029000	5031000	the user sees
5031000	5033000	like the visual loading sequence
5033000	5035000	is completely decoupled
5035000	5037000	from you know the
5037000	5039000	the streaming sequence because
5039000	5041000	for streaming we want to stream as
5041000	5043000	much as we can as early as we
5043000	5045000	can as we discover things
5045000	5047000	but then you know to the user we
5047000	5049000	want to present them like each visual state
5049000	5051000	should be intentional and only
5051000	5053000	correspond to what the user actually wants to see
5055000	5057000	Yeah and definitely
5057000	5059000	seeing that here and I know that
5059000	5061000	as you sort of cascade down
5061000	5063000	multiple fetch calls it's
5063000	5065000	really just going to wait for everything before
5065000	5067000	going to the user if you aren't suspending
5067000	5069000	if you aren't doing anything like that
5069000	5071000	it's just going to bunch up all of those requests
5071000	5073000	and you can do a promise.all at the top
5073000	5075000	level if you really want to be smart
5075000	5077000	about like parallelizing each fetch
5077000	5079000	but that's exactly what
5079000	5081000	we're seeing here of like even though it's in the second
5081000	5083000	one it's all going to come down in one
5083000	5085000	big chunk and I alluded
5085000	5087000	to how you could avoid that
5087000	5089000	but well okay I say avoid
5089000	5091000	as if it's a bad thing this is actually
5091000	5093000	the behavior you probably do want
5093000	5095000	but if there is
5095000	5097000	like behavior
5097000	5099000	when would you say like
5099000	5101000	is a good use case for
5101000	5103000	wrapping something in a suspense boundary
5103000	5105000	it's probably pretty nuanced but
5105000	5107000	I'm curious if you have thoughts about
5107000	5109000	like where you found it. Yeah I would just say
5109000	5111000	like if it feels slow
5111000	5113000	because you have a slow data source
5113000	5115000	or there's
5115000	5117000	a lot of logic that needs to be downloaded
5117000	5119000	it's like suspense also
5119000	5121000	works for client
5121000	5123000	like it's integrated with everything
5123000	5125000	right like we're going to integrate it with CSS
5125000	5127000	we're already integrating it with images
5127000	5129000	so it's already
5129000	5131000	integrated with code it's like if you
5131000	5133000	render a like button component
5133000	5135000	it's a client component and the suspense
5135000	5137000	is going to wait automatically
5137000	5139000	for that client code
5139000	5141000	to load even if it's code split
5141000	5143000	like it is code split by
5143000	5145000	default like if you import a client
5145000	5147000	component from a server component
5147000	5149000	it's like there is no
5149000	5151000	need to do code splitting it's just code splitting
5151000	5153000	is how it works and so it's
5153000	5155000	going to wait for that
5155000	5157000	code and any data and
5157000	5159000	in the future like CSS or images
5159000	5161000	to be ready and then
5161000	5163000	it flips you know it makes it visible when like
5163000	5165000	all the things in that tree resolve
5165000	5167000	so I think pragmatically speaking
5167000	5169000	it's just you have something that loads
5169000	5171000	that takes a bit of time you don't know why
5171000	5173000	it takes a bit of time but actually it doesn't matter
5173000	5175000	you just wrap it in suspense
5175000	5177000	and that kind of lets you unblock
5177000	5179000	the rest it's like here's a slow
5179000	5181000	part I have some
5181000	5183000	I asked the designer like I am the
5183000	5185000	designer I designed some visual skeleton
5185000	5187000	for that thing I'm just going to plug
5187000	5189000	it in here
5189000	5191000	yeah I think that's really
5191000	5193000	cool that y'all are just seeing is like any
5193000	5195000	slow data source no matter what it is
5195000	5197000	I don't know what it would look like to say like
5197000	5199000	wrapping a style
5199000	5201000	sheet in suspense
5201000	5203000	or something like that but
5203000	5205000	that would be more
5205000	5207000	automatic so if you imagine
5207000	5209000	for example a component
5209000	5211000	imports like a
5211000	5213000	CSS module or something like this
5213000	5215000	and or
5215000	5217000	like some kind of static CSS
5217000	5219000	and JS with like static extraction
5219000	5221000	then you could imagine
5221000	5223000	a compiler or like a framework
5223000	5225000	would put the link
5225000	5227000	tag for the style sheet
5227000	5229000	into component output automatically
5229000	5231000	and then the React would know to
5231000	5233000	wait for that CSS to
5233000	5235000	load before it can display the
5235000	5237000	component it would put the link tag into
5237000	5239000	the head or something like this
5239000	5241000	so it would be automatic it's not something you think about
5241000	5243000	but it's just
5243000	5245000	it's just better than the
5245000	5247000	current best practice of
5247000	5249000	like either you load
5249000	5251000	all CSS in the beginning
5251000	5253000	for like the entire app or
5253000	5255000	you do some kind of
5255000	5257000	you do some kind of split
5257000	5259000	in but then JavaScript can't
5259000	5261000	even start executing
5261000	5263000	for like independently of CSS
5263000	5265000	because like they're grouped together
5265000	5267000	and like you want
5267000	5269000	to have this ability of start executing
5269000	5271000	JavaScript even before CSS loads
5271000	5273000	but then hold back
5273000	5275000	the rendering until we actually
5275000	5277000	have the CSS so that the user doesn't
5277000	5279000	see unstyled content so this
5279000	5281000	would be automatic or another example
5281000	5283000	is like you have an image tag
5283000	5285000	for example of like profile cover
5285000	5287000	and you might want to kind of hold
5287000	5289000	back showing the thing
5289000	5291000	until you have the image
5291000	5293000	you know unless it's like super slow or
5293000	5295000	like there would be like a way to opt out
5295000	5297000	so you would be don't wait for this image
5297000	5299000	yeah that's the clearer one
5299000	5301000	to me because I would love to have an API
5301000	5303000	that's like suspense
5305000	5307000	suspense fallback
5307000	5309000	like blurred image
5309000	5311000	and then inside of this
5311000	5313000	is like the real image
5313000	5315000	that we're going to wait on
5315000	5317000	and that's conceptually what it's doing I'm sure
5317000	5319000	you wouldn't just pass in blurred image
5319000	5321000	but it would be
5321000	5323000	it's that hook
5323000	5325000	to not ship like
5325000	5327000	the massive Gatsby image component to the client
5327000	5329000	that does all of these fancy fetches
5329000	5331000	like it's just telling the server
5331000	5333000	stream in the blurred image then stream
5333000	5335000	in the regular image when you're done
5335000	5337000	yeah that's one way to do it
5337000	5339000	but I think like it also
5339000	5341000	it doesn't necessarily have to do with
5341000	5343000	blurred images like I think you can
5343000	5345000	think of this like blurred images
5345000	5347000	as a kind of next level
5347000	5349000	optimization that you could do
5349000	5351000	but just the capability of
5351000	5353000	being able to say
5353000	5355000	like don't show until this image
5355000	5357000	is ready
5357000	5359000	like wait for it
5359000	5361000	to pop in
5361000	5363000	and then that could be a blurred one
5363000	5365000	if you want to make it
5365000	5367000	you know like faster
5367000	5369000	or it could be that you actually
5369000	5371000	wait for the whole thing
5371000	5373000	you know with a normal
5373000	5375000	image but then you do have blurred one
5375000	5377000	as like a placeholder so it really depends
5377000	5379000	on like how you put it so
5379000	5381000	we'll see but the capability
5381000	5383000	like the important part is just like
5383000	5385000	it would be hooked up automatically
5385000	5387000	to the suspense so suspense
5387000	5389000	would act as you know you
5389000	5391000	declaratively specify this is
5391000	5393000	what I want to see if something
5393000	5395000	inside is not ready and then something
5395000	5397000	could be like data, it could be code
5397000	5399000	it could be images, it could be stylesheets
5399000	5401000	it's like anything asynchronous can
5401000	5403000	work and you don't have to like do it
5403000	5405000	in your head all the time
5405000	5407000	yeah
5407000	5409000	and that does feel like the message I've been
5409000	5411000	getting from Next.js where it's like you know
5411000	5413000	don't worry about deployment target
5413000	5415000	that's automatic with how you're doing your fetch
5415000	5417000	calls, don't worry about
5417000	5419000	image optimization, just use the defaults
5419000	5421000	and it'll load in the correct
5421000	5423000	like webp, avif, whatever
5423000	5425000	because
5425000	5427000	these are decisions like
5427000	5429000	we can make when there's a problem
5429000	5431000	but a vast majority of the time
5431000	5433000	we don't need to make it ourselves
5433000	5435000	like there is a default that the framework
5435000	5437000	knows about and it can probably just go ahead
5437000	5439000	and do it
5439000	5441000	yep
5441000	5443000	yeah and I also never demo what this actually
5443000	5445000	does and I'm realizing these annotations
5445000	5447000	are completely wrong, I'm going to revisit this
5447000	5449000	but the main thing
5449000	5451000	that we're getting over here is like
5451000	5453000	we get our welcome to server components
5453000	5455000	and then a flash of fetching albums
5455000	5457000	until the albums come down
5457000	5459000	and then the only difference in the
5459000	5461000	response is that now we have
5461000	5463000	this like react suspense
5463000	5465000	idea where what I'm assuming
5465000	5467000	happens is like if
5467000	5469000	it is wrapped in suspense
5469000	5471000	it's going to say alright here's that hole
5471000	5473000	that you mentioned, here's that
5473000	5475000	separate component that you're going to
5475000	5477000	slot in when it comes down the pipe
5477000	5479000	but I have a fallback for you while you're waiting for
5479000	5481000	that, don't like block rendering
5481000	5483000	the whole page to the browser, actually
5483000	5485000	go ahead and render everything before this
5485000	5487000	show this fallback
5487000	5489000	and then L3 is going to match up with this 3
5489000	5491000	that comes down 300
5491000	5493000	milliseconds later based on how we have it set up
5493000	5495000	so it's just letting the server
5495000	5497000	like show something in the meantime
5497000	5499000	and stop blocking if it was actually an issue
5499000	5501000	maybe you can increase the delay
5501000	5503000	a little bit and then it would be
5503000	5505000	more obvious because it's kind of
5505000	5507000	really fast now
5507000	5509000	yeah and if it
5509000	5511000	I know, and if your delay is that
5511000	5513000	low you probably don't need suspense
5513000	5515000	I don't really know what the threshold is but you feel it out
5515000	5517000	so I set it up here
5517000	5519000	let's see what that does
5519000	5521000	did it not
5521000	5523000	oh I don't think it's watching, that's the issue
5523000	5525000	yep I think my
5525000	5527000	file watcher is only looking at source
5527000	5529000	but yeah there we go, now we
5529000	5531000	see like a full 2 second delay
5531000	5533000	maybe it's getting from like the Discogs
5533000	5535000	legacy API which is
5535000	5537000	slow, I've used it before
5537000	5539000	but yeah
5539000	5541000	now you get like fetching albums
5541000	5543000	maybe it's a beautiful skeleton that you designed
5543000	5545000	and then the 3 is going to become
5545000	5547000	this 3 as soon as it's ready
5547000	5549000	but now we have a fallback so it doesn't have to
5549000	5551000	wait on it
5551000	5553000	yep
5553000	5555000	cool stuff
5555000	5557000	so I mean that's a basic demo
5557000	5559000	of like suspense and fallbacks
5559000	5561000	I
5561000	5563000	well one thing I can do is
5563000	5565000	actually top this off with an image
5565000	5567000	on the top and then
5567000	5569000	I was curious to get into how I could
5569000	5571000	generate a search bar for this
5571000	5573000	and what would be involved in that
5575000	5577000	and I'll go ahead and do
5577000	5579000	I think album.
5579000	5581000	what do I call it, cover?
5581000	5583000	autocomplete
5583000	5585000	alt
5585000	5587000	that
5587000	5589000	album.title again
5589000	5591000	that should be good
5591000	5593000	now, well I'm going to
5593000	5595000	oh god there's no styling
5595000	5597000	let me see here
5597000	5599000	I tossed tailwind on top of this thing
5599000	5601000	just to make us move a little bit faster
5601000	5603000	so let's say class name
5603000	5605000	with like
5605000	5607000	20 just so we don't have to worry about that
5607000	5609000	let's see that
5609000	5611000	oh yeah way better
5611000	5613000	and also turn off the delay
5613000	5615000	so we can start working on this more easily
5617000	5619000	there we go
5619000	5621000	okay and now in our
5621000	5623000	server response now we're going to get the image
5623000	5625000	but before it's just not going to serialize
5625000	5627000	what you don't use
5627000	5629000	which is kind of the beauty of it
5629000	5631000	so yeah from here
5631000	5633000	how could I set up
5633000	5635000	a search filter that does it
5635000	5637000	maybe server side, maybe client side
5637000	5639000	yeah
5639000	5641000	so that's really
5641000	5643000	your choice
5643000	5645000	that's kind of the fun thing about it
5645000	5647000	you can do it either way
5647000	5649000	and there are different tradeoffs
5649000	5651000	so for example
5651000	5653000	if you have the entire list
5653000	5655000	let's say the thing
5655000	5657000	we're talking about is
5657000	5659000	it's mostly going to have maybe 50 albums
5659000	5661000	or something like this, you want to always load them all
5661000	5663000	then maybe
5663000	5665000	it makes sense to do client search because
5665000	5667000	well then it will be instant
5667000	5669000	so it would be, we could just filter on
5669000	5671000	the client and show the results
5671000	5673000	and that's one way we could go about it
5673000	5675000	on the other hand if you have
5675000	5677000	thousands of albums and they're
5677000	5679000	paginated or whatever
5679000	5681000	and you don't want to download them all
5681000	5683000	to the client
5683000	5685000	then it makes sense to make the search driven by
5685000	5687000	the server and just
5687000	5689000	pass down the
5689000	5691000	update the URL
5691000	5693000	as you actually do
5695000	5697000	each time you write into the input
5697000	5699000	you do a router navigation
5699000	5701000	through a different query
5701000	5703000	and then on the server you read the query
5703000	5705000	and you refresh
5705000	5707000	you just send the new output
5707000	5709000	so maybe we could do it both ways
5709000	5711000	and just compare them
5711000	5713000	how do you feel about that?
5713000	5715000	Yeah, we can
5715000	5717000	I don't know if the server way will work without
5717000	5719000	page refreshes
5719000	5721000	we have the Next.js
5721000	5723000	escape hatch in this repo
5723000	5725000	I put a Next app right up here
5725000	5727000	so if we need to we can just drag this in
5727000	5729000	I'm hoping
5729000	5731000	but yeah, I think starting with clients is a good idea
5731000	5733000	because we didn't even demo client yet
5733000	5735000	or how it even works
5735000	5737000	so I can make a separate file
5737000	5739000	for that
5739000	5741000	.jsx
5741000	5743000	and try to call you in here
5745000	5747000	and at the top
5747000	5749000	you just put use client
5749000	5751000	and sure
5753000	5755000	no
5755000	5757000	but close
5757000	5759000	well this will be
5759000	5761000	a search box so in this example
5761000	5763000	it would pass through all of the
5763000	5765000	album info as props I'm assuming
5765000	5767000	right? Where it comes from the server
5767000	5769000	and this is just
5769000	5771000	what do you want, like what component structure
5771000	5773000	do you have in mind? I think I'm not fully
5773000	5775000	understanding what do you
5775000	5777000	want to put where?
5777000	5779000	Yeah, so
5779000	5781000	the typical way that I would do it
5781000	5783000	is this is a client component
5783000	5785000	it receives the get
5785000	5787000	all result from the server
5787000	5789000	so all the albums come in here
5789000	5791000	and then it has a form input
5791000	5793000	that will filter what's showing
5793000	5795000	and then it would render what?
5795000	5797000	It would
5797000	5799000	render either
5799000	5801000	all the albums or the results
5801000	5803000	like if your input's blank it would show all
5803000	5805000	of them and then as you start typing it would
5805000	5807000	filter based on the title
5807000	5809000	Yeah, I think I just got confused
5809000	5811000	by the file name because it's like album
5811000	5813000	but I think it's essentially like searchable
5813000	5815000	list or something like this
5815000	5817000	Yeah, I think
5817000	5819000	that's a good idea
5819000	5821000	searchable, yeah searchable list
5821000	5823000	is fine
5823000	5825000	You like short names
5825000	5827000	I do, sometimes
5827000	5829000	I either go really short like
5829000	5831000	search or really long like searchable album
5831000	5833000	list. Yeah, searchable album list
5833000	5835000	is nice
5835000	5837000	like on the homepage
5837000	5839000	I don't know if you've noticed like on the React homepage
5839000	5841000	we have kind of a progression of
5841000	5843000	examples building up
5843000	5845000	and like it starts with like video
5845000	5847000	then there's video list then there's like searchable
5847000	5849000	video list and then there's
5849000	5851000	like conf page or something like this
5851000	5853000	so it's actually about
5853000	5855000	the canonical example we picked
5855000	5857000	so that's kind of funny that
5857000	5859000	we're doing that now
5859000	5861000	Yeah, I mean it works
5861000	5863000	Oh, that's cool that it's called searchable
5863000	5865000	Yeah, I've never said searchable
5865000	5867000	I would probably say like album list search
5867000	5869000	but yeah
5869000	5871000	But then it sounds like the search is just
5871000	5873000	like I think the thing that's confusing about it
5873000	5875000	is it seems like it's just the
5875000	5877000	yeah
5877000	5879000	Yeah
5879000	5881000	and so it's so hard to
5881000	5883000	name your Lego bricks
5883000	5885000	but this will work
5885000	5887000	So yeah, search and set search, that's fine
5887000	5889000	and we're not going to use
5889000	5891000	like an actual search library for this
5891000	5893000	it would just be
5893000	5895000	well that's, yeah, you could just do it like this
5895000	5897000	and this
5897000	5899000	is really good actually
5899000	5901000	Dang it Copilot, you took all the fun out of it
5901000	5903000	but that is it, that works fine
5903000	5905000	So
5905000	5907000	Well no, that's actually not very good
5907000	5909000	It's not a very good version
5909000	5911000	because it
5913000	5915000	it would search in the middle
5915000	5917000	of the words, right
5917000	5919000	so if you
5919000	5921000	Oh sure
5921000	5923000	I can, let me copy and paste
5923000	5925000	I have a version that I
5925000	5927000	that I wrote for
5927000	5929000	for the React homepage
5929000	5931000	that I can
5931000	5933000	I can actually
5933000	5935000	just copy and paste it
5935000	5937000	so this
5937000	5939000	is the
5939000	5941000	yeah let me
5941000	5943000	copy and paste it here except that's going to be
5943000	5945000	filter albums, that's going to be
5945000	5947000	albums
5947000	5949000	that's, that you called this thing
5949000	5951000	search, so I'll call this thing search as well
5951000	5953000	and then
5953000	5955000	the, what is the
5955000	5957000	what is the
5957000	5959000	we care about title and about
5959000	5961000	what is the other thing
5961000	5963000	that we care about
5963000	5965000	Artist? It's just the title
5965000	5967000	That's another field
5967000	5969000	Artist, maybe
5969000	5971000	Yeah, but does it have
5971000	5973000	does it have artist in the album
5973000	5975000	info somewhere, like what's the structure
5975000	5977000	Yeah, and I can
5977000	5979000	actually, I set this up with JS
5979000	5981000	Oh yeah, okay yeah
5981000	5983000	I'll just go ahead and do that
5983000	5985000	Okay
5985000	5987000	Yeah
5987000	5989000	Yeah, sure
5989000	5991000	Wait, what happened
5991000	5993000	Oh, I think we're
5993000	5995000	I think we're typing at the same time
5995000	5997000	Sorry
5997000	5999000	That should work, but okay
5999000	6001000	Yeah, that should work now
6001000	6003000	Yeah, and it's inferring, cool
6003000	6005000	Alright
6005000	6007000	And this is a nice little function
6007000	6009000	So this is just searching
6009000	6011000	I guess I'm looking
6011000	6013000	at the split here
6013000	6015000	So it's looking at each word
6015000	6017000	Okay, some of the words start
6017000	6019000	with a keyword, nice
6019000	6021000	Yeah, it's not super efficient
6021000	6023000	like it has some nested loops
6023000	6025000	but you know
6025000	6027000	not just some, it has like three levels of nested loops
6027000	6029000	so it's actually pretty slow
6029000	6031000	but it's fast enough for us
6031000	6033000	Exactly, yeah, that's what I'm thinking
6033000	6035000	Yeah, and does
6035000	6037000	this handle the empty state
6037000	6039000	where it's like show all of them unless
6039000	6041000	you've started typing something
6041000	6043000	Yeah, yeah, I think it does
6043000	6045000	You know, it's
6045000	6047000	Yeah, you can just pass the
6047000	6049000	I'll go ahead and just do this
6049000	6051000	Albums, search
6051000	6053000	Nice
6055000	6057000	And what now
6057000	6059000	Well, there's no input
6059000	6061000	Yep
6061000	6063000	Yeah, I've
6063000	6065000	heard on input it's a little more reliable
6065000	6067000	and it's what I use
6067000	6069000	No, no
6069000	6071000	Is that the wrong one
6071000	6073000	All right
6073000	6075000	Never mind
6075000	6077000	It's just a weird name in Quark
6077000	6079000	It corresponds to on input in the browser
6079000	6081000	Oh, it does?
6081000	6083000	Okay, that's what I knew
6083000	6085000	Oh, that's weird, all right
6085000	6087000	The more you know
6087000	6089000	So that's gonna be that, yeah
6089000	6091000	This should all work
6091000	6093000	So the last thing to do is just put it on the page
6093000	6095000	So I'll hop back over here
6095000	6097000	Let's add suspense again
6097000	6099000	because it's annoying that
6099000	6101000	I'm gonna do it because it's annoying
6101000	6103000	that it waits so much
6103000	6105000	So
6105000	6107000	I'll just do
6107000	6109000	a loading state
6109000	6111000	because it kind of looks
6111000	6113000	like something's wrong with the server components
6113000	6115000	but it's actually just because we don't have suspense
6115000	6117000	Okay
6117000	6119000	Interesting, okay
6121000	6123000	All right, so we have that
6123000	6125000	and so
6125000	6127000	we would put the client component in here, right
6127000	6129000	Yeah
6133000	6135000	I'm doing
6135000	6137000	Yeah, you have to do that
6137000	6139000	We can just do this
6139000	6141000	Yeah, sure
6141000	6143000	We'll fix it someday
6143000	6145000	Someday
6145000	6147000	Okay, so everything exploded
6147000	6149000	sadly
6149000	6151000	That could be on the build tool
6151000	6153000	That is me
6153000	6155000	Let me double check on that
6155000	6157000	The next JS escape patch is looking great
6157000	6159000	but that is the response
6159000	6161000	that you'll probably get from the server
6161000	6163000	because now what we're doing is we didn't filter
6163000	6165000	which props that our client cares about
6165000	6167000	Now it's passing down everything
6167000	6169000	including the song list, which is like
6169000	6171000	that little uncanny valley I mentioned
6171000	6173000	If you're not aware, you can
6173000	6175000	ship a lot of data to the client that you're not expecting
6175000	6177000	So we could filter it
6177000	6179000	but right now we're just passing down everything
6179000	6181000	Yeah, which is what you were
6181000	6183000	doing anyway in the single page app
6183000	6185000	Yeah
6185000	6187000	Can you show what's crashing?
6187000	6189000	Because I don't see the
6189000	6191000	Yeah, I'll give it a look
6191000	6193000	This error doesn't make a lot of sense to me
6193000	6195000	I just don't see the error
6195000	6197000	I don't know if
6197000	6199000	Okay
6199000	6201000	Does it not show
6201000	6203000	Yeah, it's crashing in the browser, not the server
6203000	6205000	Yeah, but I don't see
6205000	6207000	I think maybe your screen share
6207000	6209000	doesn't show me the DevTools console
6209000	6211000	so I have no idea what the error is
6211000	6213000	Oh, I thought the screen share might actually show it to you
6213000	6215000	Okay
6215000	6217000	Interesting
6217000	6219000	Yeah, it's being really selective
6219000	6221000	But you're right, it doesn't. It actually hides the DevTools
6221000	6223000	Alright, let me
6223000	6225000	And this shouldn't be affecting anyone
6225000	6227000	at home, this is just our crazy setup
6227000	6229000	If I do this
6229000	6231000	now it should work
6231000	6233000	Maybe
6233000	6235000	Okay, yeah, now I can actually see it
6235000	6237000	Yeah, so
6237000	6239000	Okay, this time it actually doesn't show an error
6239000	6241000	That's interesting
6241000	6243000	It just says loading and it never actually resolves
6243000	6245000	I also made the dev panel
6245000	6247000	a little too big
6247000	6249000	Let's see here
6249000	6251000	Well, yeah, on the key
6251000	6253000	prompt, but wait, that actually
6253000	6255000	doesn't make any sense
6257000	6259000	Oh, I put the key on the list item
6259000	6261000	instead of on the wrapping div
6261000	6263000	I can do that, but that shouldn't crash the server
6263000	6265000	No, that shouldn't crash the server
6265000	6267000	No, it shouldn't
6267000	6269000	Yeah, and it's also still
6269000	6271000	Let me just reboot this
6271000	6273000	and worst case, I'm assuming
6273000	6275000	we can copy-paste
6275000	6277000	Oh, there we go
6277000	6279000	Okay, something happened in the live reloading
6279000	6281000	which happens sometimes
6281000	6283000	Yeah
6283000	6285000	But we'll just go with it
6285000	6287000	But yeah, it looks like it's still rendering
6287000	6289000	on the page, which is good
6289000	6291000	And we have an input
6291000	6293000	but since it's tail-ended, it unstyles everything
6293000	6295000	which is a little too aggressive
6295000	6297000	Yeah, look at that
6297000	6299000	So now we have it interactive
6299000	6301000	searching for artists
6301000	6303000	and stuff, and I can search by
6303000	6305000	that as well
6305000	6307000	Oh, I did the fancy O
6307000	6309000	Yeah, it's working
6309000	6311000	Some reason
6311000	6313000	I don't see your screen updating at all
6313000	6315000	Oh, really
6315000	6317000	Yeah, it's stuck
6317000	6319000	Well, I try
6319000	6321000	I'm learning this setup as I go
6321000	6323000	Maybe let's go back to
6323000	6325000	the thing you shared before
6325000	6327000	because that definitely was updating
6327000	6329000	Alright, let's do that again
6329000	6331000	If I do Chromium tab
6331000	6333000	You'll have to just read the errors
6333000	6335000	Just narrate the error
6335000	6337000	Yeah
6341000	6343000	Now I'm trying to find which tab it is
6343000	6345000	I have too many tabs
6345000	6347000	Oh, I called it future of React
6347000	6349000	which makes me forget
6349000	6351000	Okay
6351000	6353000	Can you see that?
6353000	6355000	Yeah, now I see it
6355000	6357000	But it's really slow updates
6357000	6359000	It's really slow
6359000	6361000	But it does work
6361000	6363000	Do you mean it's slow
6363000	6365000	in the browser, or do you mean the stream is slow?
6365000	6367000	Definitely on your end
6367000	6369000	On the browser, it's immediate
6369000	6371000	as we've mentioned before
6371000	6373000	Okay
6373000	6375000	So maybe one thing that would be
6375000	6377000	interesting to show here is
6377000	6379000	maybe like
6379000	6381000	What happens if you remove useClient?
6381000	6383000	What does useClient actually do?
6383000	6385000	Maybe we could talk a little bit about this
6385000	6387000	Yeah, well I'll confess
6387000	6389000	when you remove useClient
6389000	6391000	React complains that useState doesn't exist
6391000	6393000	and that's just a separate thing
6393000	6395000	with bundlers
6395000	6397000	Yeah, so it's
6397000	6399000	I mean, ideally
6399000	6401000	Oh, okay
6401000	6403000	It's actually pretty readable now
6405000	6407000	So it's supposed to tell you that
6407000	6409000	it's not
6409000	6411000	like useClient is not supported on the server
6411000	6413000	Yep, that's what I'm saying
6413000	6415000	Yeah, so it's
6415000	6417000	and like the way you would
6417000	6419000	I think the mental model
6419000	6421000	you would have, I don't know
6421000	6423000	Can I draw in your Excalidraw link that you sent to me?
6423000	6425000	Like would people see it?
6425000	6427000	Sure
6427000	6429000	Yeah, I can pull it up right here
6429000	6431000	Okay, so let me
6431000	6433000	let me try to open it
6433000	6435000	One sec
6435000	6437000	I just need to find the link
6437000	6439000	But I kind of just wanted to show
6439000	6441000	what exactly
6441000	6443000	Okay, so I'll draw
6443000	6445000	just below your diagram
6445000	6447000	So let's see, can you see
6447000	6449000	I drew a
6449000	6451000	I'm supposed to have
6451000	6453000	drawn like a rectangle just
6453000	6455000	below your thing
6455000	6457000	I think I need to click on the link myself
6457000	6459000	because if I just go to
6459000	6461000	Excalidraw.com, it doesn't show it
6461000	6463000	Yeah, yeah, you need to go to the same link
6463000	6465000	Go to the DM
6465000	6467000	with that
6469000	6471000	Excalidraw
6473000	6475000	Alright
6475000	6477000	I think we're here now
6477000	6479000	Yeah, there we go
6479000	6481000	Okay, cool
6481000	6483000	So if we kind of think about
6483000	6485000	our structure
6485000	6487000	right now, it's like we have
6487000	6489000	the server root
6489000	6491000	and we have
6491000	6493000	So this is the
6493000	6495000	well, okay, so this is the
6495000	6497000	module structure, right?
6497000	6499000	Well, okay, first I'll draw
6499000	6501000	the component structure. So we have the server root
6501000	6503000	that renders
6503000	6505000	albums
6505000	6507000	that
6507000	6509000	itself renders
6509000	6511000	this searchable
6511000	6513000	album list
6517000	6519000	So this is
6519000	6521000	this is the component structure, but then if we
6521000	6523000	if we look at the, maybe I'll use
6523000	6525000	like different
6525000	6527000	maybe I'll use like a different
6527000	6529000	different style
6529000	6531000	So if we look at the file structure
6531000	6533000	what we see is like there's
6533000	6535000	the thing you call root.server.jsx
6535000	6537000	it doesn't have to be named that way
6537000	6539000	that's what you mentioned
6539000	6541000	could have just been named like app
6541000	6543000	or something, and so it imports
6543000	6545000	the
6545000	6547000	searchable album
6547000	6549000	album list.js
6549000	6551000	and so
6551000	6553000	the
6555000	6557000	the way to think about it is like
6557000	6559000	by default we start with
6559000	6561000	everything executing
6561000	6563000	so like
6563000	6565000	by default everything starts
6565000	6567000	and like importing starts
6567000	6569000	on the server, right? So like if you imagine like
6569000	6571000	this is the server entry point
6571000	6573000	it means that each import
6573000	6575000	will be followed, you know, like
6575000	6577000	like you would expect, and like
6577000	6579000	all of this stuff would be on the
6579000	6581000	like in the server
6581000	6583000	when I say server, I mean
6583000	6585000	React server, so like RSC
6585000	6587000	React server components, I don't mean
6587000	6589000	it doesn't, it's not about like being on
6589000	6591000	the server in terms of location
6591000	6593000	again, right? Like it's just the concept
6593000	6595000	so by default all of these imports
6595000	6597000	become
6597000	6599000	part of the code that executes
6599000	6601000	you know, as part of your server response
6601000	6603000	and then like if we
6603000	6605000	if we try to
6605000	6607000	if you try to use state here
6607000	6609000	it doesn't really make sense because
6609000	6611000	this thing
6611000	6613000	runs only on the server
6613000	6615000	and so it's never actually
6615000	6617000	going to be able to have event handlers
6617000	6619000	or state because this code
6619000	6621000	just never exists on the client
6621000	6623000	at all, so it can't react to
6623000	6625000	user input anyhow
6625000	6627000	and so when you say use client
6627000	6629000	and for some reason undo
6629000	6631000	doesn't work so
6631000	6633000	I have to, wait seriously
6633000	6635000	oh really? I can undo
6635000	6637000	yeah, I can
6637000	6639000	undo this for some reason
6639000	6641000	so when we do
6641000	6643000	so I'll add use client again to
6643000	6645000	searchable
6645000	6647000	album list
6647000	6649000	so if I add use client there, that fixes it
6649000	6651000	because that redraws the
6651000	6653000	boundaries, like when you say
6653000	6655000	use client, you're essentially saying
6655000	6657000	like
6657000	6659000	cut this off, you're saying
6659000	6661000	like
6661000	6663000	this
6663000	6665000	anything from here, this could
6665000	6667000	import other components, this could
6667000	6669000	import something else
6669000	6671000	and so on, but you're saying
6671000	6673000	anything that imports
6673000	6675000	searchable list, this thing
6675000	6677000	actually doesn't exist
6677000	6679000	this should be on the client
6679000	6681000	and it's going to client all the way down
6681000	6683000	which doesn't mean that
6683000	6685000	it doesn't mean that the
6685000	6687000	it doesn't mean
6687000	6689000	all components, so we're talking about
6689000	6691000	files, we're not talking
6691000	6693000	we're talking about imports, not about components
6693000	6695000	you can still have components
6695000	6697000	that are
6697000	6699000	server
6699000	6701000	components inside client components
6701000	6703000	I'll get to that in a moment
6703000	6705000	but what I just want to show is like
6705000	6707000	you kind of
6707000	6709000	sorry, I just can't
6709000	6711000	delete anything
6711000	6713000	like I have to
6713000	6715000	there we go
6715000	6717000	by adding use client
6717000	6719000	you kind of just like
6719000	6721000	limited the server part to
6721000	6723000	this
6723000	6725000	and then the rest is what
6725000	6727000	your bundler will be
6727000	6729000	will know to like, oh this needs
6729000	6731000	anything from here has to go into the client
6731000	6733000	bundle, and so the server
6733000	6735000	environment would not even see this
6735000	6737000	so from the server environment
6737000	6739000	perspective, the searchable
6739000	6741000	album list component
6741000	6743000	it doesn't even know what's in there
6743000	6745000	it doesn't try to render it, it doesn't try
6745000	6747000	to do anything with it, it's just completely
6747000	6749000	opaque, and then on the client
6749000	6751000	from the client perspective
6751000	6753000	like when you're actually
6753000	6755000	on the client, it's really
6755000	6757000	this part, it's like
6757000	6759000	it doesn't exist, because
6759000	6761000	it's already executed, so
6761000	6763000	the client is only aware of
6763000	6765000	the output of this thing
6765000	6767000	it's aware of the output, right
6767000	6769000	so one of the things that gets
6769000	6771000	a bit, you know, that always trips
6771000	6773000	people up is like, okay
6773000	6775000	but does it mean that
6775000	6777000	if I just need
6777000	6779000	one, you know, component
6779000	6781000	with state somewhere close
6781000	6783000	to the top, then
6783000	6785000	you know, it can't
6785000	6787000	it can't contain
6787000	6789000	any server components, right
6789000	6791000	and we can
6791000	6793000	actually, they have like another
6793000	6795000	data point that
6795000	6797000	we can fetch from, just to kind of
6797000	6799000	illustrate this idea
6800000	6802000	so you have getById
6802000	6804000	maybe I can use that, do you mind
6804000	6806000	if I write a bit of code?
6806000	6808000	oh yeah, please
6808000	6810000	yeah, so I just want to illustrate
6810000	6812000	maybe let's go back to the app
6812000	6814000	can we make sure the app is working
6814000	6816000	so that, you know, it's not completely
6816000	6818000	forked
6818000	6820000	it's a good thing to check
6820000	6822000	yeah, is this
6822000	6824000	the screen share you're able to see?
6824000	6826000	yeah, yeah
6826000	6828000	but I see it like as empty
6828000	6830000	so I don't know if it needs to be restarted
6830000	6832000	or something
6832000	6834000	oh no, we just need to
6834000	6836000	well actually, this is on me
6836000	6838000	I only detect double quotes
6838000	6840000	yeah, compilers
6840000	6842000	alright, that works
6842000	6844000	oh, okay
6844000	6846000	yeah, so maybe we can show
6846000	6848000	the problem you might run
6848000	6850000	into is
6850000	6852000	so let's go back
6852000	6854000	to
6854000	6856000	for example, index
6856000	6858000	oh, you have a
6858000	6860000	can I use this Pokemon example?
6860000	6862000	you have this Pokemon example in another file
6862000	6864000	also Primogen, oh my god
6864000	6866000	thank you for the raid
6866000	6868000	we have a lot of people pouring in here
6868000	6870000	right now, thank y'all so much
6870000	6872000	thanks for stopping by
6872000	6874000	that is awesome, you're awesome
6874000	6876000	we're live with Dan
6876000	6878000	playing with React server components
6878000	6880000	and learning a ton of things along the way
6880000	6882000	and right now we are playing
6882000	6884000	with loading things
6884000	6886000	asynchronously, seeing the server client
6886000	6888000	boundaries, and I guess
6888000	6890000	in a minute, trying to render some Pokemon on the page
6890000	6892000	if you want to go ahead and try that
6892000	6894000	yeah, so
6894000	6896000	let's maybe import
6896000	6898000	oh, you already imported Pokemon
6898000	6900000	so that's great
6900000	6902000	so maybe let's first just
6902000	6904000	render the Pokemon
6904000	6906000	above
6908000	6910000	above the
6910000	6912000	code is so
6912000	6914000	I just can't get used to
6914000	6916000	VS Code, but I'm just trying to
6916000	6918000	render the Pokemon above the
6920000	6922000	what is it, the album list
6922000	6924000	actually
6924000	6926000	I'm gonna pull it
6926000	6928000	yeah, okay, yeah
6928000	6930000	I'm gonna pull it out of the suspense
6930000	6932000	because the suspense is super slow
6932000	6934000	because we
6934000	6936000	let's maybe reduce the delay
6936000	6938000	I'll set the delay to something that's
6938000	6940000	oh, we changed
6940000	6942000	the delay back to be really short
6942000	6944000	yeah, that should be short now
6944000	6946000	yeah, okay, so we have a
6946000	6948000	if we go to root.server.js
6948000	6950000	you see there's like, we're rendering
6950000	6952000	Pokemon, and we're also rendering
6952000	6954000	this album list
6954000	6956000	and so, suppose that we
6956000	6958000	for some reason we wanted, like Pokemon
6958000	6960000	is a server component, right, if you go there
6960000	6962000	you see it has async await
6962000	6964000	that's currently
6964000	6966000	only supported on the server
6966000	6968000	so, but imagine that in our
6968000	6970000	app we want to
6970000	6972000	render the Pokemon from a client
6972000	6974000	component, right, like let's say we want
6974000	6976000	to render it between the
6976000	6978000	search bar and the list of
6978000	6980000	items
6980000	6982000	so, if you just try to do it
6982000	6984000	kind of naively, it won't work
6984000	6986000	so if I go to
6988000	6990000	to the
6990000	6992000	searchable album list, and I'm gonna add
6992000	6994000	an import for Pokemon
6994000	6996000	I'm gonna delete the
6996000	6998000	I'm gonna delete
6998000	7000000	the Pokemon from
7000000	7002000	root.server.js
7002000	7004000	completely, so I will
7004000	7006000	get rid of it here
7006000	7008000	and I will add it to our client
7008000	7010000	searchable album list component
7010000	7012000	between the input
7012000	7014000	and the
7014000	7016000	and the list
7016000	7018000	and so if you run it now
7018000	7020000	I think it should crash
7020000	7022000	like, what does it tell you if you
7022000	7024000	if you try to run it now
7024000	7026000	I'm so curious why, but it didn't crash
7026000	7028000	and it actually ran
7028000	7030000	that should not work
7030000	7032000	hang on, what's going on
7032000	7034000	here
7034000	7036000	yeah, it's working
7036000	7038000	wait a minute
7038000	7040000	but is it between
7040000	7042000	can you tell the input so that we can actually see the input
7042000	7044000	because I don't see the input at all
7044000	7046000	absolutely
7046000	7048000	yeah, it's right there, it's adding a focus
7048000	7050000	ring to that
7050000	7052000	let me add border
7052000	7054000	solid
7054000	7056000	okay
7056000	7058000	yeah, maybe it's not
7058000	7060000	I guess it's because it's using fetch
7060000	7062000	so maybe we already
7062000	7064000	support it on the client as well
7064000	7066000	so ideally it would be something
7066000	7068000	that would not be supported
7068000	7070000	on the client, like a database call
7070000	7072000	or something like this
7072000	7074000	right
7074000	7076000	maybe we can read something from a file
7076000	7078000	to make this more
7078000	7080000	make it more obvious
7080000	7082000	sure, yeah, let's read something from the
7082000	7084000	file so that we know definitely that
7086000	7088000	yeah, can we do like
7088000	7090000	okay, instead of
7090000	7092000	pokemon, we're gonna do
7094000	7096000	fs, let's see
7096000	7098000	I haven't used
7100000	7102000	can you write some
7102000	7104000	yeah, I can throw that down, I've only been writing fs calls
7104000	7106000	for the past however long
7106000	7108000	yeah, can you do like
7108000	7110000	readdir, like a list of files
7110000	7112000	for example, in your
7112000	7114000	yeah, fs
7114000	7116000	promises, readfile
7116000	7118000	maybe readdir
7118000	7120000	to kind of see the list of
7120000	7122000	files in the directory or something like this
7122000	7124000	yeah
7124000	7126000	or I guess, yeah
7126000	7128000	that's a thought too, yeah, I can read anything
7128000	7130000	okay, yeah, whatever
7130000	7132000	yeah, this isn't
7132000	7134000	the best thing, maybe if I
7134000	7136000	tried to read from the db
7136000	7138000	that would make more sense
7138000	7140000	sure, there's a thing you could do
7140000	7142000	db, data
7146000	7148000	data
7148000	7150000	at slug there, which is a real
7150000	7152000	slug
7152000	7154000	yep
7154000	7156000	and that, yeah
7156000	7158000	and then you want to do that
7158000	7160000	return
7160000	7162000	you know, a dump
7162000	7164000	a dump of information
7164000	7166000	sure
7166000	7168000	what's that
7168000	7170000	awesome
7170000	7172000	yes, maybe let's
7172000	7174000	see what happens if we try
7174000	7176000	to do this
7176000	7178000	or it's already stringified, silly me
7178000	7180000	alright, so we do that
7180000	7182000	and then it says, can't resolve node fs
7182000	7184000	that does make sense
7184000	7186000	yeah, it's built into node, are you trying to bundle for node
7186000	7188000	this is an esbuild specific thing
7188000	7190000	but this is what you would run into with the bundler
7190000	7192000	where it tries to bundle
7192000	7194000	this into the client
7194000	7196000	and it decides, well, you can't import
7196000	7198000	from node on the client, so I'm gonna
7198000	7200000	fail out
7200000	7202000	right, and so the way
7202000	7204000	and then the way you fix it
7204000	7206000	the way you kind of do this thing
7206000	7208000	where, you know, the
7208000	7210000	I'll switch back to Excalibur
7210000	7212000	can I see the Excalibur
7212000	7214000	yep
7214000	7216000	okay, so, yeah, so the problem we have
7216000	7218000	right now is like, we're doing this
7218000	7220000	and, again, this thing
7220000	7222000	is, this
7222000	7224000	is rendering, like, Pokemon
7224000	7226000	which is not actually Pokemon
7226000	7228000	it's a York album, but let's say it's Pokemon
7228000	7230000	and then this thing is actually
7230000	7232000	like, it can only
7232000	7234000	work on the server
7234000	7236000	right, so because it uses, like, node
7236000	7238000	or something, so it actually, like, this
7238000	7240000	is why it errors
7240000	7242000	and so the way
7242000	7244000	you would fix it is
7244000	7246000	you can
7246000	7248000	but, and, like, you're
7248000	7250000	the component structure that you want to have
7250000	7252000	looks like
7252000	7254000	this, so
7254000	7256000	this is what you're trying to do
7256000	7258000	but the problem is, like
7258000	7260000	this is a client component
7260000	7262000	and so you can't import the server component
7262000	7264000	from client component
7264000	7266000	but what you can do is
7266000	7268000	keep the component structure
7268000	7270000	kind of
7270000	7272000	the same
7272000	7274000	except you render
7274000	7276000	there's not a great way to show it
7276000	7278000	but they kind of
7278000	7280000	render it
7280000	7282000	let me try to
7282000	7284000	make this a bit nicer
7288000	7290000	I don't know why this didn't work
7290000	7292000	let me just show it in code
7292000	7294000	and then I'll try to redraw the picture
7294000	7296000	so in code what you do
7296000	7298000	is you
7298000	7300000	so you go back
7300000	7302000	to here, so
7302000	7304000	we go back to searchable
7304000	7306000	album list, we can't render
7306000	7308000	Pokemon here because it's a server component
7308000	7310000	so what we're going to do instead
7310000	7312000	we're going to make a hole in our component
7312000	7314000	so we're going to accept children as a prop
7314000	7316000	from above
7316000	7318000	so now we
7318000	7320000	it's just like, you know, it's the same way
7320000	7322000	it's not server component specific thing
7322000	7324000	it's just how you make a hole in the component
7324000	7326000	that the parent can fill in
7326000	7328000	and so we copy and paste
7328000	7330000	Pokemon again, we
7330000	7332000	go back to our server component
7332000	7334000	we paste Pokemon import here
7334000	7336000	and so we
7336000	7338000	this is not necessary
7338000	7340000	and so what we do is this
7340000	7342000	we pass Pokemon as a child
7342000	7344000	to searchable album list
7344000	7346000	and so
7346000	7348000	yeah
7348000	7350000	and so I think this should work
7350000	7352000	if you, I don't know, can you try it
7352000	7354000	yeah
7354000	7356000	let's give it a try
7356000	7358000	and also just for my own
7358000	7360000	sanity, I just want to rename
7360000	7362000	the component
7362000	7364000	if anyone's popping in, because apparently there's
7364000	7366000	2,000 people
7366000	7368000	if that's true
7368000	7370000	hello, and thank you
7370000	7372000	so much
7372000	7374000	let's pass that in
7374000	7376000	so this is a file system call
7376000	7378000	that we're passing down as a prop basically
7378000	7380000	in order to slot it into our page
7380000	7382000	so I'll go ahead and do that
7382000	7384000	and hopefully that's
7384000	7386000	everything working
7386000	7388000	so we head over here
7388000	7390000	we should see that
7390000	7392000	and then, oh no, things have happened
7392000	7394000	okay, that's
7394000	7396000	it's just trying to fetch a file that it can't find
7396000	7398000	yeah, that's just me
7398000	7400000	getting file paths wrong
7400000	7402000	I'll head over here
7402000	7404000	and because it gets built to a dist folder
7404000	7406000	it's actually different, that's the issue
7406000	7408000	there we go
7408000	7410000	alright, so now we actually get
7410000	7412000	the readout from the file system
7412000	7414000	passed down
7414000	7416000	the server component output
7416000	7418000	so the thing that
7418000	7420000	in our case is just
7420000	7422000	it's reading from a file, but
7422000	7424000	it's kind of stuffed into
7424000	7426000	between the parts
7426000	7428000	the client parts
7428000	7430000	and the way we can maybe
7430000	7432000	like the way
7432000	7434000	let me try to update my diagram
7434000	7436000	so in
7436000	7438000	this example
7438000	7440000	if I'm using blue
7440000	7442000	for
7442000	7444000	so we've moved
7444000	7446000	you see the way we import things
7446000	7448000	has changed, right, so the component
7448000	7450000	tree is still the same
7450000	7452000	like the pokemon is kind of rendered
7452000	7454000	inside of searchable album list
7454000	7456000	but the way the imports
7456000	7458000	are structured is that actually
7458000	7460000	root.server.js
7460000	7462000	imports searchable
7462000	7464000	album list and it also
7464000	7466000	imports pokemon.js
7466000	7468000	sorry
7468000	7470000	it's not pokemon anymore
7470000	7472000	it's searchable
7472000	7474000	so yeah, I'm going to change that here as well
7474000	7476000	and so it
7476000	7478000	it imports this file as well
7478000	7480000	and the use client
7480000	7482000	is only
7482000	7484000	let me take this
7484000	7486000	so now use client works because
7486000	7488000	I think I can just change this
7488000	7490000	to like blue, right?
7490000	7492000	sorry, I forgot about
7492000	7494000	the
7494000	7496000	so it's kind of
7496000	7498000	like an island, yeah, sort of
7498000	7500000	like anything imports will also
7500000	7502000	be like in the client bundle
7502000	7504000	but then the remaining stuff like
7504000	7506000	that
7506000	7508000	still executes
7508000	7510000	on the server only and so that's
7510000	7512000	why it works
7512000	7514000	yeah, exactly
7514000	7516000	and I mean you're using all the terms
7516000	7518000	that we've used at Astro
7518000	7520000	I was kind of freaking out a little bit when you said
7520000	7522000	donut islands on a stream the other day
7522000	7524000	I was like that's what we call them
7524000	7526000	where what you're doing is
7526000	7528000	you've created this
7528000	7530000	an island of client-side
7530000	7532000	logic and you
7532000	7534000	want to pass something through a hole
7534000	7536000	in the middle as a prop
7536000	7538000	where really anything can be
7538000	7540000	a prop that's passed down, it can be
7540000	7542000	data or it can be JSX
7542000	7544000	and in this case that's what
7544000	7546000	React is doing, like Bjork album has
7546000	7548000	become
7548000	7550000	a prop that is going to
7550000	7552000	render this stuff out on the server
7552000	7554000	get that data and then
7554000	7556000	pass it into the client
7556000	7558000	so that's another thing about fetching too
7558000	7560000	what's going to happen is it's going to fetch all the albums
7560000	7562000	in this setup right now
7562000	7564000	then it's going to fetch the Bjork album
7564000	7566000	with the file system call
7566000	7568000	and once both of those are resolved
7568000	7570000	it'll pass this guy down
7570000	7572000	do I have that right?
7572000	7574000	not quite, so in this example
7574000	7576000	I think if we
7576000	7578000	specifically talk about the ordering
7578000	7580000	I believe it will
7580000	7582000	try the
7582000	7584000	oh yeah
7584000	7586000	because await is
7586000	7588000	above it
7588000	7590000	so it's going to fetch the list of
7590000	7592000	albums and then it's going to
7592000	7594000	get here, it's going to render the Bjork
7594000	7596000	album and then it's going to tell
7596000	7598000	the client, hey here's
7598000	7600000	the thing you should slot into
7600000	7602000	the donut and here are
7602000	7604000	other, because children
7604000	7606000	is just another prop
7606000	7608000	there is actually no specific
7608000	7610000	it could have been called
7610000	7612000	donut content
7612000	7614000	equals this
7614000	7616000	right, and then you would
7616000	7618000	you would also
7618000	7620000	because it's just a prop that you pass
7620000	7622000	and then with
7622000	7624000	server components, when it
7624000	7626000	meets a client component
7626000	7628000	with a bunch of props
7628000	7630000	it tries to serialize those
7630000	7632000	props into JSON
7632000	7634000	and when it meets more JSX
7634000	7636000	it's like, oh I guess I have more server things to do
7636000	7638000	so that's why it kind of steps into
7638000	7640000	the Bjork album and tries to resolve that
7640000	7642000	and that becomes part of the stream
7642000	7644000	so that's how it works
7644000	7646000	very cool stuff
7646000	7648000	and yeah I was
7648000	7650000	hoping these devlogs would kind of show you
7650000	7652000	that but I think these headers are
7652000	7654000	completely wrong, the important part here
7654000	7656000	is like, well what's
7656000	7658000	coming down the wire on this part
7658000	7660000	and I hope you can still see it, there we go
7660000	7662000	maybe we can make
7662000	7664000	the, I think it's just confusing that
7664000	7666000	it's such a long output
7666000	7668000	let's just slice
7668000	7670000	the first 10 letters
7670000	7672000	or something like this, is that
7672000	7674000	how you, no I think
7674000	7676000	0, 10, maybe something like this
7676000	7678000	oh yeah we can do that too
7678000	7680000	so maybe let's look for
7680000	7682000	let's have a look at what's happening
7682000	7684000	in the dev panel
7686000	7688000	maybe also let's show just
7688000	7690000	one first album
7690000	7692000	so that we
7692000	7694000	don't have so much to read so I'm gonna make
7694000	7696000	it like albums, album
7696000	7698000	0, so I've dated
7698000	7700000	that you only see one
7700000	7702000	nice, okay
7702000	7704000	and let's now have a look at what's actually
7704000	7706000	happening in the
7706000	7708000	response from the beginning
7708000	7710000	yeah
7710000	7712000	so I mean what I'm seeing
7712000	7714000	is it starts from showing
7714000	7716000	you welcome to server components
7716000	7718000	then we show our loading spinner and we're gonna
7718000	7720000	wait for the next chunk to come down to replace
7720000	7722000	that loading spinner
7722000	7724000	and that's actually here
7724000	7726000	interestingly, so the 4 and the
7726000	7728000	3 are a little out of order with what it
7728000	7730000	decided, it can always
7730000	7732000	change, but the client part
7732000	7734000	is just gonna be an import
7734000	7736000	so this is gonna go import that
7736000	7738000	file and we don't care what it does
7738000	7740000	we're just gonna import it and assume it's browser
7740000	7742000	ready javascript that we can throw on there
7742000	7744000	and the
7744000	7746000	information is gonna be there
7746000	7748000	maybe the way I would describe
7748000	7750000	it is, if you scroll back
7750000	7752000	up a little bit
7752000	7754000	in the
7754000	7756000	response, notice that
7756000	7758000	in the protocol we have
7758000	7760000	for example like h1 or
7760000	7762000	there's like names of
7762000	7764000	the tags, right, so we
7764000	7766000	kind of say, this is a react element
7766000	7768000	this is a part of the react tree that's like
7768000	7770000	h1, but then
7770000	7772000	if we also want to be able to
7772000	7774000	say, here's
7774000	7776000	a react component
7776000	7778000	you need to download
7778000	7780000	from a script tag
7780000	7782000	and render, and so if you look a little
7782000	7784000	bit below
7784000	7786000	where it says later response
7786000	7788000	instead of h1, you see
7788000	7790000	this $l4
7790000	7792000	which is again implementation detail, it doesn't
7792000	7794000	actually matter, but this is
7794000	7796000	a reference to the
7796000	7798000	previous thing in the response
7798000	7800000	so instead of h1, you're rendering
7800000	7802000	searchable album list
7802000	7804000	so this instruction tells react, here's
7804000	7806000	where to download this code, it exists
7806000	7808000	in this script tag
7808000	7810000	so this is what I meant
7810000	7812000	by automatic code splitting
7812000	7814000	because if we remove
7814000	7816000	searchable, like if we edit our
7816000	7818000	server with
7818000	7820000	component for example
7820000	7822000	to check your
7822000	7824000	privileges and be like, if you're not an admin
7824000	7826000	don't show searchable
7826000	7828000	album list, then
7828000	7830000	the server will not send the instruction
7830000	7832000	to download searchable album list
7832000	7834000	so you wouldn't even have it, you know, you wouldn't
7834000	7836000	load that bundle at all
7836000	7838000	because it's just not necessary
7838000	7840000	so this is what I mean by automatic code splitting
7840000	7842000	but yeah, other
7842000	7844000	than that, it kind of says
7844000	7846000	the later part of the tree is
7846000	7848000	this module called searchable album list
7848000	7850000	that exists in your bundle
7850000	7852000	in your example, it seems like
7852000	7854000	it's like a separate file
7854000	7856000	like in optimized bundler
7856000	7858000	you would have them split into chunks
7858000	7860000	that have more than
7860000	7862000	one component of course in them, otherwise
7862000	7864000	you'd be downloading too many script tags
7864000	7866000	but yeah, you can see
7866000	7868000	it says render this thing
7868000	7870000	that's like a client component
7870000	7872000	and here are its
7872000	7874000	props, and so you see album's prop
7874000	7876000	contains the
7876000	7878000	album stuff
7878000	7880000	and then if you scroll down
7880000	7882000	it says children L5
7882000	7884000	which is like
7884000	7886000	reference to some content chunk
7886000	7888000	that arrives later
7888000	7890000	It's actually the Bjork album, but we
7890000	7892000	chopped off very few characters
7892000	7894000	Yeah, yeah
7894000	7896000	I might bump that to like 50 or something
7896000	7898000	and then it'll show you just a little bit
7898000	7900000	it actually shows you a lot more, doesn't it?
7900000	7902000	Oh yeah, right here, so this is the later later
7902000	7904000	chunk once that is resolved
7904000	7906000	and that gets
7906000	7908000	passed in as a prop
7908000	7910000	it gets harder to trace the more components you have obviously
7910000	7912000	which makes sense
7912000	7914000	because this is just a dump of what it's actually sending down
7914000	7916000	but I see what you mean
7916000	7918000	like oh, it would be right here
7918000	7920000	so the children of this
7920000	7922000	component are going to be 5
7922000	7924000	whenever it resolves, and then here it is
7924000	7926000	here is that dump
7926000	7928000	from the Bjork album file
7928000	7930000	and we're going to pass it into this component
7930000	7932000	which I think we can trace back up
7932000	7934000	to
7934000	7936000	somewhere
7936000	7938000	5 is
7938000	7940000	right at the end
7940000	7942000	5 is children L5
7942000	7944000	Yep, and that's being
7944000	7946000	passed into searchable album list
7946000	7948000	so the numbers correspond
7948000	7950000	where it's like that's the data
7950000	7952000	that's the children prop that we're going to pass in
7952000	7954000	and all of this corresponds to number 4
7954000	7956000	which is
7956000	7958000	the actual album list that we're rendering
7958000	7960000	onto the page
7960000	7962000	and all of this is
7962000	7964000	composable, so of course if you put
7964000	7966000	suspense
7966000	7968000	around the Bjork album
7968000	7970000	now, so you do
7970000	7972000	like, I don't know
7972000	7974000	let me try to
7974000	7976000	do something here
7980000	7982000	I'm also forcing
7982000	7984000	Dan Abramov to use VS Code, I'm sorry
7984000	7986000	people, are you a Vim user?
7986000	7988000	No, no, I can't
7988000	7990000	but I'm a happy
7990000	7992000	Sublime user, I don't understand why it keeps
7992000	7994000	trying to close my tags, like it never
7994000	7996000	does it the way that I want
7996000	7998000	Yeah, it's a Prime Machine raid
7998000	8000000	so I have to ask about Vim, so
8000000	8002000	it's neither, you use Sublime tags, interesting
8002000	8004000	So I'm also
8004000	8006000	going to add an artificial delay
8006000	8008000	here so that we
8008000	8010000	can, let's say, wait for
8012000	8014000	wait for like 2 seconds
8014000	8016000	like imagine this file system
8016000	8018000	call is super expensive
8018000	8020000	so maybe let's have a look at what
8020000	8022000	happens after this
8024000	8026000	Yeah, let's see what happens
8026000	8028000	Okay, something
8028000	8030000	failed with just parsing
8030000	8032000	the file
8032000	8034000	Don't know what happened there, let me double check
8034000	8036000	It might have tried to save at the wrong time
8036000	8038000	I know VS Code can get out of sync with that
8038000	8040000	Yeah, there we go
8040000	8042000	Okay, and yeah, now we have this out of order
8042000	8044000	streaming setup
8044000	8046000	where when you load the page first
8046000	8048000	it loads everything
8048000	8050000	then it does the file system call and it slots
8050000	8052000	it in here later
8052000	8054000	while preserving the other markup
8054000	8056000	that you have
8056000	8058000	Yeah, and so the cool
8058000	8060000	about it from my perspective is
8060000	8062000	like in
8062000	8064000	you know, we parse some
8064000	8066000	server stuff that still might be
8066000	8068000	waiting for something, but we kind of
8068000	8070000	unblock the rest of the
8070000	8072000	even like client stuff from rendering by
8072000	8074000	just putting suspense in there
8074000	8076000	Yeah, exactly
8076000	8078000	It's the easiest switch to slot into
8078000	8080000	where the default is like wait for everything
8080000	8082000	which is usually what you want so you don't
8082000	8084000	have layout shift, and then it's like
8084000	8086000	well actually I do have
8086000	8088000	I actually have a way to handle layout shift
8088000	8090000	I have like a loading spinner that's a perfectly sized
8090000	8092000	skeleton, so I'm going to see
8092000	8094000	Yeah, here it's not really ideal
8094000	8096000	what we're doing where it like bops things
8096000	8098000	down the page as soon as it comes in
8098000	8100000	because you know, if that's like above the
8100000	8102000	fold on your hero banner
8102000	8104000	you probably want to have like a loading state
8104000	8106000	that's matched up to it
8106000	8108000	Yeah
8108000	8110000	So I don't know how much
8110000	8112000	time to have
8112000	8114000	but how deep do we want to go
8114000	8116000	because it would be fun to also
8116000	8118000	like I added a bunch of hacks just to
8118000	8120000	kind of show the idea
8120000	8122000	but I think it might be fun to
8122000	8124000	get rid of the weird
8124000	8126000	PR problem component and instead look at
8126000	8128000	what it would look like to
8128000	8130000	refetch, like to do
8130000	8132000	search on the server, I think that's like one
8132000	8134000	That would be very cool
8134000	8136000	Yeah, I mean I only
8136000	8138000	booked two hours to like be conscious of your time
8138000	8140000	but if you're good to keep going, I am
8140000	8142000	as well
8142000	8144000	I think I have some more time
8144000	8146000	I don't have to run anywhere
8146000	8148000	Okay
8148000	8150000	So to do that, I'm wondering if
8150000	8152000	we can, should we hop over
8152000	8154000	to the Next.js example to try server search
8154000	8156000	or are we still comfortable here?
8156000	8158000	I think we can try to do it here
8158000	8160000	like if it doesn't work, we can do
8160000	8162000	you know, we can use Next.js but now I'm kind of like
8162000	8164000	you seem to have a setup that kind of
8164000	8166000	works and I like the
8166000	8168000	you know, I like your
8168000	8170000	I like your, it's
8170000	8172000	no small effort because like none of it is documented
8172000	8174000	so it's
8174000	8176000	yeah, it is
8176000	8178000	impressive, so I'd say
8178000	8180000	let's keep going until your setup breaks
8180000	8182000	I like it, it's gotten
8182000	8184000	close, it's definitely gotten close
8184000	8186000	but the duct tape's holding
8186000	8188000	Yeah, I really like your development panel
8188000	8190000	I think I'm a bit conflicted
8190000	8192000	about it because I'm worried
8192000	8194000	that like people on the stream would be like
8194000	8196000	oh, this is so complicated, like
8196000	8198000	this whole output, but it's really
8198000	8200000	kind of like reading the network tab
8200000	8202000	so the point is not, you know
8202000	8204000	you wouldn't see this as a user
8204000	8206000	but I do see the value, you know, as an
8206000	8208000	instructional tool of here's how it actually
8208000	8210000	works, because it's not that
8210000	8212000	complicated if you think, you know
8212000	8214000	about what it's
8214000	8216000	trying to do
8216000	8218000	Yeah, exactly. Yeah, the dev panel
8218000	8220000	was really, I just intended it for
8220000	8222000	like the first 30 minutes to show
8222000	8224000	oh, here's the data streaming down and now
8224000	8226000	it waits for suspense, but it's like
8226000	8228000	it's also kind of useful to see like how much
8228000	8230000	stuff is coming down, like when we
8230000	8232000	pass down albums as a prop
8232000	8234000	suddenly the response got huge
8234000	8236000	because now it's passing down like all the songs
8236000	8238000	and stuff that you don't care about, so
8238000	8240000	it's useful to just see like volume and time
8240000	8242000	not necessarily the details
8242000	8244000	so maybe just like showing
8244000	8246000	well, it's always dangerous to show kilobyte
8246000	8248000	numbers because they're lies, but there's probably
8248000	8250000	a way to do it
8250000	8252000	Yeah, I'd love to see them both
8252000	8254000	so let's
8254000	8256000	let me just clean up, I want to
8256000	8258000	get rid of this part that doesn't
8258000	8260000	make sense because we just added it
8260000	8262000	as a demo, so let me
8262000	8264000	clean it back up to what
8264000	8266000	we had that
8266000	8268000	still made sense
8268000	8270000	as an example, I'm gonna get
8270000	8272000	rid of this children prop as well
8274000	8276000	Yeah, so I think
8276000	8278000	we should be back to our previous
8278000	8280000	example
8280000	8282000	and instant
8282000	8284000	search
8284000	8286000	and yeah, do you want to
8286000	8288000	do you want to try to add the
8288000	8290000	like the add in the
8290000	8292000	so what do we want
8292000	8294000	to do, right? Like we want to
8296000	8298000	we want to refetch
8298000	8300000	the server component tree
8300000	8302000	when you type into the input
8302000	8304000	right? Right
8304000	8306000	so maybe we want to
8306000	8308000	do like search on the server
8308000	8310000	maybe we show like just the first
8310000	8312000	like, I don't
8312000	8314000	know, two results
8314000	8316000	it doesn't seem to have like much data here
8316000	8318000	anyway, right? But maybe we
8318000	8320000	Yeah, there's only three albums
8320000	8322000	Okay, yeah
8322000	8324000	Yeah, so do you want to
8324000	8326000	do you want to drive
8326000	8328000	edit and we'll see
8328000	8330000	where it becomes confusing
8330000	8332000	I can try to do that
8332000	8334000	and one thing before we go
8334000	8336000	I'm actually going to
8336000	8338000	make the dev panel just a little bit
8338000	8340000	less tall in case
8340000	8342000	we have issues with that
8342000	8344000	I, oh man, I thought it would be an easy switch
8344000	8346000	where did I put it
8346000	8348000	yeah, okay
8348000	8350000	72
8350000	8352000	yeah, alright
8352000	8354000	and it scrolls for the rest, perfect
8354000	8356000	so in order to
8356000	8358000	do something like that
8358000	8360000	well the first thing
8360000	8362000	I'm going to do, I guess
8362000	8364000	and this feels like a coding interview right now
8364000	8366000	I'm thinking, but
8366000	8368000	yeah, we can remove that
8368000	8370000	we're not going to use that anymore
8370000	8372000	no use state
8372000	8374000	the filter album function is fine
8374000	8376000	to keep around
8378000	8380000	and as you input things
8380000	8382000	I assume we're going to
8382000	8384000	well, if we put query parameters
8384000	8386000	on the top of the page, it's going to refresh the
8386000	8388000	browser on every
8388000	8390000	input, but if we did like
8390000	8392000	JSON requests, then we could avoid
8392000	8394000	refreshing the page every time
8394000	8396000	I don't know, there's two ways to do it
8396000	8398000	so I think
8398000	8400000	the, maybe you're kind of
8400000	8402000	approaching it from the perspective of like
8402000	8404000	how would I do this in a client-side application
8404000	8406000	so you're like
8406000	8408000	yeah, well I'm thinking form requests, I guess
8408000	8410000	like literally just using form action
8410000	8412000	and submitting it and using stuff
8412000	8414000	but I assume you have
8414000	8416000	something else in mind that isn't just a form action
8416000	8418000	yeah, so if form action
8418000	8420000	is usually used for stuff
8420000	8422000	like post, I guess
8422000	8424000	here we kind of just want to refresh
8424000	8426000	the output
8426000	8428000	so I think I would probably use get
8428000	8430000	but also form action
8430000	8432000	yes, like default browser
8432000	8434000	handling of forms, like that would reload
8434000	8436000	the page completely
8436000	8438000	so it makes sense that that's not
8438000	8440000	quite what we want
8440000	8442000	I think the
8444000	8446000	so let me maybe think a little bit
8446000	8448000	about this as well
8448000	8450000	so I think we still need
8450000	8452000	I think we still need
8452000	8454000	state, actually, because we want
8454000	8456000	the
8458000	8460000	well, not
8460000	8462000	okay
8468000	8470000	okay, so there's a question
8470000	8472000	of like how deep
8472000	8474000	do we want, because this is the stuff that
8474000	8476000	Next.js or an RSE
8476000	8478000	framework is supposed to handle
8478000	8480000	so I think there's kind of two
8480000	8482000	levels to this, like we can
8482000	8484000	do this with
8484000	8486000	like do we want to hook it up to the URL
8486000	8488000	because one option is to
8488000	8490000	hook it up to the URL
8490000	8492000	and other options like not to
8492000	8494000	I think
8494000	8496000	probably not hooking it up to the URL
8496000	8498000	might be a bit less code
8498000	8500000	so maybe we
8500000	8502000	sure, yeah
8502000	8504000	maybe that's
8504000	8506000	maybe that's what
8506000	8508000	yeah, because I guess what I'm wondering
8508000	8510000	is, because what we're trying to avoid is
8510000	8512000	passing the whole album list as
8512000	8514000	a prop and doing the filter logic on
8514000	8516000	the client, so I assume
8516000	8518000	that would also mean if we're not passing down the
8518000	8520000	prop, where
8520000	8522000	if we're doing anything client-side, it's just
8522000	8524000	going to be the search box, but not the
8524000	8526000	Yeah, exactly, yeah, so maybe let's
8526000	8528000	do you want to like rearrange
8528000	8530000	the code a little bit, like I think I would
8530000	8532000	just move the
8532000	8534000	yeah, so maybe we do like
8534000	8536000	the search box component
8536000	8538000	and we make that a client component
8538000	8540000	and then we extract it to like a new
8540000	8542000	file and then we keep this file
8542000	8544000	as it is
8544000	8546000	Yeah, let's go ahead and do that
8546000	8548000	I'll make a search over here
8550000	8552000	and pull that out
8552000	8554000	and also, I'm actually just going to
8554000	8556000	undo my way back here
8558000	8560000	I won't save that because I think that
8560000	8562000	breaks everything
8562000	8564000	Okay, I'm in the search now
8566000	8568000	and in here, I will
8568000	8570000	do input
8570000	8572000	Oh, it doesn't know about state yet
8572000	8574000	so let me introduce that
8582000	8584000	This is so much fun, I'm really enjoying it
8586000	8588000	Oh, it remembered my styles
8588000	8590000	It remembered my styles
8590000	8592000	Oh, that's so good
8592000	8594000	Okay
8594000	8596000	I don't even understand, like, you're
8596000	8598000	using Copilot or something
8598000	8600000	because I've never used it, I don't even know how
8600000	8602000	what it is
8602000	8604000	So, I think Copilot
8604000	8606000	and actually the Prime Engine had a good
8606000	8608000	video on this, where like for
8608000	8610000	migrations, it's really good
8610000	8612000	at knowing context, of like
8612000	8614000	it knows I typed a search box before
8614000	8616000	and now it's picking up like, oh, you're probably
8616000	8618000	extracting this to a separate component
8618000	8620000	Let me pull in those styles that you wrote earlier
8620000	8622000	So does it like
8622000	8624000	stuff it into the prompt? Like, how
8624000	8626000	does it keep track of the context?
8626000	8628000	Well, it understands
8628000	8630000	your code base, as far as I know
8630000	8632000	and it is
8632000	8634000	I don't know how much of it is local
8634000	8636000	versus network requests
8636000	8638000	but, yeah
8638000	8640000	We should have a dev panel to see
8640000	8642000	what it sends and what it receives
8642000	8644000	That would be nice to know
8644000	8646000	because like, yeah
8646000	8648000	if it's sending your code base over to
8648000	8650000	Wired, that is a massive problem
8650000	8652000	I don't know what it
8652000	8654000	does. That's the scary part
8654000	8656000	I don't know what it says
8656000	8658000	It's fine. Yeah, so let's
8658000	8660000	Okay, let's go. Let's get this working
8660000	8662000	Yep
8662000	8664000	And everyone is searching for what my
8664000	8666000	theme and font are. Just calm down
8666000	8668000	I'll make extensions someday, people
8668000	8670000	But I use Monolisa font and the
8670000	8672000	Houston theme, made by Astro
8672000	8674000	and by using it, you get access
8674000	8676000	to this beautiful little Houston floating guy
8676000	8678000	in your editor, anytime you want it
8678000	8680000	So, you know, go ahead and use that
8680000	8682000	Dan, you actually can't see that, sadly
8682000	8684000	No, no, I see the default theme
8684000	8686000	Yeah, dang
8686000	8688000	Yeah, we have this little
8688000	8690000	Houston animation
8690000	8692000	where it's just a Houston panel, if you want to
8692000	8694000	just have him watch what you're doing
8694000	8696000	and he gets progressively more sad
8696000	8698000	the more syntax errors you have
8698000	8700000	Okay. Yeah, I have no idea
8700000	8702000	what you're talking about, but
8702000	8704000	Don't worry about it
8704000	8706000	I can send a screenshot later
8706000	8708000	Okay, okay
8708000	8710000	But yeah, we have our search box here
8710000	8712000	and
8712000	8714000	well, we can render
8714000	8716000	that inside of our root server, I guess
8716000	8718000	We can hop all the way back
8718000	8720000	Well, why though?
8720000	8722000	Can't we just render it in
8722000	8724000	the component
8724000	8726000	you extracted it from?
8726000	8728000	That's a good point
8728000	8730000	You already have it here
8730000	8732000	And I guess our filter code
8732000	8734000	is going to go over there, too
8734000	8736000	No, I mean, I don't think you have
8736000	8738000	to change anything
8738000	8740000	Oh wait, no, it doesn't go over there, that's the whole point
8740000	8742000	Yeah, yeah
8742000	8744000	Here is where it goes in
8744000	8746000	Yeah
8748000	8750000	Yeah, so the problem
8750000	8752000	right now is that you don't really have
8752000	8754000	Yeah, you don't really have filtered albums
8754000	8756000	yet, but we'll add it back
8756000	8758000	later
8758000	8760000	So I think for
8762000	8764000	I would write it like this
8768000	8770000	And then the thing you want to
8770000	8772000	render is this
8772000	8774000	Let's just verify that it still works
8776000	8778000	Yeah, it is working
8780000	8782000	But then typing into the input
8782000	8784000	doesn't really do anything, right?
8784000	8786000	Right
8786000	8788000	So I think maybe
8788000	8790000	again, there's two ways we could go
8790000	8792000	about this, either
8792000	8794000	with the URL or
8794000	8796000	without
8796000	8798000	I think with the URL probably makes
8798000	8800000	more sense, because if we're
8800000	8802000	going
8802000	8804000	to show what frameworks do, we might as well
8804000	8806000	just try to do it
8806000	8808000	ourselves
8808000	8810000	So maybe let's make it so that when you type
8810000	8812000	into the input
8812000	8814000	let's make the URL update
8814000	8816000	using client-side
8816000	8818000	like history.pushState
8820000	8822000	We could use the history package
8822000	8824000	I think it's a bit more
8826000	8828000	But we could probably just use the browser API as well
8828000	8830000	Let's start with the browser API and then see
8830000	8832000	if we need anything more
8832000	8834000	But let's try to make it so that when you type
8834000	8836000	into the input, we also update
8836000	8838000	the URL
8838000	8840000	Gotcha
8840000	8842000	Yeah, for something like that
8842000	8844000	On
8844000	8846000	change, sure
8846000	8848000	Basically that
8848000	8850000	But then we want to also
8850000	8852000	I have to think about this
8852000	8854000	So is it window.location
8854000	8856000	pushState
8856000	8858000	It's been a while since I've used this API
8858000	8860000	I think it's history.pushState
8860000	8862000	Yeah, I think it is
8862000	8864000	history.
8864000	8866000	Yep, yep, yep
8866000	8868000	pushState
8868000	8870000	I think
8870000	8872000	So there's like pushState and a replaceState
8872000	8874000	I don't know if the search bar
8874000	8876000	is like
8876000	8878000	Yeah, that will
8878000	8880000	We don't want history
8880000	8882000	as we type
8882000	8884000	So maybe let's check
8884000	8886000	if this works
8886000	8888000	I don't actually see your address bar
8888000	8890000	so I don't know if it works, you'll have to tell me
8890000	8892000	It's really tiny at the top
8892000	8894000	but it's up there
8894000	8896000	When you bump the font size
8896000	8898000	it doesn't bump the size of that, sadly
8898000	8900000	I don't see it because
8900000	8902000	it doesn't share
8902000	8904000	Oh, it doesn't
8904000	8906000	That's so silly
8906000	8908000	Well, it is working
8908000	8910000	I can tell you that much
8910000	8912000	It is working
8912000	8914000	Just putting up search equals
8914000	8916000	Okay, I'll have to believe you on this
8916000	8918000	So
8918000	8920000	Okay, so maybe let's
8920000	8922000	I think I might
8922000	8924000	have to drive this a little bit
8924000	8926000	if you don't mind
8926000	8928000	I will need your help
8928000	8930000	as well, I think, because I
8930000	8932000	can only do the parts that I know about
8932000	8934000	So I'm gonna
8934000	8936000	go to the thing
8936000	8938000	called root.client.js
8938000	8940000	and it's kind of interesting
8940000	8942000	You do have
8942000	8944000	kind of the server entry point and the client
8944000	8946000	entry point
8946000	8948000	and it's a bit confusing because conceptually
8948000	8950000	it's the server entry point that's
8950000	8952000	the real root of your app
8952000	8954000	It's the real root
8954000	8956000	where things start conceptually
8956000	8958000	but then
8958000	8960000	in reality, you do need this bootstrapping
8960000	8962000	thing that makes
8962000	8964000	this real root appear somewhere on the page
8964000	8966000	Yeah, what I really want to call it is
8966000	8968000	bootstrapping and index
8968000	8970000	Yeah
8970000	8972000	I think that's what it is
8972000	8974000	It's also kind of like, if you think about
8974000	8976000	how would it work with nested routing
8976000	8978000	you would also
8978000	8980000	have the server
8980000	8982000	be the root
8982000	8984000	It would also be possible to start
8984000	8986000	from the middle of
8986000	8988000	some nested route and treat that
8988000	8990000	as a root, and that's what happens with
8990000	8992000	navigations in NextAppRouter
8992000	8994000	and then this thing
8994000	8996000	that you have here, this bootstrapping
8996000	8998000	thing, that would turn
8998000	9000000	into the client-side
9000000	9002000	routing part
9002000	9004000	that bootstraps
9004000	9006000	the top-level thing, but also
9006000	9008000	bootstraps these holes
9008000	9010000	and manages
9010000	9012000	how to slot in the server responses
9012000	9014000	into them
9014000	9016000	This is hidden in a framework, that's what
9016000	9018000	Next.js does, for example
9018000	9020000	but we're going to do a simple
9020000	9022000	version of that where it only bootstraps
9022000	9024000	them at the top, but I'm just saying
9024000	9026000	if you were building a nested router
9026000	9028000	you would have to
9028000	9030000	have a very similar thing
9030000	9032000	managing it somewhere
9032000	9034000	around your
9034000	9036000	route holes
9036000	9038000	to replace them
9038000	9040000	if necessary
9040000	9042000	But yeah, so
9042000	9044000	you have this thing where here
9044000	9046000	so these are internal APIs
9046000	9048000	this file is the
9048000	9050000	kind of stuff that, as a product developer, you
9050000	9052000	wouldn't touch or do any of
9052000	9054000	that, and I also
9054000	9056000	want to make clear that
9056000	9058000	all of this stuff below is
9058000	9060000	for debugging, because it's
9060000	9062000	your dev panel component
9062000	9064000	so it actually has nothing to do with React
9064000	9066000	but then
9066000	9068000	as a framework developer
9068000	9070000	this part is kind of the bootstrap
9070000	9072000	where you're like
9072000	9074000	okay, here's where
9074000	9076000	I'm going to move this here because it's unrelated
9076000	9078000	Yep
9078000	9080000	Like
9080000	9082000	Honestly, all of this is unrelated
9082000	9084000	This was me trying to
9084000	9086000	I never finished it
9086000	9088000	Wait, show me
9088000	9090000	what did you delete?
9090000	9092000	Yeah, this was some code I was writing
9092000	9094000	to allow multiple routes
9094000	9096000	and all it was really doing is getting
9096000	9098000	the current window location and fetching the
9098000	9100000	file that corresponds to that location
9100000	9102000	Okay, yeah, no, we don't need
9102000	9104000	that, but we are going to need something
9104000	9106000	similar, but let's
9106000	9108000	delete this for now, it's fine, let's delete this
9110000	9112000	So what I'm going to do is
9112000	9114000	what it currently does
9114000	9116000	I don't love this, can I just rename this
9116000	9118000	to slash
9118000	9120000	Yeah
9120000	9122000	I'll see what source code needs to be fixed to make that work
9122000	9124000	but yeah, that's what it is
9124000	9126000	I think it's in the
9126000	9128000	handler, right?
9128000	9130000	Yeah, I think it might just be this
9130000	9132000	So maybe let's change this
9132000	9134000	to rsc, let's verify that it
9134000	9136000	still loads
9136000	9138000	I mean, obviously it doesn't have to be called that way
9138000	9140000	I just kind of want to stress that
9140000	9142000	Okay, yeah, so there's just one
9142000	9144000	endpoint, it's not like multiple files
9144000	9146000	or anything, it's just one endpoint
9146000	9148000	And so I'm going to make a react
9148000	9150000	component that's like
9150000	9152000	I don't know, I'm going to call it
9152000	9154000	like boots
9154000	9156000	I don't know, client
9156000	9158000	root or something like this
9158000	9160000	which is just this bootstrapping
9160000	9162000	thing
9162000	9164000	And currently
9166000	9168000	Yeah, I'm going to move
9168000	9170000	I'm going to move this a little bit, so I'll make it
9170000	9172000	render restrict
9172000	9174000	mode, and I'm just going to do this
9174000	9176000	client root thing here
9176000	9178000	Okay
9178000	9180000	Our
9180000	9182000	component
9182000	9184000	And then I'm going to
9184000	9186000	So again, this
9186000	9188000	is like create from fetch
9188000	9190000	This is like an internal API
9190000	9192000	for framework developers
9192000	9194000	This is the protocol reader
9194000	9196000	So we have a protocol writer
9196000	9198000	that runs on the server, so if you go
9198000	9200000	to
9200000	9202000	the
9202000	9204000	Yeah, so if you
9204000	9206000	go to the handler, this is where
9206000	9208000	you wrote this logic
9208000	9210000	for the actual handler
9210000	9212000	of this endpoint that runs
9212000	9214000	server components, you'll see
9214000	9216000	you have
9216000	9218000	So you call this react-server-dom
9218000	9220000	which is maybe a bit
9220000	9222000	confusing because people might think it's
9222000	9224000	like react-dom-server
9224000	9226000	I didn't know what to call it
9226000	9228000	Yeah, I don't know either
9228000	9230000	React-server-dom-webpack
9230000	9232000	And I thought, is that really what it is?
9232000	9234000	But that's the package
9234000	9236000	I don't think we actually figured out
9236000	9238000	how to name this thing
9238000	9240000	This is not
9240000	9242000	SSR, this is not
9242000	9244000	the react-dom-server
9244000	9246000	that emits HTML
9246000	9248000	This is the thing that emits
9248000	9250000	This is the protocol writer
9250000	9252000	This is the thing that executes
9252000	9254000	your server components
9254000	9256000	and emits this protocol
9256000	9258000	this streaming thing that you show
9258000	9260000	in the dev panel
9260000	9262000	And so the
9262000	9264000	it comes from this package
9264000	9266000	I don't actually think you need
9266000	9268000	that browser here, I think this should just work
9268000	9270000	Can you check if that
9270000	9272000	Oh, I guess I broke some other
9272000	9274000	I think it'll try to import
9274000	9276000	the node version, and that uses
9276000	9278000	pipes, and I was like, I think I can do it simpler
9278000	9280000	So I did it this way
9280000	9282000	Okay, cool
9282000	9284000	Alright, and then
9286000	9288000	Yeah, if I go to the correspondent
9288000	9290000	this is the reader
9290000	9292000	This is the thing that
9292000	9294000	reads the client protocol
9294000	9296000	and really, all it does
9296000	9298000	is it turns it into
9298000	9300000	JSX, essentially
9300000	9302000	So it converts the
9302000	9304000	it streams the output
9304000	9306000	from the server, and it converts it
9306000	9308000	to a tree of
9308000	9310000	lazy components that get
9310000	9312000	filled in later
9312000	9314000	And this is why
9314000	9316000	it's kind of funny, React
9316000	9318000	the React library
9318000	9320000	doesn't really have any code to support
9320000	9322000	server components
9322000	9324000	because it's
9324000	9326000	like, this ability to
9326000	9328000	render a tree from the server
9328000	9330000	it relies on exactly the same
9330000	9332000	mechanism that, for example, React.lazy
9332000	9334000	uses, which is just
9334000	9336000	this built-in support in React
9336000	9338000	to have a tree where some parts
9338000	9340000	are not ready, and then suspense will catch
9340000	9342000	them, and so this is the thing that
9342000	9344000	translates from the protocol
9344000	9346000	to a lazy React tree, and then
9346000	9348000	React knows how to deal with lazy trees
9350000	9352000	And so the
9352000	9354000	we could maybe
9354000	9356000	call this stream
9356000	9358000	create from fetch, and then you have
9358000	9360000	fetch from this
9360000	9362000	RSC endpoint, I think that's how it
9362000	9364000	worked, and
9364000	9366000	I guess we can just say this is
9366000	9368000	just JSX
9368000	9370000	maybe, well, lazy JSX
9370000	9372000	I don't know. Yeah, lazy JSX
9372000	9374000	Yeah, the best
9374000	9376000	way is like, that's the interpreter
9376000	9378000	that's going to take these instructions and
9378000	9380000	turn them into JSX, and that
9380000	9382000	is actually what we get
9382000	9384000	Yeah, so maybe let's see if
9384000	9386000	this works so far, because I'm going to
9386000	9388000	add a few things
9388000	9390000	Okay, can I
9390000	9392000	refresh it?
9392000	9394000	Yeah, it's working
9394000	9396000	Awesome, and so the thing that we want
9396000	9398000	to be able to do now is
9398000	9400000	before we deal with client-side
9400000	9402000	navigations and stuff, I think
9402000	9404000	what we want to do is just
9404000	9406000	to be able to pass
9406000	9408000	something during the initial load to the
9408000	9410000	server, right? That's the easiest part
9410000	9412000	It's like, if you have some
9412000	9414000	query in the query string and you
9414000	9416000	refresh the page, at least we should be
9416000	9418000	able to ask the server to
9418000	9420000	filter for that
9420000	9422000	It's like with manual refreshes for now
9422000	9424000	and then we'll fix that
9424000	9426000	So I think what we want to do is
9426000	9428000	we can look at
9428000	9430000	I don't actually remember
9430000	9432000	how to do it, but
9434000	9436000	Okay, so here's what I want
9436000	9438000	I want to
9440000	9442000	search equals
9442000	9444000	Okay, so
9444000	9446000	let's actually start there
9446000	9448000	I want to search for
9448000	9450000	what is it?
9450000	9452000	Yeah, let's say
9452000	9454000	fame, that's what I'm searching for
9454000	9456000	This is my search query
9456000	9458000	So I'm going to look for the album
9458000	9460000	of fame
9460000	9462000	And then I will go to
9462000	9464000	the server handler
9464000	9466000	So now we need to plumb that information
9466000	9468000	into your root server
9468000	9470000	component so that it knows
9470000	9472000	what the search
9472000	9474000	parameter is
9474000	9476000	And so I'll go to the
9476000	9478000	your server
9478000	9480000	handler. Again, this is the framework
9480000	9482000	part, like a framework
9482000	9484000	Yeah
9484000	9486000	And they have path name
9486000	9488000	So that we pass the query
9488000	9490000	Like we pass
9490000	9492000	all the query arguments as
9492000	9494000	props to
9494000	9496000	Yeah, it should be right up here
9496000	9498000	So it's just a web-friendly URL
9498000	9500000	So we can just do search params
9500000	9502000	and grab that
9504000	9506000	I'm so bad at these APIs
9506000	9508000	I'm like, I don't remember
9508000	9510000	I think it should be like has and get
9510000	9512000	in order to access
9512000	9514000	what we're looking for
9514000	9516000	Yeah, it can be turned into
9516000	9518000	just plain JSONs so that we can
9518000	9520000	spread it as props to the
9520000	9522000	Docker component
9522000	9524000	I think there's a way to do it
9524000	9526000	if you do like
9528000	9530000	Ah, there's a simple way
9530000	9532000	and I can't remember what it is
9532000	9534000	search params
9534000	9536000	JSON
9536000	9538000	equals, yes! That's it
9538000	9540000	Yeah, you convert it to an object
9540000	9542000	and then JSON stringify it, thanks
9542000	9544000	Well, okay, then you would have to parse it again
9544000	9546000	But
9546000	9548000	Hang on
9548000	9550000	No, just this
9550000	9552000	Yeah, just this
9554000	9556000	Okay, is that
9556000	9558000	Okay, we'll see
9558000	9560000	Let's see if it works
9560000	9562000	So now we want to
9562000	9564000	Yeah, and now we want to
9564000	9566000	This is your app here
9566000	9568000	This is the rooted-server.js expert
9568000	9570000	So this is your
9570000	9572000	It's actually
9572000	9574000	Oh, okay, you're calling it
9574000	9576000	I think that's a bit wrong
9576000	9578000	I mean, it ends up working
9578000	9580000	Yeah, I couldn't get it working without calling it
9580000	9582000	I don't know why
9582000	9584000	Like, I think this is supposed to work
9584000	9586000	So I think you're supposed to
9586000	9588000	I mean, you're like server root
9588000	9590000	That's how you call it, right?
9590000	9592000	That's just the expert of this thing
9592000	9594000	And I think you're supposed to be
9594000	9596000	Can I use just the expert?
9596000	9598000	Yeah, no
9598000	9600000	I don't know how to process on this thing
9600000	9602000	You could use react-create-element, right?
9602000	9604000	Yeah, yeah, that's what I'm going to do
9604000	9606000	So I'm going to do like
9606000	9608000	convert createElement
9608000	9610000	from react
9610000	9612000	And I'm going to do
9612000	9614000	createElement for server root
9614000	9616000	And I'm going to parse it
9616000	9618000	Well, I'm just going to parse
9618000	9620000	the search
9620000	9622000	params object as props
9622000	9624000	And then in the server root
9624000	9626000	I'm going to try to
9626000	9628000	read the
9628000	9630000	What did I call it?
9630000	9632000	I call it search
9632000	9634000	Which has nothing to do with search API
9634000	9636000	It's just like our variable name
9636000	9638000	And I'll say
9638000	9640000	we are
9640000	9642000	the bytes of keeping certain things
9642000	9644000	in the wrong place
9644000	9646000	I'm looking for search
9648000	9650000	So let's see if that works
9650000	9652000	Try to load it with like
9652000	9654000	search
9654000	9656000	Construct your search of undefined
9656000	9658000	Okay, so the props aren't being passed
9658000	9660000	but I think we have to restart
9660000	9662000	Because it's not going to
9662000	9664000	Okay!
9664000	9666000	Oh my god! It's working
9666000	9668000	Okay, nice, nice
9668000	9670000	Whoa! Oh, that's cool
9670000	9672000	Okay, so now your task
9672000	9674000	is to
9674000	9676000	I want you to do the
9676000	9678000	to take search into account
9678000	9680000	and do the filtering, like add the filtering back in
9680000	9682000	Mm-hmm
9682000	9684000	Yeah, that's interesting
9684000	9686000	Because I would want to do it from here, right?
9686000	9688000	Because I need to trigger a new
9688000	9690000	create from fetch
9690000	9692000	Well, let's not think about this yet
9692000	9694000	So for now I just want to do it for the first render
9694000	9696000	So it's not going to respond
9696000	9698000	to input, but let's just make it
9698000	9700000	respect the initial URL
9700000	9702000	Mm, okay
9702000	9704000	So for now
9704000	9706000	you just need to plumb down
9706000	9708000	We got it in the root components
9708000	9710000	Connect the logic so it actually does the search
9710000	9712000	on the server
9712000	9714000	Okay, so we would need
9714000	9716000	to pass this search down
9716000	9718000	Yeah
9718000	9720000	I mean, ideally a framework would make
9720000	9722000	So the way this works in Next
9722000	9724000	is they make it available as
9724000	9726000	import
9726000	9728000	I don't know, import search
9728000	9730000	part
9730000	9732000	I think there's some way to get it without
9732000	9734000	plumbing it down in Next
9734000	9736000	Mm-hmm
9736000	9738000	Maybe I'm confusing it with headers
9738000	9740000	I can actually check
9740000	9742000	Yeah, because you can't do hooks
9742000	9744000	when you're passing down server
9744000	9746000	contacts, that's still like an unexplored thing
9746000	9748000	Yeah
9748000	9750000	Yeah, okay
9750000	9752000	Page params are props
9752000	9754000	like they become props to your page
9754000	9756000	function, so it's
9756000	9758000	pretty much almost exactly
9758000	9760000	as Next.js would do it
9760000	9762000	So yeah
9762000	9764000	let's keep passing it down
9764000	9766000	So I do that
9766000	9768000	and
9768000	9770000	we've done that
9770000	9772000	I don't think you passed it to this album component
9772000	9774000	I think you missed it here
9774000	9776000	Oh, did I?
9776000	9778000	Okay
9778000	9780000	I passed it down to searchable album list
9780000	9782000	and I passed it to search
9782000	9784000	Yeah, but you don't pass it to album search
9784000	9786000	It's undefined
9786000	9788000	Oh, yeah
9788000	9790000	That's actually good, Squiggles
9790000	9792000	Yeah
9792000	9794000	Squiggles
9794000	9796000	Yeah, the squiggles are really annoying
9796000	9798000	There's some kind of thing in TypeScript
9798000	9800000	where we need a solution
9800000	9802000	to allow
9802000	9804000	async await
9804000	9806000	Right
9806000	9808000	Okay, and we have it
9808000	9810000	in our input right here
9810000	9812000	Okay, but we also want to have it
9812000	9814000	in the... wait, what did you do?
9814000	9816000	Let me see what you did
9816000	9818000	So this should...
9818000	9820000	Yeah, so that makes sure the input matches
9820000	9822000	what's actually being passed to the server
9822000	9824000	and now we can also use it here
9824000	9826000	which I assume is actually what you're asking for
9826000	9828000	to start with
9828000	9830000	So we have filtered albums
9830000	9832000	and that can just be
9832000	9834000	filter albums, pass in the search
9834000	9836000	Yep
9842000	9844000	Okay
9844000	9846000	It works
9846000	9848000	Nice
9848000	9850000	So it works for the first load
9850000	9852000	but then it doesn't... like if you type
9852000	9854000	if you type into the input
9854000	9856000	Yeah, it's not refetching
9856000	9858000	It's not refetching
9858000	9860000	Okay, so I'll try
9860000	9862000	the refetching piece for a little bit
9862000	9864000	So I think
9864000	9866000	for refetching
9866000	9868000	the way we would do it in the framework
9870000	9872000	That's my...
9872000	9874000	Wait, let me open the right file
9874000	9876000	Okay, so I'm going back to this
9876000	9878000	I don't actually know, do you see where I am
9878000	9880000	in VS Code?
9880000	9882000	How do you know which file I'm in?
9882000	9884000	Does it show you?
9888000	9890000	Or which part are you asking about?
9890000	9892000	Do you know where...
9892000	9894000	Do you track where I am in VS Code?
9894000	9896000	Oh yes
9896000	9898000	No, I can't. I'm in the file
9898000	9900000	Okay, cool
9900000	9902000	So what we want to do here
9902000	9904000	is essentially...
9904000	9906000	This is the framework bit
9908000	9910000	But what we want to do here
9910000	9912000	is we want to
9912000	9914000	replace this thing with
9914000	9916000	another stream essentially
9916000	9918000	and show that JSX tree
9918000	9920000	instead
9920000	9922000	So
9922000	9924000	the way we could do this
9924000	9926000	is... let me
9926000	9928000	think a little bit
9930000	9932000	So
9932000	9934000	I think
9934000	9936000	the way we would do it
9936000	9938000	let me write a little bit of code
9938000	9940000	So
9940000	9942000	I think we would hold the...
9942000	9944000	So we need to create a cache
9944000	9946000	Yeah, this is what I was trying to build
9946000	9948000	a little bit ago
9948000	9950000	where I wanted to call createFromFetch
9950000	9952000	inside of here
9952000	9954000	and be able to
9954000	9956000	store the lazy JSX
9956000	9958000	in a state variable
9958000	9960000	and return that result
9960000	9962000	to re-render
9962000	9964000	Yeah, yeah
9964000	9966000	So I think that's kind of what we want to do
9966000	9968000	and
9968000	9970000	maybe
9970000	9972000	maybe we can make
9972000	9974000	actually like this
9974000	9976000	ClientRoot, I'm going to call
9976000	9978000	I'm going to have a component called
9978000	9980000	a router
9980000	9982000	that renders ClientRoot
9982000	9984000	and I think
9984000	9986000	from the perspective of the ClientRoot
9986000	9988000	I think I'd like it to receive
9988000	9990000	the
9994000	9996000	should it receive the search params
9996000	9998000	or
10004000	10006000	I'll just
10006000	10008000	call it router for now and I'll write
10008000	10010000	the line in the router and then maybe I'll split
10010000	10012000	the components
10012000	10014000	But I think I want to have a
10014000	10016000	I want to have a cache
10016000	10018000	so
10018000	10020000	it's just going to be
10020000	10022000	just a regular map
10022000	10024000	So I want to
10024000	10026000	I think I want to keep a
10026000	10028000	this
10028000	10030000	createFromFetch
10030000	10032000	this represents build the stream
10032000	10034000	and kind of response you can use later
10034000	10036000	because it's
10036000	10038000	as long as we don't create it during rendering
10038000	10040000	it's going to be showing the same thing
10040000	10042000	So I think
10042000	10044000	what we want to do is we want to
10044000	10046000	I'm going to turn
10046000	10048000	off the light because it's getting really dark
10048000	10050000	Oh, okay
10052000	10054000	So I think we want to keep it
10054000	10056000	keep
10056000	10058000	a response cache per
10058000	10060000	this string
10060000	10062000	This is going to be the key
10062000	10064000	of how we're going to
10064000	10066000	cache it. So I'm going to have a map
10066000	10068000	Oh, yeah, you're already
10068000	10070000	jumping ahead to caching there
10070000	10072000	Yeah
10072000	10074000	So the initial
10074000	10076000	version I'm going to do is like
10078000	10080000	if the cache does
10080000	10082000	not have anything for
10082000	10084000	Yeah, so the
10084000	10086000	router
10086000	10088000	Okay
10088000	10090000	Okay, so I'm going to
10090000	10092000	I would assume
10092000	10094000	that this is like an effect
10094000	10096000	that's going to update as the
10096000	10098000	window updates and we're going to use
10098000	10100000	that to trigger
10100000	10102000	I think we're going
10102000	10104000	to do that, but
10106000	10108000	we're going to get there
10108000	10110000	Give me a moment
10110000	10112000	I wrote this kind of code like a couple
10112000	10114000	of times, so
10114000	10116000	I'm still not sure what's the best way to structure it
10118000	10120000	But I think
10120000	10122000	maybe I can call this component
10122000	10124000	server output
10124000	10126000	That's kind of what it is
10126000	10128000	And then this
10128000	10130000	is kind of the URL
10130000	10132000	I'll use URL as the key
10132000	10134000	And so I think that is the part
10134000	10136000	Yeah, and then the router will
10136000	10138000	return server
10138000	10140000	output
10140000	10142000	And I'll just hard code the URL here
10142000	10144000	So that will be the
10144000	10146000	kind of the initial URL
10146000	10148000	And later we'll make it
10148000	10150000	respond to
10150000	10152000	the client-side routing
10154000	10156000	But I think what we want to do
10156000	10158000	is
10158000	10160000	I don't need this anymore
10160000	10162000	Instead, the router
10162000	10164000	renders this thing and this thing
10164000	10166000	I guess maybe I call
10166000	10168000	this server
10168000	10170000	endpoint
10170000	10172000	server endpoint
10174000	10176000	Nah, it's going to be
10176000	10178000	a cold URL, sorry
10178000	10180000	So if it's not in the
10180000	10182000	If the URL is
10182000	10184000	not in the cache, I think we'll want to
10184000	10186000	put it
10186000	10188000	put this
10188000	10190000	into the cache
10190000	10192000	Let me see
10192000	10194000	So this is going to be
10194000	10196000	URL
10198000	10200000	And then
10200000	10202000	I think we just want to return
10202000	10204000	what's in the cache for this URL
10204000	10206000	And so
10206000	10208000	this might be
10208000	10210000	Yeah, that's interesting
10210000	10212000	I don't actually use set cache here
10212000	10214000	Although there is a use case
10214000	10216000	It's a ref as it stands
10216000	10218000	That's what it's acting like
10218000	10220000	Yeah
10220000	10222000	But I think we do need it for some
10222000	10224000	Like I think we would need this for invalidation
10224000	10226000	It's just, in our case, we don't have
10226000	10228000	Invalidation, so we don't have a reason
10228000	10230000	to do this
10230000	10232000	Because it's always, like it's caching everything forever
10232000	10234000	But if we had
10234000	10236000	invalidation where we want to say
10236000	10238000	throw away the cache you had
10238000	10240000	because something got modified
10240000	10242000	Then we would model it as
10242000	10244000	a set state where we
10244000	10246000	set state to a new map
10246000	10248000	So it would be like an empty cache
10248000	10250000	And that's why, like, conceptually
10250000	10252000	I think it should leave in state
10252000	10254000	That's why it's not like a ref
10254000	10256000	And maybe we can actually
10256000	10258000	also show it
10258000	10260000	We could have a small example that shows it
10260000	10262000	Yeah
10262000	10264000	Also, sorry that
10264000	10266000	Sorry I just do, can we do a quick pause
10266000	10268000	for like a bathroom break, get some more water
10268000	10270000	Yeah, yeah, sure
10270000	10272000	Okay, cool. I also don't have a standby screen
10272000	10274000	So, uh, yeah
10274000	10276000	BRB
10276000	10278000	Okay, one second
10278000	10280000	Alright
10280000	10282000	Am I still on the
10282000	10284000	stream? Like, I don't know, are people there?
10284000	10286000	I guess
10286000	10288000	maybe
10288000	10290000	Um
10290000	10292000	Yeah, I don't really have access to the
10292000	10294000	I don't have access
10294000	10296000	to the actual server, so I have
10296000	10298000	I have no idea if this
10298000	10300000	if this code works
10300000	10302000	because I can't, for some reason I can't
10302000	10304000	I can't
10304000	10306000	Like, the VS Code tunneling
10306000	10308000	doesn't work for me, I think it's
10308000	10310000	maybe
10310000	10312000	because of a firewall
10312000	10314000	or something
10314000	10316000	But maybe if, yeah, maybe for now I could
10316000	10318000	just go over this a little bit
10318000	10320000	So, yeah, we render
10320000	10322000	this router that, like, renders
10322000	10324000	this server output
10324000	10326000	for this key
10326000	10328000	and then, this might look a bit
10328000	10330000	weird, because this might look, you know, like
10330000	10332000	aren't you supposed, like, aren't components
10332000	10334000	supposed to be pure, like, isn't this
10334000	10336000	a mutation? And so
10336000	10338000	the key thing here is that
10338000	10340000	it's completely unobservable
10340000	10342000	So
10342000	10344000	it's, um
10346000	10348000	because, like, the state
10348000	10350000	the state is, like, local to this component
10350000	10352000	and this lazily
10352000	10354000	kind of fills it in the first time
10354000	10356000	you ask for it, it kind of acts
10356000	10358000	as
10358000	10360000	you know, it is going to give you, like, the same
10360000	10362000	result for, like
10362000	10364000	multiple attempts, regardless of
10364000	10366000	in, like, which order you do them
10366000	10368000	and this is why it's okay to
10368000	10370000	mutate in this particular
10370000	10372000	example
10376000	10378000	Yeah, so maybe let's see if this
10378000	10380000	works at all, like, can we
10380000	10382000	Did I break it?
10382000	10384000	I don't know yet
10384000	10386000	This should, I mean, as it looks
10386000	10388000	it should be fine
10388000	10390000	but if we save it, we get
10390000	10392000	something
10392000	10394000	Okay
10394000	10396000	properties of undefined reading to lowercase
10396000	10398000	Okay, so
10398000	10400000	Something's trying to render
10400000	10402000	that shouldn't be
10402000	10404000	Well, wait, are we currently
10404000	10406000	do you have question mark
10406000	10408000	search equals blah blah in your
10408000	10410000	URL bar? I do
10410000	10412000	Oh, actually, no, wait, no, we're not using that
10412000	10414000	we've hardcoded it
10414000	10416000	Create from
10416000	10418000	fetch fetch URL
10418000	10420000	Yeah, it's happening server-side
10420000	10422000	So
10422000	10424000	it's trying to, okay
10424000	10426000	I think it's because the dev panel
10426000	10428000	assumes that you're fetching the same thing
10428000	10430000	so if we just stop rendering the
10430000	10432000	dev panel, I think it'll just go away
10432000	10434000	Oh, no, that's, wait
10434000	10436000	let's just fix it, it's fine
10436000	10438000	I'll fix it
10438000	10440000	Let's just make it so that
10440000	10442000	the, so since the URL
10442000	10444000	is owned by the router, I'm just
10444000	10446000	I'm just gonna
10446000	10448000	Yeah, I'm just gonna render dev panel here
10448000	10450000	myself
10450000	10452000	So we can
10452000	10454000	put dev panel
10454000	10456000	and I'm gonna make this URL
10456000	10458000	a constant
10458000	10460000	and
10460000	10462000	I'm gonna pass it to both
10462000	10464000	things
10464000	10466000	so that
10466000	10468000	I guess I don't actually know how your
10468000	10470000	dev panel works, let me have a look
10470000	10472000	So I'm gonna get rid of, oh, you have like
10472000	10474000	a separate root
10474000	10476000	It's just a separate root and separate call
10476000	10478000	I ideally wanted it to trace
10478000	10480000	what was happening
10480000	10482000	Oh, I see
10482000	10484000	And I couldn't find a way to do it, so I just
10484000	10486000	do another fetch at the same time
10486000	10488000	and apparently it wasn't, I did two roots
10488000	10490000	I see, I see
10490000	10492000	Interesting
10492000	10494000	Yeah, right
10494000	10496000	because you're not hooking into the same
10496000	10498000	stream, but okay, that's fine
10498000	10500000	so we'll do the same thing
10500000	10502000	except it would, you know, do it with a different
10502000	10504000	different URL
10504000	10506000	because if I just pass the URL here
10506000	10508000	and I also make it dependency of the
10508000	10510000	effect
10510000	10512000	I think it would, well I guess
10512000	10514000	like our panel would behave maybe a bit
10514000	10516000	weirdly
10516000	10518000	if the URL changes
10518000	10520000	but maybe not, so let's just see if it works
10520000	10522000	And then can we
10522000	10524000	where's the HTML for
10524000	10526000	your thing, so that
10526000	10528000	Oh yeah, that
10528000	10530000	should be in a public folder, but I
10530000	10532000	didn't have time for it, so I think it's inside of this
10532000	10534000	templates index file
10534000	10536000	I'll bring it over here
10536000	10538000	But yeah, it's very simple
10538000	10540000	This is all it's doing
10540000	10542000	I can just remove it from here, right
10542000	10544000	and make it like a regular
10544000	10546000	Okay, yeah, so I'll just
10546000	10548000	get rid of this
10548000	10550000	and then I'll
10550000	10552000	and so this is not going to be like a separate root
10552000	10554000	it's just a React component that we're
10554000	10556000	rendering
10556000	10558000	Does it have any styles
10558000	10560000	that are, that depend on that
10560000	10562000	ID
10562000	10564000	Uh
10564000	10566000	I don't think so
10566000	10568000	Oh, because you're using
10568000	10570000	Tailwind, there's no styles
10570000	10572000	Love it, love it
10572000	10574000	Yep, hacks for everything
10574000	10576000	That's the amazing thing about
10576000	10578000	You just copy and paste things
10578000	10580000	move them around
10580000	10582000	Works fine
10582000	10584000	So style files
10584000	10586000	Okay, so let's see if
10586000	10588000	Okay, does this work
10588000	10590000	So if you
10590000	10592000	try it now
10592000	10594000	Did we fix it
10594000	10596000	Yeah, we got no errors
10596000	10598000	and we just get fetching from server
10598000	10600000	which I think is right, since we're not
10600000	10602000	rendering anything yet
10602000	10604000	But we are, no I think we are
10604000	10606000	rendering, like we're supposed to be
10606000	10608000	rendering that JSX tree for that
10608000	10610000	URL
10610000	10612000	Oh, okay, that actually should work, huh
10612000	10614000	So it does fetching from server
10614000	10616000	Can you see if there are any errors in the console
10616000	10618000	Yeah, let's see, there's no server errors
10620000	10622000	The client console, it looks like it's just getting
10622000	10624000	the first one, but it's not reading the rest of the
10624000	10626000	stream onto the page
10626000	10628000	And I remember that earlier
10628000	10630000	we removed the function
10630000	10632000	call and changed it to createL
10632000	10634000	That was working
10634000	10636000	So this is the part
10640000	10642000	Okay, maybe let's
10642000	10644000	go back a little bit
10644000	10646000	and simplify it
10646000	10648000	and then see if it still breaks
10648000	10650000	So I'm gonna make
10650000	10652000	a fake thing
10652000	10654000	and I'm gonna
10654000	10656000	instead of router, I'm gonna render this fake thing
10656000	10658000	It's a bit hard
10658000	10660000	for me to debug because I don't see the output
10660000	10662000	and I don't see
10662000	10664000	I can't actually check anything
10664000	10666000	But maybe
10666000	10668000	let's go back to
10668000	10670000	like
10670000	10672000	if I know
10672000	10674000	my URL
10674000	10676000	my thing
10676000	10678000	equals
10678000	10680000	Sorry
10680000	10682000	I'm gonna name it in my
10682000	10684000	weird ways
10684000	10686000	Yeah, so I'm gonna create from fetch
10686000	10688000	for my URL
10688000	10690000	Oops, that's gonna be my
10690000	10692000	URL
10692000	10694000	And we're gonna render this
10696000	10698000	Okay, so can we just get this thing
10698000	10700000	working? Does it still break?
10700000	10702000	This works
10702000	10704000	Okay, this works
10704000	10706000	And then
10706000	10708000	if I swap it out with the router
10708000	10710000	I can confirm that it doesn't
10710000	10712000	work again
10714000	10716000	Okay, it doesn't work
10716000	10718000	So let's switch it back to fake thing
10718000	10720000	It is trying to resolve the client-side
10720000	10722000	component import though, which is interesting
10722000	10724000	But yeah, that's working
10724000	10726000	Okay, so let's
10726000	10728000	maybe now change this to just
10728000	10730000	use this
10730000	10732000	component to see if the problem is with this
10732000	10734000	component. Try it again
10734000	10736000	That is not
10736000	10738000	working
10738000	10740000	That is not working, so that's where the problem is
10740000	10742000	It's the cache
10742000	10744000	Okay, that's good though because it means
10744000	10746000	something here
10748000	10750000	What am I doing wrong?
10750000	10752000	Okay
10752000	10754000	Cache, if not cache
10754000	10756000	has cache set
10756000	10758000	cache is
10758000	10760000	a piece of state
10760000	10762000	If it doesn't have this URL
10762000	10764000	put this
10764000	10766000	thing into it and then
10766000	10768000	read it. Yeah, I don't see
10768000	10770000	a mistake in the code, but maybe let's
10770000	10772000	keep, you know, let's keep
10772000	10774000	I mean, we can log what this is
10774000	10776000	Yeah, let's log what this is
10776000	10778000	But I'm not going to see the log because I don't see
10778000	10780000	the console
10780000	10782000	It should be the browser console, so I can at least
10782000	10784000	bump up the font size on the screen share
10784000	10786000	No, no, your tab share
10786000	10788000	doesn't show me anything
10788000	10790000	You're right
10790000	10792000	Alright, you get chunk pending, which is a familiar
10792000	10794000	site
10794000	10796000	Yeah, that seems legit. Okay, no, it's fine
10796000	10798000	I think I have a way to debug it, like I have
10798000	10800000	a methodology. I'm just going to
10800000	10802000	put it piece by piece and then we'll find
10802000	10804000	where the mistake is
10804000	10806000	Okay, so the next thing is I'm going to
10806000	10808000	copy and paste like this
10808000	10810000	part into the fake
10810000	10812000	thing
10812000	10814000	It's also doing an infinite loop, which might
10814000	10816000	be something
10816000	10818000	Yeah, that seems
10818000	10820000	good to know
10820000	10822000	if not cache, but I don't know
10822000	10824000	why it... Yeah, because I was getting infinite
10824000	10826000	logs
10826000	10828000	Interesting
10829000	10831000	Yeah, yeah, yeah, yeah
10831000	10833000	Interesting
10833000	10835000	Very interesting
10837000	10839000	Yeah, well, let's
10839000	10841000	keep going. I think I should be able to
10841000	10843000	figure it out
10845000	10847000	Okay, just
10847000	10849000	Okay, so the first thing I could maybe
10849000	10851000	try is just like
10851000	10853000	for now, I'll move this cache
10853000	10855000	outside maybe
10855000	10857000	So I've had this issue in the past for
10857000	10859000	when I tried to use use
10859000	10861000	and I didn't put any
10861000	10863000	wrappers around it, I didn't
10863000	10865000	put a cache, and it was calling my
10865000	10867000	useFetch infinitely
10867000	10869000	because it was a weighted
10869000	10871000	promise, and I don't know if that's why
10871000	10873000	because this is definitely another case of returning a
10873000	10875000	promise and passing it
10875000	10877000	Yeah, maybe
10877000	10879000	that is...
10879000	10881000	Yeah, maybe actually, maybe you're right. Let me see
10881000	10883000	Maybe that's not... Let me check
10883000	10885000	how our
10885000	10887000	our
10887000	10889000	fixture does it, because maybe I'm
10889000	10891000	just supposed to use use, and we
10891000	10893000	don't have warnings yet, so
10893000	10895000	that's why
10895000	10897000	Yeah, okay, let's try this
10897000	10899000	actually. Maybe that's how it's
10899000	10901000	supposed to work. So I'll import
10901000	10903000	use from React
10903000	10905000	and let's...
10905000	10907000	instead of fakeThing, let's render the
10907000	10909000	router again, and let's
10909000	10911000	get this back, except
10911000	10913000	this will be just
10913000	10915000	lazyJSX
10915000	10917000	and then I'll say return
10917000	10919000	use lazyJSX
10919000	10921000	because I think we haven't implemented
10921000	10923000	support for this yet, but we also haven't
10923000	10925000	implemented good error messages
10925000	10927000	Interesting. Let's see if that's better
10927000	10929000	That's the same
10929000	10931000	Now it's the same
10931000	10933000	Yeah, we're still getting nothing
10933000	10935000	back. Okay, now
10935000	10937000	let's try this
10937000	10939000	thing next. Can you
10939000	10941000	refresh?
10941000	10943000	Ooh, things are happening
10945000	10947000	Okay, I don't...
10947000	10949000	Let me look here. Okay, we do have something on the page
10949000	10951000	Okay, so this
10951000	10953000	works. This works
10953000	10955000	Interesting
10955000	10957000	So what was the important bit? Wait, what changed?
10957000	10959000	Well, the part that changed
10959000	10961000	is the... No longer useState
10961000	10963000	Okay
10963000	10965000	Yeah, I don't understand
10965000	10967000	It definitely works like in
10967000	10969000	the example I wrote a few days ago
10969000	10971000	Yeah
10971000	10973000	Oh, wait, maybe we can remove strictMode
10973000	10975000	I mean, I wouldn't necessarily...
10975000	10977000	I couldn't get anything
10977000	10979000	to work without strictMode
10979000	10981000	Oh, it works! Okay, nevermind
10981000	10983000	Okay, if we remove strictMode
10983000	10985000	and I put this back
10985000	10987000	Let's see
10987000	10989000	I think maybe we just have a bug there
10989000	10991000	Is it still broken?
10991000	10993000	Yeah
10993000	10995000	Yeah, maybe it's like a different React
10995000	10997000	version
10997000	10999000	Yeah, I'm on an experimental
10999000	11001000	18 release because it's the only thing that
11001000	11003000	worked with createFromFetch
11003000	11005000	But yeah
11005000	11007000	Okay, let me see
11007000	11009000	Experiment. Yeah, I don't...
11009000	11011000	I think...
11011000	11013000	Let's try to
11013000	11015000	Let's try to
11015000	11017000	use a different React version
11017000	11019000	I will copy and paste the version that
11019000	11021000	I think should work
11021000	11023000	Can we
11023000	11025000	Can we
11025000	11027000	yarn and
11027000	11029000	whatever
11029000	11031000	It like upgrade to
11031000	11033000	a new experimental release?
11033000	11035000	No, it's actually
11035000	11037000	different. It's like the next
11037000	11039000	It's like a canary
11039000	11041000	Because I don't know what's...
11041000	11043000	Experimental might have too many things
11043000	11045000	enabled that could be broken
11045000	11047000	Could be
11047000	11049000	That could be the reason
11049000	11051000	I mean, can't we just roll without the state variable
11051000	11053000	though? Because I feel like...
11053000	11055000	I just want to see if that helps
11055000	11057000	If it doesn't help, we'll just roll without it
11057000	11059000	It's just annoying because like
11059000	11061000	I do have this working in literally
11061000	11063000	I know
11063000	11065000	It's written the same way in a different project
11065000	11067000	and I'm like, why doesn't
11067000	11069000	it work if I have it working in another
11069000	11071000	file
11071000	11073000	Yeah, as a framework maintainer, whenever something goes wrong in Astra
11073000	11075000	I'm like, no, no, no, what is it?
11075000	11077000	What version is it?
11077000	11079000	No, I already did
11079000	11081000	You don't need to specify versions. I already put them in package.json
11081000	11083000	You could just like re-run this
11083000	11085000	Perfect
11085000	11087000	Oh, you just found it
11087000	11089000	Alright
11089000	11091000	That'll do
11091000	11093000	So these are next releases instead of experimental
11093000	11095000	Yeah
11095000	11097000	These are a bit more kind of stable
11097000	11099000	Okay
11099000	11101000	And yeah, this is where you get funny peer dependency issues
11101000	11103000	Yeah
11107000	11109000	And it's the same thing, I think
11111000	11113000	Interesting
11117000	11119000	Yeah, so it's
11119000	11121000	Yeah, it's running infinitely
11123000	11125000	Can we wrap this
11125000	11127000	with the actual cache helper
11127000	11129000	from React?
11131000	11133000	No, we don't use that anymore
11133000	11135000	Okay, yeah
11135000	11137000	Okay
11137000	11139000	Okay, let's
11139000	11141000	Okay, let's forget about
11141000	11143000	I mean, it doesn't matter that much because we're not doing
11143000	11145000	invalidation anyway, so
11145000	11147000	let's just, I'll add back the strict mode
11147000	11149000	and I will
11151000	11153000	Yeah, I will remove the state variable
11153000	11155000	I'm not sure why it doesn't work
11155000	11157000	without it, but maybe we just broke something
11159000	11161000	So, yeah, I'll just keep it global
11163000	11165000	But I think at least like this
11165000	11167000	this is actually supposed to
11167000	11169000	I don't need use here in that case
11169000	11171000	I think
11171000	11173000	So I think this is supposed to work
11175000	11177000	I know, we definitely need use
11177000	11179000	What's going on?
11179000	11181000	Oh, we do? Okay, I can add that
11181000	11183000	Yeah, objects, okay, it's saying promise
11183000	11185000	is invalid
11185000	11187000	Okay, yeah, so we
11187000	11189000	didn't implement this yet, so let's
11189000	11191000	Okay, let's put it back
11191000	11193000	If anyone at home is wondering
11193000	11195000	like what's going on, we've kind of graduated
11195000	11197000	from exploring Rack server components
11197000	11199000	to like how do they really work
11199000	11201000	within a framework if you're trying
11201000	11203000	to build one
11203000	11205000	So this is going more in the weeds for sure
11205000	11207000	but one interesting fact is like when you want to
11207000	11209000	unwrap asynchronous stuff
11209000	11211000	on the client, use is
11211000	11213000	basically in a wait for the client, right?
11213000	11215000	But it can also do other things
11215000	11217000	beyond a wait
11217000	11219000	Yeah, yeah
11219000	11221000	Okay, so I think that
11221000	11223000	actually should be enough for now, I don't think we need
11223000	11225000	more fancy
11225000	11227000	So let's just hook up the router
11227000	11229000	to the actual routing
11229000	11231000	Right, so let's
11231000	11233000	Maybe you can drive this bit
11233000	11235000	What we want to have in the router
11235000	11237000	we have the URL
11237000	11239000	variable, so let's make that
11239000	11241000	initialized to
11241000	11243000	window.location
11243000	11245000	Let's take
11245000	11247000	the search query from
11247000	11249000	the actual location
11249000	11251000	and let's make it update
11251000	11253000	as the location updates
11255000	11257000	Yeah, so for that
11257000	11259000	Well, I'm wondering
11259000	11261000	where it would go
11261000	11263000	but first I'll just do
11263000	11265000	window.location.
11267000	11269000	We want it as a prop yet, let's just do search
11271000	11273000	Do that
11273000	11275000	and we want
11275000	11277000	Oh boy
11277000	11279000	I don't really want all of that
11279000	11281000	but
11281000	11283000	yeah, that's fine
11283000	11285000	Clean up, I don't know yet
11285000	11287000	but to do
11287000	11289000	abort controller
11289000	11291000	for create fetch
11291000	11293000	Oh no, you don't need to do this part
11293000	11295000	We already have this part down below
11295000	11297000	Like all we want to do is
11297000	11299000	Yeah, all we want to do is
11299000	11301000	we want to have
11301000	11303000	we want to have something that gives us
11303000	11305000	window.location.search
11305000	11307000	all the time
11307000	11309000	Okay, so literally that
11309000	11311000	Yeah, but
11311000	11313000	Okay, so we're going to build this in later
11313000	11315000	because right now it's not going to be reactive
11315000	11317000	to anything, it's just going to render the initial
11317000	11319000	cache
11319000	11321000	Yeah, so I think maybe I can try to do
11321000	11323000	so what does window.location.search
11323000	11325000	return, what kind of file
11325000	11327000	is it like a string or
11327000	11329000	Yeah, that'll just be the string, so question mark
11329000	11331000	Yeah, that, so it's a key that we could use
11331000	11333000	Okay, so we do need
11333000	11335000	this thing
11335000	11337000	Do we need to
11337000	11339000	encode the URI component
11339000	11341000	or is it already encoded?
11341000	11343000	Yeah, I think we can put this
11343000	11345000	in the create from fetch actually
11345000	11347000	Might make a little more sense, I don't know
11347000	11349000	But yeah, this would be right
11349000	11351000	Okay
11351000	11353000	You could also just do
11353000	11355000	window.location.pathname if that's what we're looking for
11355000	11357000	Okay
11357000	11359000	Or actually no, that's the query we're making
11359000	11361000	so this is right
11361000	11363000	Okay, let me just
11363000	11365000	see, yeah, I think we can just
11365000	11367000	so we don't need this, I think that's
11367000	11369000	that's the URL we want
11369000	11371000	to get, and I think we
11371000	11373000	I agree, maybe this makes sense to actually
11373000	11375000	put here, but maybe
11375000	11377000	let's just do like a
11377000	11379000	useEffect thing that's going to
11379000	11381000	be
11381000	11383000	so I think this, we're going to model
11383000	11385000	this as like, you know, a state
11385000	11387000	so this is the
11387000	11389000	kind of the initial
11389000	11391000	state, and then
11391000	11393000	when we have a
11393000	11395000	so I think it's
11395000	11397000	window.addEventListener
11397000	11399000	popState, I think
11399000	11401000	that's the thing that
11401000	11403000	Oh yeah
11403000	11405000	That's the thing that's supposed
11405000	11407000	to be
11407000	11409000	to be doing this
11411000	11413000	And then
11413000	11415000	this is
11415000	11417000	where we
11417000	11419000	I
11419000	11421000	don't know if
11421000	11423000	this will
11423000	11425000	work, but maybe it
11425000	11427000	does, so let's
11427000	11429000	can we
11429000	11431000	see if this works?
11431000	11433000	That should do it, I think
11433000	11435000	so
11435000	11437000	yeah, is this actually
11437000	11439000	going to log anything?
11439000	11441000	So this is going to re-render
11441000	11443000	Oh, yeah, this might actually do
11443000	11445000	a lot more, so as I
11445000	11447000	start typing, nothing is changing
11448000	11450000	Does it
11450000	11452000	Let's see handlePopState
11458000	11460000	Well, only I can see it, sadly
11460000	11462000	But as I, okay, it's not
11462000	11464000	doing handlePopState
11464000	11466000	It's not calling it? Maybe I
11466000	11468000	miss, is that wrong?
11468000	11470000	Because I think you
11470000	11472000	were calling the replaceState, right?
11472000	11474000	I think you're right
11474000	11476000	windowPopState
11476000	11478000	I don't think it's going to
11478000	11480000	fire
11480000	11482000	navigateSessionHistory, right
11484000	11486000	It changes the currentHistory
11486000	11488000	entry to that of the last page
11488000	11490000	of the, right, so it might
11490000	11492000	require pushState instead of
11492000	11494000	replaceState in order for it to work
11494000	11496000	No, that
11496000	11498000	doesn't sound plausible
11498000	11500000	to me
11500000	11502000	I think
11502000	11504000	replaceState should trigger
11504000	11506000	the browser
11506000	11508000	I would think so
11508000	11510000	Is this
11512000	11514000	Okay, maybe
11516000	11518000	Sorry, I'm just going to debug this
11518000	11520000	locally in, like, Chrome
11520000	11522000	I don't see anything that's happening
11522000	11524000	It's very hard to do anything
11524000	11526000	if I don't have the console
11526000	11528000	I can do one last try
11528000	11530000	on just sharing the browser window
11530000	11532000	instead and see if it actually
11532000	11534000	Yeah, let's try sharing the browser window
11534000	11536000	Yeah
11536000	11538000	I can do that
11538000	11540000	shareScreen
11540000	11542000	window
11542000	11544000	There
11544000	11546000	All right, and I'm going to start typing
11546000	11548000	It is working, I think
11548000	11550000	Oh, but then it stopped
11550000	11552000	Okay, no, I see
11552000	11554000	typing, okay, so
11554000	11556000	Does it understand correctly that
11556000	11558000	handled never runs?
11558000	11560000	Yeah, handledPopState
11560000	11562000	Yeah, handledPopState's never running
11562000	11564000	HandledPopState is not
11564000	11566000	But we do have
11566000	11568000	We do have it
11568000	11570000	That's so weird
11570000	11572000	Let me just try this
11572000	11574000	Let me try this locally
11574000	11576000	I'll just try to do
11576000	11578000	window.addEventListener
11578000	11580000	popState
11580000	11582000	with some
11582000	11584000	log
11584000	11586000	Sure
11586000	11588000	listener, and then I'm going to try to
11588000	11590000	window.history.replaceState
11592000	11594000	with some
11596000	11598000	Oh, yeah, that doesn't
11598000	11600000	run it for some reason for me either
11600000	11602000	Let me try pushState
11602000	11604000	Maybe you were right
11604000	11606000	No, pushState doesn't do this either
11608000	11610000	handledPopState
11612000	11614000	Does anyone, can you ask somebody
11614000	11616000	who knows how
11616000	11618000	browsers work?
11618000	11620000	Why is this not doing anything?
11620000	11622000	Yeah, I'm sure there's a lot of people in chat
11622000	11624000	who know how browsers work
11624000	11626000	I can also
11626000	11628000	Well
11628000	11630000	There's people I can message
11630000	11632000	Because like the
11632000	11634000	mdn, I'm looking at the mdn examples
11634000	11636000	It's right here
11636000	11638000	They show the exact same thing
11638000	11640000	Right?
11640000	11642000	What is different in what we're doing?
11642000	11644000	Oh
11644000	11646000	Oh, interesting
11646000	11648000	Yeah, notice that the pushStates don't
11648000	11650000	do it, but back and go will
11650000	11652000	log
11652000	11654000	Oh
11654000	11656000	I forgot that's how it works
11656000	11658000	This is so confusing
11658000	11660000	Because this API was invented
11660000	11662000	before client-side routing
11662000	11664000	Yeah, so there's a new
11664000	11666000	transitions API, which I don't know enough
11666000	11668000	about, but that can be
11668000	11670000	one way to try
11670000	11672000	Let's see, I think I saw something like this
11672000	11674000	recently
11674000	11676000	So, replacement for history
11676000	11678000	Yeah, that's why people use this history
11678000	11680000	package, I think that's
11680000	11682000	Oh yeah, that's it
11682000	11684000	New API for
11684000	11686000	How do I search this?
11686000	11688000	Like, mdn
11688000	11690000	history, API
11690000	11692000	replacement
11694000	11696000	I don't remember the new name
11696000	11698000	What is the new
11698000	11700000	Can I ask chatGP?
11700000	11702000	Maybe it doesn't know
11702000	11704000	We can ask
11704000	11706000	What's the name of the spec
11706000	11708000	that
11708000	11710000	supersedes
11710000	11712000	history API
11712000	11714000	for browsers
11714000	11716000	I've definitely read about
11716000	11718000	Yeah
11718000	11720000	There is, yeah, the new transition is going to
11720000	11722000	assume a navigation is happening
11722000	11724000	and it's going to slide in a new page
11724000	11726000	which is actually not what we're trying to do
11726000	11728000	viewTransitions
11728000	11730000	No, I think viewTransitions
11730000	11732000	has something to do with
11732000	11734000	I think that's different
11736000	11738000	It's about
11738000	11740000	making it look
11740000	11742000	nicer, right?
11742000	11744000	It's about navigating
11744000	11746000	It's meant to be different
11746000	11748000	than doing a manual push
11748000	11750000	state and changing parts of the page
11750000	11752000	where you can say start viewTransition
11752000	11754000	get a snapshot of what's on the page right now
11754000	11756000	and then replace the DOM here
11756000	11758000	It assumes DOM's being replaced
11758000	11760000	Yes, I found it
11760000	11762000	The new thing is called navigation API
11762000	11764000	It's window.navigation
11764000	11766000	Let's see if that's
11766000	11768000	Is that different?
11768000	11770000	Yeah
11770000	11772000	So maybe window.navigation
11774000	11776000	Let's see if I can
11776000	11778000	navigation API
11778000	11780000	blah blah blah
11780000	11782000	navigate
11782000	11784000	How do you
11784000	11786000	replace?
11786000	11788000	I actually don't see that
11788000	11790000	navigate
11790000	11792000	So if I go to navigate
11792000	11794000	options
11794000	11796000	the current state
11796000	11798000	info
11798000	11800000	history, replace
11800000	11802000	Okay, you can do that
11802000	11804000	Where is that?
11804000	11806000	I'm looking
11806000	11808000	through, oh yeah, it's addEventList or
11808000	11810000	navigate, this could work
11810000	11812000	So what you would do instead of history
11812000	11814000	is
11814000	11816000	inside of search
11816000	11818000	just search
11818000	11820000	It should be window.navigation
11822000	11824000	Oh, I'm actually not getting
11824000	11826000	the API
11826000	11828000	Is it too new?
11828000	11830000	I'm just going to try and navigate
11830000	11832000	Yeah, it's too new, it's experimental
11832000	11834000	Yeah, that's fine
11834000	11836000	So yeah, we navigate to that
11836000	11838000	and then options you can say
11838000	11840000	not replace
11840000	11842000	true, it's
11844000	11846000	history, replace
11846000	11848000	Okay
11850000	11852000	That'll do it
11852000	11854000	And let's try to
11854000	11856000	listen to, what is the
11856000	11858000	event handler on?
11858000	11860000	Just navigate
11860000	11862000	And it's also suggesting
11862000	11864000	an event.intercept
11864000	11866000	I don't know why
11866000	11868000	I don't know what that is, let's for now
11868000	11870000	ignore whatever that is
11870000	11872000	Yeah, that's intercepting
11872000	11874000	Yeah, I don't know
11874000	11876000	because you're already intercepting if you're listening
11876000	11878000	I guess
11878000	11880000	So I'm going to change this to
11880000	11882000	handleNavigate
11882000	11884000	and let's see if that
11884000	11886000	even gets triggered
11886000	11888000	Can you check?
11888000	11890000	Let's check
11891000	11893000	All right
11893000	11895000	Reload here
11897000	11899000	And as we type, it's actually not
11899000	11901000	It's not letting me type
11903000	11905000	Let me see here
11905000	11907000	It's not letting me
11907000	11909000	type
11909000	11911000	It's not letting me type
11911000	11913000	Uh
11919000	11921000	I just
11921000	11923000	I wonder if it's
11923000	11925000	re-fetching the page when I type
11925000	11927000	it's losing the context and then it's all
11927000	11929000	gone
11929000	11931000	Maybe we need to disable
11931000	11933000	some things that are happening, just to be sure
11933000	11935000	Yeah
11939000	11941000	Yeah, just don't do this part
11941000	11943000	but log it
11943000	11945000	Yeah, okay, let's do this
11947000	11949000	Oh, now I get
11949000	11951000	actual errors
11951000	11953000	Navigate is not defined. What?
11953000	11955000	Okay, okay
11955000	11957000	This is all, like, we're going down
11957000	11959000	the rabbit hole. Let's do it completely differently
11959000	11961000	I'm just going to
11961000	11963000	This is too much
11963000	11965000	We're going to do this
11965000	11967000	I wanted to know about the browser APIs, though
11967000	11969000	It's a shame
11969000	11971000	The browser API
11971000	11973000	We're going to invent our own browser APIs
11973000	11975000	I was thinking some custom events or something
11975000	11977000	We can do this
11977000	11979000	Yeah, we're just going to be
11979000	11981000	window on
11981000	11983000	URL changed
11983000	11985000	That's going to be our custom
11985000	11987000	I mean, this doesn't make any sense
11987000	11989000	but I don't want to
11990000	11992000	I think my patience
11992000	11994000	is a bit
11994000	11996000	Yeah, we're just going to have
11996000	11998000	Yeah, that'll do. Let's do that
11998000	12000000	That's, you know
12000000	12002000	callbacks
12002000	12004000	Yeah, I was going to do it a little bit more politely
12004000	12006000	This is fine
12006000	12008000	Yeah, we're just going to do this
12008000	12010000	and then we're going to
12010000	12012000	we're just going to do, like, callbacks
12012000	12014000	push
12014000	12016000	navigate
12016000	12018000	and then this is going to be
12018000	12020000	something like
12020000	12022000	callbacks
12022000	12024000	Yeah, just pop it off
12024000	12026000	or slice
12030000	12032000	Oh
12032000	12034000	Yeah, that worked
12034000	12036000	Maybe like this
12036000	12038000	Can we see if that
12038000	12040000	is called?
12040000	12042000	Let's see
12042000	12044000	Handled
12044000	12046000	Yeah
12046000	12048000	Okay, so now let's try to update
12048000	12050000	the state as well
12054000	12056000	Oh, it's filtering
12056000	12058000	Is it working?
12058000	12060000	Oh my god!
12060000	12062000	Okay, it hides the search box
12062000	12064000	while we're searching because we put it
12064000	12066000	behind the wrong suspense
12066000	12068000	but oh my god, it works
12068000	12070000	So, wait, this is actually the part
12070000	12072000	that we can fix
12072000	12074000	So the issue is that
12074000	12076000	Can you demonstrate the problem?
12076000	12078000	Yeah
12080000	12082000	Yeah, I can follow you
12082000	12084000	Perfect
12084000	12086000	Can you show the
12086000	12088000	I guess I don't see it because the stream is not fast enough
12088000	12090000	I don't know if people see it
12090000	12092000	The problem is
12092000	12094000	Let's increase the delay so that
12094000	12096000	it's, yeah, okay
12096000	12098000	So the search bar disappears
12098000	12100000	because we actually need to get
12100000	12102000	the server component output
12102000	12104000	And the server component output is waiting
12104000	12106000	for that filter
12106000	12108000	or whatever
12108000	12110000	to fetch the data before
12110000	12112000	we can even know what to show
12112000	12114000	and so it suspends
12114000	12116000	And so the way
12116000	12118000	the way you handle it
12120000	12122000	One thing we could do
12122000	12124000	is maybe restructure it a little bit
12124000	12126000	so that the
12126000	12128000	search input isn't kind of blocked
12128000	12130000	on anything
12130000	12132000	But the
12132000	12134000	idiomatic solution in React is
12136000	12138000	router changes
12138000	12140000	Again, this is
12140000	12142000	primarily if you're developing the framework
12142000	12144000	I think this is something like
12144000	12146000	if you're making a framework for
12146000	12148000	server components, this is something
12148000	12150000	you should probably know, is that
12150000	12152000	the route changes
12152000	12154000	so the set states
12154000	12156000	that lead the route changes
12156000	12158000	should be wrapped into transitions
12158000	12160000	So what I'm going to do is
12160000	12162000	I'm going to import startTransition
12162000	12164000	from React here
12164000	12166000	Ooh, yes
12166000	12168000	I wanted a transition demo
12168000	12170000	Okay
12170000	12172000	And so I'm going to wrap the set state
12172000	12174000	into a transition
12174000	12176000	And so this tells React that
12176000	12178000	actually it's okay for
12178000	12180000	the screen to be inconsistent
12180000	12182000	So even though we know we're fetching something
12182000	12184000	we're waiting for something to happen
12184000	12186000	it's okay to let that
12186000	12188000	We don't need to immediately
12188000	12190000	show the spinner, we can actually wait
12190000	12192000	for that thing to be
12192000	12194000	complete enough that
12194000	12196000	Oh!
12196000	12198000	I've been wanting to understand transition for so
12198000	12200000	long and I get it
12200000	12202000	I see the use case there
12202000	12204000	And everything works
12204000	12206000	Yeah, and so what should also
12206000	12208000	work now is
12208000	12210000	Cached ones are faster
12210000	12212000	Yeah, so now if you type the same thing again because you've
12212000	12214000	cached the server component
12214000	12216000	the response is
12216000	12218000	Ooh, yeah
12218000	12220000	Oh, this is mind-blowing
12220000	12222000	I love that cache was involved too
12222000	12224000	The other thing we can try
12224000	12226000	which I don't know if it's going to work
12226000	12228000	because we had a bug related to this
12228000	12230000	but I think maybe it works
12230000	12232000	is I'm going to go to search.jsx
12232000	12234000	and I'm also going
12234000	12236000	to
12236000	12238000	Yeah, so
12238000	12240000	Okay, yeah
12240000	12242000	Okay
12242000	12244000	I'm also going to
12244000	12246000	add useTransition here
12246000	12248000	So if you only want to start a transition
12248000	12250000	you can just start a transition
12250000	12252000	But if you want to show visual feedback in the
12252000	12254000	component tree itself
12254000	12256000	when something is being refetched
12256000	12258000	and you don't want it to be just
12258000	12260000	like the user doesn't know what's happening
12260000	12262000	you can
12262000	12264000	have useTransition here
12264000	12266000	And that gives you this
12268000	12270000	Let's call it startTransition
12270000	12272000	useTransition
12272000	12274000	So that gives you this expanding Boolean
12274000	12276000	And so what you can do is
12276000	12278000	I know that
12280000	12282000	You know, this is
12282000	12284000	I'm actually going to
12284000	12286000	I'm going to rename this
12286000	12288000	I'll call this
12288000	12290000	Well, okay, that's what I'm going to do
12290000	12292000	I'm going to call this window.router.navigate
12294000	12296000	to here
12296000	12298000	And I'll just
12298000	12300000	That's supposed to be
12300000	12302000	your framework
12302000	12304000	I mean, you wouldn't put it on the window variable, of course
12306000	12308000	But it would be like
12308000	12310000	Yeah, but that's
12310000	12312000	We're going to go back to the root.client
12312000	12314000	And I'll just
12314000	12316000	This is going to be our toy router that has
12316000	12318000	navigate the URL
12318000	12320000	And so this is the part that actually does
12320000	12322000	the
12322000	12324000	This is the URL
12324000	12326000	It does the state and then
12326000	12328000	It calls
12328000	12330000	the callbacks we registered
12330000	12332000	So I
12332000	12334000	think
12334000	12336000	window.router.navigate
12336000	12338000	replace state URL
12338000	12340000	Okay
12340000	12342000	Yeah, and so this is
12344000	12346000	Say again
12348000	12350000	We're hitting a client error
12350000	12352000	What is the error?
12352000	12354000	The user, no, no, not that
12354000	12356000	Callbacks is not defined. Okay
12356000	12358000	It's just a
12358000	12360000	Yeah, it's just a typo
12362000	12364000	I think I deleted it accidentally
12364000	12366000	Yeah, we just deleted it
12368000	12370000	Okay, let's try again
12370000	12372000	Okay, that's working
12372000	12374000	Yeah, so now let's go back to the search
12374000	12376000	And let's say
12378000	12380000	Oh, and look at this
12380000	12382000	We can actually see all the requests coming down the wire too
12382000	12384000	It's going to
12384000	12386000	keep doing this
12386000	12388000	So let's add a little bit
12388000	12390000	Yeah, that's a new
12390000	12392000	Can I add this back?
12394000	12396000	This is going to look a little bit ugly
12396000	12398000	But I'm just going to add like a
12398000	12400000	Also like if is pending
12400000	12402000	Then I'm going to
12402000	12404000	add like a little
12406000	12408000	You know, like a little
12408000	12410000	I don't know
12410000	12412000	Margin left
12412000	12414000	Two or something
12416000	12418000	I don't remember how to do it
12418000	12420000	Sure
12420000	12422000	But let's see
12422000	12424000	Yeah
12424000	12426000	Yeah, I think italics are what we want here
12426000	12428000	That should work
12428000	12430000	So can we see
12430000	12432000	if that does anything?
12432000	12434000	It looks like it is
12434000	12436000	Yeah, we get a little
12436000	12438000	We get a little loading
12438000	12440000	flash
12440000	12442000	But if we do something
12442000	12444000	and it's cached
12444000	12446000	It's pretty much instant
12446000	12448000	It shows a little flash of it
12448000	12450000	while it fetches from the cache
12450000	12452000	Yeah
12452000	12454000	So the way you deal with like
12454000	12456000	So what we kind of want to do here
12456000	12458000	is like we want to show
12460000	12462000	You see like
12462000	12464000	this you are looking for
12464000	12466000	So this is the
12466000	12468000	example that we have
12468000	12470000	It doesn't quite make sense
12470000	12472000	Well
12472000	12474000	So this is the thing that will be updated later
12474000	12476000	Because like we need to go to the server
12476000	12478000	And like that part is like on the server
12478000	12480000	And we could have moved that to the client
12480000	12482000	And like show it in the search box instead
12482000	12484000	So I think it just depends on like
12484000	12486000	What kind of UI do you want?
12486000	12488000	Like do you want
12488000	12490000	You know
12490000	12492000	Like other patterns could be
12492000	12494000	Like grayed out
12494000	12496000	While the
12496000	12498000	While you're refetching it
12498000	12500000	So that's another
12500000	12502000	kind of common pattern
12502000	12504000	Yeah
12504000	12506000	Maybe do you want to
12506000	12508000	try to do that?
12508000	12510000	Sure, yeah
12510000	12512000	Could be fun
12516000	12518000	It's a little bit
12518000	12520000	It's a little bit trickier
12520000	12522000	to figure out how to do this
12522000	12524000	Yeah, okay, I'll be honest
12524000	12526000	I was reading something from chat and missed the last 20 seconds
12526000	12528000	of what you said. Can you say that again?
12528000	12530000	Yeah, I was saying
12530000	12532000	Now like we
12532000	12534000	We can kind of
12534000	12536000	I don't know
12536000	12538000	Maybe we should go through the code
12538000	12540000	And just kind of recap
12540000	12542000	Because like we have a solution now
12542000	12544000	So it seems like a good time
12544000	12546000	Like we built a tiny framework
12546000	12548000	That does a little bit of routing
12548000	12550000	In a way that
12550000	12552000	Works with server components
12552000	12554000	So maybe it's a good time to recap
12554000	12556000	What's going on in our
12556000	12558000	setup. Do you want to try to do that?
12558000	12560000	Let's do it
12560000	12562000	Yeah, so I
12562000	12564000	Will try to trace it from the top
12564000	12566000	But basically what we built
12566000	12568000	Is a
12568000	12570000	Search box
12570000	12572000	That's able to have just a little bit
12572000	12574000	Of client-side JavaScript in order to
12574000	12576000	Store a state
12576000	12578000	Of what you're trying to search for
12578000	12580000	And then anytime you put in an input
12580000	12582000	We're updating the URL bar up here
12582000	12584000	At the top
12584000	12586000	And anytime that you update the URL
12586000	12588000	We want to re-render
12588000	12590000	The parts of the page that depends on that URL
12590000	12592000	Here the part that depends is
12592000	12594000	The amount of albums that we're showing
12594000	12596000	So when we say search post, we want to
12596000	12598000	Go to the server, figure out which albums
12598000	12600000	Actually have the word post in them
12600000	12602000	And then send that new result
12602000	12604000	Down to the client
12604000	12606000	Without actually having to render all of those albums
12606000	12608000	With client-side JavaScript
12608000	12610000	So if we head over to our root
12610000	12612000	Client where we're doing this
12612000	12614000	Slight hack, but you could formalize
12614000	12616000	This into a framework as Dan mentioned
12616000	12618000	In here
12618000	12620000	The client is able to trigger
12620000	12622000	Navigate, or any client component
12622000	12624000	Is able to trigger a navigate command
12624000	12626000	Which will tell it the URL
12626000	12628000	It wants to go to, we're going to use
12628000	12630000	The web standard history API to update
12630000	12632000	That state, and then pass in
12632000	12634000	A callback here that's going
12634000	12636000	To trigger
12636000	12638000	Actual navigation events
12638000	12640000	So we mentioned it a little bit earlier
12640000	12642000	But we had a, now I'm actually
12642000	12644000	Losing where it is, but yeah
12644000	12646000	Way down here is where we're actually going to
12646000	12648000	Fetch the server component and render it
12648000	12650000	Onto the page
12650000	12652000	But up here we're using an effect
12652000	12654000	To say anytime that you
12654000	12656000	Navigate on the page, first off we're going to
12656000	12658000	Start a transition, which
12658000	12660000	I'm still wrapping my head around a little bit
12660000	12662000	But it's basically saying, keep the DOM
12662000	12664000	That you already have
12664000	12666000	Until all the other async stuff has resolved
12666000	12668000	And then replace it
12668000	12670000	Once all of that is settled, is that kind of what it's doing?
12672000	12674000	It's, yeah, I would maybe
12674000	12676000	And again, just to clarify
12676000	12678000	This file we're looking at, that's not
12678000	12680000	That is the part that's the framework part
12680000	12682000	This is the framework part
12682000	12684000	It's not the part that you're
12684000	12686000	You don't need any effects here
12686000	12688000	As a server components user or something like this
12688000	12690000	So this is like the framework router part
12690000	12692000	Really
12692000	12694000	Actually I just realized that we made one
12694000	12696000	Omission, which is, I think we still need
12696000	12698000	To handle pop state
12698000	12700000	Because we want the back button to work, right?
12700000	12702000	So we want the back button to also
12702000	12704000	Update the
12706000	12708000	So I think that should
12708000	12710000	That should give us the
12710000	12712000	Well, I guess we don't, we replaced
12712000	12714000	State, so it's, you're not going to see it
12714000	12716000	Yeah, you're not going to see it
12716000	12718000	But yeah, this is another thing
12718000	12720000	That frameworks deal with, where if you
12720000	12722000	Don't want to have like a full page refresh
12722000	12724000	Every time, because if you did this fully server
12724000	12726000	Side, we could anytime
12726000	12728000	You type in the input, send a form request
12728000	12730000	Refresh the page
12730000	12732000	And send that new stuff down
12732000	12734000	But here we want to say, don't refresh the whole page
12734000	12736000	Keep it where it is, we're going to
12736000	12738000	Handle those changes to the URL
12738000	12740000	Bar ourselves, and we're going to
12740000	12742000	Make sure like, when you do all your web standard
12742000	12744000	Back buttons, they still work
12744000	12746000	And when you actually navigate
12746000	12748000	We don't want to blow away the app
12748000	12750000	And re-render it top to bottom, we want to keep it where it is
12750000	12752000	And trigger anyone that
12752000	12754000	Cares about the transition to also
12754000	12756000	Show little loading states
12756000	12758000	Yeah, so just to clarify
12758000	12760000	The start transition stuff here
12760000	12762000	It doesn't prevent
12762000	12764000	It doesn't have anything to do with
12764000	12766000	Reloading the page completely
12766000	12768000	Because React wouldn't reload the page
12768000	12770000	We're just set in state
12770000	12772000	There's no reason to reload the page
12772000	12774000	What happens here
12774000	12776000	Is it just prevents
12776000	12778000	React from hiding content
12778000	12780000	That was already visible
12780000	12782000	Like if you're interacting with
12782000	12784000	A search input, you don't want that
12784000	12786000	Input to get hidden, because
12786000	12788000	We're waiting
12788000	12790000	Our new state is this response
12790000	12792000	From the server that's still streaming in
12792000	12794000	So start transition just says
12794000	12796000	This state update is not urgent
12796000	12798000	You don't have to
12798000	12800000	React doesn't have to
12800000	12802000	React can wait
12802000	12804000	Until we have something
12804000	12806000	Meaningful to show
12806000	12808000	So in reality what that means
12808000	12810000	Is it wouldn't wait
12810000	12812000	It will wait long enough
12812000	12814000	Not so that
12814000	12816000	It doesn't have to hide any existing content
12816000	12818000	But for example
12818000	12820000	If your server response
12820000	12822000	Includes some new suspense boundary
12822000	12824000	With a bunch of stuff inside
12824000	12826000	It's not going to wait for that
12826000	12828000	Because there's no reason to
12828000	12830000	But start transition
12830000	12832000	Is this opt-in
12832000	12834000	This is not urgent
12834000	12836000	So you don't have to hide a bunch of stuff
12836000	12838000	While we're waiting
12838000	12840000	Keep things as they are
12840000	12842000	And then we can keep track of them
12842000	12844000	Inline in the search component
12844000	12846000	It has an inline indicator
12846000	12848000	That it's parent
12848000	12850000	Is actually refetching
12850000	12852000	But yeah
12852000	12854000	This is kind of what it is
12854000	12856000	That's what happens inside the framework
12856000	12858000	But if we forget this file exists
12858000	12860000	And we just approach it from
12860000	12862000	I think it's helpful to describe it
12862000	12864000	From the server components
12864000	12866000	Point of view
12866000	12868000	As a user you don't even have this root client.js file
12868000	12870000	It's somewhere in the framework
12870000	12872000	But as a user where do you start
12872000	12874000	Where does the story start
12874000	12876000	For a user
12876000	12878000	Gotcha
12878000	12880000	Because that's the boundary that we set
12880000	12882000	With suspense
12882000	12884000	Anytime you
12884000	12886000	Well we can't see it anymore
12886000	12888000	But it used to
12888000	12890000	It'll sort of show that fallback
12890000	12892000	And then show the whole result
12892000	12894000	But what we've done is we've put the search box
12894000	12896000	Alongside the stuff that's loading
12896000	12898000	So in order to make sure all of
12898000	12900000	The stuff you're looking at in the search box itself
12900000	12902000	Aren't as you mentioned
12902000	12904000	Removed from the page
12904000	12906000	Or changed in some way
12906000	12908000	Transition is the way to do that
12908000	12910000	And I'm assuming
12910000	12912000	Use transition is a pretty global thing
12912000	12914000	So when you start transition
12914000	12916000	Is it based on parents
12916000	12918000	Where if a parent starts a transition
12918000	12920000	The child picks it up here
12920000	12922000	No
12922000	12924000	It's really about the state updates
12924000	12926000	It's like whatever you
12926000	12928000	Whichever set state calls happen
12928000	12930000	Inside of a strategic goal
12930000	12932000	They are kind of marked as
12932000	12934000	This stuff is not urgent
12934000	12936000	And react will display the output
12936000	12938000	When the stuff is ready
12938000	12940000	But what I meant more
12940000	12942000	I think if we ignore all this wiring
12942000	12944000	And we focus on how you approach it as a user
12944000	12946000	The entry point
12946000	12948000	Is really root.server.js
12948000	12950000	That's where the story starts
12950000	12952000	From the user perspective
12952000	12954000	And so you kind of just see it as
12954000	12956000	You have a root component
12956000	12958000	Like in this case server root
12958000	12960000	That accepts the search
12960000	12962000	And it doesn't matter if it's the first time it loads
12962000	12964000	Or if it's like a refresh
12964000	12966000	The way you think about it is the same
12966000	12968000	It's like you got a response
12968000	12970000	You got a request
12970000	12972000	You're going to re-render the tree
12972000	12974000	And so you think about it as
12974000	12976000	I received some search query
12976000	12978000	I'm going to pass it to albums
12978000	12980000	Albums passes it to
12980000	12982000	This searchable album list
12982000	12984000	Which also runs on the server
12984000	12986000	This is where we
12986000	12988000	Actually do the filtering
12988000	12990000	And then we render the search box
12990000	12992000	And the list of albums
12992000	12994000	And so the search box
12994000	12996000	Is kind of
12996000	12998000	This is where
12998000	13000000	This is where this other side
13000000	13002000	Of the flow triggers
13002000	13004000	Where it's like when I tap into the search
13004000	13006000	I want to navigate
13006000	13008000	As a user
13008000	13010000	I just want to navigate here
13010000	13012000	And then that's
13012000	13014000	The whole story
13014000	13016000	Because now it's the server
13016000	13018000	Like we're again in the server
13018000	13020000	In root.server.js
13020000	13022000	And we just kind of render again
13022000	13024000	Using the new search value
13024000	13026000	So you don't really
13026000	13028000	Think of it as state management
13028000	13030000	Right
13030000	13032000	In fact we could even
13032000	13034000	Just for fun we could even delete
13034000	13036000	The state here
13036000	13038000	I believe we could get rid of the
13038000	13040000	State completely
13040000	13042000	And this could just be uncontrolled input
13042000	13044000	That has default value
13044000	13046000	Equals initial search
13046000	13048000	And it has this onChangeHandler
13048000	13050000	That just does the navigation
13050000	13052000	Doesn't do anything else
13052000	13054000	And I think it should still work
13054000	13056000	It actually does
13056000	13058000	Yeah so there's like no state management
13058000	13060000	Here
13060000	13062000	There's no managing caches yourself
13062000	13064000	Or you just want to change some data
13064000	13066000	You just
13066000	13068000	Re-render the page
13068000	13070000	But then it doesn't recreate the DOM
13070000	13072000	It doesn't recreate the DOM
13072000	13074000	Yeah
13074000	13076000	And the boundary that was like
13076000	13078000	If you don't have a transition
13078000	13080000	It will use the suspense fallback
13080000	13082000	So one thing I'm wondering
13082000	13084000	Inside of root server
13084000	13086000	If we remove the suspense wrapper
13086000	13088000	What will happen?
13088000	13090000	Do we need transition anymore?
13090000	13092000	Let's try
13092000	13094000	I don't know
13094000	13096000	I think maybe it would
13096000	13098000	Work without a transition
13098000	13100000	I think
13100000	13102000	But it's
13102000	13104000	Well
13104000	13106000	I guess it depends on where you want
13106000	13108000	To remove the transition
13108000	13110000	They're nested
13110000	13112000	Just to be able to show the
13112000	13114000	IsPending
13114000	13116000	Because the routers should always
13116000	13118000	Navigate in transitions
13118000	13120000	But we can also wrap it in extra time
13120000	13122000	To get this
13122000	13124000	Is it happening
13124000	13126000	For feedback
13126000	13128000	Yeah
13128000	13130000	And so how does it know when
13130000	13132000	IsPending is done?
13132000	13134000	Is that when everything down the parent
13134000	13136000	Chain of components is now rendered?
13136000	13138000	Not quite
13138000	13140000	It's
13140000	13142000	I think conceptually
13142000	13144000	The way it's implemented
13146000	13148000	There are different ways to do it
13148000	13150000	But I think conceptually you can imagine it
13150000	13152000	As
13152000	13154000	It kind of spawns
13154000	13156000	A new parallel universe
13156000	13158000	Where the state is
13158000	13160000	If we go to
13160000	13162000	root.client.js
13162000	13164000	And you see that
13164000	13166000	It does this set URL
13166000	13168000	Call
13168000	13170000	Traditionally this would mean
13170000	13172000	The state changed
13172000	13174000	Get the new thing on the screen
13174000	13176000	Immediately
13176000	13178000	If we get rid of startTransition
13178000	13180000	In both places
13180000	13182000	We would see traditional re-rendering
13182000	13184000	Behavior where
13184000	13186000	It's kind of
13186000	13188000	We changed this, now it has to update
13188000	13190000	To reflect what's in the state
13190000	13192000	We don't have the
13192000	13194000	JSX tree for what's in the state
13194000	13196000	That's why it's showing
13196000	13198000	The closest suspense spinner
13198000	13200000	Which
13200000	13202000	You would need to add
13202000	13204000	And the analogy that I like to use
13204000	13206000	For this is git
13206000	13208000	So if you work on main
13208000	13210000	If you only work on main
13210000	13212000	And then
13212000	13214000	You
13214000	13216000	Make a change that
13216000	13218000	You start refactoring something
13218000	13220000	And you change
13220000	13222000	One file
13222000	13224000	And
13224000	13226000	It's not done until you finish refactoring
13226000	13228000	Your project is kind of
13228000	13230000	In the loading state
13230000	13232000	It's not ready
13232000	13234000	And the users would see
13234000	13236000	Imagine you refactored in production
13236000	13238000	Your users would see
13238000	13240000	That you're doing it
13240000	13242000	And that's why we don't do it this way
13242000	13244000	We start a branch, we work in a branch
13244000	13246000	And then we think
13246000	13248000	This is enough to ship
13248000	13250000	To the main branch
13250000	13252000	And so transitions are kind of the same concept
13252000	13254000	It's like branches
13254000	13256000	It's like you're telling React
13256000	13258000	Here's a set state I want you to do
13258000	13260000	But actually start
13260000	13262000	Working on it
13262000	13264000	In background
13264000	13266000	Start preparing it
13266000	13268000	You can almost imagine
13268000	13270000	You had two screens
13270000	13272000	And one screen was what the user sees
13272000	13274000	And the other screen
13274000	13276000	Is background stuff
13276000	13278000	And on the screen
13278000	13280000	With the background stuff
13280000	13282000	You would see a big loading indicator
13282000	13284000	Because nothing is ready yet
13284000	13286000	And then it would kind of gradually refine
13286000	13288000	To get
13288000	13290000	With the server data
13290000	13292000	And at some point you have enough server data
13292000	13294000	That you don't
13294000	13296000	You wouldn't need to hide anything to show it
13296000	13298000	You wouldn't need to hide any
13298000	13300000	Existing content
13300000	13302000	So this is where React commits the transition
13302000	13304000	So React is like
13304000	13306000	We have enough of the tree
13306000	13308000	That we wouldn't need to hide anything
13308000	13310000	Nothing would
13310000	13312000	Disappear under you
13312000	13314000	It's automatic
13314000	13316000	You don't think about this as a user
13316000	13318000	But that's the heuristic we use
13318000	13320000	We're going to show you
13320000	13322000	The output as soon as we have enough
13322000	13324000	That
13324000	13326000	It doesn't feel disruptive
13326000	13328000	Because nothing disappears
13328000	13330000	From under you
13330000	13332000	Right
13332000	13334000	So React commits transitions off
13334000	13336000	To decide what if I delete it here
13336000	13338000	What if I remove it here
13338000	13340000	What if we remove the suspense boundary
13340000	13342000	And I think it will still take some time
13342000	13344000	To really feel it out
13344000	13346000	Because I'm sure you use it
13346000	13348000	In a lot of different contexts
13348000	13350000	But for the search box it makes sense to me
13350000	13352000	Where you definitely want to start transition here
13352000	13354000	Because we want
13354000	13356000	To be able to track
13356000	13358000	Like okay this
13358000	13360000	We've started something
13360000	13362000	We don't know when it's done
13362000	13364000	All we want to do is show that it is pending
13364000	13366000	And then as soon as React
13366000	13368000	Has figured out
13368000	13370000	Everything
13370000	13372000	It's resolved all the components down the tree
13372000	13374000	I'm trying to find the perfect vocabulary here
13374000	13376000	And I don't think I have it yet
13376000	13378000	I wouldn't say
13378000	13380000	It doesn't need to resolve everything
13380000	13382000	Because maybe you have some new components
13382000	13384000	And there's no reason to wait for them
13384000	13386000	So as soon as you have enough
13386000	13388000	That would be not embarrassing
13388000	13390000	To show
13390000	13392000	That's kind of how I explain it
13392000	13394000	As soon as you have a decent
13394000	13396000	Floating state
13396000	13398000	And it's determined automatically
13398000	13400000	So you don't need to think about it
13400000	13402000	Yeah
13402000	13404000	It's contextual
13404000	13406000	We know you called this from the search box
13406000	13408000	So we know what this search box
13408000	13410000	Depends on
13410000	13412000	The parents that it has in order to render that search box again
13412000	13414000	No
13414000	13416000	That's not how it works
13416000	13418000	It's not conceptual
13418000	13420000	I think that's kind of the cool thing
13420000	13422000	About this
13422000	13424000	It really doesn't care
13424000	13426000	Because you could be navigating to another page
13426000	13428000	You could be navigating
13428000	13430000	From a feed page
13430000	13432000	To a profile page
13432000	13434000	And then let's say on the profile page
13434000	13436000	You have profile cover
13436000	13438000	And then you have
13438000	13440000	Profile timeline inside of suspense
13440000	13442000	So what that means
13442000	13444000	And then
13444000	13446000	My start transition is built into the router
13446000	13448000	So it's not
13448000	13450000	Just for this search box
13450000	13452000	Like here
13452000	13454000	We could completely remove start transition
13454000	13456000	Like we just want to show a state
13456000	13458000	Tracking what's going on
13458000	13460000	Yeah so here it's not essential
13460000	13462000	Because we only added it here
13462000	13464000	To get this access to this is pending
13464000	13466000	Where it's important
13466000	13468000	Is only at the router level
13468000	13470000	And so what this does
13470000	13472000	What this does
13472000	13474000	Here for example
13474000	13476000	If we're moving from feed to profile
13476000	13478000	And then profile has like a cover
13478000	13480000	And a timeline
13480000	13482000	Wrapped in suspense
13482000	13484000	What's going to happen is that
13484000	13486000	If profile cover needs to load some data
13486000	13488000	For example profile name
13488000	13490000	And your avatar
13490000	13492000	Then the router will wait
13492000	13494000	For that to be ready
13494000	13496000	It won't teleport you to this empty profile page
13496000	13498000	That doesn't have anything
13498000	13500000	Because we don't have a decent loading state
13500000	13502000	For it
13502000	13504000	We don't have something to show yet
13504000	13506000	But then as soon as
13506000	13508000	The profile cover is ready
13508000	13510000	And the remaining stuff is wrapped in suspense
13510000	13512000	It will be like
13512000	13514000	Now I can actually move to this page
13514000	13516000	Because I can show the cover
13516000	13518000	And then the rest will have a spinner
13518000	13520000	So this is what it does
13520000	13522000	It just opts you into this
13522000	13524000	It doesn't have to happen right away
13524000	13526000	But we're going to wait enough
13526000	13528000	Until we have something decent to show
13528000	13530000	And it's based on this heuristic
13530000	13532000	So it doesn't really care
13532000	13534000	From which component
13534000	13536000	Because like you see here
13536000	13538000	It's really at the root level
13538000	13540000	So it doesn't even know
13540000	13542000	You're calling it from search input
13542000	13544000	It doesn't care where you're calling it from
13544000	13546000	Yeah
13546000	13548000	I guess in the other example I was trying to figure out
13548000	13550000	When is pending resolved
13550000	13552000	And it sounds like there's more heuristics involved
13552000	13554000	Than just like
13554000	13556000	Everything down the tree has re-rendered
13556000	13558000	There's a lot more to it
13558000	13560000	Well it's not a lot more
13560000	13562000	It's a very simple heuristic
13562000	13564000	But it's very non-intuitive
13564000	13566000	Because we only figured it out
13566000	13568000	In the initial design
13568000	13570000	It didn't work like this
13570000	13572000	And this is the most natural
13572000	13574000	It's a bit weird
13574000	13576000	Because understanding the heuristic
13576000	13578000	Is pretty difficult
13578000	13580000	But then the way it works is very natural
13580000	13582000	So you don't have to think about it
13582000	13584000	You don't need to know about it as a user
13584000	13586000	If you're curious
13586000	13588000	As a framework author
13588000	13590000	How it works
13590000	13592000	Then it's really
13592000	13594000	Can we
13594000	13596000	Every time
13596000	13598000	We're about to
13598000	13600000	We got some new data
13600000	13602000	We could maybe make some progress
13602000	13604000	On rendering the tree
13604000	13606000	And then every time
13606000	13608000	We're like okay
13608000	13610000	For now it seems like we're done
13610000	13612000	We've done everything we could
13612000	13614000	And we make a decision
13614000	13616000	Is this enough to
13616000	13618000	Show this to the user now
13618000	13620000	Or do we have to keep waiting longer
13620000	13622000	And the way we make the
13622000	13624000	Decision is pretty simple
13624000	13626000	It's if we
13626000	13628000	Have rendered it now
13628000	13630000	Would we have to hide any
13630000	13632000	Existing content
13632000	13634000	So this moment
13634000	13636000	Where the search bar disappeared
13636000	13638000	Because something there was not ready
13638000	13640000	And there was a suspense boundary above
13640000	13642000	It kind of means we're
13642000	13644000	Resuspending it
13644000	13646000	It wasn't here
13646000	13648000	But it has to disappear
13648000	13650000	Because some part of the tree is not ready
13650000	13652000	And so if we have to do this
13652000	13654000	We're not going to commit it
13654000	13656000	No, let's keep waiting a bit longer
13656000	13658000	But
13658000	13660000	If we have enough of the tree
13660000	13662000	That we don't need to hide any
13662000	13664000	Existing content
13664000	13666000	It's just maybe we have some new content
13666000	13668000	That's not fully fetched yet
13668000	13670000	We would be like, yeah, sure, let's go ahead
13670000	13672000	Let's show it
13672000	13674000	I think I'm getting it then
13674000	13676000	It's definitely based on what you have now
13676000	13678000	And what you're trying to get
13678000	13680000	And if
13680000	13682000	You have enough of a match
13682000	13684000	In what you're trying to get that you're not going to hide anything
13684000	13686000	Then we'll go ahead and resolve it
13686000	13688000	Exactly
13688000	13690000	That's how it works
13690000	13692000	It's a very simple thing
13692000	13694000	But it's hard to wrap your mind around it
13694000	13696000	But I find it
13696000	13698000	Kind of fascinating
13698000	13700000	Because it is a solution
13700000	13702000	To the
13702000	13704000	If you ever developed a router
13704000	13706000	In traditional kind of JavaScript
13706000	13708000	Ecosystem
13708000	13710000	There were always
13710000	13712000	You always had to make
13712000	13714000	This tradeoff between
13714000	13716000	How do I know
13716000	13718000	When to show the route
13718000	13720000	During navigation
13720000	13722000	And different routers solve this
13722000	13724000	Differently
13724000	13726000	So
13726000	13728000	In some routers
13728000	13730000	I think maybe Ember router
13730000	13732000	I'm not sure
13732000	13734000	But in some routers
13734000	13736000	They wait for all data
13736000	13738000	For the new route to be ready
13738000	13740000	And then they transition you
13740000	13742000	To the new route
13742000	13744000	And so the benefit of this is that the user
13744000	13746000	Doesn't see this immediate
13746000	13748000	Big spinner
13748000	13750000	That's like, you're pressing a link
13750000	13752000	And you have nothing to show yet
13752000	13754000	And you have to wait for everything to load
13754000	13756000	Which could be slow
13756000	13758000	So ideally
13758000	13760000	You wouldn't have to
13760000	13762000	And then the other extreme
13762000	13764000	Which I think most React solutions
13764000	13766000	At least for some time
13766000	13768000	It depends on how we configure it
13768000	13770000	But at least it was very common
13770000	13772000	That routing happens immediately
13772000	13774000	So you press a link
13774000	13776000	You immediately re-render
13776000	13778000	Like you rendered a new page
13778000	13780000	But maybe it's not ready
13780000	13782000	And so I think the beautiful thing
13782000	13784000	About this paradigm
13784000	13786000	Is that it lets you draw
13786000	13788000	The boundary exactly where you want
13788000	13790000	Just by placing suspense
13790000	13792000	Around it
13792000	13794000	Because the router
13794000	13796000	Uses transitions by default
13796000	13798000	So you don't have to
13798000	13800000	By default everything is sticky
13800000	13802000	So until everything is ready
13802000	13804000	It doesn't do it
13804000	13806000	But then suspense lets you say
13806000	13808000	No, actually this part of the tree
13808000	13810000	That's okay to wait a little bit
13810000	13812000	It doesn't have to wait for it
13812000	13814000	So it's kind of like inverse await
13814000	13816000	Where you say
13816000	13818000	This part, it's independent
13818000	13820000	I wrap it in a loading state
13820000	13822000	Now transitions won't wait for it anymore
13822000	13824000	And I think that's maybe
13824000	13826000	A natural way to explain it
13826000	13828000	It's like by default
13828000	13830000	Everything is sticky
13830000	13832000	And suspense is what unsticks it
13832000	13834000	Yeah
13834000	13836000	That's a wild way to think about it
13836000	13838000	Because there wasn't really
13838000	13840000	A convention for this before
13840000	13842000	You were just going to grab whatever the tree is
13842000	13844000	And plop it on the page
13844000	13846000	You can't use heuristics to know
13846000	13848000	What was there before in the new thing
13848000	13850000	It's not really like diffing
13850000	13852000	But it is figuring out
13852000	13854000	You don't really want to suspend again
13854000	13856000	We don't want to keep suspending every time we type in the search box
13856000	13858000	We've suspended before
13858000	13860000	And we don't want the user to see it
13860000	13862000	So if we do a start transition
13862000	13864000	We can still get the new state
13864000	13866000	Or the new text inside the search box
13866000	13868000	But we're going to avoid
13868000	13870000	Blowing it away while we're doing it
13870000	13872000	Yep
13872000	13874000	Very cool
13874000	13876000	Okay, I'll also admit that I'm like
13876000	13878000	I'm running on fumes
13878000	13880000	I had breakfast like eight hours ago
13880000	13882000	At this point
13882000	13884000	I didn't think we would go this long
13884000	13886000	I definitely thought we were going to go for like two hours
13886000	13888000	Maybe two hours thirty
13888000	13890000	You've been super generous with your time
13890000	13892000	But I'm going to push this up
13892000	13894000	To make a separate branch
13894000	13896000	Just in case people want to see
13896000	13898000	Co-authored by Danny Ramone
13898000	13900000	Absolutely
13900000	13902000	We'll call it, oh boy, Router Toy
13902000	13904000	It's what I kind of liked
13904000	13906000	RSC Demo also
13906000	13908000	RSC Stream Demo
13908000	13910000	If anyone's wondering what the Twitch Stream Demo had
13910000	13912000	Yeah, we'll do that
13914000	13916000	And if anyone wants to play with this
13916000	13918000	I'm tired from just following along
13918000	13920000	Man, thanks for sticking through here
13920000	13922000	In the chat, thank you
13922000	13924000	But I shared it just above
13924000	13926000	If anyone wants to play with this
13926000	13928000	Toy implementation of React Server
13928000	13930000	Components, we never actually got to look
13930000	13932000	At a framework, we built our own
13932000	13934000	But this is simple RSC
13934000	13936000	It doesn't even have a readme at the moment
13936000	13938000	I was very undergun trying to get it in
13938000	13940000	For the stream today
13940000	13942000	So I'll try to add some docs
13942000	13944000	And maybe explain the dev panel a little bit more
13944000	13946000	But the goal is to not add
13946000	13948000	Any more features to this
13948000	13950000	Maybe delete the files that we don't use
13950000	13952000	So that, like, I think you have
13952000	13954000	A bunch of files that we didn't end up using
13954000	13956000	Yeah, I think the Bjork album's gone
13956000	13958000	The like button was never pulled in
13958000	13960000	Counter was never pulled in
13960000	13962000	That should be it
13966000	13968000	And I'll double check on this
13968000	13970000	In case it was floating around somewhere
13970000	13972000	Yeah, it still is
13972000	13974000	Maybe let's rename root.server.js
13974000	13976000	To something like
13976000	13978000	Server root, and then
13978000	13980000	The root.client.js to something like
13980000	13982000	Router, or I don't know
13982000	13984000	Ideally we would
13984000	13986000	Maybe make a
13986000	13988000	I'd like to see some separation so that it's clear
13988000	13990000	This is the framework part, this is not the part
13990000	13992000	You're supposed to be writing
13992000	13994000	No, exactly
13994000	13996000	Yeah, I definitely prefer to
13996000	13998000	Oh, did we actually get an index file?
13998000	14000000	Where did this come from?
14000000	14002000	I think this is just like an old thing
14002000	14004000	Yeah, this is not being used
14004000	14006000	I wanted to call it
14006000	14008000	We decided on index and bootstrapping
14008000	14010000	As like loose names
14010000	14012000	I don't mind it
14012000	14014000	But index feels right for that
14014000	14016000	Because that's like the index route
14016000	14018000	And this is just
14018000	14020000	Yeah, there's a few ways to put this one
14020000	14022000	Maybe not the index
14022000	14024000	Maybe like page
14024000	14026000	Or something
14026000	14028000	Oh, page is good
14028000	14030000	Next.js style
14030000	14032000	This can be
14032000	14034000	Route handler
14034000	14036000	Well, it does a lot of things
14036000	14038000	It mounts it onto the page
14038000	14040000	Yeah
14040000	14042000	Client
14042000	14044000	I think
14044000	14046000	Can we move it
14046000	14048000	Out of the source directory
14048000	14050000	And put it
14050000	14052000	Closer to the handler
14052000	14054000	I think conceptually
14054000	14056000	It's related to this handler.js
14056000	14058000	In a way
14058000	14060000	It's like the client part of it
14062000	14064000	I hear what you're saying
14064000	14066000	Or maybe you could move to source
14066000	14068000	Like make a directory called framework
14068000	14070000	And then there would be
14070000	14072000	Like server.js
14072000	14074000	And client.js
14074000	14076000	Yeah
14076000	14078000	Router.server.js
14078000	14080000	I don't know
14080000	14082000	I went back and forth so long
14082000	14084000	I landed on the remix names
14084000	14086000	And I still don't like them
14086000	14088000	So
14088000	14090000	I just think it's important to
14090000	14092000	Make sure that people don't think that this is the stuff
14092000	14094000	You're supposed to be writing
14094000	14096000	The actual application code is just
14096000	14098000	Page.js
14098000	14100000	Search.js and searchablealbum.js
14100000	14102000	Yeah
14102000	14104000	We could call it
14104000	14106000	Underscore internals
14106000	14108000	Yeah
14108000	14110000	Bubble it up
14110000	14112000	The only thing left to do is to
14112000	14114000	Track down a couple hard-coded things
14114000	14116000	I think I was pretty
14116000	14118000	I wasn't great about this
14118000	14120000	So that would be page now
14120000	14122000	I'm hoping
14122000	14124000	Also this is not the client part anymore
14124000	14126000	Yeah
14130000	14132000	Wherever we did root.client
14132000	14134000	We did that
14134000	14136000	Okay
14136000	14138000	Yeah
14138000	14140000	Oh so let's rename search to
14140000	14142000	Searchbox because that's how you named it
14142000	14144000	Oh yeah I noticed
14144000	14146000	We were a little inconsistent
14146000	14148000	Okay I renamed it
14148000	14150000	Okay
14150000	14152000	And I'll move
14152000	14154000	The filter albums function down
14154000	14156000	So that it doesn't obscure the
14156000	14158000	Component
14158000	14160000	Build successfully
14160000	14162000	I think everything works
14162000	14164000	What?
14164000	14166000	Awesome
14166000	14168000	That's searchbox
14168000	14170000	That's that
14170000	14172000	This index file is just not a thing
14172000	14174000	I don't know why it keeps coming back actually
14174000	14176000	Why does it keep coming back
14182000	14184000	Nice
14184000	14186000	Maybe stick it in support
14186000	14188000	I hear you
14188000	14190000	I don't know about that
14190000	14192000	I don't know
14192000	14194000	Yeah I think internals is still
14194000	14196000	Where I'm sitting
14196000	14198000	I've also seen engine as a convention
14198000	14200000	But that's a little more
14200000	14202000	We can also call it
14202000	14204000	Yeah
14204000	14206000	That's fine
14206000	14208000	It does kind of indicate you can have
14208000	14210000	Multiple routes but
14210000	14212000	It is a router
14214000	14216000	It's like toy router
14216000	14218000	Toy router
14218000	14220000	Yeah I mean the whole thing's
14220000	14222000	A toy so I'm not going to call it that
14222000	14224000	Yeah that's good
14224000	14226000	Yeah that'll
14226000	14228000	Work fine
14233000	14235000	Okay
14235000	14237000	I'm feeling good about these names
14239000	14241000	And the only squiggles we have should just be
14241000	14243000	Yeah we're abusing window
14243000	14245000	And async
14245000	14247000	Is not part of like the
14247000	14249000	Built in TypeScript JSX thing
14249000	14251000	It's kind of funny that JSX has been hijacked
14251000	14253000	As like this standard that can be highlighted
14253000	14255000	The same way for everyone
14255000	14257000	Because you can use it different ways
14257000	14259000	And you end up with funky situations like this
14259000	14261000	Where some people support promises
14261000	14263000	And some people don't
14263000	14265000	But it's still JSX
14265000	14267000	Yeah
14267000	14269000	Why does it keep showing client part
14269000	14271000	I think I deleted this comment before
14271000	14273000	Yeah
14273000	14275000	Sometimes LiveShare
14275000	14277000	Gets out of sync
14277000	14279000	And luckily we've been pretty in sync this whole time
14281000	14283000	Perfactor
14283000	14285000	New naming
14286000	14288000	All right
14288000	14290000	That's up
14290000	14292000	Beautiful
14292000	14294000	Beautiful
14294000	14296000	Yeah
14296000	14298000	Well I'll go back to our big faces I think
14298000	14300000	Your lighting's gone down a bit
14300000	14302000	I have some more time
14302000	14304000	But yeah let me
14304000	14306000	Make sure of the branch
14306000	14308000	Before we sign off
14308000	14310000	Okay my computer's chugging
14310000	14312000	Y'all can find the branch don't worry about it
14312000	14314000	But hey if you enjoyed the stream
14315000	14317000	I try to do Twitch streams
14317000	14319000	Every week
14319000	14321000	Thursdays at
14321000	14323000	What is it now
14323000	14325000	It should be 3pm eastern
14325000	14327000	But we bumped it forward a little bit
14327000	14329000	For this special edition stream
14329000	14331000	But I've been doing React server components a lot
14331000	14333000	I've been going really deep on it
14333000	14335000	Because I'm also someone who works on Astro
14335000	14337000	Which is a meta framework
14337000	14339000	It would be cool to support some implementation
14339000	14341000	Of server components if not for the migration story
14341000	14343000	So I'm going to be playing with it a lot more
14344000	14346000	And yeah
14346000	14348000	Drop a follow if that interests you
14348000	14350000	You can also of course follow Dan
14350000	14352000	If you're not I don't know why
14352000	14354000	But he's around Twitter
14354000	14356000	Dan underscore Abramov
14356000	14358000	You can see the title of this stream
14358000	14360000	I think that is the Twitter handle
14360000	14362000	Is there anyone else
14362000	14364000	That you want people to find you
14364000	14366000	Or any closing thoughts
14366000	14368000	I don't think I want people to find me
14368000	14370000	All right
14370000	14372000	Enough of them have found me
14373000	14375000	I just want to say I really appreciate you
14375000	14377000	Offering
14377000	14379000	For me to be on this stream
14381000	14383000	And also
14383000	14385000	You really did the homework
14385000	14387000	I mean the only reason
14387000	14389000	We were even able to
14389000	14391000	Build a mini framework
14391000	14393000	Is because you've already built 80% of it
14393000	14395000	So I really appreciate
14395000	14397000	Doing the homework
14397000	14399000	So well
14399000	14401000	It's really impressive
14401000	14403000	And there aren't
14403000	14405000	There isn't that much documentation around it
14405000	14407000	But yeah
14407000	14409000	Thank you so much for
14409000	14411000	Creating this opportunity
14411000	14413000	It was really fun
14413000	14415000	Yeah
14415000	14417000	I mean thanks for just saying yes
14417000	14419000	On a random Twitter DM
14419000	14421000	I wasn't sure
14421000	14423000	But I thought like
14423000	14425000	Because I saw the stream you did with
14425000	14427000	Ken C Dodds and others
14427000	14429000	And it was like this stream was great
14429000	14431000	And I was like
14431000	14433000	Can we actually
14433000	14435000	Draw a flow diagram
14435000	14437000	And see some code
14437000	14439000	Because conceptually
14439000	14441000	There's a lot going on
14441000	14443000	So yeah
14443000	14445000	I think this went over really well
14445000	14447000	And the replay will be on YouTube also
14447000	14449000	I'll share the link in the chat again
14449000	14451000	But I'll try to upload this live stream over there
14451000	14453000	It might go up by tomorrow
14453000	14455000	Because downloading four hours of stream from Twitch
14455000	14457000	And uploading four hours of stream to YouTube
14457000	14459000	It might be a little bit
14459000	14461000	To see if we can get like
14461000	14463000	The let's build a router part
14463000	14465000	Separate from the let's understand server components
14465000	14467000	Because one's more intermediate and advanced
14467000	14469000	Than the other
14469000	14471000	But yeah
14471000	14473000	Okay
14473000	14475000	Yeah well good having you
14475000	14477000	Thanks for stopping in
14477000	14479000	And oh
14479000	14481000	Let's actually find someone to raid
14481000	14483000	Before I hop off
14483000	14485000	Does anyone have suggestions
14485000	14487000	What does it mean
14487000	14489000	What is raiding
14489000	14491000	I don't understand
14491000	14493000	It's something you can do on Twitch
14493000	14495000	To take your audience and push them
14495000	14497000	Into another stream that's active
14497000	14499000	Oh
14499000	14501000	Are they like forced
14501000	14503000	To do that
14503000	14505000	Well I mean you can just stop watching
14505000	14507000	If you don't want to do that
14507000	14509000	It's kind of like YouTube autoplay
14509000	14511000	Yeah
14511000	14513000	But it hosts inside of yours
14513000	14515000	And you can leave
14515000	14517000	It's I don't know it's a fun system
14517000	14519000	But I'll raid Cassidy
14519000	14521000	Because she's great and does a ton of React tutorials
14521000	14523000	And everything
14523000	14525000	We still had a ton of people sticking around
14525000	14527000	Thank y'all so much
14527000	14529000	Drop a follow for the next stream
14529000	14531000	Obviously do all of that
14531000	14533000	But yeah
14533000	14535000	See y'all around
14535000	14537000	Bye
14537000	14539000	Okay
