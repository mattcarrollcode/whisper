WEBVTT

00:00.000 --> 00:02.520
I don't know what those letters meant in blue.

00:21.660 --> 00:22.980
I'm obsessed.

00:30.000 --> 00:32.000
I don't know what those letters meant in blue.

01:00.000 --> 01:02.000
I don't know what those letters meant in blue.

01:30.000 --> 01:32.000
I don't know what those letters meant in blue.

02:00.000 --> 02:02.000
I don't know what those letters meant in blue.

03:00.000 --> 03:02.000
I don't know what those letters meant in blue.

03:30.000 --> 03:32.000
I don't know what those letters meant in blue.

04:00.000 --> 04:02.000
I don't know what those letters meant in blue.

04:30.000 --> 04:32.000
I don't know what those letters meant in blue.

05:00.000 --> 05:02.000
I don't know what those letters meant in blue.

05:30.000 --> 05:32.000
I don't know what those letters meant in blue.

06:00.000 --> 06:02.000
I am obsessed.

06:02.000 --> 06:04.000
I am obsessed.

06:04.000 --> 06:06.000
I am obsessed.

06:06.000 --> 06:08.000
I am obsessed

06:08.000 --> 06:10.000
I am obsessed

06:10.000 --> 06:12.000
I am obsessed

06:12.000 --> 06:14.000
I am obsessed

06:14.000 --> 06:16.000
I am obsessed

06:16.000 --> 06:18.000
I am obsessed

06:18.000 --> 06:20.000
I am obsessed

06:20.000 --> 06:22.000
I am obsessed

06:22.000 --> 06:24.000
I am obsessed

06:24.000 --> 06:26.000
I am obsessed

06:26.000 --> 06:28.000
I am obsessed

06:28.000 --> 06:30.000
I am obsessed

06:30.000 --> 06:32.000
I am obsessed

06:32.000 --> 06:34.000
I am obsessed

06:34.000 --> 06:36.000
I am obsessed

06:36.000 --> 06:38.000
I am obsessed

06:38.000 --> 06:40.000
I am obsessed

06:40.000 --> 06:42.000
I am obsessed

06:42.000 --> 06:44.000
I am obsessed

06:44.000 --> 06:46.000
I am obsessed

06:46.000 --> 06:48.000
I am obsessed

06:48.000 --> 06:50.000
I am obsessed

06:50.000 --> 06:52.000
I am obsessed

06:52.000 --> 06:54.000
I am obsessed

06:54.000 --> 06:56.000
I am obsessed

06:56.000 --> 06:58.000
I am obsessed

06:58.000 --> 07:00.000
I am obsessed

07:00.000 --> 07:02.000
I am obsessed

07:02.000 --> 07:04.000
I am obsessed

07:04.000 --> 07:06.000
I am obsessed

07:06.000 --> 07:08.000
I am obsessed

07:08.000 --> 07:10.000
I am obsessed

07:10.000 --> 07:12.000
I am obsessed

07:12.000 --> 07:14.000
I am obsessed

07:14.000 --> 07:16.000
I am obsessed

07:16.000 --> 07:18.000
I am obsessed

07:18.000 --> 07:20.000
I am obsessed

07:20.000 --> 07:22.000
I am obsessed

07:22.000 --> 07:24.000
I am obsessed

07:25.000 --> 07:27.000
Yeah, I think we will

07:27.000 --> 07:29.000
I think we'll at least explain

07:29.000 --> 07:31.000
My goal is to explain like

07:31.000 --> 07:33.000
mental model, way to think about it

07:33.000 --> 07:35.000
and maybe build a little something

07:35.000 --> 07:37.000
along the way. No promises it'll look good

07:37.000 --> 07:39.000
but it should be at least functional

07:39.000 --> 07:41.000
But yeah

07:41.000 --> 07:43.000
So I also

07:43.000 --> 07:45.000
like before we started just wanted to like

07:45.000 --> 07:47.000
sort of catch up and see how you've been

07:47.000 --> 07:49.000
doing with all this like

07:49.000 --> 07:51.000
working with React for the past

07:51.000 --> 07:53.000
few years. It feels like React Server Components

07:53.000 --> 07:55.000
has been going

07:55.000 --> 07:57.000
for a long time or I've heard about it

07:57.000 --> 07:59.000
for a long time and it's taken many forms

07:59.000 --> 08:01.000
and I'm kind of curious like what did

08:01.000 --> 08:03.000
it take to get to this point

08:03.000 --> 08:05.000
like what was the process

08:05.000 --> 08:07.000
there and the collaboration

08:07.000 --> 08:09.000
Yeah

08:11.000 --> 08:13.000
So I think we first

08:13.000 --> 08:15.000
started like specifically

08:15.000 --> 08:17.000
Sebastian

08:17.000 --> 08:19.000
is like the person who tends

08:19.000 --> 08:21.000
to

08:21.000 --> 08:23.000
kind of look at our vision

08:23.000 --> 08:25.000
going forward like he started thinking

08:25.000 --> 08:27.000
about this maybe in 2016

08:27.000 --> 08:29.000
so

08:29.000 --> 08:31.000
there he had a

08:31.000 --> 08:33.000
internal document

08:33.000 --> 08:35.000
called perhaps provocatively

08:35.000 --> 08:37.000
what comes

08:37.000 --> 08:39.000
after GraphQL

08:39.000 --> 08:41.000
and the idea

08:41.000 --> 08:43.000
was

08:43.000 --> 08:45.000
basically the architecture

08:45.000 --> 08:47.000
like the architecture we had

08:47.000 --> 08:49.000
at Meta for

08:49.000 --> 08:51.000
like

08:51.000 --> 08:53.000
for web apps

08:53.000 --> 08:55.000
was using GraphQL

08:55.000 --> 08:57.000
and Relay for

08:57.000 --> 08:59.000
data access and that worked pretty

08:59.000 --> 09:01.000
well but what ends up

09:01.000 --> 09:03.000
happening is you

09:03.000 --> 09:05.000
you push more and more code

09:05.000 --> 09:07.000
to the client

09:07.000 --> 09:09.000
and so like the client bundle really

09:09.000 --> 09:11.000
grows but that's

09:11.000 --> 09:13.000
also not the whole story it's like

09:13.000 --> 09:15.000
you also push a lot

09:15.000 --> 09:17.000
data like the traditional kind

09:17.000 --> 09:19.000
of rich client architecture

09:19.000 --> 09:21.000
is you push all the data

09:21.000 --> 09:23.000
that you might kind of plausibly

09:23.000 --> 09:25.000
need into a client cache

09:25.000 --> 09:27.000
and then your components pick parts

09:27.000 --> 09:29.000
of the data and somehow massage it

09:29.000 --> 09:31.000
and so what you

09:31.000 --> 09:33.000
the problem you kind of run into

09:33.000 --> 09:35.000
you know as you scale it up is

09:35.000 --> 09:37.000
you end

09:37.000 --> 09:39.000
up having all the data

09:39.000 --> 09:41.000
and all the code you might possibly need

09:41.000 --> 09:43.000
even if actually

09:43.000 --> 09:45.000
it's not needed for the specific

09:45.000 --> 09:47.000
case and

09:47.000 --> 09:49.000
like a canonical

09:49.000 --> 09:51.000
example of this could be

09:51.000 --> 09:53.000
you know like when you want

09:53.000 --> 09:55.000
to show you know a post was

09:55.000 --> 09:57.000
liked by

09:57.000 --> 09:59.000
like your friend

09:59.000 --> 10:01.000
like I don't know

10:01.000 --> 10:03.000
Dan and like Anna

10:03.000 --> 10:05.000
and like five others

10:05.000 --> 10:07.000
something like this and so you don't

10:07.000 --> 10:09.000
actually need for example

10:09.000 --> 10:11.000
their avatars

10:11.000 --> 10:13.000
or

10:13.000 --> 10:15.000
and like you need like very specific bits

10:15.000 --> 10:17.000
of information and really like it's just

10:17.000 --> 10:19.000
you don't even need like the links to their

10:19.000 --> 10:21.000
profiles it's really

10:21.000 --> 10:23.000
just the string that you want to get

10:23.000 --> 10:25.000
but even though the GraphQL

10:25.000 --> 10:27.000
of course like GraphQL lets you be very selective

10:27.000 --> 10:29.000
about what you fetch

10:29.000 --> 10:31.000
and like how you use it so it does

10:31.000 --> 10:33.000
solve this problem partially

10:33.000 --> 10:35.000
but you still

10:35.000 --> 10:37.000
the shape of the data you

10:37.000 --> 10:39.000
download is dictated by the GraphQL

10:39.000 --> 10:41.000
endpoint and so if you

10:41.000 --> 10:43.000
like transform a bunch of

10:43.000 --> 10:45.000
stuff and

10:45.000 --> 10:47.000
get you know like get something

10:47.000 --> 10:49.000
that you know just the

10:49.000 --> 10:51.000
data for the UI layer you kind of

10:51.000 --> 10:53.000
have to do it on the client

10:53.000 --> 10:55.000
and this problem

10:55.000 --> 10:57.000
it's like an inefficiency problem

10:57.000 --> 10:59.000
I think that's like one way

10:59.000 --> 11:01.000
you know one way to think of this is like

11:01.000 --> 11:03.000
we'd like to optimize it so

11:03.000 --> 11:05.000
that like the natural way

11:05.000 --> 11:07.000
to optimize it if you think about it is

11:07.000 --> 11:09.000
okay like you're on the server anyway

11:09.000 --> 11:11.000
why not have some kind of

11:11.000 --> 11:13.000
abstraction kind of like view models

11:13.000 --> 11:15.000
that used to be like a thing

11:15.000 --> 11:17.000
in I don't know 20

11:17.000 --> 11:19.000
2010 or something like this there was

11:19.000 --> 11:21.000
this idea of like view models that

11:21.000 --> 11:23.000
massage the actual model from the

11:23.000 --> 11:25.000
database for the view kind of

11:25.000 --> 11:27.000
preparing just what the view

11:27.000 --> 11:29.000
needs

11:29.000 --> 11:31.000
and I think that's one

11:31.000 --> 11:33.000
angle and it doesn't

11:33.000 --> 11:35.000
have to do like I also want to clarify

11:35.000 --> 11:37.000
it doesn't have to do with like just like big

11:37.000 --> 11:39.000
pages or anything like

11:39.000 --> 11:41.000
a classic kind of low

11:41.000 --> 11:43.000
scale example of this is a documentation

11:43.000 --> 11:45.000
website where you

11:45.000 --> 11:47.000
have like you have many

11:47.000 --> 11:49.000
MDX components

11:49.000 --> 11:51.000
like you know code

11:51.000 --> 11:53.000
snippets or interactive code

11:53.000 --> 11:55.000
editor and so on and

11:55.000 --> 11:57.000
the way you would do this today

11:57.000 --> 11:59.000
probably is you just have

11:59.000 --> 12:01.000
like all of them in a single

12:01.000 --> 12:03.000
bundle and then like all of them get

12:03.000 --> 12:05.000
loaded but ideally what you want

12:05.000 --> 12:07.000
is like if a page has no

12:07.000 --> 12:09.000
interactive code snippets and also

12:09.000 --> 12:11.000
only has like static code

12:11.000 --> 12:13.000
examples you probably don't want to like

12:13.000 --> 12:15.000
download the parser you kind of want to have

12:15.000 --> 12:17.000
that output instead

12:17.000 --> 12:19.000
so I think like that is like

12:19.000 --> 12:21.000
one part of it is this idea

12:21.000 --> 12:23.000
like let's not download the data

12:23.000 --> 12:25.000
we're not going to need let's not

12:25.000 --> 12:27.000
download the code we might

12:27.000 --> 12:29.000
not need let's

12:29.000 --> 12:31.000
just you know download

12:31.000 --> 12:33.000
the things that we actually do need and then

12:33.000 --> 12:35.000
if you need to like pre-process a bunch of stuff

12:35.000 --> 12:37.000
we'll just do that on the server because

12:37.000 --> 12:39.000
we're going to the server anyway

12:39.000 --> 12:41.000
why not do it there

12:41.000 --> 12:43.000
but I think another

12:43.000 --> 12:45.000
way to look at it is just from the

12:45.000 --> 12:47.000
mental model perspective

12:47.000 --> 12:49.000
so if you've been coding

12:49.000 --> 12:51.000
you know like for a while

12:51.000 --> 12:53.000
like especially like before

12:53.000 --> 12:55.000
like before all the client

12:55.000 --> 12:57.000
stuff explosion

12:57.000 --> 12:59.000
which you know it was warranted like people

12:59.000 --> 13:01.000
wanted to do more stuff on the client

13:01.000 --> 13:03.000
because they wanted to have like

13:03.000 --> 13:05.000
zero latency

13:05.000 --> 13:07.000
for like interactions and like really

13:07.000 --> 13:09.000
reach interactions without reloading the page

13:09.000 --> 13:11.000
but then if you think in terms of

13:11.000 --> 13:13.000
like mental model

13:13.000 --> 13:15.000
kind of thinking in terms of

13:15.000 --> 13:17.000
like state management and

13:17.000 --> 13:19.000
caching and like all of this stuff

13:19.000 --> 13:21.000
it gets really complicated

13:21.000 --> 13:23.000
like how do you even know like what to

13:23.000 --> 13:25.000
fetch for the next page how do you

13:25.000 --> 13:27.000
avoid waterfalls

13:27.000 --> 13:29.000
like it gets pretty complex and then if you

13:29.000 --> 13:31.000
think of like the way we used to write

13:31.000 --> 13:33.000
web apps in you know

13:33.000 --> 13:35.000
in 2000s before

13:35.000 --> 13:37.000
like in traditional server

13:37.000 --> 13:39.000
client model the mental model is

13:39.000 --> 13:41.000
so much simpler because you just describe

13:41.000 --> 13:43.000
like I'm going to go to the database

13:43.000 --> 13:45.000
I'm going to fetch these different things I'm going to spit

13:45.000 --> 13:47.000
out this response and then

13:47.000 --> 13:49.000
if you want to like go to another page

13:49.000 --> 13:51.000
that cycle repeats again

13:51.000 --> 13:53.000
and so I think like server components

13:53.000 --> 13:55.000
is you know kind of this idea of

13:55.000 --> 13:57.000
let's keep the user

13:57.000 --> 13:59.000
experience where like things

13:59.000 --> 14:01.000
don't you know you don't reload the page

14:01.000 --> 14:03.000
all the time but let's

14:03.000 --> 14:05.000
keep also like the mental model

14:05.000 --> 14:07.000
of the kind of traditional

14:07.000 --> 14:09.000
request response

14:09.000 --> 14:11.000
where you just

14:11.000 --> 14:13.000
describe what you want to see on the page

14:13.000 --> 14:15.000
and then it somehow reconciles

14:15.000 --> 14:17.000
and also like

14:17.000 --> 14:19.000
let's while we're here why

14:19.000 --> 14:21.000
not like apply a bunch of optimizations

14:21.000 --> 14:23.000
now that we know you know like let's not download

14:23.000 --> 14:25.000
more code than we need let's not

14:25.000 --> 14:27.000
download more data and so

14:27.000 --> 14:29.000
in terms of like historical scale

14:29.000 --> 14:31.000
I think we so we

14:31.000 --> 14:33.000
started with this

14:33.000 --> 14:35.000
I think like idea of

14:35.000 --> 14:37.000
and we knew we also knew that

14:37.000 --> 14:39.000
you know this approach was also

14:39.000 --> 14:41.000
not new exactly it was more about

14:41.000 --> 14:43.000
bringing it to react

14:43.000 --> 14:45.000
because for

14:45.000 --> 14:47.000
like we've had

14:47.000 --> 14:49.000
at Facebook we've had XHP

14:49.000 --> 14:51.000
so this is

14:51.000 --> 14:53.000
Wait what is XHP?

14:53.000 --> 14:55.000
It's sort of like an alternative universe

14:55.000 --> 14:57.000
and I think we're kind of

14:57.000 --> 14:59.000
seeing this again with

14:59.000 --> 15:01.000
you know like when JSX was weird

15:01.000 --> 15:03.000
to everyone when react came out

15:03.000 --> 15:05.000
and we didn't even realize that it

15:05.000 --> 15:07.000
would be controversial

15:07.000 --> 15:09.000
I think like with server components maybe

15:09.000 --> 15:11.000
it's a little bit similar because

15:11.000 --> 15:13.000
the thing we had

15:13.000 --> 15:15.000
before react

15:15.000 --> 15:17.000
the way like the

15:17.000 --> 15:19.000
Facebook website was built

15:19.000 --> 15:21.000
was with like PHP and later

15:21.000 --> 15:23.000
changed to hack

15:23.000 --> 15:25.000
but we have this syntax for

15:25.000 --> 15:27.000
defining

15:27.000 --> 15:29.000
components there

15:29.000 --> 15:31.000
so it was a very different

15:31.000 --> 15:33.000
mindset from

15:33.000 --> 15:35.000
I guess dominant solutions like

15:35.000 --> 15:37.000
Rails or

15:37.000 --> 15:39.000
you know like the old school

15:39.000 --> 15:41.000
server solutions

15:41.000 --> 15:43.000
like in the open source

15:43.000 --> 15:45.000
XHP was pretty different because it felt

15:45.000 --> 15:47.000
more like react as in

15:47.000 --> 15:49.000
you have no like there are no

15:49.000 --> 15:51.000
additional controllers in

15:51.000 --> 15:53.000
this kind of MVC sense

15:53.000 --> 15:55.000
it's more like there's a component

15:55.000 --> 15:57.000
tree, components can be

15:57.000 --> 15:59.000
asynchronous so they can like fetch

15:59.000 --> 16:01.000
some data and then return what they render

16:01.000 --> 16:03.000
and you can compose them

16:03.000 --> 16:05.000
and you can have your own components

16:05.000 --> 16:07.000
and so this is actually like

16:07.000 --> 16:09.000
where JSX came from

16:09.000 --> 16:11.000
is like people writing XHP

16:11.000 --> 16:13.000
code wanted to keep writing

16:13.000 --> 16:15.000
something similar like on the client

16:15.000 --> 16:17.000
but the problem with that paradigm is that

16:17.000 --> 16:19.000
it couldn't refresh

16:19.000 --> 16:21.000
without like losing the entire page

16:21.000 --> 16:23.000
and so

16:23.000 --> 16:25.000
we had this thing as inspiration

16:25.000 --> 16:27.000
and we also had

16:27.000 --> 16:29.000
our native apps also kind of worked

16:29.000 --> 16:31.000
like at least some

16:31.000 --> 16:33.000
parts of them worked with that model where

16:33.000 --> 16:35.000
the actual logic for how

16:35.000 --> 16:37.000
to massage data and like turn it

16:37.000 --> 16:39.000
into UI tree was on the server

16:39.000 --> 16:41.000
it was written in XHP

16:41.000 --> 16:43.000
Is that kind of like PHP?

16:43.000 --> 16:45.000
I mean I see the similarity

16:45.000 --> 16:47.000
conceptually of just like you're

16:47.000 --> 16:49.000
wild-westing your database queries here

16:49.000 --> 16:51.000
you're turning that into server markup

16:51.000 --> 16:53.000
and then you're sending it down. It's just there was no

16:53.000 --> 16:55.000
like server-client relationship yet

16:55.000 --> 16:57.000
so I kind of see that React like took that

16:57.000 --> 16:59.000
bit out, the templating was the good part

16:59.000 --> 17:01.000
let's do the client thing first because that's

17:01.000 --> 17:03.000
kind of a no-brainer of like yeah that's

17:03.000 --> 17:05.000
like the end of the spectrum

17:05.000 --> 17:07.000
that's what you need and now

17:07.000 --> 17:09.000
we're kind of cycling back

17:09.000 --> 17:11.000
when we realized oh yeah we probably could

17:11.000 --> 17:13.000
have a dynamic setup here

17:13.000 --> 17:15.000
yeah I think it's

17:15.000 --> 17:17.000
it's just that we already

17:17.000 --> 17:19.000
had a solution to the server part

17:19.000 --> 17:21.000
and like XHP was actually

17:21.000 --> 17:23.000
pretty sophisticated so

17:23.000 --> 17:25.000
there was another part that was

17:25.000 --> 17:27.000
related to it called BigPipe

17:27.000 --> 17:29.000
which we you know like we published

17:29.000 --> 17:31.000
an article about it in

17:31.000 --> 17:33.000
2011 maybe

17:33.000 --> 17:35.000
and it's just

17:35.000 --> 17:37.000
this idea that if you have

17:37.000 --> 17:39.000
this kind of like asynchronous

17:39.000 --> 17:41.000
component abstraction on the server

17:41.000 --> 17:43.000
you also don't want to

17:43.000 --> 17:45.000
like hold the entire page

17:45.000 --> 17:47.000
before starting to

17:47.000 --> 17:49.000
like emit output

17:49.000 --> 17:51.000
and I was actually

17:51.000 --> 17:53.000
surprised like I learned that in

17:53.000 --> 17:55.000
PHP or Rails like you would

17:55.000 --> 17:57.000
usually just you know

17:57.000 --> 17:59.000
fetch everything and kind of then

17:59.000 --> 18:01.000
start rendering and like that's

18:01.000 --> 18:03.000
not efficient

18:03.000 --> 18:05.000
and so yeah

18:05.000 --> 18:07.000
so the way like BigPipe worked is that

18:07.000 --> 18:09.000
it had this ability to chunk

18:09.000 --> 18:11.000
the page like your feed your

18:11.000 --> 18:13.000
like I don't know like the sidebar

18:13.000 --> 18:15.000
something else those could be

18:15.000 --> 18:17.000
parallelized

18:17.000 --> 18:19.000
so like all of them could have some data

18:19.000 --> 18:21.000
dependencies but we could stream

18:21.000 --> 18:23.000
kind of the initial shell and then fill

18:23.000 --> 18:25.000
them in and so we wanted to bring

18:25.000 --> 18:27.000
like so I think like we had

18:27.000 --> 18:29.000
these solutions

18:29.000 --> 18:31.000
but then we needed client

18:31.000 --> 18:33.000
interactivity and so React

18:33.000 --> 18:35.000
kind of started solving that

18:35.000 --> 18:37.000
and then as we kind of did more

18:37.000 --> 18:39.000
with React

18:39.000 --> 18:41.000
there was like this split between

18:41.000 --> 18:43.000
technologies that became very noticeable

18:43.000 --> 18:45.000
because they did not really

18:45.000 --> 18:47.000
integrate well

18:47.000 --> 18:49.000
no they were used together

18:49.000 --> 18:51.000
so you could in XHP

18:51.000 --> 18:53.000
you could render a React component

18:53.000 --> 18:55.000
but this would only

18:55.000 --> 18:57.000
work kind of once so this

18:57.000 --> 18:59.000
would just say you know like

18:59.000 --> 19:01.000
in this like tree

19:01.000 --> 19:03.000
when it loads on the client like put

19:03.000 --> 19:05.000
this React component there but then there

19:05.000 --> 19:07.000
was no way to update the tree because

19:07.000 --> 19:09.000
it was just HTML in the end

19:09.000 --> 19:11.000
so there was no

19:11.000 --> 19:13.000
way to kind of refresh it without losing

19:13.000 --> 19:15.000
the page

19:15.000 --> 19:17.000
okay so there was no

19:17.000 --> 19:19.000
like client side routing story

19:19.000 --> 19:21.000
is kind of the big part there

19:21.000 --> 19:23.000
yeah well it's not just

19:23.000 --> 19:25.000
routing necessarily it's just there was no

19:25.000 --> 19:27.000
way to refresh the server

19:27.000 --> 19:29.000
output without like losing everything

19:29.000 --> 19:31.000
and so

19:31.000 --> 19:33.000
I think the

19:33.000 --> 19:35.000
yeah so I think

19:35.000 --> 19:37.000
the story kind of

19:37.000 --> 19:39.000
it really became

19:39.000 --> 19:41.000
I think like

19:41.000 --> 19:43.000
the way to explain it

19:43.000 --> 19:45.000
conceptually

19:45.000 --> 19:47.000
makes more

19:47.000 --> 19:49.000
sense like if you do this in a different

19:49.000 --> 19:51.000
order then things actually happen

19:51.000 --> 19:53.000
chronologically yeah it does make

19:53.000 --> 19:55.000
sense because server components are like it's fitting

19:55.000 --> 19:57.000
this thing that's actually a new starting

19:57.000 --> 19:59.000
point instead of a new feature

19:59.000 --> 20:01.000
so it's like if you want to use it

20:01.000 --> 20:03.000
properly you

20:03.000 --> 20:05.000
refactor from the top you're not refactoring

20:05.000 --> 20:07.000
by just let's add a server component right here

20:07.000 --> 20:09.000
and see how it goes exactly

20:09.000 --> 20:11.000
yeah and I think it's because

20:11.000 --> 20:13.000
like we've already like we've had a piece

20:13.000 --> 20:15.000
you know that works on the server so we did

20:15.000 --> 20:17.000
the client part and now okay let's

20:17.000 --> 20:19.000
rethink the server piece

20:19.000 --> 20:21.000
to work with the client part seamlessly

20:21.000 --> 20:23.000
because we now know you know the entire

20:23.000 --> 20:25.000
like how to fit them

20:25.000 --> 20:27.000
together and so that

20:27.000 --> 20:29.000
took a long time and I think like suspense

20:29.000 --> 20:31.000
is especially interesting as a feature

20:31.000 --> 20:33.000
because the original

20:33.000 --> 20:35.000
the

20:35.000 --> 20:37.000
motivation for his design which

20:37.000 --> 20:39.000
I think was in like 2016 or

20:39.000 --> 20:41.000
2017 yeah was

20:41.000 --> 20:43.000
like how do we adopt this

20:43.000 --> 20:45.000
big pipe architecture like

20:45.000 --> 20:47.000
this idea of streaming things

20:47.000 --> 20:49.000
in and like having them kind of appear

20:49.000 --> 20:51.000
as they're ready like

20:51.000 --> 20:53.000
how do we fit this into React

20:53.000 --> 20:55.000
server rendering model

20:55.000 --> 20:57.000
and so we started there that let

20:57.000 --> 20:59.000
that let the like design of suspense

20:59.000 --> 21:01.000
then but the first

21:01.000 --> 21:03.000
way we shift suspense was actually on the client

21:03.000 --> 21:05.000
only and it was not supported for

21:05.000 --> 21:07.000
SSR because we didn't have a streaming

21:07.000 --> 21:09.000
server render yet and then we did like

21:09.000 --> 21:11.000
streaming server rendering and then

21:11.000 --> 21:13.000
we realized actually this still leads

21:13.000 --> 21:15.000
to waterfalls because like then

21:15.000 --> 21:17.000
your app lives on the client

21:17.000 --> 21:19.000
and you need to somehow prevent

21:19.000 --> 21:21.000
client server waterfalls

21:21.000 --> 21:23.000
and so then we're like okay maybe we need like

21:23.000 --> 21:25.000
to actually like do something like

21:25.000 --> 21:27.000
XFP first or you know like

21:27.000 --> 21:29.000
do something that actually lets you avoid

21:29.000 --> 21:31.000
client server waterfalls

21:31.000 --> 21:33.000
and this idea of like splitting

21:33.000 --> 21:35.000
components into two types

21:35.000 --> 21:37.000
was actually using like

21:37.000 --> 21:39.000
almost the same mechanism as

21:39.000 --> 21:41.000
Sebastian explored in

21:41.000 --> 21:43.000
2015 but for

21:43.000 --> 21:45.000
using Reacting workers

21:45.000 --> 21:47.000
so it's

21:47.000 --> 21:49.000
exactly the same idea but applied

21:49.000 --> 21:51.000
like a different so it's like many things

21:51.000 --> 21:53.000
came together that were developed

21:53.000 --> 21:55.000
in like in different years and

21:55.000 --> 21:57.000
now like we have this consistent vision

21:57.000 --> 21:59.000
but it's it's a bit hard

21:59.000 --> 22:01.000
to unpack how it happened exactly

22:01.000 --> 22:03.000
it yeah and it's

22:03.000 --> 22:05.000
it's cool to hear the context of like

22:05.000 --> 22:07.000
where this was born inside

22:07.000 --> 22:09.000
of Facebook because it starts

22:09.000 --> 22:11.000
to make a little more sense with that I just know it

22:11.000 --> 22:13.000
as like an outsider that used

22:13.000 --> 22:15.000
React first with create React app

22:15.000 --> 22:17.000
then with Next.js and just kind of learn

22:17.000 --> 22:19.000
patterns from there for small scale things

22:19.000 --> 22:21.000
without ever really thinking about the server

22:21.000 --> 22:23.000
it was like I learned about client stuff

22:23.000 --> 22:25.000
then I learned about SSR and now

22:25.000 --> 22:27.000
I'm pushing everything that I can to the server

22:27.000 --> 22:29.000
it's backwards from how like

22:29.000 --> 22:31.000
the progress of web

22:31.000 --> 22:33.000
dev happened like it started with Rails

22:33.000 --> 22:35.000
and then we started exploring client side

22:35.000 --> 22:37.000
but I'm like in a generation

22:37.000 --> 22:39.000
that started with Angular 1 like

22:39.000 --> 22:41.000
I was middle school before

22:41.000 --> 22:43.000
that so I just didn't even know what was

22:43.000 --> 22:45.000
going on in web dev before that

22:45.000 --> 22:47.000
so it's just different

22:47.000 --> 22:49.000
yeah I guess the other

22:49.000 --> 22:51.000
thing that's like relevant is I think a lot

22:51.000 --> 22:53.000
of people because like the

22:53.000 --> 22:55.000
word server is so like overloaded

22:55.000 --> 22:57.000
in like for us at

22:57.000 --> 22:59.000
least because we

23:01.000 --> 23:03.000
we try to solve like a more

23:03.000 --> 23:05.000
general problem so

23:05.000 --> 23:07.000
like server components for example

23:07.000 --> 23:09.000
they can run during the

23:09.000 --> 23:11.000
build right so it doesn't

23:11.000 --> 23:13.000
mean that you literally need to like have

23:13.000 --> 23:15.000
a server it's more like

23:15.000 --> 23:17.000
the server client distinction

23:17.000 --> 23:19.000
for us is just

23:19.000 --> 23:21.000
the stuff that runs first and kind of

23:21.000 --> 23:23.000
the stuff that runs later and so

23:23.000 --> 23:25.000
the stuff that runs first that could run

23:25.000 --> 23:27.000
during the build time or

23:27.000 --> 23:29.000
where actually

23:29.000 --> 23:31.000
it won't do and it also gets confusing

23:31.000 --> 23:33.000
right because like client components

23:33.000 --> 23:35.000
they kind of also run on the server

23:35.000 --> 23:37.000
during like SSR

23:37.000 --> 23:39.000
so it's not

23:39.000 --> 23:41.000
exactly this like client

23:41.000 --> 23:43.000
stuff is like in the browser server

23:43.000 --> 23:45.000
stuff is like on the machine

23:45.000 --> 23:47.000
it's more like just two stages and we need

23:47.000 --> 23:49.000
some names for the stages

23:49.000 --> 23:51.000
and we also want to support

23:51.000 --> 23:53.000
running server components

23:53.000 --> 23:55.000
on the client

23:55.000 --> 23:57.000
of course you wouldn't be able to

23:57.000 --> 23:59.000
read a database but it's just

23:59.000 --> 24:01.000
using the same mental model

24:01.000 --> 24:03.000
if you really don't have a server and

24:03.000 --> 24:05.000
also you don't want to

24:05.000 --> 24:07.000
you know generate things

24:07.000 --> 24:09.000
at the build time but you want to structure

24:09.000 --> 24:11.000
your code like in the same way so that

24:11.000 --> 24:13.000
it's later possible to like extend

24:13.000 --> 24:15.000
it or like port it

24:15.000 --> 24:17.000
so it's really about the paradigm

24:17.000 --> 24:19.000
of like this you know

24:19.000 --> 24:21.000
two component types

24:21.000 --> 24:23.000
rather than specific places where you put

24:23.000 --> 24:25.000
them

24:25.000 --> 24:27.000
yeah exactly and I've heard

24:27.000 --> 24:29.000
the thought in the past

24:29.000 --> 24:31.000
of like maybe it should have been called use

24:31.000 --> 24:33.000
interactive or something like that

24:33.000 --> 24:35.000
where it implies like I'm not a fan of

24:35.000 --> 24:37.000
that personally but it

24:37.000 --> 24:39.000
implies that it's adding things

24:39.000 --> 24:41.000
that could basically

24:41.000 --> 24:43.000
change state after the fact

24:43.000 --> 24:45.000
it's not just passing things down through server

24:45.000 --> 24:47.000
components and it's like

24:47.000 --> 24:49.000
I get it I think my bigger

24:49.000 --> 24:51.000
maybe not issue but

24:51.000 --> 24:53.000
when you hear React server components you think server

24:53.000 --> 24:55.000
immediately that's definitely a thing

24:55.000 --> 24:57.000
but it really just means

24:57.000 --> 24:59.000
thing that doesn't run in the browser

24:59.000 --> 25:01.000
necessarily usually

25:01.000 --> 25:03.000
you would do like a static build up front

25:03.000 --> 25:05.000
and then ship anything down that you can

25:05.000 --> 25:07.000
or if you want to stream and suspense

25:07.000 --> 25:09.000
stuff then you can go

25:09.000 --> 25:11.000
boot up the server and

25:11.000 --> 25:13.000
Next.js is pretty graceful with that where it's like

25:13.000 --> 25:15.000
actually figuring out what could

25:15.000 --> 25:17.000
be sandwiched into a big cache and what

25:17.000 --> 25:19.000
can't so you don't really have to think about that

25:19.000 --> 25:21.000
but if you're building it on your own

25:21.000 --> 25:23.000
I totally agree that server components

25:23.000 --> 25:25.000
are just like

25:25.000 --> 25:27.000
pre-rendering I think is one word I've heard

25:27.000 --> 25:29.000
also like build time versus

25:29.000 --> 25:31.000
server it could be either one

25:31.000 --> 25:33.000
so build time components it just

25:33.000 --> 25:35.000
depends where you're running it

25:35.000 --> 25:37.000
yeah

25:37.000 --> 25:39.000
it's confusing I think it's

25:39.000 --> 25:41.000
one of those cases where everybody has

25:41.000 --> 25:43.000
suggestions on how to name them but then

25:43.000 --> 25:45.000
they don't seem

25:45.000 --> 25:47.000
they all have weird cases

25:47.000 --> 25:49.000
where it's not exactly true

25:49.000 --> 25:51.000
and server client is

25:51.000 --> 25:53.000
like

25:53.000 --> 25:55.000
maybe this is one of those

25:55.000 --> 25:57.000
cases where we just

25:57.000 --> 25:59.000
redefine the terms

25:59.000 --> 26:01.000
like rendering

26:01.000 --> 26:03.000
in React rendering

26:03.000 --> 26:05.000
doesn't mean updating the

26:05.000 --> 26:07.000
the graphical

26:07.000 --> 26:09.000
like it's a different concept

26:09.000 --> 26:11.000
from rendering in graphics

26:11.000 --> 26:13.000
programming because like in React I

26:13.000 --> 26:15.000
re-render it doesn't mean that

26:15.000 --> 26:17.000
a bunch of stuff actually changes on the screen

26:17.000 --> 26:19.000
it just means we recompute what should

26:19.000 --> 26:21.000
be on the screen and like maybe we change something

26:21.000 --> 26:23.000
maybe we don't and so people have

26:23.000 --> 26:25.000
intuitions like oh I have to avoid re-rendering

26:25.000 --> 26:27.000
but actually you don't it's

26:27.000 --> 26:29.000
just a question of like is it actually slow

26:29.000 --> 26:31.000
if it's not slow you're fine

26:31.000 --> 26:33.000
like everything is fine and so

26:33.000 --> 26:35.000
we kind of hijacked this definition

26:35.000 --> 26:37.000
like in React rendering means

26:37.000 --> 26:39.000
something different and I feel like maybe

26:39.000 --> 26:41.000
this is another example of like yeah we kind of

26:41.000 --> 26:43.000
we need some words to describe

26:43.000 --> 26:45.000
the relationship and these are the best words

26:45.000 --> 26:47.000
we found but it's gonna

26:47.000 --> 26:49.000
be a bit confusing and we haven't

26:49.000 --> 26:51.000
found any better options so far

26:51.000 --> 26:53.000
yeah

26:53.000 --> 26:55.000
it goes all down the stack and

26:55.000 --> 26:57.000
I work at Astro right now

26:57.000 --> 26:59.000
and you know maintaining a meta framework

26:59.000 --> 27:01.000
we were dealing with these really primitive ideas

27:01.000 --> 27:03.000
where it's like you don't want to use

27:03.000 --> 27:05.000
complicated names for this stuff you want it

27:05.000 --> 27:07.000
to feel accessible but

27:07.000 --> 27:09.000
it also needs to describe what it does

27:09.000 --> 27:11.000
pretty well I also know

27:11.000 --> 27:13.000
with React like a big debacle came around

27:13.000 --> 27:15.000
use as just like a term

27:15.000 --> 27:17.000
that you can use to unwrap

27:17.000 --> 27:19.000
something that happens later

27:19.000 --> 27:21.000
and like I'm getting used

27:21.000 --> 27:23.000
to it I suggested

27:23.000 --> 27:25.000
unwrap and people are like well not always

27:25.000 --> 27:27.000
sometimes use is used for this

27:27.000 --> 27:29.000
use use that's also

27:29.000 --> 27:31.000
a thing so it's hard

27:31.000 --> 27:33.000
you want it to be simple and you want

27:33.000 --> 27:35.000
it to encompass whatever use

27:35.000 --> 27:37.000
cases it's actually trying to do

27:37.000 --> 27:39.000
and yeah I feel like at

27:39.000 --> 27:41.000
least with server components it strikes a decent

27:41.000 --> 27:43.000
balance of like you're gonna think about this differently

27:43.000 --> 27:45.000
it's not running in the client

27:45.000 --> 27:47.000
yeah I think

27:47.000 --> 27:49.000
sometimes

27:49.000 --> 27:51.000
I don't know

27:51.000 --> 27:53.000
maybe we'll come to regret this but I

27:53.000 --> 27:55.000
think sometimes you

27:55.000 --> 27:57.000
you know when people

27:57.000 --> 27:59.000
talk about oh like I wish this was

27:59.000 --> 28:01.000
more explicit

28:01.000 --> 28:03.000
I think one thing we've noticed is that people

28:03.000 --> 28:05.000
always say that in the beginning

28:05.000 --> 28:07.000
and then six months later everyone is

28:07.000 --> 28:09.000
like oh I want like a shortcut I want

28:09.000 --> 28:11.000
to you know this term is too long or

28:11.000 --> 28:13.000
it's like API name like I know what

28:13.000 --> 28:15.000
it is already why do I have to type all

28:15.000 --> 28:17.000
of this and so we

28:17.000 --> 28:19.000
kind of I think we discount a little

28:19.000 --> 28:21.000
bit of this initial knee-jerk reaction

28:21.000 --> 28:23.000
because we just know yeah you know when

28:23.000 --> 28:25.000
it's a common thing it's gonna feel different

28:25.000 --> 28:27.000
like for example with use

28:27.000 --> 28:29.000
like yeah I just gonna search for react use

28:29.000 --> 28:31.000
that's gonna be like a top result in Google

28:31.000 --> 28:33.000
because like we have enough

28:33.000 --> 28:35.000
like mode to

28:35.000 --> 28:37.000
you know to actually bubble up

28:37.000 --> 28:39.000
so I think that helps

28:41.000 --> 28:43.000
but it's also sometimes

28:43.000 --> 28:45.000
sometimes you just

28:45.000 --> 28:47.000
can't have an intuitive term because

28:47.000 --> 28:49.000
the whole idea is different and

28:49.000 --> 28:51.000
you might as well kind of

28:51.000 --> 28:53.000
realize that

28:53.000 --> 28:55.000
no this doesn't make sense I need to like

28:55.000 --> 28:57.000
sit down and understand what this is about

28:57.000 --> 28:59.000
none of my intuitions are

28:59.000 --> 29:01.000
helping and like that's fine that's

29:01.000 --> 29:03.000
because it's a new thing it is different

29:03.000 --> 29:05.000
like it's good if you realize

29:05.000 --> 29:07.000
that it's different

29:07.000 --> 29:09.000
yeah I definitely think

29:09.000 --> 29:11.000
it's signaling that but the

29:11.000 --> 29:13.000
main thing people are wondering which I'm hoping

29:13.000 --> 29:15.000
we can get through like with the live

29:15.000 --> 29:17.000
coding today is like up until

29:17.000 --> 29:19.000
now I've been able to just

29:19.000 --> 29:21.000
spin up you know V or something like

29:21.000 --> 29:23.000
that put a div with an ID of

29:23.000 --> 29:25.000
main and hydrate a thing

29:25.000 --> 29:27.000
in there and now we're basically saying

29:27.000 --> 29:29.000
no there's there's more than that if you

29:29.000 --> 29:31.000
really want to think about it this way having set

29:31.000 --> 29:33.000
up my own service for

29:33.000 --> 29:35.000
a week I can

29:35.000 --> 29:37.000
say there is more to it and

29:37.000 --> 29:39.000
I don't know if the react

29:39.000 --> 29:41.000
team has any opinions on that right now of like

29:41.000 --> 29:43.000
is DIY server components

29:43.000 --> 29:45.000
something that's like does it matter

29:45.000 --> 29:47.000
is it something we need or

29:47.000 --> 29:49.000
is next.js just the way you should try it

29:49.000 --> 29:51.000
yeah I think

29:51.000 --> 29:53.000
so well there's

29:53.000 --> 29:55.000
a bunch of different things there so

29:55.000 --> 29:57.000
yeah I think like one thing

29:57.000 --> 29:59.000
question yeah because like you kind

29:59.000 --> 30:01.000
of alluded to this thing like I can

30:01.000 --> 30:03.000
just like have a div and like put something

30:03.000 --> 30:05.000
in there and so I think that

30:05.000 --> 30:07.000
was more about not about

30:07.000 --> 30:09.000
frameworks per se it was about like

30:09.000 --> 30:11.000
client only versus

30:11.000 --> 30:13.000
like build time or

30:13.000 --> 30:15.000
SSR and so I think

30:15.000 --> 30:17.000
like that's that's one question

30:17.000 --> 30:19.000
the other question is like

30:19.000 --> 30:21.000
do you know do it yourself

30:21.000 --> 30:23.000
set up versus like a

30:23.000 --> 30:25.000
framework or like should there be one

30:25.000 --> 30:27.000
framework or many and I think that's that's a separate

30:27.000 --> 30:29.000
question so which which one

30:29.000 --> 30:31.000
which one of those do you want to go into

30:33.000 --> 30:35.000
I'm more interested in the second one I guess

30:35.000 --> 30:37.000
because the first one I've already

30:37.000 --> 30:39.000
I pretty much agreed like yeah

30:39.000 --> 30:41.000
I probably wouldn't point people to

30:41.000 --> 30:43.000
just feed and react or

30:43.000 --> 30:45.000
create react app to build something

30:45.000 --> 30:47.000
I would if you're going to deploy it

30:47.000 --> 30:49.000
anywhere I'm probably going to point you

30:49.000 --> 30:51.000
to next.js or astro or

30:51.000 --> 30:53.000
more likely next.js if you really want to

30:53.000 --> 30:55.000
try server components

30:55.000 --> 30:57.000
I think like on the first one my

30:57.000 --> 30:59.000
perspective is that

30:59.000 --> 31:01.000
and I mean that that's also

31:01.000 --> 31:03.000
by you know we know that

31:03.000 --> 31:05.000
the recommendation change was

31:05.000 --> 31:07.000
pretty controversial

31:07.000 --> 31:09.000
but we also didn't try to motivate it

31:09.000 --> 31:11.000
like we do have like a deep dive there

31:11.000 --> 31:13.000
that's like can I use react without the framework

31:13.000 --> 31:15.000
sure yeah I think

31:15.000 --> 31:17.000
it's a really nice documentation page

31:17.000 --> 31:19.000
looking through it

31:19.000 --> 31:21.000
the specific thing I think

31:21.000 --> 31:23.000
that gets a bit lost is like

31:23.000 --> 31:25.000
nobody

31:25.000 --> 31:27.000
is you know it's not

31:27.000 --> 31:29.000
about like the push

31:29.000 --> 31:31.000
like the reason we don't suggest

31:31.000 --> 31:33.000
Vite is

31:33.000 --> 31:35.000
an option for you know you want to make

31:35.000 --> 31:37.000
an app fully with react use Vite

31:37.000 --> 31:39.000
like the reason we don't say this is

31:39.000 --> 31:41.000
again because like default Vite

31:41.000 --> 31:43.000
you know when you say Vite you probably

31:43.000 --> 31:45.000
mean like a template that's blindside

31:45.000 --> 31:47.000
only because if you use like a template

31:47.000 --> 31:49.000
that has SSR and a bunch of other

31:49.000 --> 31:51.000
stuff let's be real it is a framework

31:51.000 --> 31:53.000
it's not a template

31:53.000 --> 31:55.000
like it's an ad hoc framework

31:55.000 --> 31:57.000
that is maybe a good framework but

31:57.000 --> 31:59.000
if you compare it in terms of usage

31:59.000 --> 32:01.000
community it's like a very

32:01.000 --> 32:03.000
niche framework with you know

32:03.000 --> 32:05.000
a very small community which is maybe

32:05.000 --> 32:07.000
what you want but let's not fool ourselves

32:07.000 --> 32:09.000
saying that this isn't

32:09.000 --> 32:11.000
a framework and then if we talk

32:11.000 --> 32:13.000
about like a default Vite setup with

32:13.000 --> 32:15.000
this just like blindside

32:15.000 --> 32:17.000
only the problem with this is

32:17.000 --> 32:19.000
it's not that client

32:19.000 --> 32:21.000
only is bad I don't think that's true

32:21.000 --> 32:23.000
I think like for some cases it totally makes

32:23.000 --> 32:25.000
sense it's more

32:25.000 --> 32:27.000
that you're kind of

32:27.000 --> 32:29.000
locking yourself into this

32:29.000 --> 32:31.000
setup it's like let's say like later

32:31.000 --> 32:33.000
you want to add a landing page

32:33.000 --> 32:35.000
and you want the landing page

32:35.000 --> 32:37.000
to have HTML in it and

32:37.000 --> 32:39.000
because it's like it's silly not

32:39.000 --> 32:41.000
to like why would you not have

32:41.000 --> 32:43.000
HTML in a webpage

32:43.000 --> 32:45.000
it's like it's better for SEO

32:45.000 --> 32:47.000
sure like crawlers can understand

32:47.000 --> 32:49.000
JavaScript but like not as fast

32:49.000 --> 32:51.000
it's like better for

32:51.000 --> 32:53.000
just like your users you don't have to

32:53.000 --> 32:55.000
download the bundle to like show anything

32:55.000 --> 32:57.000
and there are many

32:57.000 --> 32:59.000
of these like benefits like you

32:59.000 --> 33:01.000
you don't have like to spin up

33:01.000 --> 33:03.000
like a separate project with like a static site

33:03.000 --> 33:05.000
generator you just add a page

33:05.000 --> 33:07.000
for this page you use

33:07.000 --> 33:09.000
kind of you know static

33:09.000 --> 33:11.000
static build whereas for

33:11.000 --> 33:13.000
another page maybe you like opt

33:13.000 --> 33:15.000
out and you return like

33:15.000 --> 33:17.000
just a shell or like even

33:17.000 --> 33:19.000
null for the server pass

33:19.000 --> 33:21.000
for the build pass

33:21.000 --> 33:23.000
then you do client only so it's

33:23.000 --> 33:25.000
really about like encouraging you to use

33:25.000 --> 33:27.000
a tool that lets you

33:27.000 --> 33:29.000
even start with client only

33:29.000 --> 33:31.000
but then the moment you want to have a page

33:31.000 --> 33:33.000
or like a part of your

33:33.000 --> 33:35.000
even enhance existing

33:35.000 --> 33:37.000
pages

33:37.000 --> 33:39.000
to be like generated at build time

33:39.000 --> 33:41.000
or the server features

33:41.000 --> 33:43.000
you don't have to migrate to another tool

33:43.000 --> 33:45.000
you don't have to like redo your whole project

33:45.000 --> 33:47.000
because your router wasn't designed

33:47.000 --> 33:49.000
for this it's kind of like

33:49.000 --> 33:51.000
it's also kind of like you used to put

33:51.000 --> 33:53.000
the router inside

33:53.000 --> 33:55.000
the you know your react app

33:55.000 --> 33:57.000
and this is kind of like no the router

33:57.000 --> 33:59.000
belongs outside

33:59.000 --> 34:01.000
because if you put the router outside

34:01.000 --> 34:03.000
then that lets you have like multiple

34:03.000 --> 34:05.000
pages that are automatically

34:05.000 --> 34:07.000
code split that have all these like different

34:07.000 --> 34:09.000
optimization modes

34:09.000 --> 34:11.000
it's really about like architectural question of pulling it out

34:11.000 --> 34:13.000
so this is why

34:13.000 --> 34:15.000
yeah this is why we don't recommend

34:15.000 --> 34:17.000
the you know even though if you

34:17.000 --> 34:19.000
want to do client side rendering only

34:19.000 --> 34:21.000
that's fine but we do recommend

34:21.000 --> 34:23.000
to do it in a way that lets you

34:23.000 --> 34:25.000
enhance it with

34:25.000 --> 34:27.000
build time or server logic later if you

34:27.000 --> 34:29.000
want to

34:29.000 --> 34:31.000
which kind of goes back to that point of like server

34:31.000 --> 34:33.000
components can run in multiple ways

34:33.000 --> 34:35.000
and you don't want a tool that just locks you

34:35.000 --> 34:37.000
into one like I've definitely

34:37.000 --> 34:39.000
had well at least for

34:39.000 --> 34:41.000
most of the things I build I think this could

34:41.000 --> 34:43.000
go on serverless if I just had

34:43.000 --> 34:45.000
one query per RAM I could put this on something

34:45.000 --> 34:47.000
and it would be way better and I don't

34:47.000 --> 34:49.000
want to change frameworks to do that I just want to flip

34:49.000 --> 34:51.000
a switch and this route is now on SSR

34:51.000 --> 34:53.000
which is something a lot of

34:53.000 --> 34:55.000
frameworks already do and it's

34:55.000 --> 34:57.000
something like something like VEET

34:57.000 --> 34:59.000
which is like a half framework

34:59.000 --> 35:01.000
it's like a batteries included tool for

35:01.000 --> 35:03.000
framework authors is how I kind of think

35:03.000 --> 35:05.000
about it like you can go nuts

35:05.000 --> 35:07.000
trying to build your own world inside of

35:07.000 --> 35:09.000
VEET but the default is just like

35:09.000 --> 35:11.000
sort of showing React on a workbench

35:11.000 --> 35:13.000
without any opinions of where you put it

35:13.000 --> 35:15.000
which for like

35:15.000 --> 35:17.000
Ruby on Rails and stuff like that you're embedding a

35:17.000 --> 35:19.000
React component in something that's fine and

35:19.000 --> 35:21.000
I think the docs come out really well of like

35:21.000 --> 35:23.000
if you have a stack right now here's

35:23.000 --> 35:25.000
how you can put it in

35:25.000 --> 35:27.000
as simply as possible wire up Babel

35:27.000 --> 35:29.000
here you go but yeah

35:29.000 --> 35:31.000
it lists out any other frameworks that

35:31.000 --> 35:33.000
put those opinions on top so you

35:33.000 --> 35:35.000
can deploy it somewhere which is

35:35.000 --> 35:37.000
what 99% of people are going to do

35:37.000 --> 35:39.000
even for like a hello world

35:39.000 --> 35:41.000
yeah and

35:41.000 --> 35:43.000
then like for your second question

35:43.000 --> 35:45.000
about you know it should be like

35:45.000 --> 35:47.000
should there be like a next only thing or

35:47.000 --> 35:49.000
should there be many frameworks

35:49.000 --> 35:51.000
or should you like do it yourself

35:51.000 --> 35:53.000
I think it's still

35:53.000 --> 35:55.000
an open question of what people will actually

35:55.000 --> 35:57.000
want to do like I'm not sure

35:57.000 --> 35:59.000
I think like personally I'd like

35:59.000 --> 36:01.000
to see many solutions

36:01.000 --> 36:03.000
I think there's like a

36:03.000 --> 36:05.000
natural question of like how

36:05.000 --> 36:07.000
I think there's like a

36:07.000 --> 36:09.000
tension there with differentiation

36:09.000 --> 36:11.000
because

36:11.000 --> 36:13.000
if you're a framework like if you look

36:13.000 --> 36:15.000
at next app router API

36:15.000 --> 36:17.000
you'll notice like a lot of

36:17.000 --> 36:19.000
next APIs are kind of gone

36:19.000 --> 36:21.000
so it kind of

36:21.000 --> 36:23.000
feels more vanilla in a weird

36:23.000 --> 36:25.000
way because it feels like

36:25.000 --> 36:27.000
well there's no like gets that you know

36:27.000 --> 36:29.000
there is

36:29.000 --> 36:31.000
something for like static generation because it can

36:31.000 --> 36:33.000
it can be handled directly but

36:33.000 --> 36:35.000
there's no like gets

36:35.000 --> 36:37.000
server side props it's just async

36:37.000 --> 36:39.000
await right there's

36:39.000 --> 36:41.000
you know like there's no like special APIs

36:41.000 --> 36:43.000
for a bunch of stuff that used

36:43.000 --> 36:45.000
to have special APIs

36:45.000 --> 36:47.000
you know exports which is

36:47.000 --> 36:49.000
like the big thing yeah

36:49.000 --> 36:51.000
there are I think there are some

36:51.000 --> 36:53.000
but you know for metadata and a few

36:53.000 --> 36:55.000
other things that react doesn't handle

36:55.000 --> 36:57.000
by itself but for

36:57.000 --> 36:59.000
a bunch of things there isn't and

36:59.000 --> 37:01.000
you can also compare it to remix I think

37:01.000 --> 37:03.000
in like you don't render

37:03.000 --> 37:05.000
an outlet you just accept children

37:05.000 --> 37:07.000
which is like accepting children is

37:07.000 --> 37:09.000
the most react

37:09.000 --> 37:11.000
API possible it's like the most

37:11.000 --> 37:13.000
vanilla thing and so

37:13.000 --> 37:15.000
there's this question of like if

37:15.000 --> 37:17.000
frameworks can and that was

37:17.000 --> 37:19.000
the goal really with server components

37:19.000 --> 37:21.000
is to get rid of

37:21.000 --> 37:23.000
these framework concepts and kind of

37:23.000 --> 37:25.000
fold them into react in a way that feels

37:25.000 --> 37:27.000
vanilla and so

37:27.000 --> 37:29.000
there's a question of like okay if other

37:29.000 --> 37:31.000
frameworks

37:31.000 --> 37:33.000
jump on the same train and try

37:33.000 --> 37:35.000
to do a similar thing there

37:35.000 --> 37:37.000
is a natural push to kind of

37:37.000 --> 37:39.000
become more similar to

37:39.000 --> 37:41.000
next app router maybe there's

37:41.000 --> 37:43.000
ways to differentiate there like I don't

37:43.000 --> 37:45.000
know but I think there

37:45.000 --> 37:47.000
is like tension between

37:47.000 --> 37:49.000
okay but how do you choose between frameworks then

37:49.000 --> 37:51.000
if they're kind of

37:51.000 --> 37:53.000
looking the same because we've

37:53.000 --> 37:55.000
taken the primitives and like put

37:55.000 --> 37:57.000
them into react

37:57.000 --> 37:59.000
so I think that's something

37:59.000 --> 38:01.000
that remains to be seen

38:01.000 --> 38:03.000
but if

38:03.000 --> 38:05.000
you compare it to like do it yourself

38:05.000 --> 38:07.000
setup I think that's just kind of

38:07.000 --> 38:09.000
exceedingly hard today and

38:09.000 --> 38:11.000
it's mostly because server components

38:11.000 --> 38:13.000
is a very futuristic

38:13.000 --> 38:15.000
architecture I think maybe we

38:15.000 --> 38:17.000
undersold like it

38:17.000 --> 38:19.000
like for the bundling side

38:19.000 --> 38:21.000
it relies on features that just don't

38:21.000 --> 38:23.000
exist in bundlers today like

38:23.000 --> 38:25.000
it has a whole you know like it

38:25.000 --> 38:27.000
relies on a next generation bundler

38:27.000 --> 38:29.000
and like a next generation router

38:29.000 --> 38:31.000
and these things are being

38:31.000 --> 38:33.000
built right now right like

38:33.000 --> 38:35.000
we have some like we have

38:35.000 --> 38:37.000
a backpack plugin that's like not very good

38:37.000 --> 38:39.000
so some frameworks kind of

38:39.000 --> 38:41.000
I wrestled it for a while I'm reading

38:41.000 --> 38:43.000
commit messages from Sebastian like everything

38:43.000 --> 38:45.000
is experimental like it's

38:45.000 --> 38:47.000
very very experimental right now

38:47.000 --> 38:49.000
if you want to DIY I actually got it working in ES

38:49.000 --> 38:51.000
build because I reverse engineered what

38:51.000 --> 38:53.000
the bundler is adding and I like

38:53.000 --> 38:55.000
monkey patched it in which

38:55.000 --> 38:57.000
like it's a way but I

38:57.000 --> 38:59.000
agree like what it's doing is fundamentally

38:59.000 --> 39:01.000
like it looks at each module

39:01.000 --> 39:03.000
it figures out what it is and then

39:03.000 --> 39:05.000
adds a lot of information and metadata so

39:05.000 --> 39:07.000
we can like trace it back putting the client

39:07.000 --> 39:09.000
components where they're supposed to go

39:09.000 --> 39:11.000
and to set that all up yourself it's not as

39:11.000 --> 39:13.000
simple as just like webpack

39:13.000 --> 39:15.000
target JSX files react

39:15.000 --> 39:17.000
plugin like there's

39:17.000 --> 39:19.000
more to it yeah

39:19.000 --> 39:21.000
I wouldn't say that the like I'd say

39:21.000 --> 39:23.000
the bundler I think like

39:23.000 --> 39:25.000
one thing I

39:25.000 --> 39:27.000
I feel a bit

39:27.000 --> 39:29.000
I think sometimes people

39:29.000 --> 39:31.000
say oh it's so complicated

39:31.000 --> 39:33.000
and I think if you really look at the ideas

39:33.000 --> 39:35.000
the ideas are very simple it's just

39:35.000 --> 39:37.000
that implementing them is complicated

39:37.000 --> 39:39.000
because the tools were not designed for

39:39.000 --> 39:41.000
these ideas so

39:41.000 --> 39:43.000
if you think of the bundler integration

39:43.000 --> 39:45.000
it's really about

39:45.000 --> 39:47.000
supporting this use client directive

39:47.000 --> 39:49.000
like that's a feature

39:49.000 --> 39:51.000
with like one line

39:51.000 --> 39:53.000
API it's not you know

39:53.000 --> 39:55.000
it's not something that's like super

39:55.000 --> 39:57.000
it's not some Java monstrosity right

39:57.000 --> 39:59.000
it's a very simple idea

39:59.000 --> 40:01.000
but the bundlers

40:01.000 --> 40:03.000
like the today's generation

40:03.000 --> 40:05.000
of bundlers was not designed

40:05.000 --> 40:07.000
for this kind of feature

40:07.000 --> 40:09.000
because it's like fundamentally different

40:09.000 --> 40:11.000
it's on a similar scope

40:11.000 --> 40:13.000
as you know if you went

40:13.000 --> 40:15.000
back in time to like 2007

40:15.000 --> 40:17.000
and was

40:17.000 --> 40:19.000
trying to explain code splitting

40:19.000 --> 40:21.000
to somebody who uses

40:21.000 --> 40:23.000
if you

40:23.000 --> 40:25.000
I don't know if you remember there was like require.js

40:25.000 --> 40:27.000
which was like a bundler

40:27.000 --> 40:29.000
that people used at the time

40:29.000 --> 40:31.000
and I think like it didn't support

40:31.000 --> 40:33.000
I don't think it supported code splitting

40:33.000 --> 40:35.000
it was kind of loaded

40:35.000 --> 40:37.000
like the optimizing bundler would put everything

40:37.000 --> 40:39.000
into the same file

40:39.000 --> 40:41.000
but it's a similar feature to like dynamic import

40:41.000 --> 40:43.000
that lets you do code splitting

40:43.000 --> 40:45.000
except it's like a different kind of

40:45.000 --> 40:47.000
code splitting that splits apart

40:47.000 --> 40:49.000
like the client parts

40:49.000 --> 40:51.000
from the server parts

40:51.000 --> 40:53.000
and so an ideal bundler would

40:53.000 --> 40:55.000
treat all of this

40:55.000 --> 40:57.000
as a single you know as a built in feature

40:57.000 --> 40:59.000
and be able to

40:59.000 --> 41:01.000
kind of process the

41:01.000 --> 41:03.000
server tree and the client tree as like a

41:03.000 --> 41:05.000
single pass with multiple

41:05.000 --> 41:07.000
bundle outputs for different

41:07.000 --> 41:09.000
targets and that's not something

41:09.000 --> 41:11.000
that bundlers are great at today so

41:11.000 --> 41:13.000
we can try to add it as plugins which is what

41:13.000 --> 41:15.000
we've been doing but really ideally

41:15.000 --> 41:17.000
you would redesign a bundler

41:17.000 --> 41:19.000
around this idea and I think

41:19.000 --> 41:21.000
you know TurboPack is like

41:21.000 --> 41:23.000
one you know implementation

41:23.000 --> 41:25.000
that currently treats it as a first class feature

41:25.000 --> 41:27.000
and I think with time

41:27.000 --> 41:29.000
other bundlers will and like I know

41:29.000 --> 41:31.000
Devon from Parcel is also working on this

41:31.000 --> 41:33.000
and I think with time we'll see

41:33.000 --> 41:35.000
this feature adopted more broadly

41:35.000 --> 41:37.000
and then I think we'll see

41:37.000 --> 41:39.000
other libraries now that the feature

41:39.000 --> 41:41.000
is in the bundlers I think we'll see

41:41.000 --> 41:43.000
maybe Vue or

41:43.000 --> 41:45.000
Svelte or others taking advantage

41:45.000 --> 41:47.000
of that in like implementing similar

41:47.000 --> 41:49.000
architectures on top of those features

41:49.000 --> 41:51.000
yeah I actually

41:51.000 --> 41:53.000
saw a stream yesterday with Evan Yu

41:53.000 --> 41:55.000
who hopped on with Theo to talk

41:55.000 --> 41:57.000
about what they're doing with Vite and Vue

41:57.000 --> 41:59.000
and all of that and one part of that

41:59.000 --> 42:01.000
discussion was Vapor which I believe

42:01.000 --> 42:03.000
is like an early exploration of like what

42:03.000 --> 42:05.000
could server stuff look like in

42:05.000 --> 42:07.000
Vue and it doesn't mean Vaporware by the way

42:07.000 --> 42:09.000
I'm hoping it doesn't anyways

42:09.000 --> 42:11.000
but it's definitely

42:11.000 --> 42:13.000
spreading right now and

42:13.000 --> 42:15.000
if the creator of Vite is exploring

42:15.000 --> 42:17.000
it that could mean it sort of

42:17.000 --> 42:19.000
you know spreads out to anyone else

42:19.000 --> 42:21.000
who's using Vite which as far as I know

42:21.000 --> 42:23.000
is most frameworks that aren't Next.js

42:23.000 --> 42:25.000
or Remix even Remix is

42:25.000 --> 42:27.000
trying Vite as far as I know

42:27.000 --> 42:29.000
so TurboPack for me is like a

42:29.000 --> 42:31.000
wait and see I'm very curious about it

42:31.000 --> 42:33.000
because I got to speak with Jared

42:33.000 --> 42:35.000
a little bit in person

42:35.000 --> 42:37.000
and it's definitely about like

42:37.000 --> 42:39.000
build caching being very

42:39.000 --> 42:41.000
focused on you know compiling

42:41.000 --> 42:43.000
everything down to the very function

42:43.000 --> 42:45.000
that you're trying to get and doing it

42:45.000 --> 42:47.000
efficiently so I think

42:47.000 --> 42:49.000
there will be sort of two competing

42:49.000 --> 42:51.000
threads of like Vite is using

42:51.000 --> 42:53.000
all the tech we have today and

42:53.000 --> 42:55.000
TurboPack is kind of adapting Webpack

42:55.000 --> 42:57.000
into something that could work

42:57.000 --> 42:59.000
better tomorrow

42:59.000 --> 43:01.000
I think TurboPack is

43:01.000 --> 43:03.000
TurboPack is a completely new

43:03.000 --> 43:05.000
codebase right it's not related to

43:05.000 --> 43:07.000
Webpack so it's a rethinking

43:07.000 --> 43:09.000
of

43:09.000 --> 43:11.000
yeah it's complicated

43:11.000 --> 43:13.000
because I heard the talk that said this is the

43:13.000 --> 43:15.000
successor to Webpack even though it's

43:15.000 --> 43:17.000
entirely different as far as

43:17.000 --> 43:19.000
I can tell like I don't think it uses the same

43:19.000 --> 43:21.000
config or conventions but

43:21.000 --> 43:23.000
I haven't tried to use any of it yet

43:23.000 --> 43:25.000
yeah I think it's successor just in the sense

43:25.000 --> 43:27.000
that like Tobias

43:27.000 --> 43:29.000
is working it so it's like

43:29.000 --> 43:31.000
what did Tobias learn

43:31.000 --> 43:33.000
from like I don't

43:33.000 --> 43:35.000
know how many years of Webpack

43:35.000 --> 43:37.000
and

43:37.000 --> 43:39.000
yeah how do you design it again

43:39.000 --> 43:41.000
now that you know all these lessons

43:41.000 --> 43:43.000
which is kind of similar but you know with like

43:43.000 --> 43:45.000
server components that's kind of what we've

43:45.000 --> 43:47.000
seen and

43:47.000 --> 43:49.000
I want actually to mention because

43:49.000 --> 43:51.000
you know you were asking about the history and like

43:51.000 --> 43:53.000
influences and for server

43:53.000 --> 43:55.000
components it's really many

43:55.000 --> 43:57.000
it's like it's our old

43:57.000 --> 43:59.000
XHP stuff it's our

43:59.000 --> 44:01.000
native stack that you know

44:01.000 --> 44:03.000
works let's just do native

44:03.000 --> 44:05.000
apps but driven by server

44:05.000 --> 44:07.000
server driven UI

44:07.000 --> 44:09.000
it's really so a lot of

44:09.000 --> 44:11.000
a lot of contributions to server

44:11.000 --> 44:13.000
components model came from Relay

44:13.000 --> 44:15.000
and Joe Savona and

44:15.000 --> 44:17.000
you know people on the Relay team

44:17.000 --> 44:19.000
it was early exploration

44:19.000 --> 44:21.000
like some of the earliest

44:21.000 --> 44:23.000
design drafts were collaboration

44:23.000 --> 44:25.000
with the Chrome team

44:25.000 --> 44:27.000
and with

44:27.000 --> 44:29.000
the Next.js team

44:29.000 --> 44:31.000
so Next.js was kind of

44:31.000 --> 44:33.000
because like get initial props was one

44:33.000 --> 44:35.000
of the inspirations for this kind of API

44:35.000 --> 44:37.000
so

44:37.000 --> 44:39.000
that like we were kind of

44:39.000 --> 44:41.000
like talking about it with Next.js team a long

44:41.000 --> 44:43.000
time ago and so it's really

44:43.000 --> 44:45.000
it's unifying many

44:45.000 --> 44:47.000
many branches and there's

44:47.000 --> 44:49.000
a lot you know there's a lot that we were

44:49.000 --> 44:51.000
inspired by while working

44:51.000 --> 44:53.000
on it. Yeah

44:53.000 --> 44:55.000
and I kind of let that GraphQL point drop

44:55.000 --> 44:57.000
earlier but it's a really

44:57.000 --> 44:59.000
I never made that parallel but it makes

44:59.000 --> 45:01.000
sense of like it has that same

45:01.000 --> 45:03.000
goal of only send data to the

45:03.000 --> 45:05.000
client that is necessary

45:05.000 --> 45:07.000
in order to render what's on the page

45:07.000 --> 45:09.000
and today like if you want to render

45:09.000 --> 45:11.000
anything you can optimize your

45:11.000 --> 45:13.000
API as hard as you can to make sure

45:13.000 --> 45:15.000
it only sends the data that you want

45:15.000 --> 45:17.000
but people kind of realize GraphQL is hard

45:17.000 --> 45:19.000
to set up sometimes it's too heavy weight

45:19.000 --> 45:21.000
so if there was a way that basically filters

45:21.000 --> 45:23.000
it out for you where you're writing

45:23.000 --> 45:25.000
your own back end to grab that data

45:25.000 --> 45:27.000
and just hydrate the little pieces you want down

45:27.000 --> 45:29.000
the chain like that's oddly

45:29.000 --> 45:31.000
a successor to that idea

45:31.000 --> 45:33.000
of like making sure all

45:33.000 --> 45:35.000
the data you send down is actually lightweight

45:35.000 --> 45:37.000
and I'm curious if we'll ever

45:37.000 --> 45:39.000
end up with dev tools around I'm sure we will

45:39.000 --> 45:41.000
end up with dev tools around that but

45:41.000 --> 45:43.000
it's something I've never really thought about is like

45:43.000 --> 45:45.000
how big are my props like I'm probably

45:45.000 --> 45:47.000
sending a ton of props right now and I have no idea

45:47.000 --> 45:49.000
what it is and the easiest thing

45:49.000 --> 45:51.000
is to just send all the props

45:51.000 --> 45:53.000
but if there was a way to debug like

45:53.000 --> 45:55.000
your props bundle is like 10 kilobytes

45:55.000 --> 45:57.000
of JSON are you sure you wanted to do that

45:57.000 --> 45:59.000
like I think that would really make

45:59.000 --> 46:01.000
server components start to make even more sense

46:01.000 --> 46:03.000
yeah it's

46:03.000 --> 46:05.000
pretty tricky

46:05.000 --> 46:07.000
I think like the whole

46:07.000 --> 46:09.000
kind of monitoring story

46:09.000 --> 46:11.000
like the other piece

46:11.000 --> 46:13.000
of the puzzle there is

46:13.000 --> 46:15.000
you don't really have much

46:15.000 --> 46:17.000
like you don't have a network timeline

46:17.000 --> 46:19.000
for the server which

46:19.000 --> 46:21.000
I think makes people anxious like

46:21.000 --> 46:23.000
oh is it going to have so many waterfalls

46:23.000 --> 46:25.000
and like you can have waterfalls

46:25.000 --> 46:27.000
you know with something like Remix too

46:27.000 --> 46:29.000
like it's actually pretty trivial

46:29.000 --> 46:31.000
to have one

46:31.000 --> 46:33.000
but it's not obvious like

46:33.000 --> 46:35.000
I think if we had better tooling

46:35.000 --> 46:37.000
for just visualizing

46:37.000 --> 46:39.000
what actually happens on the server

46:39.000 --> 46:41.000
how did your requests get processed

46:41.000 --> 46:43.000
I think that would ease a lot of this anxiety

46:43.000 --> 46:45.000
and it would also be useful

46:45.000 --> 46:47.000
for other frameworks like it's not

46:47.000 --> 46:49.000
server component specific

46:49.000 --> 46:51.000
so I think like we need a lot more

46:51.000 --> 46:53.000
like I think the

46:53.000 --> 46:55.000
kind of the optimizations and developer

46:55.000 --> 46:57.000
experience would get like

46:57.000 --> 46:59.000
a lot better when we have better

46:59.000 --> 47:01.000
observability into

47:01.000 --> 47:03.000
what happens on the server

47:03.000 --> 47:05.000
and what crosses the boundary

47:05.000 --> 47:07.000
yeah and like what is contributing

47:07.000 --> 47:09.000
to that like which components have

47:09.000 --> 47:11.000
really like

47:11.000 --> 47:13.000
you know a lot of output and then

47:13.000 --> 47:15.000
you're like okay let's make this one client

47:15.000 --> 47:17.000
component and then increases

47:17.000 --> 47:19.000
the bundle size a bit but then we don't have to send

47:19.000 --> 47:21.000
the stuff it generates

47:21.000 --> 47:23.000
on like every navigation

47:23.000 --> 47:25.000
but that's also the beauty of this paradigm is you can

47:25.000 --> 47:27.000
you know you can flip it back and forth

47:27.000 --> 47:29.000
you can flip it back and forth

47:29.000 --> 47:31.000
yeah I remember for that space I was like

47:31.000 --> 47:33.000
that's the one thing Astro doesn't do very well

47:33.000 --> 47:35.000
because it's like you use styling

47:35.000 --> 47:37.000
or you can do styling differently which can get

47:37.000 --> 47:39.000
in the way I also do want to shout out

47:39.000 --> 47:41.000
Joshua who rated and

47:41.000 --> 47:43.000
apparently works at Code Academy as well

47:43.000 --> 47:45.000
he was chiming in a bit

47:45.000 --> 47:47.000
oh I tried to shout out but it said it doesn't exist

47:47.000 --> 47:49.000
sorry go follow Joshua everyone

47:49.000 --> 47:51.000
but he was saying like

47:51.000 --> 47:53.000
yeah definitely run into the

47:53.000 --> 47:55.000
big props bundle at Code Academy

47:55.000 --> 47:57.000
of like the slowdowns were really just

47:57.000 --> 47:59.000
slamming a bunch of data down the pipe that

47:59.000 --> 48:01.000
didn't need to be and it was just delaying

48:01.000 --> 48:03.000
the amount because it had to

48:03.000 --> 48:05.000
get initial props which was a lot

48:05.000 --> 48:07.000
and then hydrate it all onto the page

48:07.000 --> 48:09.000
and there was no way to sort of

48:09.000 --> 48:11.000
introspect that like

48:11.000 --> 48:13.000
because you're on the client you're not really introspecting

48:13.000 --> 48:15.000
what your server is doing

48:15.000 --> 48:17.000
when you're on that boundary

48:17.000 --> 48:19.000
yeah so the other thing that maybe

48:19.000 --> 48:21.000
is not obvious but you know when I

48:21.000 --> 48:23.000
talk about server components

48:23.000 --> 48:25.000
also including like

48:25.000 --> 48:27.000
10 years of hard thinking about

48:27.000 --> 48:29.000
optimizations it's also stuff like this

48:29.000 --> 48:31.000
so like with server components

48:31.000 --> 48:33.000
you don't actually have

48:33.000 --> 48:35.000
this kind of waterfall

48:35.000 --> 48:37.000
where like in

48:37.000 --> 48:39.000
traditional server rendered

48:39.000 --> 48:41.000
React frameworks including

48:41.000 --> 48:43.000
Next.js you would have this

48:43.000 --> 48:45.000
you have to download all the code

48:45.000 --> 48:47.000
then like

48:47.000 --> 48:49.000
enough to hydrate your page

48:49.000 --> 48:51.000
like the main chunk

48:51.000 --> 48:53.000
you have to get all the data

48:53.000 --> 48:55.000
like inlined into HTML

48:55.000 --> 48:57.000
and only then you can start hydrating

48:57.000 --> 48:59.000
so server components doesn't work like this

48:59.000 --> 49:01.000
in server components you only need

49:01.000 --> 49:03.000
like enough to

49:03.000 --> 49:05.000
get the initial shell

49:05.000 --> 49:07.000
to hydrate so actually

49:07.000 --> 49:09.000
your components

49:09.000 --> 49:11.000
your client component chunks

49:11.000 --> 49:13.000
they're loaded asynchronously

49:13.000 --> 49:15.000
and so React can start hydrating

49:15.000 --> 49:17.000
before all the data arrives

49:17.000 --> 49:19.000
before all the code arrives

49:19.000 --> 49:21.000
we actually want to start as early as possible

49:21.000 --> 49:23.000
and then we kind of

49:23.000 --> 49:25.000
make a tree interactive

49:25.000 --> 49:27.000
as like chunks of code

49:27.000 --> 49:29.000
chunks of data

49:29.000 --> 49:31.000
streaming, they're like separated

49:31.000 --> 49:33.000
if you see like how Next

49:33.000 --> 49:35.000
kind of generates the stuff

49:35.000 --> 49:37.000
it emits separate script tags

49:37.000 --> 49:39.000
that add a little bit more data

49:39.000 --> 49:41.000
as it becomes available

49:41.000 --> 49:43.000
and we update the UI

49:43.000 --> 49:45.000
as it becomes available

49:45.000 --> 49:47.000
even before React actually loads

49:47.000 --> 49:49.000
we're able to update the UI to progressively show

49:49.000 --> 49:51.000
more output from the server

49:51.000 --> 49:53.000
it's all designed to be very

49:53.000 --> 49:55.000
incremental so that you don't

49:55.000 --> 49:57.000
have these things where you have to do

49:57.000 --> 49:59.000
the whole pass

49:59.000 --> 50:01.000
of one thing and then the whole pass

50:01.000 --> 50:03.000
of another thing it's like you do small bits

50:03.000 --> 50:05.000
here and there so it progressively

50:05.000 --> 50:07.000
becomes more and more interactive

50:07.000 --> 50:09.000
yeah exactly

50:09.000 --> 50:11.000
and I think that's a good segue into

50:11.000 --> 50:13.000
a little bit of code that I have to

50:13.000 --> 50:15.000
demo that's outside of Next.js

50:15.000 --> 50:17.000
so

50:17.000 --> 50:19.000
it looks like you can still see my live share

50:19.000 --> 50:21.000
but I'll start

50:21.000 --> 50:23.000
by giving a little context on

50:23.000 --> 50:25.000
what we might try to build today

50:25.000 --> 50:27.000
it's meant to have multiple

50:27.000 --> 50:29.000
steps so if we don't get to all of them

50:29.000 --> 50:31.000
we at least have something at the end of the day

50:31.000 --> 50:33.000
but let me also

50:33.000 --> 50:35.000
screen share for the lovelies out there

50:35.000 --> 50:37.000
guest screen share, cool

50:37.000 --> 50:39.000
so

50:39.000 --> 50:41.000
this is just a basic mockup

50:41.000 --> 50:43.000
that I put together of something you might

50:43.000 --> 50:45.000
try to build when you're building

50:45.000 --> 50:47.000
an application. I called it

50:47.000 --> 50:49.000
abramix as a pun on abramov

50:49.000 --> 50:51.000
I tried, I really tried here

50:51.000 --> 50:53.000
sorry about that

50:53.000 --> 50:55.000
well thank you

50:55.000 --> 50:57.000
but this is like a basic song

50:57.000 --> 50:59.000
interface you might have where

50:59.000 --> 51:01.000
you just have a readout of all of your albums

51:01.000 --> 51:03.000
you might have a search bar that filters

51:03.000 --> 51:05.000
which albums are showing on the page

51:05.000 --> 51:07.000
and I'd love to talk about how would you

51:07.000 --> 51:09.000
do search, where would you do that logic

51:09.000 --> 51:11.000
client versus server since

51:11.000 --> 51:13.000
I've wondered that a lot

51:13.000 --> 51:15.000
and maybe you

51:15.000 --> 51:17.000
have individual routes for every album

51:17.000 --> 51:19.000
where you click into one, it goes to

51:19.000 --> 51:21.000
slash album name and then it shows you

51:21.000 --> 51:23.000
more information and that can be

51:23.000 --> 51:25.000
client side routing

51:25.000 --> 51:27.000
we use Next.js for that

51:27.000 --> 51:29.000
I think it's a pretty clear

51:29.000 --> 51:31.000
upgrade journey

51:31.000 --> 51:33.000
but as a workbench

51:33.000 --> 51:35.000
to try that out I have

51:35.000 --> 51:37.000
a server running over here

51:37.000 --> 51:39.000
on what I called simple

51:39.000 --> 51:41.000
RSC which is a

51:41.000 --> 51:43.000
repo that people can go try out now

51:43.000 --> 51:45.000
if they want to, it only runs on node

51:45.000 --> 51:47.000
version 18.13

51:47.000 --> 51:49.000
because I'm bad at testing things before I

51:49.000 --> 51:51.000
deploy, but if you want to

51:51.000 --> 51:53.000
try it out, it's just a node

51:53.000 --> 51:55.000
server that builds

51:55.000 --> 51:57.000
some React components using esbuild

51:57.000 --> 51:59.000
and lets you see

51:59.000 --> 52:01.000
a single route on the page, there's no

52:01.000 --> 52:03.000
routing, there's no opinions around really

52:03.000 --> 52:05.000
anything, all that's coded into this

52:05.000 --> 52:07.000
is a way to write a server component

52:07.000 --> 52:09.000
and a debugging view

52:09.000 --> 52:11.000
at the bottom of the page that shows

52:11.000 --> 52:13.000
you all of the stuff that is

52:13.000 --> 52:15.000
coming down from the server as the page

52:15.000 --> 52:17.000
is rendering in real time

52:17.000 --> 52:19.000
and you can see a basic example

52:19.000 --> 52:21.000
of that off to the right

52:21.000 --> 52:23.000
where we have our server

52:23.000 --> 52:25.000
component over here in our editor

52:25.000 --> 52:27.000
there's some stale imports that we're not using

52:27.000 --> 52:29.000
right now, but all this is doing

52:29.000 --> 52:31.000
is it's creating a server component

52:31.000 --> 52:33.000
it's rendering an h1 saying

52:33.000 --> 52:35.000
welcome to server components

52:35.000 --> 52:37.000
oh is the repo still private, oh dang

52:37.000 --> 52:39.000
thank you for the call out

52:39.000 --> 52:41.000
let me

52:41.000 --> 52:43.000
make my screen share and change it to public

52:43.000 --> 52:45.000
so I don't dox myself

52:45.000 --> 52:47.000
and then I will show it again

52:47.000 --> 52:49.000
if I go to settings

52:49.000 --> 52:51.000
change visibility, change to public

52:51.000 --> 52:53.000
I want to make this repository

52:53.000 --> 52:55.000
public, please please

52:55.000 --> 52:57.000
please, I have to send an

52:57.000 --> 52:59.000
SMS to myself to make it public

52:59.000 --> 53:01.000
oh my god

53:01.000 --> 53:03.000
there's three dialogues

53:03.000 --> 53:05.000
and a text message, that's crazy

53:05.000 --> 53:07.000
605

53:07.000 --> 53:09.000
043

53:09.000 --> 53:11.000
okay, now

53:11.000 --> 53:13.000
it should be public, if anyone wants to

53:13.000 --> 53:15.000
click on that link

53:15.000 --> 53:17.000
you can go try it out

53:17.000 --> 53:19.000
and now I have to go back

53:19.000 --> 53:21.000
to code, hold that up

53:21.000 --> 53:23.000
and send in the chat

53:23.000 --> 53:25.000
alright

53:25.000 --> 53:27.000
but yeah, I heard your opinions

53:27.000 --> 53:29.000
earlier of like, you're probably not going to

53:29.000 --> 53:31.000
do this to do anything production ready

53:31.000 --> 53:33.000
which is why I only set this up with the dev

53:33.000 --> 53:35.000
server, I only set it up with

53:35.000 --> 53:37.000
a panel of everything

53:37.000 --> 53:39.000
that's going on, and there's no way

53:39.000 --> 53:41.000
to actually deploy this to production right now

53:41.000 --> 53:43.000
because that's not really the intended use case

53:43.000 --> 53:45.000
but yeah, off to

53:45.000 --> 53:47.000
the right is the most user-friendly

53:47.000 --> 53:49.000
feed that I could create

53:49.000 --> 53:51.000
and it is literally

53:51.000 --> 53:53.000
showing you all of the stuff that is coming down the

53:53.000 --> 53:55.000
wire when you stream something

53:55.000 --> 53:57.000
so here, what we're rendering on the page

53:57.000 --> 53:59.000
is just some instructions

53:59.000 --> 54:01.000
as I would call them, from the server

54:01.000 --> 54:03.000
to go make some JSX DOM elements

54:03.000 --> 54:05.000
and then append them to the page

54:05.000 --> 54:07.000
as we're seeing here, and there's no

54:07.000 --> 54:09.000
hydration or server rendering going on, it's just like

54:09.000 --> 54:11.000
a client that fetches a server

54:11.000 --> 54:13.000
component and shows it to you

54:13.000 --> 54:15.000
yeah, first

54:15.000 --> 54:17.000
do you have any initial questions on

54:17.000 --> 54:19.000
this setup and everything that I have going on

54:19.000 --> 54:21.000
because there is a lot under the hood

54:21.000 --> 54:23.000
are you asking

54:23.000 --> 54:25.000
me or the viewers?

54:25.000 --> 54:27.000
a little bit, just to

54:27.000 --> 54:29.000
slow down for a second

54:29.000 --> 54:31.000
no, no, I'm saying, is it a question

54:31.000 --> 54:33.000
to me, do I have questions, or are you

54:33.000 --> 54:35.000
asking somebody?

54:35.000 --> 54:37.000
yeah, maybe one thing

54:37.000 --> 54:39.000
I'm not sure about

54:39.000 --> 54:41.000
is

54:41.000 --> 54:43.000
how did you get the build setup?

54:43.000 --> 54:45.000
you said you did your own

54:45.000 --> 54:47.000
bundle plugin

54:47.000 --> 54:49.000
yes, I did

54:49.000 --> 54:51.000
so, the build

54:51.000 --> 54:53.000
is actually pretty interesting

54:53.000 --> 54:55.000
it's inside of this handler.js

54:55.000 --> 54:57.000
file, and this is going

54:57.000 --> 54:59.000
right in the weeds, but I don't really mind it

54:59.000 --> 55:01.000
where

55:01.000 --> 55:03.000
I set up a simple

55:03.000 --> 55:05.000
request response handler, that's all this is

55:05.000 --> 55:07.000
it just takes in a web standard request

55:07.000 --> 55:09.000
sends a response, and

55:09.000 --> 55:11.000
in order to get the server

55:11.000 --> 55:13.000
I set it up to import

55:13.000 --> 55:15.000
a built server

55:15.000 --> 55:17.000
and the bundle map is

55:17.000 --> 55:19.000
something that's generated separately, as it

55:19.000 --> 55:21.000
crawls through the page, it discovers client

55:21.000 --> 55:23.000
components, and puts them into this map

55:23.000 --> 55:25.000
that it's able to match up at the end of the day

55:25.000 --> 55:27.000
that gets into client components

55:27.000 --> 55:29.000
which I guess we'll explore in a moment

55:29.000 --> 55:31.000
but that's all it really

55:31.000 --> 55:33.000
does for that, the more interesting

55:33.000 --> 55:35.000
file, actually I just remembered

55:35.000 --> 55:37.000
that I moved the build step out

55:37.000 --> 55:39.000
over here

55:39.000 --> 55:41.000
I can jump over here, but this

55:41.000 --> 55:43.000
is using esbuild to do everything

55:43.000 --> 55:45.000
so not necessarily plugins, but

55:45.000 --> 55:47.000
it's got a two step

55:47.000 --> 55:49.000
build process right now

55:49.000 --> 55:51.000
where it looks for that server component

55:51.000 --> 55:53.000
and it will output it

55:53.000 --> 55:55.000
just using a JSX transform

55:55.000 --> 55:57.000
it's not going to resolve any modules or anything

55:57.000 --> 55:59.000
it's literally just going to output it

55:59.000 --> 56:01.000
with the JSX transform, leave everything else alone

56:01.000 --> 56:03.000
and the one weird piece

56:03.000 --> 56:05.000
is this part right here

56:05.000 --> 56:07.000
anyone watching at home, don't do

56:07.000 --> 56:09.000
this, but I am reading

56:09.000 --> 56:11.000
the file, whenever it discovers

56:11.000 --> 56:13.000
a client component, I'm checking for

56:13.000 --> 56:15.000
the use client directive

56:15.000 --> 56:17.000
and I'm doing this wild line

56:17.000 --> 56:19.000
right here that

56:19.000 --> 56:21.000
inserts a few things that Webpack

56:21.000 --> 56:23.000
looks for in order to decide if something

56:23.000 --> 56:25.000
is a client component

56:25.000 --> 56:27.000
so it imports it inline

56:27.000 --> 56:29.000
it tells it that it's a client

56:29.000 --> 56:31.000
reference, and then it returns

56:31.000 --> 56:33.000
that in order to import onto the page

56:33.000 --> 56:35.000
and I figured out

56:35.000 --> 56:37.000
it works! It's not using Webpack

56:37.000 --> 56:39.000
and it still does technically work

56:39.000 --> 56:41.000
but that's an under the hood view

56:41.000 --> 56:43.000
I'm sure you don't have

56:43.000 --> 56:45.000
pleasant opinions about it, but

56:45.000 --> 56:47.000
it works

56:49.000 --> 56:51.000
I think I don't fully understand

56:51.000 --> 56:53.000
the handler part

56:53.000 --> 56:55.000
this runs

56:55.000 --> 56:57.000
what is the

56:59.000 --> 57:01.000
oh sure

57:01.000 --> 57:03.000
why is there a

57:03.000 --> 57:05.000
path, oh so this is the thing

57:05.000 --> 57:07.000
you fetch, right?

57:07.000 --> 57:09.000
this is the thing you fetch

57:09.000 --> 57:11.000
yeah, so this is

57:11.000 --> 57:13.000
the server components endpoint

57:13.000 --> 57:15.000
so to speak

57:15.000 --> 57:17.000
yeah, and I could have

57:17.000 --> 57:19.000
it's a bit confusing because

57:19.000 --> 57:21.000
it looks like I'm

57:21.000 --> 57:23.000
fetching JSX and I'm like

57:23.000 --> 57:25.000
what is this about?

57:25.000 --> 57:27.000
I named it that thinking that's how it worked

57:27.000 --> 57:29.000
and realized that's not what I'm doing

57:29.000 --> 57:31.000
I'm actually sending you the stream

57:31.000 --> 57:33.000
I'm not sending you the file

57:33.000 --> 57:35.000
this is kind of more like

57:37.000 --> 57:39.000
like RSC or

57:39.000 --> 57:41.000
yeah

57:41.000 --> 57:43.000
it's just like an API

57:43.000 --> 57:45.000
it's like a

57:45.000 --> 57:47.000
GraphQL endpoint I think, except

57:47.000 --> 57:49.000
instead of GraphQL it's like

57:49.000 --> 57:51.000
React

57:51.000 --> 57:53.000
okay, now that makes sense, I get it

57:53.000 --> 57:55.000
yep, I should have explained that part

57:55.000 --> 57:57.000
because I realized after the fact that's not

57:57.000 --> 57:59.000
what it is, and I also looked through

57:59.000 --> 58:01.000
some of the React docs and

58:01.000 --> 58:03.000
the content type of what this sends down is

58:03.000 --> 58:05.000
like X component is

58:05.000 --> 58:07.000
one way to put it, it's special

58:07.000 --> 58:09.000
it's something that React understands

58:09.000 --> 58:11.000
is the way that I would put it

58:11.000 --> 58:13.000
yeah, okay

58:13.000 --> 58:15.000
that sounds good

58:15.000 --> 58:17.000
yeah, I don't

58:17.000 --> 58:19.000
think I have any more questions

58:19.000 --> 58:21.000
so we can

58:21.000 --> 58:23.000
maybe try to do something

58:23.000 --> 58:25.000
I do want to clarify

58:25.000 --> 58:27.000
though for people watching that

58:27.000 --> 58:29.000
if I understood correctly what you're saying

58:29.000 --> 58:31.000
like, the architecture here essentially

58:31.000 --> 58:33.000
is that the browser

58:33.000 --> 58:35.000
will load like an empty HTML shell

58:35.000 --> 58:37.000
which is kind of like

58:37.000 --> 58:39.000
a traditional CRA app actually

58:39.000 --> 58:41.000
like a web app

58:41.000 --> 58:43.000
it loads empty HTML

58:43.000 --> 58:45.000
then requests the

58:45.000 --> 58:47.000
server component endpoint

58:47.000 --> 58:49.000
and server component streams in

58:49.000 --> 58:51.000
you know, what the server output is

58:51.000 --> 58:53.000
so it's not super efficient because

58:53.000 --> 58:55.000
it has this client-server waterfall

58:55.000 --> 58:57.000
for the first load

58:57.000 --> 58:59.000
whereas a proper setup would

58:59.000 --> 59:01.000
actually do SSR as well

59:01.000 --> 59:03.000
so it would

59:03.000 --> 59:05.000
do that on the server instead

59:05.000 --> 59:07.000
like when it hits index.html

59:07.000 --> 59:09.000
it would

59:09.000 --> 59:11.000
actually talk to the RSC endpoint

59:11.000 --> 59:13.000
on the server

59:13.000 --> 59:15.000
load that HTML, stream the HTML

59:15.000 --> 59:17.000
to the client, and that's how the

59:17.000 --> 59:19.000
initial page would be

59:19.000 --> 59:21.000
actually have content without

59:21.000 --> 59:23.000
an extra waterfall

59:23.000 --> 59:25.000
but this is much harder to do

59:25.000 --> 59:27.000
manually, and there's already enough

59:27.000 --> 59:29.000
of manual setup, so this is just

59:29.000 --> 59:31.000
the simplified version

59:31.000 --> 59:33.000
yeah, and that's the callout

59:33.000 --> 59:35.000
that's definitely worth making

59:35.000 --> 59:37.000
because I'll admit, I tried, but I realized

59:37.000 --> 59:39.000
doing that without blocking

59:39.000 --> 59:41.000
on suspense boundaries

59:41.000 --> 59:43.000
and not just reading the whole stream

59:43.000 --> 59:45.000
I was like, I can't, I don't know

59:45.000 --> 59:47.000
what I'm supposed to do here, I know

59:47.000 --> 59:49.000
Next.js knows, they figured it out

59:49.000 --> 59:51.000
but yeah, it's a different

59:51.000 --> 59:53.000
problem

59:53.000 --> 59:55.000
it's doable, like we actually have

59:55.000 --> 59:57.000
an example in the React repo

59:57.000 --> 59:59.000
so we go to fixtures slash

59:59.000 --> 01:00:01.000
flight, it has like a super

01:00:01.000 --> 01:00:03.000
believe me, I've had

01:00:03.000 --> 01:00:05.000
every page visited at this point

01:00:05.000 --> 01:00:07.000
yeah, so it shows

01:00:07.000 --> 01:00:09.000
how to do it, but it is confusing

01:00:09.000 --> 01:00:11.000
it's a lot

01:00:11.000 --> 01:00:13.000
oh yeah, for a client

01:00:13.000 --> 01:00:15.000
emulator, this is the page that

01:00:15.000 --> 01:00:17.000
I was reading for a little bit

01:00:17.000 --> 01:00:19.000
I don't actually see

01:00:19.000 --> 01:00:21.000
because I think you're sharing just the part of the screen

01:00:21.000 --> 01:00:23.000
so I don't know

01:00:23.000 --> 01:00:25.000
I shared an individual tab

01:00:25.000 --> 01:00:27.000
which means I would have to visit it in this

01:00:27.000 --> 01:00:29.000
tab, and then it would work

01:00:29.000 --> 01:00:31.000
it also

01:00:31.000 --> 01:00:33.000
might be delayed

01:00:33.000 --> 01:00:35.000
yeah

01:00:35.000 --> 01:00:37.000
this is the weird part, and this

01:00:37.000 --> 01:00:39.000
definitely speaks to what you said about client

01:00:39.000 --> 01:00:41.000
isn't really browser

01:00:41.000 --> 01:00:43.000
client is just whoever wants to consume

01:00:43.000 --> 01:00:45.000
that server component, and it could

01:00:45.000 --> 01:00:47.000
be the server itself in order to render it

01:00:47.000 --> 01:00:49.000
to HTML, or it could be the client

01:00:49.000 --> 01:00:51.000
when you're trying to do client-side routing

01:00:51.000 --> 01:00:53.000
which is usually what you'd end up with

01:00:53.000 --> 01:00:55.000
here, like yeah, the initial load

01:00:55.000 --> 01:00:57.000
of, now I have to hit back

01:00:57.000 --> 01:00:59.000
the initial load of this

01:00:59.000 --> 01:01:01.000
that's not good, you want to have the server rendered

01:01:01.000 --> 01:01:03.000
but if I want to load this as

01:01:03.000 --> 01:01:05.000
another route coming in, then

01:01:05.000 --> 01:01:07.000
it actually makes sense, I actually want to get this

01:01:07.000 --> 01:01:09.000
full stream and just render it onto the page

01:01:09.000 --> 01:01:11.000
of JavaScript

01:01:11.000 --> 01:01:13.000
yeah, I think another thing that's

01:01:13.000 --> 01:01:15.000
worth highlighting maybe is

01:01:15.000 --> 01:01:17.000
I think

01:01:17.000 --> 01:01:19.000
sometimes people have this

01:01:19.000 --> 01:01:21.000
wrong mental model of

01:01:21.000 --> 01:01:23.000
when you have a server component in the tree

01:01:23.000 --> 01:01:25.000
you go to the server, and it's

01:01:25.000 --> 01:01:27.000
like each individual server component

01:01:27.000 --> 01:01:29.000
is kind of rendered independently

01:01:29.000 --> 01:01:31.000
but it's really not like this

01:01:31.000 --> 01:01:33.000
it's more like

01:01:33.000 --> 01:01:35.000
it's just, there's

01:01:35.000 --> 01:01:37.000
I think in a simple setup, like

01:01:37.000 --> 01:01:39.000
the one you have, the only

01:01:39.000 --> 01:01:41.000
server component that you talk

01:01:41.000 --> 01:01:43.000
to or render is the

01:01:43.000 --> 01:01:45.000
top-level one, so it's really about

01:01:45.000 --> 01:01:47.000
top-down rendering

01:01:47.000 --> 01:01:49.000
the whole page, and if you

01:01:49.000 --> 01:01:51.000
refetch, it's going to go to the

01:01:51.000 --> 01:01:53.000
server component

01:01:53.000 --> 01:01:55.000
server and re-render the

01:01:55.000 --> 01:01:57.000
app, the top-level thing

01:01:57.000 --> 01:01:59.000
and get the new output for that

01:01:59.000 --> 01:02:01.000
and then that's of course not super

01:02:01.000 --> 01:02:03.000
efficient, so this is why with something

01:02:03.000 --> 01:02:05.000
like Next.js, you have nested routing

01:02:05.000 --> 01:02:07.000
where the granularity

01:02:07.000 --> 01:02:09.000
is to the

01:02:09.000 --> 01:02:11.000
sub-route level

01:02:11.000 --> 01:02:13.000
so you can't update

01:02:13.000 --> 01:02:15.000
one small server component

01:02:15.000 --> 01:02:17.000
that doesn't make sense in the model, because they

01:02:17.000 --> 01:02:19.000
all have to be consistent

01:02:19.000 --> 01:02:21.000
with each other, but what you can do

01:02:21.000 --> 01:02:23.000
is you can invalidate the sub-route

01:02:23.000 --> 01:02:25.000
so that would be like, for example, if you have

01:02:25.000 --> 01:02:27.000
a shell of the page, and then they have

01:02:27.000 --> 01:02:29.000
some kind of tab interface

01:02:29.000 --> 01:02:31.000
like about, photos,

01:02:31.000 --> 01:02:33.000
memories, whatever,

01:02:33.000 --> 01:02:35.000
then when you switch those things,

01:02:35.000 --> 01:02:37.000
it's just this part that

01:02:37.000 --> 01:02:39.000
gets independently refetched

01:02:39.000 --> 01:02:41.000
from the server, but if you want

01:02:41.000 --> 01:02:43.000
to refetch something

01:02:43.000 --> 01:02:45.000
broader, like you want to change

01:02:45.000 --> 01:02:47.000
there's a mutation that affected something

01:02:47.000 --> 01:02:49.000
else on the screen, you just refetch

01:02:49.000 --> 01:02:51.000
the whole thing, and this might sound like

01:02:51.000 --> 01:02:53.000
oh, this is going to be super slow, but let's remember

01:02:53.000 --> 01:02:55.000
that this is literally what happens if the

01:02:55.000 --> 01:02:57.000
user just opens the page and

01:02:57.000 --> 01:02:59.000
opens the tab, so it's not

01:02:59.000 --> 01:03:01.000
that different from

01:03:01.000 --> 01:03:03.000
traditional web models.

01:03:03.000 --> 01:03:05.000
Yeah, it's not.

01:03:05.000 --> 01:03:07.000
And that is a real big thing of like

01:03:07.000 --> 01:03:09.000
routes aren't necessarily

01:03:09.000 --> 01:03:11.000
full routes, they're layers of an

01:03:11.000 --> 01:03:13.000
onion or individual components

01:03:13.000 --> 01:03:15.000
that you can just slot into view

01:03:15.000 --> 01:03:17.000
like this server component that we've created

01:03:17.000 --> 01:03:19.000
here, this could be fetched from

01:03:19.000 --> 01:03:21.000
some other route on the page, and it could just add

01:03:21.000 --> 01:03:23.000
welcome to server components below

01:03:23.000 --> 01:03:25.000
a navigation bar and other things

01:03:25.000 --> 01:03:27.000
that are being rendered. It's just a way to

01:03:27.000 --> 01:03:29.000
officially fetch server stuff.

01:03:29.000 --> 01:03:31.000
Yeah, but then for that you kind of

01:03:31.000 --> 01:03:33.000
need a framework because

01:03:33.000 --> 01:03:35.000
implementing this kind of nested thing

01:03:35.000 --> 01:03:37.000
in this demo, that's yet

01:03:37.000 --> 01:03:39.000
another level of complexity, and that's why

01:03:39.000 --> 01:03:41.000
DIY is

01:03:41.000 --> 01:03:43.000
actually really hard today because you just

01:03:43.000 --> 01:03:45.000
don't have a router like this

01:03:45.000 --> 01:03:47.000
that's, you know, there is no RSC

01:03:47.000 --> 01:03:49.000
router you can use off the shelf.

01:03:49.000 --> 01:03:51.000
But you can build one.

01:03:51.000 --> 01:03:53.000
You can write one.

01:03:53.000 --> 01:03:55.000
I'm not going to invite myself to do that.

01:03:55.000 --> 01:03:57.000
I've already sunk too much time into this.

01:03:57.000 --> 01:03:59.000
But yeah, that's

01:03:59.000 --> 01:04:01.000
why I guess the main goal of this project

01:04:01.000 --> 01:04:03.000
was like, I just want a way to workbench

01:04:03.000 --> 01:04:05.000
one server component and have a

01:04:05.000 --> 01:04:07.000
dev panel of the stuff coming down the pipe.

01:04:07.000 --> 01:04:09.000
And that's it. Like, no opinions

01:04:09.000 --> 01:04:11.000
on routing because, as you kind of mentioned,

01:04:11.000 --> 01:04:13.000
React is

01:04:13.000 --> 01:04:15.000
I don't know if you said this yet, but React

01:04:15.000 --> 01:04:17.000
is more of an architecture

01:04:17.000 --> 01:04:19.000
and a library than it is a

01:04:19.000 --> 01:04:21.000
framework. And in

01:04:21.000 --> 01:04:23.000
order to have any opinions about, like, where

01:04:23.000 --> 01:04:25.000
do the routes go? What is the

01:04:25.000 --> 01:04:27.000
nesting strategies that you probably

01:04:27.000 --> 01:04:29.000
want? Like, that's immediately framework

01:04:29.000 --> 01:04:31.000
opinions. And that's already taking

01:04:31.000 --> 01:04:33.000
things to a new space.

01:04:33.000 --> 01:04:35.000
Yeah.

01:04:35.000 --> 01:04:37.000
Yeah.

01:04:37.000 --> 01:04:39.000
So with this, I'm thinking

01:04:39.000 --> 01:04:41.000
like, maybe we can put some albums

01:04:41.000 --> 01:04:43.000
on the page and render them out to start.

01:04:43.000 --> 01:04:45.000
I have some

01:04:45.000 --> 01:04:47.000
really basic endpoints here.

01:04:47.000 --> 01:04:49.000
And this is literally just

01:04:49.000 --> 01:04:51.000
fetching some JSON. And I say

01:04:51.000 --> 01:04:53.000
fetch, it's just an

01:04:53.000 --> 01:04:55.000
import with an artificial

01:04:55.000 --> 01:04:57.000
wait time to make it feel like it's a server

01:04:57.000 --> 01:04:59.000
but it's not. It was just

01:04:59.000 --> 01:05:01.000
the easiest way.

01:05:01.000 --> 01:05:03.000
Where should that be looking? I'm not sure.

01:05:03.000 --> 01:05:05.000
Sorry. Right.

01:05:05.000 --> 01:05:07.000
I was just looking at this DB fetch file.

01:05:07.000 --> 01:05:09.000
Oh, okay.

01:05:09.000 --> 01:05:11.000
This part isn't too important

01:05:11.000 --> 01:05:13.000
but I just made some JSON dumps

01:05:13.000 --> 01:05:15.000
of good albums that I

01:05:15.000 --> 01:05:17.000
like. That's why I actually mentioned

01:05:17.000 --> 01:05:19.000
earlier, like, if you want to put an album on here, we can.

01:05:19.000 --> 01:05:21.000
Because you put out those really

01:05:21.000 --> 01:05:23.000
good tweets of just, like, a random song on Spotify.

01:05:23.000 --> 01:05:25.000
Like, this is great. Like, you know

01:05:25.000 --> 01:05:27.000
what, you're right. It's really good.

01:05:27.000 --> 01:05:29.000
But yeah, that's all this is

01:05:29.000 --> 01:05:31.000
doing. I have a get all, which will

01:05:31.000 --> 01:05:33.000
wait 300 milliseconds and send you all the

01:05:33.000 --> 01:05:35.000
albums. And get by ID, where

01:05:35.000 --> 01:05:37.000
you can pass in an individual ID

01:05:37.000 --> 01:05:39.000
slug, whatever you want. So if you

01:05:39.000 --> 01:05:41.000
want to do routing, that's how you would get, like,

01:05:41.000 --> 01:05:43.000
an individual entry.

01:05:43.000 --> 01:05:45.000
But yeah.

01:05:45.000 --> 01:05:47.000
I hopped back over here. I think I have to

01:05:47.000 --> 01:05:49.000
keep, like, focusing you to bring you

01:05:49.000 --> 01:05:51.000
into the model. Yeah, yeah.

01:05:51.000 --> 01:05:53.000
We're trying VS Code live share, by the way.

01:05:53.000 --> 01:05:55.000
So

01:05:55.000 --> 01:05:57.000
we'll see how it goes.

01:05:57.000 --> 01:05:59.000
Anything goes

01:05:59.000 --> 01:06:01.000
is the idea here. If we want to jump

01:06:01.000 --> 01:06:03.000
in and type code, either one of us can do it.

01:06:03.000 --> 01:06:05.000
But yeah.

01:06:05.000 --> 01:06:07.000
In order to render all of the albums

01:06:07.000 --> 01:06:09.000
onto the page,

01:06:09.000 --> 01:06:11.000
well, I've already kind of done it.

01:06:11.000 --> 01:06:13.000
I kind of spoiled it.

01:06:13.000 --> 01:06:15.000
Where in a server company, you can just

01:06:15.000 --> 01:06:17.000
say, wait, get all the albums,

01:06:17.000 --> 01:06:19.000
and then to put them on the page, I guess we could just

01:06:19.000 --> 01:06:21.000
do a map over whatever's

01:06:21.000 --> 01:06:23.000
going on.

01:06:23.000 --> 01:06:25.000
There's one thing I asked about earlier

01:06:25.000 --> 01:06:27.000
where I was wondering

01:06:27.000 --> 01:06:29.000
why you would need an

01:06:29.000 --> 01:06:31.000
ID prop or a key. That's what

01:06:31.000 --> 01:06:33.000
I'm thinking of.

01:06:33.000 --> 01:06:35.000
Because that's always been the thing with React

01:06:35.000 --> 01:06:37.000
Lists that I forget.

01:06:37.000 --> 01:06:39.000
Which is adding a key onto every entry.

01:06:39.000 --> 01:06:41.000
So is that still

01:06:41.000 --> 01:06:43.000
required? And if so,

01:06:43.000 --> 01:06:45.000
what is sort of the benefit to that?

01:06:45.000 --> 01:06:47.000
Yeah, so maybe

01:06:47.000 --> 01:06:49.000
I think to answer that question,

01:06:49.000 --> 01:06:51.000
do you know why it's required?

01:06:51.000 --> 01:06:53.000
If we put server components out of the

01:06:53.000 --> 01:06:55.000
story, do you know why it's required on the client?

01:06:55.000 --> 01:06:57.000
Yeah, I know why it's required

01:06:57.000 --> 01:06:59.000
on the client. Usually for

01:06:59.000 --> 01:07:01.000
if the list updates

01:07:01.000 --> 01:07:03.000
and you need things to

01:07:03.000 --> 01:07:05.000
reorient and you want it to re-render

01:07:05.000 --> 01:07:07.000
efficiently, then a key will actually tell

01:07:07.000 --> 01:07:09.000
React, this is the part that was removed.

01:07:09.000 --> 01:07:11.000
This is the part that got moved up.

01:07:11.000 --> 01:07:13.000
So if you want to animate that transition

01:07:13.000 --> 01:07:15.000
of the

01:07:15.000 --> 01:07:17.000
item with a key of 4 moved

01:07:17.000 --> 01:07:19.000
from this position to this position,

01:07:19.000 --> 01:07:21.000
React can track, oh, that's

01:07:21.000 --> 01:07:23.000
the thing with the key of 4. I know how to animate

01:07:23.000 --> 01:07:25.000
that up if you're using some external

01:07:25.000 --> 01:07:27.000
library for it. Is that kind of right?

01:07:27.000 --> 01:07:29.000
I know there's more reasons.

01:07:29.000 --> 01:07:31.000
Sort of. I think maybe the focus

01:07:31.000 --> 01:07:33.000
on efficiency is a mistake.

01:07:33.000 --> 01:07:35.000
I think we've kind of maybe explained

01:07:35.000 --> 01:07:37.000
it badly in the old docs where

01:07:37.000 --> 01:07:39.000
we explain it as, oh, if

01:07:39.000 --> 01:07:41.000
you want it to be fast, then you should use

01:07:41.000 --> 01:07:43.000
a key. It has nothing to do with being

01:07:43.000 --> 01:07:45.000
fast.

01:07:45.000 --> 01:07:47.000
Yeah, not fast.

01:07:47.000 --> 01:07:49.000
Just to do it at all.

01:07:49.000 --> 01:07:51.000
If you want to do it in transition.

01:07:51.000 --> 01:07:53.000
Well, I don't think it has to do with animations

01:07:53.000 --> 01:07:55.000
either. It's

01:07:55.000 --> 01:07:57.000
really

01:07:57.000 --> 01:07:59.000
about

01:07:59.000 --> 01:08:01.000
kind of identity

01:08:01.000 --> 01:08:03.000
across re-renders.

01:08:03.000 --> 01:08:05.000
So it's

01:08:05.000 --> 01:08:07.000
about state. And I don't mean just

01:08:07.000 --> 01:08:09.000
React state. I mean even

01:08:09.000 --> 01:08:11.000
input state.

01:08:11.000 --> 01:08:13.000
If you just render an input

01:08:13.000 --> 01:08:15.000
that's uncontrolled

01:08:15.000 --> 01:08:17.000
or focus or

01:08:17.000 --> 01:08:19.000
scroll position or any

01:08:19.000 --> 01:08:21.000
of the things that are kind of

01:08:21.000 --> 01:08:23.000
stateful,

01:08:23.000 --> 01:08:25.000
it's about

01:08:25.000 --> 01:08:27.000
like imagine you render

01:08:27.000 --> 01:08:29.000
a list of components

01:08:29.000 --> 01:08:31.000
and then each of those components has

01:08:31.000 --> 01:08:33.000
an input inside. And again,

01:08:33.000 --> 01:08:35.000
this input doesn't have to be

01:08:35.000 --> 01:08:37.000
controlled value

01:08:37.000 --> 01:08:39.000
proper or anything like this. It could just be

01:08:39.000 --> 01:08:41.000
browser input, React doesn't touch it.

01:08:41.000 --> 01:08:43.000
You could do whatever with it.

01:08:43.000 --> 01:08:45.000
And so you type into each of those

01:08:45.000 --> 01:08:47.000
inputs and then suppose

01:08:47.000 --> 01:08:49.000
the first item in the

01:08:49.000 --> 01:08:51.000
list was deleted. And so

01:08:51.000 --> 01:08:53.000
there's a re-render and

01:08:53.000 --> 01:08:55.000
React now sees that

01:08:55.000 --> 01:08:57.000
there's the

01:08:57.000 --> 01:08:59.000
item, like you're

01:08:59.000 --> 01:09:01.000
rendering two items instead

01:09:01.000 --> 01:09:03.000
of three. The first one is gone.

01:09:03.000 --> 01:09:05.000
And so if you don't provide the key,

01:09:05.000 --> 01:09:07.000
React has no idea which of

01:09:07.000 --> 01:09:09.000
these items correspond.

01:09:09.000 --> 01:09:11.000
How do the old items kind of

01:09:11.000 --> 01:09:13.000
match to the new ones?

01:09:13.000 --> 01:09:15.000
Because it could be like this.

01:09:15.000 --> 01:09:17.000
But it could be like this.

01:09:17.000 --> 01:09:19.000
So it can't

01:09:19.000 --> 01:09:21.000
know which one was deleted

01:09:21.000 --> 01:09:23.000
because it

01:09:23.000 --> 01:09:25.000
just doesn't have the knowledge.

01:09:25.000 --> 01:09:27.000
And so if you get

01:09:27.000 --> 01:09:29.000
it wrong, so if it just tries to

01:09:29.000 --> 01:09:31.000
for example, it just matches up

01:09:31.000 --> 01:09:33.000
like this.

01:09:33.000 --> 01:09:35.000
And that's the default.

01:09:35.000 --> 01:09:37.000
It goes in the direction.

01:09:37.000 --> 01:09:39.000
This is the first one, used to be here,

01:09:39.000 --> 01:09:41.000
now it's here. This is the second one, used to be here,

01:09:41.000 --> 01:09:43.000
now it's here.

01:09:43.000 --> 01:09:45.000
So the inputs

01:09:45.000 --> 01:09:47.000
will be preserved.

01:09:47.000 --> 01:09:49.000
And so if what

01:09:49.000 --> 01:09:51.000
actually happened is this,

01:09:51.000 --> 01:09:53.000
so the first item got deleted,

01:09:53.000 --> 01:09:55.000
then you're going to see

01:09:55.000 --> 01:09:57.000
wrong inputs at wrong positions.

01:09:57.000 --> 01:09:59.000
And that is really the issue.

01:09:59.000 --> 01:10:01.000
If you've already modified them,

01:10:01.000 --> 01:10:03.000
but then things shifted, you're just

01:10:03.000 --> 01:10:05.000
going to see

01:10:05.000 --> 01:10:07.000
it's kind of the same.

01:10:07.000 --> 01:10:09.000
Imagine you're in a bus

01:10:09.000 --> 01:10:11.000
and there's like

01:10:11.000 --> 01:10:13.000
20 people in the bus and

01:10:13.000 --> 01:10:15.000
everybody has

01:10:15.000 --> 01:10:17.000
a seat.

01:10:17.000 --> 01:10:19.000
And you leave

01:10:19.000 --> 01:10:21.000
some stuff on your seat. Maybe you leave your

01:10:21.000 --> 01:10:23.000
headphones on the seat. I've done that once

01:10:23.000 --> 01:10:25.000
and they disappeared.

01:10:25.000 --> 01:10:27.000
And so imagine

01:10:27.000 --> 01:10:29.000
the situation.

01:10:29.000 --> 01:10:31.000
You leave the bus.

01:10:31.000 --> 01:10:33.000
When you come back to the bus,

01:10:33.000 --> 01:10:35.000
you want to go to your seat, even

01:10:35.000 --> 01:10:37.000
if there's fewer people. Even if some people

01:10:37.000 --> 01:10:39.000
got off the bus, you want to remember which

01:10:39.000 --> 01:10:41.000
seat is yours. You don't want to

01:10:41.000 --> 01:10:43.000
sit somewhere else. And so what happens

01:10:43.000 --> 01:10:45.000
if you don't specify a key,

01:10:45.000 --> 01:10:47.000
it's like you don't know what

01:10:47.000 --> 01:10:49.000
your seat is.

01:10:49.000 --> 01:10:51.000
So by

01:10:51.000 --> 01:10:53.000
default, you're going to be seated in

01:10:53.000 --> 01:10:55.000
the order.

01:10:55.000 --> 01:10:57.000
That's kind of the default for the key. It's just like index.

01:10:57.000 --> 01:10:59.000
So it's like the first people who gets

01:10:59.000 --> 01:11:01.000
on the bus goes to the first seat.

01:11:01.000 --> 01:11:03.000
The second person

01:11:03.000 --> 01:11:05.000
goes to the second seat and so on.

01:11:05.000 --> 01:11:07.000
And so if one of the people has

01:11:07.000 --> 01:11:09.000
left, then everybody

01:11:09.000 --> 01:11:11.000
else will get the wrong seat because

01:11:11.000 --> 01:11:13.000
the order has shifted. And that's why

01:11:13.000 --> 01:11:15.000
you need keys.

01:11:15.000 --> 01:11:17.000
And so it's the same with

01:11:17.000 --> 01:11:19.000
server components. You don't notice it all the time.

01:11:19.000 --> 01:11:21.000
But I've definitely run into

01:11:21.000 --> 01:11:23.000
why can't you just use the index

01:11:23.000 --> 01:11:25.000
in the array? It's like, well, if you do that,

01:11:25.000 --> 01:11:27.000
you actually get a clearer idea of why

01:11:27.000 --> 01:11:29.000
keys are bad or why

01:11:29.000 --> 01:11:31.000
you need a key. Where if you remove

01:11:31.000 --> 01:11:33.000
the first item in the list, now

01:11:33.000 --> 01:11:35.000
all of a sudden, item 0 became 1,

01:11:35.000 --> 01:11:37.000
item 1 became 2, item 2 became

01:11:37.000 --> 01:11:39.000
3. So it's like they're all different people

01:11:39.000 --> 01:11:41.000
now. It's like everyone on the bus

01:11:41.000 --> 01:11:43.000
traded seats all of a sudden

01:11:43.000 --> 01:11:45.000
when that actually didn't need to happen.

01:11:45.000 --> 01:11:47.000
And you don't always notice it.

01:11:47.000 --> 01:11:49.000
But with efficient libraries, it's like you do.

01:11:49.000 --> 01:11:51.000
Yeah, so this is very interesting

01:11:51.000 --> 01:11:53.000
because you don't always notice it.

01:11:53.000 --> 01:11:55.000
And like one

01:11:55.000 --> 01:11:57.000
way to notice it is, yes, animations,

01:11:57.000 --> 01:11:59.000
because they make it obvious that, wait,

01:11:59.000 --> 01:12:01.000
a thing disappearing is a

01:12:01.000 --> 01:12:03.000
very different thing from, you know, things

01:12:03.000 --> 01:12:05.000
reordering and updating.

01:12:05.000 --> 01:12:07.000
But another way to notice

01:12:07.000 --> 01:12:09.000
it is, and that is

01:12:09.000 --> 01:12:11.000
the most insidious thing, it's like

01:12:11.000 --> 01:12:13.000
initially you don't add a key because

01:12:13.000 --> 01:12:15.000
it seems to work fine. And then

01:12:15.000 --> 01:12:17.000
like five months later,

01:12:17.000 --> 01:12:19.000
somebody adds a little bit piece

01:12:19.000 --> 01:12:21.000
of state somewhere deep down

01:12:21.000 --> 01:12:23.000
in the item components,

01:12:23.000 --> 01:12:25.000
like even like five levels down.

01:12:25.000 --> 01:12:27.000
And this piece

01:12:27.000 --> 01:12:29.000
of state will get misplaced when they

01:12:29.000 --> 01:12:31.000
reorder because you didn't give the right key

01:12:31.000 --> 01:12:33.000
to the top level thing.

01:12:33.000 --> 01:12:35.000
So it's like if everybody leaves the bus

01:12:35.000 --> 01:12:37.000
but nobody has headphones on the seat,

01:12:37.000 --> 01:12:39.000
the seats kind of don't matter.

01:12:39.000 --> 01:12:41.000
It's okay to sit anywhere. But if

01:12:41.000 --> 01:12:43.000
you start leaving your valuables,

01:12:43.000 --> 01:12:45.000
now it becomes

01:12:45.000 --> 01:12:47.000
important. So that's why, and sometimes

01:12:47.000 --> 01:12:49.000
index as a key is fine

01:12:49.000 --> 01:12:51.000
when that actually corresponds to

01:12:51.000 --> 01:12:53.000
the identity. So it's like

01:12:53.000 --> 01:12:55.000
literally it's important, you know, the first thing

01:12:55.000 --> 01:12:57.000
is the first thing, the second thing is the second.

01:12:57.000 --> 01:12:59.000
That's what, you know, like a list of

01:12:59.000 --> 01:13:01.000
words in a sentence or something

01:13:01.000 --> 01:13:03.000
like this, or like the first line

01:13:03.000 --> 01:13:05.000
of code, the second line of code.

01:13:05.000 --> 01:13:07.000
Then it kind of makes sense that, yeah, the index

01:13:07.000 --> 01:13:09.000
is actually the identity

01:13:09.000 --> 01:13:11.000
of that thing. It makes sense that

01:13:11.000 --> 01:13:13.000
the, you know, so.

01:13:13.000 --> 01:13:15.000
Yeah, I agree.

01:13:15.000 --> 01:13:17.000
But I'll say specifically

01:13:17.000 --> 01:13:19.000
the server components part of this is

01:13:19.000 --> 01:13:21.000
it's important for server components too

01:13:21.000 --> 01:13:23.000
because server component output can

01:13:23.000 --> 01:13:25.000
be refreshed. So if you have

01:13:25.000 --> 01:13:27.000
for example like a refresh

01:13:27.000 --> 01:13:29.000
button that will

01:13:29.000 --> 01:13:31.000
cause, you know, the server component output

01:13:31.000 --> 01:13:33.000
to update, maybe you deleted

01:13:33.000 --> 01:13:35.000
that album from the database and they're all

01:13:35.000 --> 01:13:37.000
going to like shift by one. And so this

01:13:37.000 --> 01:13:39.000
is again why you want to have a key.

01:13:39.000 --> 01:13:41.000
Yeah, that's the

01:13:41.000 --> 01:13:43.000
part that I like, I don't know what it looks like

01:13:43.000 --> 01:13:45.000
because I've only played with server components

01:13:45.000 --> 01:13:47.000
in a read only model

01:13:47.000 --> 01:13:49.000
where it's like I funnel all my data down

01:13:49.000 --> 01:13:51.000
it renders on the page and

01:13:51.000 --> 01:13:53.000
any mutations beyond that are

01:13:53.000 --> 01:13:55.000
handled with client. And

01:13:55.000 --> 01:13:57.000
it sounds like there are ways

01:13:57.000 --> 01:13:59.000
with server components to like sort of

01:13:59.000 --> 01:14:01.000
refresh, refetch

01:14:01.000 --> 01:14:03.000
like the same fragment of components

01:14:03.000 --> 01:14:05.000
and actually have it re-render

01:14:05.000 --> 01:14:07.000
like server only search or something like that.

01:14:07.000 --> 01:14:09.000
Yeah, that's exactly the

01:14:09.000 --> 01:14:11.000
point. Like you're not supposed to be

01:14:11.000 --> 01:14:13.000
copying, you know, props

01:14:13.000 --> 01:14:15.000
from the server into state and then like

01:14:15.000 --> 01:14:17.000
updating that state. Like the

01:14:17.000 --> 01:14:19.000
whole point is not to have to do that

01:14:19.000 --> 01:14:21.000
and to just be like something changed

01:14:21.000 --> 01:14:23.000
just like you refresh

01:14:23.000 --> 01:14:25.000
an API call except here you refresh

01:14:25.000 --> 01:14:27.000
the output.

01:14:27.000 --> 01:14:29.000
Yeah, exactly. And I do

01:14:29.000 --> 01:14:31.000
want to try that. We might have to move to Next.js

01:14:31.000 --> 01:14:33.000
to try it, I have no idea.

01:14:33.000 --> 01:14:35.000
But we'll just see.

01:14:35.000 --> 01:14:37.000
But I think that also speaks to like what

01:14:37.000 --> 01:14:39.000
we're getting over here.

01:14:39.000 --> 01:14:41.000
So what I did is

01:14:41.000 --> 01:14:43.000
I just rendered out the album titles

01:14:43.000 --> 01:14:45.000
as list items and

01:14:45.000 --> 01:14:47.000
the immediate thing that

01:14:47.000 --> 01:14:49.000
you sort of notice in that dev panel

01:14:49.000 --> 01:14:51.000
at the bottom is

01:14:51.000 --> 01:14:53.000
it's not passing down the entire

01:14:53.000 --> 01:14:55.000
list of albums. It's only passing

01:14:55.000 --> 01:14:57.000
down a set of like instructions

01:14:57.000 --> 01:14:59.000
to like write out

01:14:59.000 --> 01:15:01.000
the name with the ID and that's

01:15:01.000 --> 01:15:03.000
it. Like there's no images in here,

01:15:03.000 --> 01:15:05.000
there's no albums that we weren't

01:15:05.000 --> 01:15:07.000
searching for. Well, I guess we're getting all of them.

01:15:07.000 --> 01:15:09.000
But there's also a big list of songs

01:15:09.000 --> 01:15:11.000
that could have been sent down the wire.

01:15:11.000 --> 01:15:13.000
But because we're doing all these

01:15:13.000 --> 01:15:15.000
instructions on the server, it's only

01:15:15.000 --> 01:15:17.000
going to send this. We basically wrote our own

01:15:17.000 --> 01:15:19.000
GraphQL query in a way of like

01:15:19.000 --> 01:15:21.000
get album and just the title

01:15:21.000 --> 01:15:23.000
field and then render that

01:15:23.000 --> 01:15:25.000
into something.

01:15:25.000 --> 01:15:27.000
Yeah, I would maybe slightly reframe

01:15:27.000 --> 01:15:29.000
what you're saying instructions

01:15:29.000 --> 01:15:31.000
and it's kind of correct in a way

01:15:31.000 --> 01:15:33.000
but it is a bit

01:15:33.000 --> 01:15:35.000
I think like there's a way to misinterpret it

01:15:35.000 --> 01:15:37.000
where you think the server is kind of sending

01:15:37.000 --> 01:15:39.000
commands whereas

01:15:39.000 --> 01:15:41.000
the mental model is more like

01:15:41.000 --> 01:15:43.000
the server just sends a response

01:15:43.000 --> 01:15:45.000
that's essentially

01:15:45.000 --> 01:15:47.000
you can think of this response

01:15:47.000 --> 01:15:49.000
as it's almost like JSON.

01:15:49.000 --> 01:15:51.000
So it's almost like a big

01:15:51.000 --> 01:15:53.000
JSON tree that

01:15:53.000 --> 01:15:55.000
includes your

01:15:55.000 --> 01:15:57.000
kind of your HTML

01:15:57.000 --> 01:15:59.000
components, like your React

01:15:59.000 --> 01:16:01.000
components, you know like things like

01:16:01.000 --> 01:16:03.000
native and so on except

01:16:03.000 --> 01:16:05.000
formatted as JSON

01:16:05.000 --> 01:16:07.000
kind of like the virtual DOM

01:16:07.000 --> 01:16:09.000
as well as like if you have client components

01:16:09.000 --> 01:16:11.000
it will send also render

01:16:11.000 --> 01:16:13.000
this like like button with these

01:16:13.000 --> 01:16:15.000
props and so these props are also

01:16:15.000 --> 01:16:17.000
going to be kind of like JSON, right?

01:16:17.000 --> 01:16:19.000
So you can imagine the response as

01:16:19.000 --> 01:16:21.000
just like big JSON object

01:16:21.000 --> 01:16:23.000
except that would not be efficient because then

01:16:23.000 --> 01:16:25.000
you would have to wait for that entire

01:16:25.000 --> 01:16:27.000
object before you can like start

01:16:27.000 --> 01:16:29.000
rendering it properly

01:16:29.000 --> 01:16:31.000
Our protocol is just

01:16:31.000 --> 01:16:33.000
a thing that splits this JSON into

01:16:33.000 --> 01:16:35.000
parts. It's like JSON

01:16:35.000 --> 01:16:37.000
with holes. So it says like here's

01:16:37.000 --> 01:16:39.000
a hole that's going to be filled in later

01:16:39.000 --> 01:16:41.000
and so they're sent as

01:16:41.000 --> 01:16:43.000
they become available it sends more

01:16:43.000 --> 01:16:45.000
and more. But conceptually it's more

01:16:45.000 --> 01:16:47.000
like you know

01:16:47.000 --> 01:16:49.000
filling in the remaining content. It's

01:16:49.000 --> 01:16:51.000
not so much like it's not imperative

01:16:51.000 --> 01:16:53.000
as like do this then do this.

01:16:53.000 --> 01:16:55.000
It's just filling in the parts as

01:16:55.000 --> 01:16:57.000
they become available.

01:16:57.000 --> 01:16:59.000
Yep. Yeah I kind of say instructions

01:16:59.000 --> 01:17:01.000
where it's like React is going to

01:17:01.000 --> 01:17:03.000
take this blob and convert it

01:17:03.000 --> 01:17:05.000
to JSX which becomes

01:17:05.000 --> 01:17:07.000
actual like DOM queries to

01:17:07.000 --> 01:17:09.000
render stuff on the page. But

01:17:09.000 --> 01:17:11.000
I agree it's like

01:17:11.000 --> 01:17:13.000
it's not just the data

01:17:13.000 --> 01:17:15.000
it's the HTML

01:17:15.000 --> 01:17:17.000
in a different shape. It's actually

01:17:17.000 --> 01:17:19.000
filtering out what needs to be rendered

01:17:19.000 --> 01:17:21.000
based on well what are you trying to

01:17:21.000 --> 01:17:23.000
render? Like you're not going to use

01:17:23.000 --> 01:17:25.000
we're not going to send the album image down the pipe

01:17:25.000 --> 01:17:27.000
because you didn't render an image. You never

01:17:27.000 --> 01:17:29.000
accessed it. So it's not sending

01:17:29.000 --> 01:17:31.000
down like the album object. It's sending down

01:17:31.000 --> 01:17:33.000
the values that have been

01:17:33.000 --> 01:17:35.000
put in there.

01:17:35.000 --> 01:17:37.000
I'm curious. Do you want to

01:17:37.000 --> 01:17:39.000
kind of

01:17:39.000 --> 01:17:41.000
show what happens if

01:17:41.000 --> 01:17:43.000
we

01:17:43.000 --> 01:17:45.000
if we kind of split it into the components

01:17:45.000 --> 01:17:47.000
so that you can

01:17:47.000 --> 01:17:49.000
delay. So you can send. Okay

01:17:49.000 --> 01:17:51.000
yeah let's do that.

01:17:51.000 --> 01:17:53.000
Let's see it.

01:17:53.000 --> 01:17:55.000
I mean I can type

01:17:55.000 --> 01:17:57.000
it out since I think all we have to do is this.

01:17:57.000 --> 01:17:59.000
So now I'm going to make

01:17:59.000 --> 01:18:01.000
a separate albums call and

01:18:01.000 --> 01:18:03.000
Perdo's curious like

01:18:03.000 --> 01:18:05.000
you know a wait is always going to be

01:18:05.000 --> 01:18:07.000
a blocking thing. It's not going to send

01:18:07.000 --> 01:18:09.000
this until this is done.

01:18:09.000 --> 01:18:11.000
So if you wanted to

01:18:11.000 --> 01:18:13.000
you know delay that or control

01:18:13.000 --> 01:18:15.000
when this runs you can move the query

01:18:15.000 --> 01:18:17.000
somewhere else or even pass down the promise

01:18:17.000 --> 01:18:19.000
as a prop which is something that I've

01:18:19.000 --> 01:18:21.000
seen the experiments with.

01:18:21.000 --> 01:18:23.000
And in here I'm going

01:18:23.000 --> 01:18:25.000
to just pass down the list

01:18:25.000 --> 01:18:27.000
without the other stuff.

01:18:27.000 --> 01:18:29.000
And do you want me

01:18:29.000 --> 01:18:31.000
to put a suspense around this or just put

01:18:31.000 --> 01:18:33.000
albums. Let's maybe start

01:18:33.000 --> 01:18:35.000
with just albums and then we'll add

01:18:35.000 --> 01:18:37.000
suspense and see how it changes

01:18:37.000 --> 01:18:39.000
things. Okay. Oh it's

01:18:39.000 --> 01:18:41.000
thinking that's the thing.

01:18:41.000 --> 01:18:43.000
There we go.

01:18:43.000 --> 01:18:45.000
Too helpful.

01:18:45.000 --> 01:18:47.000
And don't worry about the

01:18:47.000 --> 01:18:49.000
squiggle. That's just because

01:18:49.000 --> 01:18:51.000
it doesn't know about async being a thing.

01:18:51.000 --> 01:18:53.000
I know that's like a patch you can

01:18:53.000 --> 01:18:55.000
make in next JS.

01:18:55.000 --> 01:18:57.000
But yeah what we get here.

01:18:57.000 --> 01:18:59.000
I think you want to get rid of this line too right.

01:18:59.000 --> 01:19:01.000
Oh you're totally right.

01:19:01.000 --> 01:19:03.000
Yeah.

01:19:03.000 --> 01:19:05.000
Okay that's better.

01:19:05.000 --> 01:19:07.000
So now yeah everything comes down in

01:19:07.000 --> 01:19:09.000
one chunk it looks like.

01:19:09.000 --> 01:19:11.000
And this isn't split perfectly.

01:19:11.000 --> 01:19:13.000
This was supposed to split out like this

01:19:13.000 --> 01:19:15.000
part from this part. I'm still trying to figure out how

01:19:15.000 --> 01:19:17.000
to parse it because sometimes things come so

01:19:17.000 --> 01:19:19.000
quickly it's like part of the same message.

01:19:19.000 --> 01:19:21.000
But generally

01:19:21.000 --> 01:19:23.000
what you're going to get is like you're going to get

01:19:23.000 --> 01:19:25.000
the welcome to server components and then

01:19:25.000 --> 01:19:27.000
immediately you're going to get

01:19:27.000 --> 01:19:29.000
the next chunk and

01:19:29.000 --> 01:19:31.000
you're going to load in tandem.

01:19:31.000 --> 01:19:33.000
Yeah so what I want to call attention to

01:19:33.000 --> 01:19:35.000
can I

01:19:35.000 --> 01:19:37.000
like yeah.

01:19:37.000 --> 01:19:39.000
So what I want to call attention to is like this

01:19:39.000 --> 01:19:41.000
protocol that you're showing in the dev panel

01:19:41.000 --> 01:19:43.000
like that's an implementation detail

01:19:43.000 --> 01:19:45.000
so it's not actually something you're supposed to

01:19:45.000 --> 01:19:47.000
be able to like read or care about

01:19:47.000 --> 01:19:49.000
except for I don't know maybe some kind of debugging

01:19:49.000 --> 01:19:51.000
but mostly if you're debugging

01:19:51.000 --> 01:19:53.000
React like if you're working on React yes

01:19:53.000 --> 01:19:55.000
that's useful but it's not something we want

01:19:55.000 --> 01:19:57.000
you to kind of think about and it's going to change

01:19:57.000 --> 01:19:59.000
over time it's not you know it's not

01:19:59.000 --> 01:20:01.000
super optimized yet.

01:20:01.000 --> 01:20:03.000
But if we're

01:20:03.000 --> 01:20:05.000
using it as an instructional tool

01:20:05.000 --> 01:20:07.000
you know to kind of teach how this works

01:20:07.000 --> 01:20:09.000
I think it's interesting to notice

01:20:09.000 --> 01:20:11.000
yeah I see your formatting

01:20:11.000 --> 01:20:13.000
is a bit messed up because you see it says

01:20:13.000 --> 01:20:15.000
0 colon blah blah

01:20:15.000 --> 01:20:17.000
blah and then it says 1 colon blah blah

01:20:17.000 --> 01:20:19.000
blah I think those were supposed to be separate

01:20:19.000 --> 01:20:21.000
lines because like in the response

01:20:21.000 --> 01:20:23.000
there are separate lines

01:20:23.000 --> 01:20:25.000
but I want you to notice how it's

01:20:25.000 --> 01:20:27.000
structured like do you notice

01:20:27.000 --> 01:20:29.000
it's like

01:20:29.000 --> 01:20:31.000
0 is like the first line

01:20:31.000 --> 01:20:33.000
and it says at 1

01:20:33.000 --> 01:20:35.000
and I don't remember the exact syntax again

01:20:35.000 --> 01:20:37.000
that's not the point but it kind of references

01:20:37.000 --> 01:20:39.000
like this is a hole it says like

01:20:39.000 --> 01:20:41.000
the result of 0 is

01:20:41.000 --> 01:20:43.000
going to be streamed under

01:20:43.000 --> 01:20:45.000
number 1 and then you see like number

01:20:45.000 --> 01:20:47.000
1 says you need

01:20:47.000 --> 01:20:49.000
to have like a header with

01:20:49.000 --> 01:20:51.000
welcome to server components

01:20:51.000 --> 01:20:53.000
and then the rest is going to be streamed under

01:20:53.000 --> 01:20:55.000
number 2 you see it says like

01:20:55.000 --> 01:20:57.000
L2 is like I don't remember

01:20:57.000 --> 01:20:59.000
what L means but it says

01:20:59.000 --> 01:21:01.000
that that's going to be coming later and then

01:21:01.000 --> 01:21:03.000
2 is like the remaining response

01:21:03.000 --> 01:21:05.000
and so these are these like

01:21:05.000 --> 01:21:07.000
that's the key thing that makes it possible

01:21:07.000 --> 01:21:09.000
to stream parts because we just leave

01:21:09.000 --> 01:21:11.000
holes and we're like yeah this thing

01:21:11.000 --> 01:21:13.000
number 42 is going to be filled in later

01:21:13.000 --> 01:21:15.000
and then we're able to like stream

01:21:15.000 --> 01:21:17.000
that part

01:21:17.000 --> 01:21:19.000
yep and yeah I agree

01:21:19.000 --> 01:21:21.000
like you're not going to be looking at this

01:21:21.000 --> 01:21:23.000
I didn't really care about the formatting so much

01:21:23.000 --> 01:21:25.000
as like what data is coming down

01:21:25.000 --> 01:21:27.000
and what's the order

01:21:27.000 --> 01:21:29.000
like this data came down a second later

01:21:29.000 --> 01:21:31.000
why and

01:21:31.000 --> 01:21:33.000
yeah the dev tools are split up by like

01:21:33.000 --> 01:21:35.000
the order to stream comes in

01:21:35.000 --> 01:21:37.000
and I don't split it up by these like numbers

01:21:37.000 --> 01:21:39.000
but that's the indicator

01:21:39.000 --> 01:21:41.000
that's where the holes are which is probably what you're looking

01:21:41.000 --> 01:21:43.000
for if you're thinking like

01:21:43.000 --> 01:21:45.000
first bit is this second bit is this

01:21:45.000 --> 01:21:47.000
and you can see like 2 matches up with 2

01:21:47.000 --> 01:21:49.000
and all that stuff

01:21:49.000 --> 01:21:51.000
maybe if I add the

01:21:51.000 --> 01:21:53.000
pre wrap

01:21:53.000 --> 01:21:55.000
or whatever the CSS thing to preserve

01:21:55.000 --> 01:21:57.000
new lines maybe then it will

01:21:57.000 --> 01:21:59.000
split 0 and 1 because

01:21:59.000 --> 01:22:01.000
0 and 1 are I think they arrive

01:22:01.000 --> 01:22:03.000
in the same response chunk

01:22:03.000 --> 01:22:05.000
but they are like separate lines

01:22:05.000 --> 01:22:07.000
they're separate things

01:22:07.000 --> 01:22:09.000
but it doesn't matter

01:22:09.000 --> 01:22:11.000
it doesn't matter

01:22:11.000 --> 01:22:13.000
and sometimes changes where it's like

01:22:13.000 --> 01:22:15.000
I decided this chunk should load with

01:22:15.000 --> 01:22:17.000
the next one and sometimes it's like no it's more

01:22:17.000 --> 01:22:19.000
efficient to put it up here so there's some

01:22:19.000 --> 01:22:21.000
optimization going on but

01:22:21.000 --> 01:22:23.000
in this example am I right

01:22:23.000 --> 01:22:25.000
that at least as

01:22:25.000 --> 01:22:27.000
the user sees it you're going

01:22:27.000 --> 01:22:29.000
to see all of this stuff coming in

01:22:29.000 --> 01:22:31.000
at once like you're not

01:22:31.000 --> 01:22:33.000
going to see like one then the next

01:22:33.000 --> 01:22:35.000
exactly

01:22:35.000 --> 01:22:37.000
and the idea here is

01:22:39.000 --> 01:22:41.000
the way you structure

01:22:41.000 --> 01:22:43.000
your

01:22:43.000 --> 01:22:45.000
the way you decide

01:22:45.000 --> 01:22:47.000
which components do what kind of data

01:22:47.000 --> 01:22:49.000
fetching and like moving

01:22:49.000 --> 01:22:51.000
data fetching calls between them should not

01:22:51.000 --> 01:22:53.000
affect the visual output for

01:22:53.000 --> 01:22:55.000
the user because

01:22:55.000 --> 01:22:57.000
I think that is like

01:22:57.000 --> 01:22:59.000
there's a bunch of things we've learned that

01:22:59.000 --> 01:23:01.000
we haven't communicated super well

01:23:01.000 --> 01:23:03.000
but I think like this is one of them

01:23:03.000 --> 01:23:05.000
like you want to have the freedom to move

01:23:05.000 --> 01:23:07.000
the data fetching code around

01:23:07.000 --> 01:23:09.000
without any effect on the

01:23:09.000 --> 01:23:11.000
user experience or like the way

01:23:11.000 --> 01:23:13.000
the user perceives it and then

01:23:13.000 --> 01:23:15.000
you want the people who are not necessarily

01:23:15.000 --> 01:23:17.000
super skilled

01:23:17.000 --> 01:23:19.000
in like how data fetching

01:23:19.000 --> 01:23:21.000
works like you know like a designer

01:23:21.000 --> 01:23:23.000
to be able to

01:23:23.000 --> 01:23:25.000
say I want like this piece

01:23:25.000 --> 01:23:27.000
of JSX to have its own

01:23:27.000 --> 01:23:29.000
loading indicator

01:23:29.000 --> 01:23:31.000
like its own skeleton

01:23:31.000 --> 01:23:33.000
and to be able to do that completely

01:23:33.000 --> 01:23:35.000
declaratively just by

01:23:35.000 --> 01:23:37.000
you know putting it into JSX

01:23:37.000 --> 01:23:39.000
tree without worrying about

01:23:39.000 --> 01:23:41.000
how you know how it's

01:23:41.000 --> 01:23:43.000
how it's actually kind of streamed

01:23:43.000 --> 01:23:45.000
in so the

01:23:45.000 --> 01:23:47.000
way the loading the progression

01:23:47.000 --> 01:23:49.000
the loading sequence that

01:23:49.000 --> 01:23:51.000
the user sees

01:23:51.000 --> 01:23:53.000
like the visual loading sequence

01:23:53.000 --> 01:23:55.000
is completely decoupled

01:23:55.000 --> 01:23:57.000
from you know the

01:23:57.000 --> 01:23:59.000
the streaming sequence because

01:23:59.000 --> 01:24:01.000
for streaming we want to stream as

01:24:01.000 --> 01:24:03.000
much as we can as early as we

01:24:03.000 --> 01:24:05.000
can as we discover things

01:24:05.000 --> 01:24:07.000
but then you know to the user we

01:24:07.000 --> 01:24:09.000
want to present them like each visual state

01:24:09.000 --> 01:24:11.000
should be intentional and only

01:24:11.000 --> 01:24:13.000
correspond to what the user actually wants to see

01:24:15.000 --> 01:24:17.000
Yeah and definitely

01:24:17.000 --> 01:24:19.000
seeing that here and I know that

01:24:19.000 --> 01:24:21.000
as you sort of cascade down

01:24:21.000 --> 01:24:23.000
multiple fetch calls it's

01:24:23.000 --> 01:24:25.000
really just going to wait for everything before

01:24:25.000 --> 01:24:27.000
going to the user if you aren't suspending

01:24:27.000 --> 01:24:29.000
if you aren't doing anything like that

01:24:29.000 --> 01:24:31.000
it's just going to bunch up all of those requests

01:24:31.000 --> 01:24:33.000
and you can do a promise.all at the top

01:24:33.000 --> 01:24:35.000
level if you really want to be smart

01:24:35.000 --> 01:24:37.000
about like parallelizing each fetch

01:24:37.000 --> 01:24:39.000
but that's exactly what

01:24:39.000 --> 01:24:41.000
we're seeing here of like even though it's in the second

01:24:41.000 --> 01:24:43.000
one it's all going to come down in one

01:24:43.000 --> 01:24:45.000
big chunk and I alluded

01:24:45.000 --> 01:24:47.000
to how you could avoid that

01:24:47.000 --> 01:24:49.000
but well okay I say avoid

01:24:49.000 --> 01:24:51.000
as if it's a bad thing this is actually

01:24:51.000 --> 01:24:53.000
the behavior you probably do want

01:24:53.000 --> 01:24:55.000
but if there is

01:24:55.000 --> 01:24:57.000
like behavior

01:24:57.000 --> 01:24:59.000
when would you say like

01:24:59.000 --> 01:25:01.000
is a good use case for

01:25:01.000 --> 01:25:03.000
wrapping something in a suspense boundary

01:25:03.000 --> 01:25:05.000
it's probably pretty nuanced but

01:25:05.000 --> 01:25:07.000
I'm curious if you have thoughts about

01:25:07.000 --> 01:25:09.000
like where you found it. Yeah I would just say

01:25:09.000 --> 01:25:11.000
like if it feels slow

01:25:11.000 --> 01:25:13.000
because you have a slow data source

01:25:13.000 --> 01:25:15.000
or there's

01:25:15.000 --> 01:25:17.000
a lot of logic that needs to be downloaded

01:25:17.000 --> 01:25:19.000
it's like suspense also

01:25:19.000 --> 01:25:21.000
works for client

01:25:21.000 --> 01:25:23.000
like it's integrated with everything

01:25:23.000 --> 01:25:25.000
right like we're going to integrate it with CSS

01:25:25.000 --> 01:25:27.000
we're already integrating it with images

01:25:27.000 --> 01:25:29.000
so it's already

01:25:29.000 --> 01:25:31.000
integrated with code it's like if you

01:25:31.000 --> 01:25:33.000
render a like button component

01:25:33.000 --> 01:25:35.000
it's a client component and the suspense

01:25:35.000 --> 01:25:37.000
is going to wait automatically

01:25:37.000 --> 01:25:39.000
for that client code

01:25:39.000 --> 01:25:41.000
to load even if it's code split

01:25:41.000 --> 01:25:43.000
like it is code split by

01:25:43.000 --> 01:25:45.000
default like if you import a client

01:25:45.000 --> 01:25:47.000
component from a server component

01:25:47.000 --> 01:25:49.000
it's like there is no

01:25:49.000 --> 01:25:51.000
need to do code splitting it's just code splitting

01:25:51.000 --> 01:25:53.000
is how it works and so it's

01:25:53.000 --> 01:25:55.000
going to wait for that

01:25:55.000 --> 01:25:57.000
code and any data and

01:25:57.000 --> 01:25:59.000
in the future like CSS or images

01:25:59.000 --> 01:26:01.000
to be ready and then

01:26:01.000 --> 01:26:03.000
it flips you know it makes it visible when like

01:26:03.000 --> 01:26:05.000
all the things in that tree resolve

01:26:05.000 --> 01:26:07.000
so I think pragmatically speaking

01:26:07.000 --> 01:26:09.000
it's just you have something that loads

01:26:09.000 --> 01:26:11.000
that takes a bit of time you don't know why

01:26:11.000 --> 01:26:13.000
it takes a bit of time but actually it doesn't matter

01:26:13.000 --> 01:26:15.000
you just wrap it in suspense

01:26:15.000 --> 01:26:17.000
and that kind of lets you unblock

01:26:17.000 --> 01:26:19.000
the rest it's like here's a slow

01:26:19.000 --> 01:26:21.000
part I have some

01:26:21.000 --> 01:26:23.000
I asked the designer like I am the

01:26:23.000 --> 01:26:25.000
designer I designed some visual skeleton

01:26:25.000 --> 01:26:27.000
for that thing I'm just going to plug

01:26:27.000 --> 01:26:29.000
it in here

01:26:29.000 --> 01:26:31.000
yeah I think that's really

01:26:31.000 --> 01:26:33.000
cool that y'all are just seeing is like any

01:26:33.000 --> 01:26:35.000
slow data source no matter what it is

01:26:35.000 --> 01:26:37.000
I don't know what it would look like to say like

01:26:37.000 --> 01:26:39.000
wrapping a style

01:26:39.000 --> 01:26:41.000
sheet in suspense

01:26:41.000 --> 01:26:43.000
or something like that but

01:26:43.000 --> 01:26:45.000
that would be more

01:26:45.000 --> 01:26:47.000
automatic so if you imagine

01:26:47.000 --> 01:26:49.000
for example a component

01:26:49.000 --> 01:26:51.000
imports like a

01:26:51.000 --> 01:26:53.000
CSS module or something like this

01:26:53.000 --> 01:26:55.000
and or

01:26:55.000 --> 01:26:57.000
like some kind of static CSS

01:26:57.000 --> 01:26:59.000
and JS with like static extraction

01:26:59.000 --> 01:27:01.000
then you could imagine

01:27:01.000 --> 01:27:03.000
a compiler or like a framework

01:27:03.000 --> 01:27:05.000
would put the link

01:27:05.000 --> 01:27:07.000
tag for the style sheet

01:27:07.000 --> 01:27:09.000
into component output automatically

01:27:09.000 --> 01:27:11.000
and then the React would know to

01:27:11.000 --> 01:27:13.000
wait for that CSS to

01:27:13.000 --> 01:27:15.000
load before it can display the

01:27:15.000 --> 01:27:17.000
component it would put the link tag into

01:27:17.000 --> 01:27:19.000
the head or something like this

01:27:19.000 --> 01:27:21.000
so it would be automatic it's not something you think about

01:27:21.000 --> 01:27:23.000
but it's just

01:27:23.000 --> 01:27:25.000
it's just better than the

01:27:25.000 --> 01:27:27.000
current best practice of

01:27:27.000 --> 01:27:29.000
like either you load

01:27:29.000 --> 01:27:31.000
all CSS in the beginning

01:27:31.000 --> 01:27:33.000
for like the entire app or

01:27:33.000 --> 01:27:35.000
you do some kind of

01:27:35.000 --> 01:27:37.000
you do some kind of split

01:27:37.000 --> 01:27:39.000
in but then JavaScript can't

01:27:39.000 --> 01:27:41.000
even start executing

01:27:41.000 --> 01:27:43.000
for like independently of CSS

01:27:43.000 --> 01:27:45.000
because like they're grouped together

01:27:45.000 --> 01:27:47.000
and like you want

01:27:47.000 --> 01:27:49.000
to have this ability of start executing

01:27:49.000 --> 01:27:51.000
JavaScript even before CSS loads

01:27:51.000 --> 01:27:53.000
but then hold back

01:27:53.000 --> 01:27:55.000
the rendering until we actually

01:27:55.000 --> 01:27:57.000
have the CSS so that the user doesn't

01:27:57.000 --> 01:27:59.000
see unstyled content so this

01:27:59.000 --> 01:28:01.000
would be automatic or another example

01:28:01.000 --> 01:28:03.000
is like you have an image tag

01:28:03.000 --> 01:28:05.000
for example of like profile cover

01:28:05.000 --> 01:28:07.000
and you might want to kind of hold

01:28:07.000 --> 01:28:09.000
back showing the thing

01:28:09.000 --> 01:28:11.000
until you have the image

01:28:11.000 --> 01:28:13.000
you know unless it's like super slow or

01:28:13.000 --> 01:28:15.000
like there would be like a way to opt out

01:28:15.000 --> 01:28:17.000
so you would be don't wait for this image

01:28:17.000 --> 01:28:19.000
yeah that's the clearer one

01:28:19.000 --> 01:28:21.000
to me because I would love to have an API

01:28:21.000 --> 01:28:23.000
that's like suspense

01:28:25.000 --> 01:28:27.000
suspense fallback

01:28:27.000 --> 01:28:29.000
like blurred image

01:28:29.000 --> 01:28:31.000
and then inside of this

01:28:31.000 --> 01:28:33.000
is like the real image

01:28:33.000 --> 01:28:35.000
that we're going to wait on

01:28:35.000 --> 01:28:37.000
and that's conceptually what it's doing I'm sure

01:28:37.000 --> 01:28:39.000
you wouldn't just pass in blurred image

01:28:39.000 --> 01:28:41.000
but it would be

01:28:41.000 --> 01:28:43.000
it's that hook

01:28:43.000 --> 01:28:45.000
to not ship like

01:28:45.000 --> 01:28:47.000
the massive Gatsby image component to the client

01:28:47.000 --> 01:28:49.000
that does all of these fancy fetches

01:28:49.000 --> 01:28:51.000
like it's just telling the server

01:28:51.000 --> 01:28:53.000
stream in the blurred image then stream

01:28:53.000 --> 01:28:55.000
in the regular image when you're done

01:28:55.000 --> 01:28:57.000
yeah that's one way to do it

01:28:57.000 --> 01:28:59.000
but I think like it also

01:28:59.000 --> 01:29:01.000
it doesn't necessarily have to do with

01:29:01.000 --> 01:29:03.000
blurred images like I think you can

01:29:03.000 --> 01:29:05.000
think of this like blurred images

01:29:05.000 --> 01:29:07.000
as a kind of next level

01:29:07.000 --> 01:29:09.000
optimization that you could do

01:29:09.000 --> 01:29:11.000
but just the capability of

01:29:11.000 --> 01:29:13.000
being able to say

01:29:13.000 --> 01:29:15.000
like don't show until this image

01:29:15.000 --> 01:29:17.000
is ready

01:29:17.000 --> 01:29:19.000
like wait for it

01:29:19.000 --> 01:29:21.000
to pop in

01:29:21.000 --> 01:29:23.000
and then that could be a blurred one

01:29:23.000 --> 01:29:25.000
if you want to make it

01:29:25.000 --> 01:29:27.000
you know like faster

01:29:27.000 --> 01:29:29.000
or it could be that you actually

01:29:29.000 --> 01:29:31.000
wait for the whole thing

01:29:31.000 --> 01:29:33.000
you know with a normal

01:29:33.000 --> 01:29:35.000
image but then you do have blurred one

01:29:35.000 --> 01:29:37.000
as like a placeholder so it really depends

01:29:37.000 --> 01:29:39.000
on like how you put it so

01:29:39.000 --> 01:29:41.000
we'll see but the capability

01:29:41.000 --> 01:29:43.000
like the important part is just like

01:29:43.000 --> 01:29:45.000
it would be hooked up automatically

01:29:45.000 --> 01:29:47.000
to the suspense so suspense

01:29:47.000 --> 01:29:49.000
would act as you know you

01:29:49.000 --> 01:29:51.000
declaratively specify this is

01:29:51.000 --> 01:29:53.000
what I want to see if something

01:29:53.000 --> 01:29:55.000
inside is not ready and then something

01:29:55.000 --> 01:29:57.000
could be like data, it could be code

01:29:57.000 --> 01:29:59.000
it could be images, it could be stylesheets

01:29:59.000 --> 01:30:01.000
it's like anything asynchronous can

01:30:01.000 --> 01:30:03.000
work and you don't have to like do it

01:30:03.000 --> 01:30:05.000
in your head all the time

01:30:05.000 --> 01:30:07.000
yeah

01:30:07.000 --> 01:30:09.000
and that does feel like the message I've been

01:30:09.000 --> 01:30:11.000
getting from Next.js where it's like you know

01:30:11.000 --> 01:30:13.000
don't worry about deployment target

01:30:13.000 --> 01:30:15.000
that's automatic with how you're doing your fetch

01:30:15.000 --> 01:30:17.000
calls, don't worry about

01:30:17.000 --> 01:30:19.000
image optimization, just use the defaults

01:30:19.000 --> 01:30:21.000
and it'll load in the correct

01:30:21.000 --> 01:30:23.000
like webp, avif, whatever

01:30:23.000 --> 01:30:25.000
because

01:30:25.000 --> 01:30:27.000
these are decisions like

01:30:27.000 --> 01:30:29.000
we can make when there's a problem

01:30:29.000 --> 01:30:31.000
but a vast majority of the time

01:30:31.000 --> 01:30:33.000
we don't need to make it ourselves

01:30:33.000 --> 01:30:35.000
like there is a default that the framework

01:30:35.000 --> 01:30:37.000
knows about and it can probably just go ahead

01:30:37.000 --> 01:30:39.000
and do it

01:30:39.000 --> 01:30:41.000
yep

01:30:41.000 --> 01:30:43.000
yeah and I also never demo what this actually

01:30:43.000 --> 01:30:45.000
does and I'm realizing these annotations

01:30:45.000 --> 01:30:47.000
are completely wrong, I'm going to revisit this

01:30:47.000 --> 01:30:49.000
but the main thing

01:30:49.000 --> 01:30:51.000
that we're getting over here is like

01:30:51.000 --> 01:30:53.000
we get our welcome to server components

01:30:53.000 --> 01:30:55.000
and then a flash of fetching albums

01:30:55.000 --> 01:30:57.000
until the albums come down

01:30:57.000 --> 01:30:59.000
and then the only difference in the

01:30:59.000 --> 01:31:01.000
response is that now we have

01:31:01.000 --> 01:31:03.000
this like react suspense

01:31:03.000 --> 01:31:05.000
idea where what I'm assuming

01:31:05.000 --> 01:31:07.000
happens is like if

01:31:07.000 --> 01:31:09.000
it is wrapped in suspense

01:31:09.000 --> 01:31:11.000
it's going to say alright here's that hole

01:31:11.000 --> 01:31:13.000
that you mentioned, here's that

01:31:13.000 --> 01:31:15.000
separate component that you're going to

01:31:15.000 --> 01:31:17.000
slot in when it comes down the pipe

01:31:17.000 --> 01:31:19.000
but I have a fallback for you while you're waiting for

01:31:19.000 --> 01:31:21.000
that, don't like block rendering

01:31:21.000 --> 01:31:23.000
the whole page to the browser, actually

01:31:23.000 --> 01:31:25.000
go ahead and render everything before this

01:31:25.000 --> 01:31:27.000
show this fallback

01:31:27.000 --> 01:31:29.000
and then L3 is going to match up with this 3

01:31:29.000 --> 01:31:31.000
that comes down 300

01:31:31.000 --> 01:31:33.000
milliseconds later based on how we have it set up

01:31:33.000 --> 01:31:35.000
so it's just letting the server

01:31:35.000 --> 01:31:37.000
like show something in the meantime

01:31:37.000 --> 01:31:39.000
and stop blocking if it was actually an issue

01:31:39.000 --> 01:31:41.000
maybe you can increase the delay

01:31:41.000 --> 01:31:43.000
a little bit and then it would be

01:31:43.000 --> 01:31:45.000
more obvious because it's kind of

01:31:45.000 --> 01:31:47.000
really fast now

01:31:47.000 --> 01:31:49.000
yeah and if it

01:31:49.000 --> 01:31:51.000
I know, and if your delay is that

01:31:51.000 --> 01:31:53.000
low you probably don't need suspense

01:31:53.000 --> 01:31:55.000
I don't really know what the threshold is but you feel it out

01:31:55.000 --> 01:31:57.000
so I set it up here

01:31:57.000 --> 01:31:59.000
let's see what that does

01:31:59.000 --> 01:32:01.000
did it not

01:32:01.000 --> 01:32:03.000
oh I don't think it's watching, that's the issue

01:32:03.000 --> 01:32:05.000
yep I think my

01:32:05.000 --> 01:32:07.000
file watcher is only looking at source

01:32:07.000 --> 01:32:09.000
but yeah there we go, now we

01:32:09.000 --> 01:32:11.000
see like a full 2 second delay

01:32:11.000 --> 01:32:13.000
maybe it's getting from like the Discogs

01:32:13.000 --> 01:32:15.000
legacy API which is

01:32:15.000 --> 01:32:17.000
slow, I've used it before

01:32:17.000 --> 01:32:19.000
but yeah

01:32:19.000 --> 01:32:21.000
now you get like fetching albums

01:32:21.000 --> 01:32:23.000
maybe it's a beautiful skeleton that you designed

01:32:23.000 --> 01:32:25.000
and then the 3 is going to become

01:32:25.000 --> 01:32:27.000
this 3 as soon as it's ready

01:32:27.000 --> 01:32:29.000
but now we have a fallback so it doesn't have to

01:32:29.000 --> 01:32:31.000
wait on it

01:32:31.000 --> 01:32:33.000
yep

01:32:33.000 --> 01:32:35.000
cool stuff

01:32:35.000 --> 01:32:37.000
so I mean that's a basic demo

01:32:37.000 --> 01:32:39.000
of like suspense and fallbacks

01:32:39.000 --> 01:32:41.000
I

01:32:41.000 --> 01:32:43.000
well one thing I can do is

01:32:43.000 --> 01:32:45.000
actually top this off with an image

01:32:45.000 --> 01:32:47.000
on the top and then

01:32:47.000 --> 01:32:49.000
I was curious to get into how I could

01:32:49.000 --> 01:32:51.000
generate a search bar for this

01:32:51.000 --> 01:32:53.000
and what would be involved in that

01:32:55.000 --> 01:32:57.000
and I'll go ahead and do

01:32:57.000 --> 01:32:59.000
I think album.

01:32:59.000 --> 01:33:01.000
what do I call it, cover?

01:33:01.000 --> 01:33:03.000
autocomplete

01:33:03.000 --> 01:33:05.000
alt

01:33:05.000 --> 01:33:07.000
that

01:33:07.000 --> 01:33:09.000
album.title again

01:33:09.000 --> 01:33:11.000
that should be good

01:33:11.000 --> 01:33:13.000
now, well I'm going to

01:33:13.000 --> 01:33:15.000
oh god there's no styling

01:33:15.000 --> 01:33:17.000
let me see here

01:33:17.000 --> 01:33:19.000
I tossed tailwind on top of this thing

01:33:19.000 --> 01:33:21.000
just to make us move a little bit faster

01:33:21.000 --> 01:33:23.000
so let's say class name

01:33:23.000 --> 01:33:25.000
with like

01:33:25.000 --> 01:33:27.000
20 just so we don't have to worry about that

01:33:27.000 --> 01:33:29.000
let's see that

01:33:29.000 --> 01:33:31.000
oh yeah way better

01:33:31.000 --> 01:33:33.000
and also turn off the delay

01:33:33.000 --> 01:33:35.000
so we can start working on this more easily

01:33:37.000 --> 01:33:39.000
there we go

01:33:39.000 --> 01:33:41.000
okay and now in our

01:33:41.000 --> 01:33:43.000
server response now we're going to get the image

01:33:43.000 --> 01:33:45.000
but before it's just not going to serialize

01:33:45.000 --> 01:33:47.000
what you don't use

01:33:47.000 --> 01:33:49.000
which is kind of the beauty of it

01:33:49.000 --> 01:33:51.000
so yeah from here

01:33:51.000 --> 01:33:53.000
how could I set up

01:33:53.000 --> 01:33:55.000
a search filter that does it

01:33:55.000 --> 01:33:57.000
maybe server side, maybe client side

01:33:57.000 --> 01:33:59.000
yeah

01:33:59.000 --> 01:34:01.000
so that's really

01:34:01.000 --> 01:34:03.000
your choice

01:34:03.000 --> 01:34:05.000
that's kind of the fun thing about it

01:34:05.000 --> 01:34:07.000
you can do it either way

01:34:07.000 --> 01:34:09.000
and there are different tradeoffs

01:34:09.000 --> 01:34:11.000
so for example

01:34:11.000 --> 01:34:13.000
if you have the entire list

01:34:13.000 --> 01:34:15.000
let's say the thing

01:34:15.000 --> 01:34:17.000
we're talking about is

01:34:17.000 --> 01:34:19.000
it's mostly going to have maybe 50 albums

01:34:19.000 --> 01:34:21.000
or something like this, you want to always load them all

01:34:21.000 --> 01:34:23.000
then maybe

01:34:23.000 --> 01:34:25.000
it makes sense to do client search because

01:34:25.000 --> 01:34:27.000
well then it will be instant

01:34:27.000 --> 01:34:29.000
so it would be, we could just filter on

01:34:29.000 --> 01:34:31.000
the client and show the results

01:34:31.000 --> 01:34:33.000
and that's one way we could go about it

01:34:33.000 --> 01:34:35.000
on the other hand if you have

01:34:35.000 --> 01:34:37.000
thousands of albums and they're

01:34:37.000 --> 01:34:39.000
paginated or whatever

01:34:39.000 --> 01:34:41.000
and you don't want to download them all

01:34:41.000 --> 01:34:43.000
to the client

01:34:43.000 --> 01:34:45.000
then it makes sense to make the search driven by

01:34:45.000 --> 01:34:47.000
the server and just

01:34:47.000 --> 01:34:49.000
pass down the

01:34:49.000 --> 01:34:51.000
update the URL

01:34:51.000 --> 01:34:53.000
as you actually do

01:34:55.000 --> 01:34:57.000
each time you write into the input

01:34:57.000 --> 01:34:59.000
you do a router navigation

01:34:59.000 --> 01:35:01.000
through a different query

01:35:01.000 --> 01:35:03.000
and then on the server you read the query

01:35:03.000 --> 01:35:05.000
and you refresh

01:35:05.000 --> 01:35:07.000
you just send the new output

01:35:07.000 --> 01:35:09.000
so maybe we could do it both ways

01:35:09.000 --> 01:35:11.000
and just compare them

01:35:11.000 --> 01:35:13.000
how do you feel about that?

01:35:13.000 --> 01:35:15.000
Yeah, we can

01:35:15.000 --> 01:35:17.000
I don't know if the server way will work without

01:35:17.000 --> 01:35:19.000
page refreshes

01:35:19.000 --> 01:35:21.000
we have the Next.js

01:35:21.000 --> 01:35:23.000
escape hatch in this repo

01:35:23.000 --> 01:35:25.000
I put a Next app right up here

01:35:25.000 --> 01:35:27.000
so if we need to we can just drag this in

01:35:27.000 --> 01:35:29.000
I'm hoping

01:35:29.000 --> 01:35:31.000
but yeah, I think starting with clients is a good idea

01:35:31.000 --> 01:35:33.000
because we didn't even demo client yet

01:35:33.000 --> 01:35:35.000
or how it even works

01:35:35.000 --> 01:35:37.000
so I can make a separate file

01:35:37.000 --> 01:35:39.000
for that

01:35:39.000 --> 01:35:41.000
.jsx

01:35:41.000 --> 01:35:43.000
and try to call you in here

01:35:45.000 --> 01:35:47.000
and at the top

01:35:47.000 --> 01:35:49.000
you just put use client

01:35:49.000 --> 01:35:51.000
and sure

01:35:53.000 --> 01:35:55.000
no

01:35:55.000 --> 01:35:57.000
but close

01:35:57.000 --> 01:35:59.000
well this will be

01:35:59.000 --> 01:36:01.000
a search box so in this example

01:36:01.000 --> 01:36:03.000
it would pass through all of the

01:36:03.000 --> 01:36:05.000
album info as props I'm assuming

01:36:05.000 --> 01:36:07.000
right? Where it comes from the server

01:36:07.000 --> 01:36:09.000
and this is just

01:36:09.000 --> 01:36:11.000
what do you want, like what component structure

01:36:11.000 --> 01:36:13.000
do you have in mind? I think I'm not fully

01:36:13.000 --> 01:36:15.000
understanding what do you

01:36:15.000 --> 01:36:17.000
want to put where?

01:36:17.000 --> 01:36:19.000
Yeah, so

01:36:19.000 --> 01:36:21.000
the typical way that I would do it

01:36:21.000 --> 01:36:23.000
is this is a client component

01:36:23.000 --> 01:36:25.000
it receives the get

01:36:25.000 --> 01:36:27.000
all result from the server

01:36:27.000 --> 01:36:29.000
so all the albums come in here

01:36:29.000 --> 01:36:31.000
and then it has a form input

01:36:31.000 --> 01:36:33.000
that will filter what's showing

01:36:33.000 --> 01:36:35.000
and then it would render what?

01:36:35.000 --> 01:36:37.000
It would

01:36:37.000 --> 01:36:39.000
render either

01:36:39.000 --> 01:36:41.000
all the albums or the results

01:36:41.000 --> 01:36:43.000
like if your input's blank it would show all

01:36:43.000 --> 01:36:45.000
of them and then as you start typing it would

01:36:45.000 --> 01:36:47.000
filter based on the title

01:36:47.000 --> 01:36:49.000
Yeah, I think I just got confused

01:36:49.000 --> 01:36:51.000
by the file name because it's like album

01:36:51.000 --> 01:36:53.000
but I think it's essentially like searchable

01:36:53.000 --> 01:36:55.000
list or something like this

01:36:55.000 --> 01:36:57.000
Yeah, I think

01:36:57.000 --> 01:36:59.000
that's a good idea

01:36:59.000 --> 01:37:01.000
searchable, yeah searchable list

01:37:01.000 --> 01:37:03.000
is fine

01:37:03.000 --> 01:37:05.000
You like short names

01:37:05.000 --> 01:37:07.000
I do, sometimes

01:37:07.000 --> 01:37:09.000
I either go really short like

01:37:09.000 --> 01:37:11.000
search or really long like searchable album

01:37:11.000 --> 01:37:13.000
list. Yeah, searchable album list

01:37:13.000 --> 01:37:15.000
is nice

01:37:15.000 --> 01:37:17.000
like on the homepage

01:37:17.000 --> 01:37:19.000
I don't know if you've noticed like on the React homepage

01:37:19.000 --> 01:37:21.000
we have kind of a progression of

01:37:21.000 --> 01:37:23.000
examples building up

01:37:23.000 --> 01:37:25.000
and like it starts with like video

01:37:25.000 --> 01:37:27.000
then there's video list then there's like searchable

01:37:27.000 --> 01:37:29.000
video list and then there's

01:37:29.000 --> 01:37:31.000
like conf page or something like this

01:37:31.000 --> 01:37:33.000
so it's actually about

01:37:33.000 --> 01:37:35.000
the canonical example we picked

01:37:35.000 --> 01:37:37.000
so that's kind of funny that

01:37:37.000 --> 01:37:39.000
we're doing that now

01:37:39.000 --> 01:37:41.000
Yeah, I mean it works

01:37:41.000 --> 01:37:43.000
Oh, that's cool that it's called searchable

01:37:43.000 --> 01:37:45.000
Yeah, I've never said searchable

01:37:45.000 --> 01:37:47.000
I would probably say like album list search

01:37:47.000 --> 01:37:49.000
but yeah

01:37:49.000 --> 01:37:51.000
But then it sounds like the search is just

01:37:51.000 --> 01:37:53.000
like I think the thing that's confusing about it

01:37:53.000 --> 01:37:55.000
is it seems like it's just the

01:37:55.000 --> 01:37:57.000
yeah

01:37:57.000 --> 01:37:59.000
Yeah

01:37:59.000 --> 01:38:01.000
and so it's so hard to

01:38:01.000 --> 01:38:03.000
name your Lego bricks

01:38:03.000 --> 01:38:05.000
but this will work

01:38:05.000 --> 01:38:07.000
So yeah, search and set search, that's fine

01:38:07.000 --> 01:38:09.000
and we're not going to use

01:38:09.000 --> 01:38:11.000
like an actual search library for this

01:38:11.000 --> 01:38:13.000
it would just be

01:38:13.000 --> 01:38:15.000
well that's, yeah, you could just do it like this

01:38:15.000 --> 01:38:17.000
and this

01:38:17.000 --> 01:38:19.000
is really good actually

01:38:19.000 --> 01:38:21.000
Dang it Copilot, you took all the fun out of it

01:38:21.000 --> 01:38:23.000
but that is it, that works fine

01:38:23.000 --> 01:38:25.000
So

01:38:25.000 --> 01:38:27.000
Well no, that's actually not very good

01:38:27.000 --> 01:38:29.000
It's not a very good version

01:38:29.000 --> 01:38:31.000
because it

01:38:33.000 --> 01:38:35.000
it would search in the middle

01:38:35.000 --> 01:38:37.000
of the words, right

01:38:37.000 --> 01:38:39.000
so if you

01:38:39.000 --> 01:38:41.000
Oh sure

01:38:41.000 --> 01:38:43.000
I can, let me copy and paste

01:38:43.000 --> 01:38:45.000
I have a version that I

01:38:45.000 --> 01:38:47.000
that I wrote for

01:38:47.000 --> 01:38:49.000
for the React homepage

01:38:49.000 --> 01:38:51.000
that I can

01:38:51.000 --> 01:38:53.000
I can actually

01:38:53.000 --> 01:38:55.000
just copy and paste it

01:38:55.000 --> 01:38:57.000
so this

01:38:57.000 --> 01:38:59.000
is the

01:38:59.000 --> 01:39:01.000
yeah let me

01:39:01.000 --> 01:39:03.000
copy and paste it here except that's going to be

01:39:03.000 --> 01:39:05.000
filter albums, that's going to be

01:39:05.000 --> 01:39:07.000
albums

01:39:07.000 --> 01:39:09.000
that's, that you called this thing

01:39:09.000 --> 01:39:11.000
search, so I'll call this thing search as well

01:39:11.000 --> 01:39:13.000
and then

01:39:13.000 --> 01:39:15.000
the, what is the

01:39:15.000 --> 01:39:17.000
what is the

01:39:17.000 --> 01:39:19.000
we care about title and about

01:39:19.000 --> 01:39:21.000
what is the other thing

01:39:21.000 --> 01:39:23.000
that we care about

01:39:23.000 --> 01:39:25.000
Artist? It's just the title

01:39:25.000 --> 01:39:27.000
That's another field

01:39:27.000 --> 01:39:29.000
Artist, maybe

01:39:29.000 --> 01:39:31.000
Yeah, but does it have

01:39:31.000 --> 01:39:33.000
does it have artist in the album

01:39:33.000 --> 01:39:35.000
info somewhere, like what's the structure

01:39:35.000 --> 01:39:37.000
Yeah, and I can

01:39:37.000 --> 01:39:39.000
actually, I set this up with JS

01:39:39.000 --> 01:39:41.000
Oh yeah, okay yeah

01:39:41.000 --> 01:39:43.000
I'll just go ahead and do that

01:39:43.000 --> 01:39:45.000
Okay

01:39:45.000 --> 01:39:47.000
Yeah

01:39:47.000 --> 01:39:49.000
Yeah, sure

01:39:49.000 --> 01:39:51.000
Wait, what happened

01:39:51.000 --> 01:39:53.000
Oh, I think we're

01:39:53.000 --> 01:39:55.000
I think we're typing at the same time

01:39:55.000 --> 01:39:57.000
Sorry

01:39:57.000 --> 01:39:59.000
That should work, but okay

01:39:59.000 --> 01:40:01.000
Yeah, that should work now

01:40:01.000 --> 01:40:03.000
Yeah, and it's inferring, cool

01:40:03.000 --> 01:40:05.000
Alright

01:40:05.000 --> 01:40:07.000
And this is a nice little function

01:40:07.000 --> 01:40:09.000
So this is just searching

01:40:09.000 --> 01:40:11.000
I guess I'm looking

01:40:11.000 --> 01:40:13.000
at the split here

01:40:13.000 --> 01:40:15.000
So it's looking at each word

01:40:15.000 --> 01:40:17.000
Okay, some of the words start

01:40:17.000 --> 01:40:19.000
with a keyword, nice

01:40:19.000 --> 01:40:21.000
Yeah, it's not super efficient

01:40:21.000 --> 01:40:23.000
like it has some nested loops

01:40:23.000 --> 01:40:25.000
but you know

01:40:25.000 --> 01:40:27.000
not just some, it has like three levels of nested loops

01:40:27.000 --> 01:40:29.000
so it's actually pretty slow

01:40:29.000 --> 01:40:31.000
but it's fast enough for us

01:40:31.000 --> 01:40:33.000
Exactly, yeah, that's what I'm thinking

01:40:33.000 --> 01:40:35.000
Yeah, and does

01:40:35.000 --> 01:40:37.000
this handle the empty state

01:40:37.000 --> 01:40:39.000
where it's like show all of them unless

01:40:39.000 --> 01:40:41.000
you've started typing something

01:40:41.000 --> 01:40:43.000
Yeah, yeah, I think it does

01:40:43.000 --> 01:40:45.000
You know, it's

01:40:45.000 --> 01:40:47.000
Yeah, you can just pass the

01:40:47.000 --> 01:40:49.000
I'll go ahead and just do this

01:40:49.000 --> 01:40:51.000
Albums, search

01:40:51.000 --> 01:40:53.000
Nice

01:40:55.000 --> 01:40:57.000
And what now

01:40:57.000 --> 01:40:59.000
Well, there's no input

01:40:59.000 --> 01:41:01.000
Yep

01:41:01.000 --> 01:41:03.000
Yeah, I've

01:41:03.000 --> 01:41:05.000
heard on input it's a little more reliable

01:41:05.000 --> 01:41:07.000
and it's what I use

01:41:07.000 --> 01:41:09.000
No, no

01:41:09.000 --> 01:41:11.000
Is that the wrong one

01:41:11.000 --> 01:41:13.000
All right

01:41:13.000 --> 01:41:15.000
Never mind

01:41:15.000 --> 01:41:17.000
It's just a weird name in Quark

01:41:17.000 --> 01:41:19.000
It corresponds to on input in the browser

01:41:19.000 --> 01:41:21.000
Oh, it does?

01:41:21.000 --> 01:41:23.000
Okay, that's what I knew

01:41:23.000 --> 01:41:25.000
Oh, that's weird, all right

01:41:25.000 --> 01:41:27.000
The more you know

01:41:27.000 --> 01:41:29.000
So that's gonna be that, yeah

01:41:29.000 --> 01:41:31.000
This should all work

01:41:31.000 --> 01:41:33.000
So the last thing to do is just put it on the page

01:41:33.000 --> 01:41:35.000
So I'll hop back over here

01:41:35.000 --> 01:41:37.000
Let's add suspense again

01:41:37.000 --> 01:41:39.000
because it's annoying that

01:41:39.000 --> 01:41:41.000
I'm gonna do it because it's annoying

01:41:41.000 --> 01:41:43.000
that it waits so much

01:41:43.000 --> 01:41:45.000
So

01:41:45.000 --> 01:41:47.000
I'll just do

01:41:47.000 --> 01:41:49.000
a loading state

01:41:49.000 --> 01:41:51.000
because it kind of looks

01:41:51.000 --> 01:41:53.000
like something's wrong with the server components

01:41:53.000 --> 01:41:55.000
but it's actually just because we don't have suspense

01:41:55.000 --> 01:41:57.000
Okay

01:41:57.000 --> 01:41:59.000
Interesting, okay

01:42:01.000 --> 01:42:03.000
All right, so we have that

01:42:03.000 --> 01:42:05.000
and so

01:42:05.000 --> 01:42:07.000
we would put the client component in here, right

01:42:07.000 --> 01:42:09.000
Yeah

01:42:13.000 --> 01:42:15.000
I'm doing

01:42:15.000 --> 01:42:17.000
Yeah, you have to do that

01:42:17.000 --> 01:42:19.000
We can just do this

01:42:19.000 --> 01:42:21.000
Yeah, sure

01:42:21.000 --> 01:42:23.000
We'll fix it someday

01:42:23.000 --> 01:42:25.000
Someday

01:42:25.000 --> 01:42:27.000
Okay, so everything exploded

01:42:27.000 --> 01:42:29.000
sadly

01:42:29.000 --> 01:42:31.000
That could be on the build tool

01:42:31.000 --> 01:42:33.000
That is me

01:42:33.000 --> 01:42:35.000
Let me double check on that

01:42:35.000 --> 01:42:37.000
The next JS escape patch is looking great

01:42:37.000 --> 01:42:39.000
but that is the response

01:42:39.000 --> 01:42:41.000
that you'll probably get from the server

01:42:41.000 --> 01:42:43.000
because now what we're doing is we didn't filter

01:42:43.000 --> 01:42:45.000
which props that our client cares about

01:42:45.000 --> 01:42:47.000
Now it's passing down everything

01:42:47.000 --> 01:42:49.000
including the song list, which is like

01:42:49.000 --> 01:42:51.000
that little uncanny valley I mentioned

01:42:51.000 --> 01:42:53.000
If you're not aware, you can

01:42:53.000 --> 01:42:55.000
ship a lot of data to the client that you're not expecting

01:42:55.000 --> 01:42:57.000
So we could filter it

01:42:57.000 --> 01:42:59.000
but right now we're just passing down everything

01:42:59.000 --> 01:43:01.000
Yeah, which is what you were

01:43:01.000 --> 01:43:03.000
doing anyway in the single page app

01:43:03.000 --> 01:43:05.000
Yeah

01:43:05.000 --> 01:43:07.000
Can you show what's crashing?

01:43:07.000 --> 01:43:09.000
Because I don't see the

01:43:09.000 --> 01:43:11.000
Yeah, I'll give it a look

01:43:11.000 --> 01:43:13.000
This error doesn't make a lot of sense to me

01:43:13.000 --> 01:43:15.000
I just don't see the error

01:43:15.000 --> 01:43:17.000
I don't know if

01:43:17.000 --> 01:43:19.000
Okay

01:43:19.000 --> 01:43:21.000
Does it not show

01:43:21.000 --> 01:43:23.000
Yeah, it's crashing in the browser, not the server

01:43:23.000 --> 01:43:25.000
Yeah, but I don't see

01:43:25.000 --> 01:43:27.000
I think maybe your screen share

01:43:27.000 --> 01:43:29.000
doesn't show me the DevTools console

01:43:29.000 --> 01:43:31.000
so I have no idea what the error is

01:43:31.000 --> 01:43:33.000
Oh, I thought the screen share might actually show it to you

01:43:33.000 --> 01:43:35.000
Okay

01:43:35.000 --> 01:43:37.000
Interesting

01:43:37.000 --> 01:43:39.000
Yeah, it's being really selective

01:43:39.000 --> 01:43:41.000
But you're right, it doesn't. It actually hides the DevTools

01:43:41.000 --> 01:43:43.000
Alright, let me

01:43:43.000 --> 01:43:45.000
And this shouldn't be affecting anyone

01:43:45.000 --> 01:43:47.000
at home, this is just our crazy setup

01:43:47.000 --> 01:43:49.000
If I do this

01:43:49.000 --> 01:43:51.000
now it should work

01:43:51.000 --> 01:43:53.000
Maybe

01:43:53.000 --> 01:43:55.000
Okay, yeah, now I can actually see it

01:43:55.000 --> 01:43:57.000
Yeah, so

01:43:57.000 --> 01:43:59.000
Okay, this time it actually doesn't show an error

01:43:59.000 --> 01:44:01.000
That's interesting

01:44:01.000 --> 01:44:03.000
It just says loading and it never actually resolves

01:44:03.000 --> 01:44:05.000
I also made the dev panel

01:44:05.000 --> 01:44:07.000
a little too big

01:44:07.000 --> 01:44:09.000
Let's see here

01:44:09.000 --> 01:44:11.000
Well, yeah, on the key

01:44:11.000 --> 01:44:13.000
prompt, but wait, that actually

01:44:13.000 --> 01:44:15.000
doesn't make any sense

01:44:17.000 --> 01:44:19.000
Oh, I put the key on the list item

01:44:19.000 --> 01:44:21.000
instead of on the wrapping div

01:44:21.000 --> 01:44:23.000
I can do that, but that shouldn't crash the server

01:44:23.000 --> 01:44:25.000
No, that shouldn't crash the server

01:44:25.000 --> 01:44:27.000
No, it shouldn't

01:44:27.000 --> 01:44:29.000
Yeah, and it's also still

01:44:29.000 --> 01:44:31.000
Let me just reboot this

01:44:31.000 --> 01:44:33.000
and worst case, I'm assuming

01:44:33.000 --> 01:44:35.000
we can copy-paste

01:44:35.000 --> 01:44:37.000
Oh, there we go

01:44:37.000 --> 01:44:39.000
Okay, something happened in the live reloading

01:44:39.000 --> 01:44:41.000
which happens sometimes

01:44:41.000 --> 01:44:43.000
Yeah

01:44:43.000 --> 01:44:45.000
But we'll just go with it

01:44:45.000 --> 01:44:47.000
But yeah, it looks like it's still rendering

01:44:47.000 --> 01:44:49.000
on the page, which is good

01:44:49.000 --> 01:44:51.000
And we have an input

01:44:51.000 --> 01:44:53.000
but since it's tail-ended, it unstyles everything

01:44:53.000 --> 01:44:55.000
which is a little too aggressive

01:44:55.000 --> 01:44:57.000
Yeah, look at that

01:44:57.000 --> 01:44:59.000
So now we have it interactive

01:44:59.000 --> 01:45:01.000
searching for artists

01:45:01.000 --> 01:45:03.000
and stuff, and I can search by

01:45:03.000 --> 01:45:05.000
that as well

01:45:05.000 --> 01:45:07.000
Oh, I did the fancy O

01:45:07.000 --> 01:45:09.000
Yeah, it's working

01:45:09.000 --> 01:45:11.000
Some reason

01:45:11.000 --> 01:45:13.000
I don't see your screen updating at all

01:45:13.000 --> 01:45:15.000
Oh, really

01:45:15.000 --> 01:45:17.000
Yeah, it's stuck

01:45:17.000 --> 01:45:19.000
Well, I try

01:45:19.000 --> 01:45:21.000
I'm learning this setup as I go

01:45:21.000 --> 01:45:23.000
Maybe let's go back to

01:45:23.000 --> 01:45:25.000
the thing you shared before

01:45:25.000 --> 01:45:27.000
because that definitely was updating

01:45:27.000 --> 01:45:29.000
Alright, let's do that again

01:45:29.000 --> 01:45:31.000
If I do Chromium tab

01:45:31.000 --> 01:45:33.000
You'll have to just read the errors

01:45:33.000 --> 01:45:35.000
Just narrate the error

01:45:35.000 --> 01:45:37.000
Yeah

01:45:41.000 --> 01:45:43.000
Now I'm trying to find which tab it is

01:45:43.000 --> 01:45:45.000
I have too many tabs

01:45:45.000 --> 01:45:47.000
Oh, I called it future of React

01:45:47.000 --> 01:45:49.000
which makes me forget

01:45:49.000 --> 01:45:51.000
Okay

01:45:51.000 --> 01:45:53.000
Can you see that?

01:45:53.000 --> 01:45:55.000
Yeah, now I see it

01:45:55.000 --> 01:45:57.000
But it's really slow updates

01:45:57.000 --> 01:45:59.000
It's really slow

01:45:59.000 --> 01:46:01.000
But it does work

01:46:01.000 --> 01:46:03.000
Do you mean it's slow

01:46:03.000 --> 01:46:05.000
in the browser, or do you mean the stream is slow?

01:46:05.000 --> 01:46:07.000
Definitely on your end

01:46:07.000 --> 01:46:09.000
On the browser, it's immediate

01:46:09.000 --> 01:46:11.000
as we've mentioned before

01:46:11.000 --> 01:46:13.000
Okay

01:46:13.000 --> 01:46:15.000
So maybe one thing that would be

01:46:15.000 --> 01:46:17.000
interesting to show here is

01:46:17.000 --> 01:46:19.000
maybe like

01:46:19.000 --> 01:46:21.000
What happens if you remove useClient?

01:46:21.000 --> 01:46:23.000
What does useClient actually do?

01:46:23.000 --> 01:46:25.000
Maybe we could talk a little bit about this

01:46:25.000 --> 01:46:27.000
Yeah, well I'll confess

01:46:27.000 --> 01:46:29.000
when you remove useClient

01:46:29.000 --> 01:46:31.000
React complains that useState doesn't exist

01:46:31.000 --> 01:46:33.000
and that's just a separate thing

01:46:33.000 --> 01:46:35.000
with bundlers

01:46:35.000 --> 01:46:37.000
Yeah, so it's

01:46:37.000 --> 01:46:39.000
I mean, ideally

01:46:39.000 --> 01:46:41.000
Oh, okay

01:46:41.000 --> 01:46:43.000
It's actually pretty readable now

01:46:45.000 --> 01:46:47.000
So it's supposed to tell you that

01:46:47.000 --> 01:46:49.000
it's not

01:46:49.000 --> 01:46:51.000
like useClient is not supported on the server

01:46:51.000 --> 01:46:53.000
Yep, that's what I'm saying

01:46:53.000 --> 01:46:55.000
Yeah, so it's

01:46:55.000 --> 01:46:57.000
and like the way you would

01:46:57.000 --> 01:46:59.000
I think the mental model

01:46:59.000 --> 01:47:01.000
you would have, I don't know

01:47:01.000 --> 01:47:03.000
Can I draw in your Excalidraw link that you sent to me?

01:47:03.000 --> 01:47:05.000
Like would people see it?

01:47:05.000 --> 01:47:07.000
Sure

01:47:07.000 --> 01:47:09.000
Yeah, I can pull it up right here

01:47:09.000 --> 01:47:11.000
Okay, so let me

01:47:11.000 --> 01:47:13.000
let me try to open it

01:47:13.000 --> 01:47:15.000
One sec

01:47:15.000 --> 01:47:17.000
I just need to find the link

01:47:17.000 --> 01:47:19.000
But I kind of just wanted to show

01:47:19.000 --> 01:47:21.000
what exactly

01:47:21.000 --> 01:47:23.000
Okay, so I'll draw

01:47:23.000 --> 01:47:25.000
just below your diagram

01:47:25.000 --> 01:47:27.000
So let's see, can you see

01:47:27.000 --> 01:47:29.000
I drew a

01:47:29.000 --> 01:47:31.000
I'm supposed to have

01:47:31.000 --> 01:47:33.000
drawn like a rectangle just

01:47:33.000 --> 01:47:35.000
below your thing

01:47:35.000 --> 01:47:37.000
I think I need to click on the link myself

01:47:37.000 --> 01:47:39.000
because if I just go to

01:47:39.000 --> 01:47:41.000
Excalidraw.com, it doesn't show it

01:47:41.000 --> 01:47:43.000
Yeah, yeah, you need to go to the same link

01:47:43.000 --> 01:47:45.000
Go to the DM

01:47:45.000 --> 01:47:47.000
with that

01:47:49.000 --> 01:47:51.000
Excalidraw

01:47:53.000 --> 01:47:55.000
Alright

01:47:55.000 --> 01:47:57.000
I think we're here now

01:47:57.000 --> 01:47:59.000
Yeah, there we go

01:47:59.000 --> 01:48:01.000
Okay, cool

01:48:01.000 --> 01:48:03.000
So if we kind of think about

01:48:03.000 --> 01:48:05.000
our structure

01:48:05.000 --> 01:48:07.000
right now, it's like we have

01:48:07.000 --> 01:48:09.000
the server root

01:48:09.000 --> 01:48:11.000
and we have

01:48:11.000 --> 01:48:13.000
So this is the

01:48:13.000 --> 01:48:15.000
well, okay, so this is the

01:48:15.000 --> 01:48:17.000
module structure, right?

01:48:17.000 --> 01:48:19.000
Well, okay, first I'll draw

01:48:19.000 --> 01:48:21.000
the component structure. So we have the server root

01:48:21.000 --> 01:48:23.000
that renders

01:48:23.000 --> 01:48:25.000
albums

01:48:25.000 --> 01:48:27.000
that

01:48:27.000 --> 01:48:29.000
itself renders

01:48:29.000 --> 01:48:31.000
this searchable

01:48:31.000 --> 01:48:33.000
album list

01:48:37.000 --> 01:48:39.000
So this is

01:48:39.000 --> 01:48:41.000
this is the component structure, but then if we

01:48:41.000 --> 01:48:43.000
if we look at the, maybe I'll use

01:48:43.000 --> 01:48:45.000
like different

01:48:45.000 --> 01:48:47.000
maybe I'll use like a different

01:48:47.000 --> 01:48:49.000
different style

01:48:49.000 --> 01:48:51.000
So if we look at the file structure

01:48:51.000 --> 01:48:53.000
what we see is like there's

01:48:53.000 --> 01:48:55.000
the thing you call root.server.jsx

01:48:55.000 --> 01:48:57.000
it doesn't have to be named that way

01:48:57.000 --> 01:48:59.000
that's what you mentioned

01:48:59.000 --> 01:49:01.000
could have just been named like app

01:49:01.000 --> 01:49:03.000
or something, and so it imports

01:49:03.000 --> 01:49:05.000
the

01:49:05.000 --> 01:49:07.000
searchable album

01:49:07.000 --> 01:49:09.000
album list.js

01:49:09.000 --> 01:49:11.000
and so

01:49:11.000 --> 01:49:13.000
the

01:49:15.000 --> 01:49:17.000
the way to think about it is like

01:49:17.000 --> 01:49:19.000
by default we start with

01:49:19.000 --> 01:49:21.000
everything executing

01:49:21.000 --> 01:49:23.000
so like

01:49:23.000 --> 01:49:25.000
by default everything starts

01:49:25.000 --> 01:49:27.000
and like importing starts

01:49:27.000 --> 01:49:29.000
on the server, right? So like if you imagine like

01:49:29.000 --> 01:49:31.000
this is the server entry point

01:49:31.000 --> 01:49:33.000
it means that each import

01:49:33.000 --> 01:49:35.000
will be followed, you know, like

01:49:35.000 --> 01:49:37.000
like you would expect, and like

01:49:37.000 --> 01:49:39.000
all of this stuff would be on the

01:49:39.000 --> 01:49:41.000
like in the server

01:49:41.000 --> 01:49:43.000
when I say server, I mean

01:49:43.000 --> 01:49:45.000
React server, so like RSC

01:49:45.000 --> 01:49:47.000
React server components, I don't mean

01:49:47.000 --> 01:49:49.000
it doesn't, it's not about like being on

01:49:49.000 --> 01:49:51.000
the server in terms of location

01:49:51.000 --> 01:49:53.000
again, right? Like it's just the concept

01:49:53.000 --> 01:49:55.000
so by default all of these imports

01:49:55.000 --> 01:49:57.000
become

01:49:57.000 --> 01:49:59.000
part of the code that executes

01:49:59.000 --> 01:50:01.000
you know, as part of your server response

01:50:01.000 --> 01:50:03.000
and then like if we

01:50:03.000 --> 01:50:05.000
if we try to

01:50:05.000 --> 01:50:07.000
if you try to use state here

01:50:07.000 --> 01:50:09.000
it doesn't really make sense because

01:50:09.000 --> 01:50:11.000
this thing

01:50:11.000 --> 01:50:13.000
runs only on the server

01:50:13.000 --> 01:50:15.000
and so it's never actually

01:50:15.000 --> 01:50:17.000
going to be able to have event handlers

01:50:17.000 --> 01:50:19.000
or state because this code

01:50:19.000 --> 01:50:21.000
just never exists on the client

01:50:21.000 --> 01:50:23.000
at all, so it can't react to

01:50:23.000 --> 01:50:25.000
user input anyhow

01:50:25.000 --> 01:50:27.000
and so when you say use client

01:50:27.000 --> 01:50:29.000
and for some reason undo

01:50:29.000 --> 01:50:31.000
doesn't work so

01:50:31.000 --> 01:50:33.000
I have to, wait seriously

01:50:33.000 --> 01:50:35.000
oh really? I can undo

01:50:35.000 --> 01:50:37.000
yeah, I can

01:50:37.000 --> 01:50:39.000
undo this for some reason

01:50:39.000 --> 01:50:41.000
so when we do

01:50:41.000 --> 01:50:43.000
so I'll add use client again to

01:50:43.000 --> 01:50:45.000
searchable

01:50:45.000 --> 01:50:47.000
album list

01:50:47.000 --> 01:50:49.000
so if I add use client there, that fixes it

01:50:49.000 --> 01:50:51.000
because that redraws the

01:50:51.000 --> 01:50:53.000
boundaries, like when you say

01:50:53.000 --> 01:50:55.000
use client, you're essentially saying

01:50:55.000 --> 01:50:57.000
like

01:50:57.000 --> 01:50:59.000
cut this off, you're saying

01:50:59.000 --> 01:51:01.000
like

01:51:01.000 --> 01:51:03.000
this

01:51:03.000 --> 01:51:05.000
anything from here, this could

01:51:05.000 --> 01:51:07.000
import other components, this could

01:51:07.000 --> 01:51:09.000
import something else

01:51:09.000 --> 01:51:11.000
and so on, but you're saying

01:51:11.000 --> 01:51:13.000
anything that imports

01:51:13.000 --> 01:51:15.000
searchable list, this thing

01:51:15.000 --> 01:51:17.000
actually doesn't exist

01:51:17.000 --> 01:51:19.000
this should be on the client

01:51:19.000 --> 01:51:21.000
and it's going to client all the way down

01:51:21.000 --> 01:51:23.000
which doesn't mean that

01:51:23.000 --> 01:51:25.000
it doesn't mean that the

01:51:25.000 --> 01:51:27.000
it doesn't mean

01:51:27.000 --> 01:51:29.000
all components, so we're talking about

01:51:29.000 --> 01:51:31.000
files, we're not talking

01:51:31.000 --> 01:51:33.000
we're talking about imports, not about components

01:51:33.000 --> 01:51:35.000
you can still have components

01:51:35.000 --> 01:51:37.000
that are

01:51:37.000 --> 01:51:39.000
server

01:51:39.000 --> 01:51:41.000
components inside client components

01:51:41.000 --> 01:51:43.000
I'll get to that in a moment

01:51:43.000 --> 01:51:45.000
but what I just want to show is like

01:51:45.000 --> 01:51:47.000
you kind of

01:51:47.000 --> 01:51:49.000
sorry, I just can't

01:51:49.000 --> 01:51:51.000
delete anything

01:51:51.000 --> 01:51:53.000
like I have to

01:51:53.000 --> 01:51:55.000
there we go

01:51:55.000 --> 01:51:57.000
by adding use client

01:51:57.000 --> 01:51:59.000
you kind of just like

01:51:59.000 --> 01:52:01.000
limited the server part to

01:52:01.000 --> 01:52:03.000
this

01:52:03.000 --> 01:52:05.000
and then the rest is what

01:52:05.000 --> 01:52:07.000
your bundler will be

01:52:07.000 --> 01:52:09.000
will know to like, oh this needs

01:52:09.000 --> 01:52:11.000
anything from here has to go into the client

01:52:11.000 --> 01:52:13.000
bundle, and so the server

01:52:13.000 --> 01:52:15.000
environment would not even see this

01:52:15.000 --> 01:52:17.000
so from the server environment

01:52:17.000 --> 01:52:19.000
perspective, the searchable

01:52:19.000 --> 01:52:21.000
album list component

01:52:21.000 --> 01:52:23.000
it doesn't even know what's in there

01:52:23.000 --> 01:52:25.000
it doesn't try to render it, it doesn't try

01:52:25.000 --> 01:52:27.000
to do anything with it, it's just completely

01:52:27.000 --> 01:52:29.000
opaque, and then on the client

01:52:29.000 --> 01:52:31.000
from the client perspective

01:52:31.000 --> 01:52:33.000
like when you're actually

01:52:33.000 --> 01:52:35.000
on the client, it's really

01:52:35.000 --> 01:52:37.000
this part, it's like

01:52:37.000 --> 01:52:39.000
it doesn't exist, because

01:52:39.000 --> 01:52:41.000
it's already executed, so

01:52:41.000 --> 01:52:43.000
the client is only aware of

01:52:43.000 --> 01:52:45.000
the output of this thing

01:52:45.000 --> 01:52:47.000
it's aware of the output, right

01:52:47.000 --> 01:52:49.000
so one of the things that gets

01:52:49.000 --> 01:52:51.000
a bit, you know, that always trips

01:52:51.000 --> 01:52:53.000
people up is like, okay

01:52:53.000 --> 01:52:55.000
but does it mean that

01:52:55.000 --> 01:52:57.000
if I just need

01:52:57.000 --> 01:52:59.000
one, you know, component

01:52:59.000 --> 01:53:01.000
with state somewhere close

01:53:01.000 --> 01:53:03.000
to the top, then

01:53:03.000 --> 01:53:05.000
you know, it can't

01:53:05.000 --> 01:53:07.000
it can't contain

01:53:07.000 --> 01:53:09.000
any server components, right

01:53:09.000 --> 01:53:11.000
and we can

01:53:11.000 --> 01:53:13.000
actually, they have like another

01:53:13.000 --> 01:53:15.000
data point that

01:53:15.000 --> 01:53:17.000
we can fetch from, just to kind of

01:53:17.000 --> 01:53:19.000
illustrate this idea

01:53:20.000 --> 01:53:22.000
so you have getById

01:53:22.000 --> 01:53:24.000
maybe I can use that, do you mind

01:53:24.000 --> 01:53:26.000
if I write a bit of code?

01:53:26.000 --> 01:53:28.000
oh yeah, please

01:53:28.000 --> 01:53:30.000
yeah, so I just want to illustrate

01:53:30.000 --> 01:53:32.000
maybe let's go back to the app

01:53:32.000 --> 01:53:34.000
can we make sure the app is working

01:53:34.000 --> 01:53:36.000
so that, you know, it's not completely

01:53:36.000 --> 01:53:38.000
forked

01:53:38.000 --> 01:53:40.000
it's a good thing to check

01:53:40.000 --> 01:53:42.000
yeah, is this

01:53:42.000 --> 01:53:44.000
the screen share you're able to see?

01:53:44.000 --> 01:53:46.000
yeah, yeah

01:53:46.000 --> 01:53:48.000
but I see it like as empty

01:53:48.000 --> 01:53:50.000
so I don't know if it needs to be restarted

01:53:50.000 --> 01:53:52.000
or something

01:53:52.000 --> 01:53:54.000
oh no, we just need to

01:53:54.000 --> 01:53:56.000
well actually, this is on me

01:53:56.000 --> 01:53:58.000
I only detect double quotes

01:53:58.000 --> 01:54:00.000
yeah, compilers

01:54:00.000 --> 01:54:02.000
alright, that works

01:54:02.000 --> 01:54:04.000
oh, okay

01:54:04.000 --> 01:54:06.000
yeah, so maybe we can show

01:54:06.000 --> 01:54:08.000
the problem you might run

01:54:08.000 --> 01:54:10.000
into is

01:54:10.000 --> 01:54:12.000
so let's go back

01:54:12.000 --> 01:54:14.000
to

01:54:14.000 --> 01:54:16.000
for example, index

01:54:16.000 --> 01:54:18.000
oh, you have a

01:54:18.000 --> 01:54:20.000
can I use this Pokemon example?

01:54:20.000 --> 01:54:22.000
you have this Pokemon example in another file

01:54:22.000 --> 01:54:24.000
also Primogen, oh my god

01:54:24.000 --> 01:54:26.000
thank you for the raid

01:54:26.000 --> 01:54:28.000
we have a lot of people pouring in here

01:54:28.000 --> 01:54:30.000
right now, thank y'all so much

01:54:30.000 --> 01:54:32.000
thanks for stopping by

01:54:32.000 --> 01:54:34.000
that is awesome, you're awesome

01:54:34.000 --> 01:54:36.000
we're live with Dan

01:54:36.000 --> 01:54:38.000
playing with React server components

01:54:38.000 --> 01:54:40.000
and learning a ton of things along the way

01:54:40.000 --> 01:54:42.000
and right now we are playing

01:54:42.000 --> 01:54:44.000
with loading things

01:54:44.000 --> 01:54:46.000
asynchronously, seeing the server client

01:54:46.000 --> 01:54:48.000
boundaries, and I guess

01:54:48.000 --> 01:54:50.000
in a minute, trying to render some Pokemon on the page

01:54:50.000 --> 01:54:52.000
if you want to go ahead and try that

01:54:52.000 --> 01:54:54.000
yeah, so

01:54:54.000 --> 01:54:56.000
let's maybe import

01:54:56.000 --> 01:54:58.000
oh, you already imported Pokemon

01:54:58.000 --> 01:55:00.000
so that's great

01:55:00.000 --> 01:55:02.000
so maybe let's first just

01:55:02.000 --> 01:55:04.000
render the Pokemon

01:55:04.000 --> 01:55:06.000
above

01:55:08.000 --> 01:55:10.000
above the

01:55:10.000 --> 01:55:12.000
code is so

01:55:12.000 --> 01:55:14.000
I just can't get used to

01:55:14.000 --> 01:55:16.000
VS Code, but I'm just trying to

01:55:16.000 --> 01:55:18.000
render the Pokemon above the

01:55:20.000 --> 01:55:22.000
what is it, the album list

01:55:22.000 --> 01:55:24.000
actually

01:55:24.000 --> 01:55:26.000
I'm gonna pull it

01:55:26.000 --> 01:55:28.000
yeah, okay, yeah

01:55:28.000 --> 01:55:30.000
I'm gonna pull it out of the suspense

01:55:30.000 --> 01:55:32.000
because the suspense is super slow

01:55:32.000 --> 01:55:34.000
because we

01:55:34.000 --> 01:55:36.000
let's maybe reduce the delay

01:55:36.000 --> 01:55:38.000
I'll set the delay to something that's

01:55:38.000 --> 01:55:40.000
oh, we changed

01:55:40.000 --> 01:55:42.000
the delay back to be really short

01:55:42.000 --> 01:55:44.000
yeah, that should be short now

01:55:44.000 --> 01:55:46.000
yeah, okay, so we have a

01:55:46.000 --> 01:55:48.000
if we go to root.server.js

01:55:48.000 --> 01:55:50.000
you see there's like, we're rendering

01:55:50.000 --> 01:55:52.000
Pokemon, and we're also rendering

01:55:52.000 --> 01:55:54.000
this album list

01:55:54.000 --> 01:55:56.000
and so, suppose that we

01:55:56.000 --> 01:55:58.000
for some reason we wanted, like Pokemon

01:55:58.000 --> 01:56:00.000
is a server component, right, if you go there

01:56:00.000 --> 01:56:02.000
you see it has async await

01:56:02.000 --> 01:56:04.000
that's currently

01:56:04.000 --> 01:56:06.000
only supported on the server

01:56:06.000 --> 01:56:08.000
so, but imagine that in our

01:56:08.000 --> 01:56:10.000
app we want to

01:56:10.000 --> 01:56:12.000
render the Pokemon from a client

01:56:12.000 --> 01:56:14.000
component, right, like let's say we want

01:56:14.000 --> 01:56:16.000
to render it between the

01:56:16.000 --> 01:56:18.000
search bar and the list of

01:56:18.000 --> 01:56:20.000
items

01:56:20.000 --> 01:56:22.000
so, if you just try to do it

01:56:22.000 --> 01:56:24.000
kind of naively, it won't work

01:56:24.000 --> 01:56:26.000
so if I go to

01:56:28.000 --> 01:56:30.000
to the

01:56:30.000 --> 01:56:32.000
searchable album list, and I'm gonna add

01:56:32.000 --> 01:56:34.000
an import for Pokemon

01:56:34.000 --> 01:56:36.000
I'm gonna delete the

01:56:36.000 --> 01:56:38.000
I'm gonna delete

01:56:38.000 --> 01:56:40.000
the Pokemon from

01:56:40.000 --> 01:56:42.000
root.server.js

01:56:42.000 --> 01:56:44.000
completely, so I will

01:56:44.000 --> 01:56:46.000
get rid of it here

01:56:46.000 --> 01:56:48.000
and I will add it to our client

01:56:48.000 --> 01:56:50.000
searchable album list component

01:56:50.000 --> 01:56:52.000
between the input

01:56:52.000 --> 01:56:54.000
and the

01:56:54.000 --> 01:56:56.000
and the list

01:56:56.000 --> 01:56:58.000
and so if you run it now

01:56:58.000 --> 01:57:00.000
I think it should crash

01:57:00.000 --> 01:57:02.000
like, what does it tell you if you

01:57:02.000 --> 01:57:04.000
if you try to run it now

01:57:04.000 --> 01:57:06.000
I'm so curious why, but it didn't crash

01:57:06.000 --> 01:57:08.000
and it actually ran

01:57:08.000 --> 01:57:10.000
that should not work

01:57:10.000 --> 01:57:12.000
hang on, what's going on

01:57:12.000 --> 01:57:14.000
here

01:57:14.000 --> 01:57:16.000
yeah, it's working

01:57:16.000 --> 01:57:18.000
wait a minute

01:57:18.000 --> 01:57:20.000
but is it between

01:57:20.000 --> 01:57:22.000
can you tell the input so that we can actually see the input

01:57:22.000 --> 01:57:24.000
because I don't see the input at all

01:57:24.000 --> 01:57:26.000
absolutely

01:57:26.000 --> 01:57:28.000
yeah, it's right there, it's adding a focus

01:57:28.000 --> 01:57:30.000
ring to that

01:57:30.000 --> 01:57:32.000
let me add border

01:57:32.000 --> 01:57:34.000
solid

01:57:34.000 --> 01:57:36.000
okay

01:57:36.000 --> 01:57:38.000
yeah, maybe it's not

01:57:38.000 --> 01:57:40.000
I guess it's because it's using fetch

01:57:40.000 --> 01:57:42.000
so maybe we already

01:57:42.000 --> 01:57:44.000
support it on the client as well

01:57:44.000 --> 01:57:46.000
so ideally it would be something

01:57:46.000 --> 01:57:48.000
that would not be supported

01:57:48.000 --> 01:57:50.000
on the client, like a database call

01:57:50.000 --> 01:57:52.000
or something like this

01:57:52.000 --> 01:57:54.000
right

01:57:54.000 --> 01:57:56.000
maybe we can read something from a file

01:57:56.000 --> 01:57:58.000
to make this more

01:57:58.000 --> 01:58:00.000
make it more obvious

01:58:00.000 --> 01:58:02.000
sure, yeah, let's read something from the

01:58:02.000 --> 01:58:04.000
file so that we know definitely that

01:58:06.000 --> 01:58:08.000
yeah, can we do like

01:58:08.000 --> 01:58:10.000
okay, instead of

01:58:10.000 --> 01:58:12.000
pokemon, we're gonna do

01:58:14.000 --> 01:58:16.000
fs, let's see

01:58:16.000 --> 01:58:18.000
I haven't used

01:58:20.000 --> 01:58:22.000
can you write some

01:58:22.000 --> 01:58:24.000
yeah, I can throw that down, I've only been writing fs calls

01:58:24.000 --> 01:58:26.000
for the past however long

01:58:26.000 --> 01:58:28.000
yeah, can you do like

01:58:28.000 --> 01:58:30.000
readdir, like a list of files

01:58:30.000 --> 01:58:32.000
for example, in your

01:58:32.000 --> 01:58:34.000
yeah, fs

01:58:34.000 --> 01:58:36.000
promises, readfile

01:58:36.000 --> 01:58:38.000
maybe readdir

01:58:38.000 --> 01:58:40.000
to kind of see the list of

01:58:40.000 --> 01:58:42.000
files in the directory or something like this

01:58:42.000 --> 01:58:44.000
yeah

01:58:44.000 --> 01:58:46.000
or I guess, yeah

01:58:46.000 --> 01:58:48.000
that's a thought too, yeah, I can read anything

01:58:48.000 --> 01:58:50.000
okay, yeah, whatever

01:58:50.000 --> 01:58:52.000
yeah, this isn't

01:58:52.000 --> 01:58:54.000
the best thing, maybe if I

01:58:54.000 --> 01:58:56.000
tried to read from the db

01:58:56.000 --> 01:58:58.000
that would make more sense

01:58:58.000 --> 01:59:00.000
sure, there's a thing you could do

01:59:00.000 --> 01:59:02.000
db, data

01:59:06.000 --> 01:59:08.000
data

01:59:08.000 --> 01:59:10.000
at slug there, which is a real

01:59:10.000 --> 01:59:12.000
slug

01:59:12.000 --> 01:59:14.000
yep

01:59:14.000 --> 01:59:16.000
and that, yeah

01:59:16.000 --> 01:59:18.000
and then you want to do that

01:59:18.000 --> 01:59:20.000
return

01:59:20.000 --> 01:59:22.000
you know, a dump

01:59:22.000 --> 01:59:24.000
a dump of information

01:59:24.000 --> 01:59:26.000
sure

01:59:26.000 --> 01:59:28.000
what's that

01:59:28.000 --> 01:59:30.000
awesome

01:59:30.000 --> 01:59:32.000
yes, maybe let's

01:59:32.000 --> 01:59:34.000
see what happens if we try

01:59:34.000 --> 01:59:36.000
to do this

01:59:36.000 --> 01:59:38.000
or it's already stringified, silly me

01:59:38.000 --> 01:59:40.000
alright, so we do that

01:59:40.000 --> 01:59:42.000
and then it says, can't resolve node fs

01:59:42.000 --> 01:59:44.000
that does make sense

01:59:44.000 --> 01:59:46.000
yeah, it's built into node, are you trying to bundle for node

01:59:46.000 --> 01:59:48.000
this is an esbuild specific thing

01:59:48.000 --> 01:59:50.000
but this is what you would run into with the bundler

01:59:50.000 --> 01:59:52.000
where it tries to bundle

01:59:52.000 --> 01:59:54.000
this into the client

01:59:54.000 --> 01:59:56.000
and it decides, well, you can't import

01:59:56.000 --> 01:59:58.000
from node on the client, so I'm gonna

01:59:58.000 --> 02:00:00.000
fail out

02:00:00.000 --> 02:00:02.000
right, and so the way

02:00:02.000 --> 02:00:04.000
and then the way you fix it

02:00:04.000 --> 02:00:06.000
the way you kind of do this thing

02:00:06.000 --> 02:00:08.000
where, you know, the

02:00:08.000 --> 02:00:10.000
I'll switch back to Excalibur

02:00:10.000 --> 02:00:12.000
can I see the Excalibur

02:00:12.000 --> 02:00:14.000
yep

02:00:14.000 --> 02:00:16.000
okay, so, yeah, so the problem we have

02:00:16.000 --> 02:00:18.000
right now is like, we're doing this

02:00:18.000 --> 02:00:20.000
and, again, this thing

02:00:20.000 --> 02:00:22.000
is, this

02:00:22.000 --> 02:00:24.000
is rendering, like, Pokemon

02:00:24.000 --> 02:00:26.000
which is not actually Pokemon

02:00:26.000 --> 02:00:28.000
it's a York album, but let's say it's Pokemon

02:00:28.000 --> 02:00:30.000
and then this thing is actually

02:00:30.000 --> 02:00:32.000
like, it can only

02:00:32.000 --> 02:00:34.000
work on the server

02:00:34.000 --> 02:00:36.000
right, so because it uses, like, node

02:00:36.000 --> 02:00:38.000
or something, so it actually, like, this

02:00:38.000 --> 02:00:40.000
is why it errors

02:00:40.000 --> 02:00:42.000
and so the way

02:00:42.000 --> 02:00:44.000
you would fix it is

02:00:44.000 --> 02:00:46.000
you can

02:00:46.000 --> 02:00:48.000
but, and, like, you're

02:00:48.000 --> 02:00:50.000
the component structure that you want to have

02:00:50.000 --> 02:00:52.000
looks like

02:00:52.000 --> 02:00:54.000
this, so

02:00:54.000 --> 02:00:56.000
this is what you're trying to do

02:00:56.000 --> 02:00:58.000
but the problem is, like

02:00:58.000 --> 02:01:00.000
this is a client component

02:01:00.000 --> 02:01:02.000
and so you can't import the server component

02:01:02.000 --> 02:01:04.000
from client component

02:01:04.000 --> 02:01:06.000
but what you can do is

02:01:06.000 --> 02:01:08.000
keep the component structure

02:01:08.000 --> 02:01:10.000
kind of

02:01:10.000 --> 02:01:12.000
the same

02:01:12.000 --> 02:01:14.000
except you render

02:01:14.000 --> 02:01:16.000
there's not a great way to show it

02:01:16.000 --> 02:01:18.000
but they kind of

02:01:18.000 --> 02:01:20.000
render it

02:01:20.000 --> 02:01:22.000
let me try to

02:01:22.000 --> 02:01:24.000
make this a bit nicer

02:01:28.000 --> 02:01:30.000
I don't know why this didn't work

02:01:30.000 --> 02:01:32.000
let me just show it in code

02:01:32.000 --> 02:01:34.000
and then I'll try to redraw the picture

02:01:34.000 --> 02:01:36.000
so in code what you do

02:01:36.000 --> 02:01:38.000
is you

02:01:38.000 --> 02:01:40.000
so you go back

02:01:40.000 --> 02:01:42.000
to here, so

02:01:42.000 --> 02:01:44.000
we go back to searchable

02:01:44.000 --> 02:01:46.000
album list, we can't render

02:01:46.000 --> 02:01:48.000
Pokemon here because it's a server component

02:01:48.000 --> 02:01:50.000
so what we're going to do instead

02:01:50.000 --> 02:01:52.000
we're going to make a hole in our component

02:01:52.000 --> 02:01:54.000
so we're going to accept children as a prop

02:01:54.000 --> 02:01:56.000
from above

02:01:56.000 --> 02:01:58.000
so now we

02:01:58.000 --> 02:02:00.000
it's just like, you know, it's the same way

02:02:00.000 --> 02:02:02.000
it's not server component specific thing

02:02:02.000 --> 02:02:04.000
it's just how you make a hole in the component

02:02:04.000 --> 02:02:06.000
that the parent can fill in

02:02:06.000 --> 02:02:08.000
and so we copy and paste

02:02:08.000 --> 02:02:10.000
Pokemon again, we

02:02:10.000 --> 02:02:12.000
go back to our server component

02:02:12.000 --> 02:02:14.000
we paste Pokemon import here

02:02:14.000 --> 02:02:16.000
and so we

02:02:16.000 --> 02:02:18.000
this is not necessary

02:02:18.000 --> 02:02:20.000
and so what we do is this

02:02:20.000 --> 02:02:22.000
we pass Pokemon as a child

02:02:22.000 --> 02:02:24.000
to searchable album list

02:02:24.000 --> 02:02:26.000
and so

02:02:26.000 --> 02:02:28.000
yeah

02:02:28.000 --> 02:02:30.000
and so I think this should work

02:02:30.000 --> 02:02:32.000
if you, I don't know, can you try it

02:02:32.000 --> 02:02:34.000
yeah

02:02:34.000 --> 02:02:36.000
let's give it a try

02:02:36.000 --> 02:02:38.000
and also just for my own

02:02:38.000 --> 02:02:40.000
sanity, I just want to rename

02:02:40.000 --> 02:02:42.000
the component

02:02:42.000 --> 02:02:44.000
if anyone's popping in, because apparently there's

02:02:44.000 --> 02:02:46.000
2,000 people

02:02:46.000 --> 02:02:48.000
if that's true

02:02:48.000 --> 02:02:50.000
hello, and thank you

02:02:50.000 --> 02:02:52.000
so much

02:02:52.000 --> 02:02:54.000
let's pass that in

02:02:54.000 --> 02:02:56.000
so this is a file system call

02:02:56.000 --> 02:02:58.000
that we're passing down as a prop basically

02:02:58.000 --> 02:03:00.000
in order to slot it into our page

02:03:00.000 --> 02:03:02.000
so I'll go ahead and do that

02:03:02.000 --> 02:03:04.000
and hopefully that's

02:03:04.000 --> 02:03:06.000
everything working

02:03:06.000 --> 02:03:08.000
so we head over here

02:03:08.000 --> 02:03:10.000
we should see that

02:03:10.000 --> 02:03:12.000
and then, oh no, things have happened

02:03:12.000 --> 02:03:14.000
okay, that's

02:03:14.000 --> 02:03:16.000
it's just trying to fetch a file that it can't find

02:03:16.000 --> 02:03:18.000
yeah, that's just me

02:03:18.000 --> 02:03:20.000
getting file paths wrong

02:03:20.000 --> 02:03:22.000
I'll head over here

02:03:22.000 --> 02:03:24.000
and because it gets built to a dist folder

02:03:24.000 --> 02:03:26.000
it's actually different, that's the issue

02:03:26.000 --> 02:03:28.000
there we go

02:03:28.000 --> 02:03:30.000
alright, so now we actually get

02:03:30.000 --> 02:03:32.000
the readout from the file system

02:03:32.000 --> 02:03:34.000
passed down

02:03:34.000 --> 02:03:36.000
the server component output

02:03:36.000 --> 02:03:38.000
so the thing that

02:03:38.000 --> 02:03:40.000
in our case is just

02:03:40.000 --> 02:03:42.000
it's reading from a file, but

02:03:42.000 --> 02:03:44.000
it's kind of stuffed into

02:03:44.000 --> 02:03:46.000
between the parts

02:03:46.000 --> 02:03:48.000
the client parts

02:03:48.000 --> 02:03:50.000
and the way we can maybe

02:03:50.000 --> 02:03:52.000
like the way

02:03:52.000 --> 02:03:54.000
let me try to update my diagram

02:03:54.000 --> 02:03:56.000
so in

02:03:56.000 --> 02:03:58.000
this example

02:03:58.000 --> 02:04:00.000
if I'm using blue

02:04:00.000 --> 02:04:02.000
for

02:04:02.000 --> 02:04:04.000
so we've moved

02:04:04.000 --> 02:04:06.000
you see the way we import things

02:04:06.000 --> 02:04:08.000
has changed, right, so the component

02:04:08.000 --> 02:04:10.000
tree is still the same

02:04:10.000 --> 02:04:12.000
like the pokemon is kind of rendered

02:04:12.000 --> 02:04:14.000
inside of searchable album list

02:04:14.000 --> 02:04:16.000
but the way the imports

02:04:16.000 --> 02:04:18.000
are structured is that actually

02:04:18.000 --> 02:04:20.000
root.server.js

02:04:20.000 --> 02:04:22.000
imports searchable

02:04:22.000 --> 02:04:24.000
album list and it also

02:04:24.000 --> 02:04:26.000
imports pokemon.js

02:04:26.000 --> 02:04:28.000
sorry

02:04:28.000 --> 02:04:30.000
it's not pokemon anymore

02:04:30.000 --> 02:04:32.000
it's searchable

02:04:32.000 --> 02:04:34.000
so yeah, I'm going to change that here as well

02:04:34.000 --> 02:04:36.000
and so it

02:04:36.000 --> 02:04:38.000
it imports this file as well

02:04:38.000 --> 02:04:40.000
and the use client

02:04:40.000 --> 02:04:42.000
is only

02:04:42.000 --> 02:04:44.000
let me take this

02:04:44.000 --> 02:04:46.000
so now use client works because

02:04:46.000 --> 02:04:48.000
I think I can just change this

02:04:48.000 --> 02:04:50.000
to like blue, right?

02:04:50.000 --> 02:04:52.000
sorry, I forgot about

02:04:52.000 --> 02:04:54.000
the

02:04:54.000 --> 02:04:56.000
so it's kind of

02:04:56.000 --> 02:04:58.000
like an island, yeah, sort of

02:04:58.000 --> 02:05:00.000
like anything imports will also

02:05:00.000 --> 02:05:02.000
be like in the client bundle

02:05:02.000 --> 02:05:04.000
but then the remaining stuff like

02:05:04.000 --> 02:05:06.000
that

02:05:06.000 --> 02:05:08.000
still executes

02:05:08.000 --> 02:05:10.000
on the server only and so that's

02:05:10.000 --> 02:05:12.000
why it works

02:05:12.000 --> 02:05:14.000
yeah, exactly

02:05:14.000 --> 02:05:16.000
and I mean you're using all the terms

02:05:16.000 --> 02:05:18.000
that we've used at Astro

02:05:18.000 --> 02:05:20.000
I was kind of freaking out a little bit when you said

02:05:20.000 --> 02:05:22.000
donut islands on a stream the other day

02:05:22.000 --> 02:05:24.000
I was like that's what we call them

02:05:24.000 --> 02:05:26.000
where what you're doing is

02:05:26.000 --> 02:05:28.000
you've created this

02:05:28.000 --> 02:05:30.000
an island of client-side

02:05:30.000 --> 02:05:32.000
logic and you

02:05:32.000 --> 02:05:34.000
want to pass something through a hole

02:05:34.000 --> 02:05:36.000
in the middle as a prop

02:05:36.000 --> 02:05:38.000
where really anything can be

02:05:38.000 --> 02:05:40.000
a prop that's passed down, it can be

02:05:40.000 --> 02:05:42.000
data or it can be JSX

02:05:42.000 --> 02:05:44.000
and in this case that's what

02:05:44.000 --> 02:05:46.000
React is doing, like Bjork album has

02:05:46.000 --> 02:05:48.000
become

02:05:48.000 --> 02:05:50.000
a prop that is going to

02:05:50.000 --> 02:05:52.000
render this stuff out on the server

02:05:52.000 --> 02:05:54.000
get that data and then

02:05:54.000 --> 02:05:56.000
pass it into the client

02:05:56.000 --> 02:05:58.000
so that's another thing about fetching too

02:05:58.000 --> 02:06:00.000
what's going to happen is it's going to fetch all the albums

02:06:00.000 --> 02:06:02.000
in this setup right now

02:06:02.000 --> 02:06:04.000
then it's going to fetch the Bjork album

02:06:04.000 --> 02:06:06.000
with the file system call

02:06:06.000 --> 02:06:08.000
and once both of those are resolved

02:06:08.000 --> 02:06:10.000
it'll pass this guy down

02:06:10.000 --> 02:06:12.000
do I have that right?

02:06:12.000 --> 02:06:14.000
not quite, so in this example

02:06:14.000 --> 02:06:16.000
I think if we

02:06:16.000 --> 02:06:18.000
specifically talk about the ordering

02:06:18.000 --> 02:06:20.000
I believe it will

02:06:20.000 --> 02:06:22.000
try the

02:06:22.000 --> 02:06:24.000
oh yeah

02:06:24.000 --> 02:06:26.000
because await is

02:06:26.000 --> 02:06:28.000
above it

02:06:28.000 --> 02:06:30.000
so it's going to fetch the list of

02:06:30.000 --> 02:06:32.000
albums and then it's going to

02:06:32.000 --> 02:06:34.000
get here, it's going to render the Bjork

02:06:34.000 --> 02:06:36.000
album and then it's going to tell

02:06:36.000 --> 02:06:38.000
the client, hey here's

02:06:38.000 --> 02:06:40.000
the thing you should slot into

02:06:40.000 --> 02:06:42.000
the donut and here are

02:06:42.000 --> 02:06:44.000
other, because children

02:06:44.000 --> 02:06:46.000
is just another prop

02:06:46.000 --> 02:06:48.000
there is actually no specific

02:06:48.000 --> 02:06:50.000
it could have been called

02:06:50.000 --> 02:06:52.000
donut content

02:06:52.000 --> 02:06:54.000
equals this

02:06:54.000 --> 02:06:56.000
right, and then you would

02:06:56.000 --> 02:06:58.000
you would also

02:06:58.000 --> 02:07:00.000
because it's just a prop that you pass

02:07:00.000 --> 02:07:02.000
and then with

02:07:02.000 --> 02:07:04.000
server components, when it

02:07:04.000 --> 02:07:06.000
meets a client component

02:07:06.000 --> 02:07:08.000
with a bunch of props

02:07:08.000 --> 02:07:10.000
it tries to serialize those

02:07:10.000 --> 02:07:12.000
props into JSON

02:07:12.000 --> 02:07:14.000
and when it meets more JSX

02:07:14.000 --> 02:07:16.000
it's like, oh I guess I have more server things to do

02:07:16.000 --> 02:07:18.000
so that's why it kind of steps into

02:07:18.000 --> 02:07:20.000
the Bjork album and tries to resolve that

02:07:20.000 --> 02:07:22.000
and that becomes part of the stream

02:07:22.000 --> 02:07:24.000
so that's how it works

02:07:24.000 --> 02:07:26.000
very cool stuff

02:07:26.000 --> 02:07:28.000
and yeah I was

02:07:28.000 --> 02:07:30.000
hoping these devlogs would kind of show you

02:07:30.000 --> 02:07:32.000
that but I think these headers are

02:07:32.000 --> 02:07:34.000
completely wrong, the important part here

02:07:34.000 --> 02:07:36.000
is like, well what's

02:07:36.000 --> 02:07:38.000
coming down the wire on this part

02:07:38.000 --> 02:07:40.000
and I hope you can still see it, there we go

02:07:40.000 --> 02:07:42.000
maybe we can make

02:07:42.000 --> 02:07:44.000
the, I think it's just confusing that

02:07:44.000 --> 02:07:46.000
it's such a long output

02:07:46.000 --> 02:07:48.000
let's just slice

02:07:48.000 --> 02:07:50.000
the first 10 letters

02:07:50.000 --> 02:07:52.000
or something like this, is that

02:07:52.000 --> 02:07:54.000
how you, no I think

02:07:54.000 --> 02:07:56.000
0, 10, maybe something like this

02:07:56.000 --> 02:07:58.000
oh yeah we can do that too

02:07:58.000 --> 02:08:00.000
so maybe let's look for

02:08:00.000 --> 02:08:02.000
let's have a look at what's happening

02:08:02.000 --> 02:08:04.000
in the dev panel

02:08:06.000 --> 02:08:08.000
maybe also let's show just

02:08:08.000 --> 02:08:10.000
one first album

02:08:10.000 --> 02:08:12.000
so that we

02:08:12.000 --> 02:08:14.000
don't have so much to read so I'm gonna make

02:08:14.000 --> 02:08:16.000
it like albums, album

02:08:16.000 --> 02:08:18.000
0, so I've dated

02:08:18.000 --> 02:08:20.000
that you only see one

02:08:20.000 --> 02:08:22.000
nice, okay

02:08:22.000 --> 02:08:24.000
and let's now have a look at what's actually

02:08:24.000 --> 02:08:26.000
happening in the

02:08:26.000 --> 02:08:28.000
response from the beginning

02:08:28.000 --> 02:08:30.000
yeah

02:08:30.000 --> 02:08:32.000
so I mean what I'm seeing

02:08:32.000 --> 02:08:34.000
is it starts from showing

02:08:34.000 --> 02:08:36.000
you welcome to server components

02:08:36.000 --> 02:08:38.000
then we show our loading spinner and we're gonna

02:08:38.000 --> 02:08:40.000
wait for the next chunk to come down to replace

02:08:40.000 --> 02:08:42.000
that loading spinner

02:08:42.000 --> 02:08:44.000
and that's actually here

02:08:44.000 --> 02:08:46.000
interestingly, so the 4 and the

02:08:46.000 --> 02:08:48.000
3 are a little out of order with what it

02:08:48.000 --> 02:08:50.000
decided, it can always

02:08:50.000 --> 02:08:52.000
change, but the client part

02:08:52.000 --> 02:08:54.000
is just gonna be an import

02:08:54.000 --> 02:08:56.000
so this is gonna go import that

02:08:56.000 --> 02:08:58.000
file and we don't care what it does

02:08:58.000 --> 02:09:00.000
we're just gonna import it and assume it's browser

02:09:00.000 --> 02:09:02.000
ready javascript that we can throw on there

02:09:02.000 --> 02:09:04.000
and the

02:09:04.000 --> 02:09:06.000
information is gonna be there

02:09:06.000 --> 02:09:08.000
maybe the way I would describe

02:09:08.000 --> 02:09:10.000
it is, if you scroll back

02:09:10.000 --> 02:09:12.000
up a little bit

02:09:12.000 --> 02:09:14.000
in the

02:09:14.000 --> 02:09:16.000
response, notice that

02:09:16.000 --> 02:09:18.000
in the protocol we have

02:09:18.000 --> 02:09:20.000
for example like h1 or

02:09:20.000 --> 02:09:22.000
there's like names of

02:09:22.000 --> 02:09:24.000
the tags, right, so we

02:09:24.000 --> 02:09:26.000
kind of say, this is a react element

02:09:26.000 --> 02:09:28.000
this is a part of the react tree that's like

02:09:28.000 --> 02:09:30.000
h1, but then

02:09:30.000 --> 02:09:32.000
if we also want to be able to

02:09:32.000 --> 02:09:34.000
say, here's

02:09:34.000 --> 02:09:36.000
a react component

02:09:36.000 --> 02:09:38.000
you need to download

02:09:38.000 --> 02:09:40.000
from a script tag

02:09:40.000 --> 02:09:42.000
and render, and so if you look a little

02:09:42.000 --> 02:09:44.000
bit below

02:09:44.000 --> 02:09:46.000
where it says later response

02:09:46.000 --> 02:09:48.000
instead of h1, you see

02:09:48.000 --> 02:09:50.000
this $l4

02:09:50.000 --> 02:09:52.000
which is again implementation detail, it doesn't

02:09:52.000 --> 02:09:54.000
actually matter, but this is

02:09:54.000 --> 02:09:56.000
a reference to the

02:09:56.000 --> 02:09:58.000
previous thing in the response

02:09:58.000 --> 02:10:00.000
so instead of h1, you're rendering

02:10:00.000 --> 02:10:02.000
searchable album list

02:10:02.000 --> 02:10:04.000
so this instruction tells react, here's

02:10:04.000 --> 02:10:06.000
where to download this code, it exists

02:10:06.000 --> 02:10:08.000
in this script tag

02:10:08.000 --> 02:10:10.000
so this is what I meant

02:10:10.000 --> 02:10:12.000
by automatic code splitting

02:10:12.000 --> 02:10:14.000
because if we remove

02:10:14.000 --> 02:10:16.000
searchable, like if we edit our

02:10:16.000 --> 02:10:18.000
server with

02:10:18.000 --> 02:10:20.000
component for example

02:10:20.000 --> 02:10:22.000
to check your

02:10:22.000 --> 02:10:24.000
privileges and be like, if you're not an admin

02:10:24.000 --> 02:10:26.000
don't show searchable

02:10:26.000 --> 02:10:28.000
album list, then

02:10:28.000 --> 02:10:30.000
the server will not send the instruction

02:10:30.000 --> 02:10:32.000
to download searchable album list

02:10:32.000 --> 02:10:34.000
so you wouldn't even have it, you know, you wouldn't

02:10:34.000 --> 02:10:36.000
load that bundle at all

02:10:36.000 --> 02:10:38.000
because it's just not necessary

02:10:38.000 --> 02:10:40.000
so this is what I mean by automatic code splitting

02:10:40.000 --> 02:10:42.000
but yeah, other

02:10:42.000 --> 02:10:44.000
than that, it kind of says

02:10:44.000 --> 02:10:46.000
the later part of the tree is

02:10:46.000 --> 02:10:48.000
this module called searchable album list

02:10:48.000 --> 02:10:50.000
that exists in your bundle

02:10:50.000 --> 02:10:52.000
in your example, it seems like

02:10:52.000 --> 02:10:54.000
it's like a separate file

02:10:54.000 --> 02:10:56.000
like in optimized bundler

02:10:56.000 --> 02:10:58.000
you would have them split into chunks

02:10:58.000 --> 02:11:00.000
that have more than

02:11:00.000 --> 02:11:02.000
one component of course in them, otherwise

02:11:02.000 --> 02:11:04.000
you'd be downloading too many script tags

02:11:04.000 --> 02:11:06.000
but yeah, you can see

02:11:06.000 --> 02:11:08.000
it says render this thing

02:11:08.000 --> 02:11:10.000
that's like a client component

02:11:10.000 --> 02:11:12.000
and here are its

02:11:12.000 --> 02:11:14.000
props, and so you see album's prop

02:11:14.000 --> 02:11:16.000
contains the

02:11:16.000 --> 02:11:18.000
album stuff

02:11:18.000 --> 02:11:20.000
and then if you scroll down

02:11:20.000 --> 02:11:22.000
it says children L5

02:11:22.000 --> 02:11:24.000
which is like

02:11:24.000 --> 02:11:26.000
reference to some content chunk

02:11:26.000 --> 02:11:28.000
that arrives later

02:11:28.000 --> 02:11:30.000
It's actually the Bjork album, but we

02:11:30.000 --> 02:11:32.000
chopped off very few characters

02:11:32.000 --> 02:11:34.000
Yeah, yeah

02:11:34.000 --> 02:11:36.000
I might bump that to like 50 or something

02:11:36.000 --> 02:11:38.000
and then it'll show you just a little bit

02:11:38.000 --> 02:11:40.000
it actually shows you a lot more, doesn't it?

02:11:40.000 --> 02:11:42.000
Oh yeah, right here, so this is the later later

02:11:42.000 --> 02:11:44.000
chunk once that is resolved

02:11:44.000 --> 02:11:46.000
and that gets

02:11:46.000 --> 02:11:48.000
passed in as a prop

02:11:48.000 --> 02:11:50.000
it gets harder to trace the more components you have obviously

02:11:50.000 --> 02:11:52.000
which makes sense

02:11:52.000 --> 02:11:54.000
because this is just a dump of what it's actually sending down

02:11:54.000 --> 02:11:56.000
but I see what you mean

02:11:56.000 --> 02:11:58.000
like oh, it would be right here

02:11:58.000 --> 02:12:00.000
so the children of this

02:12:00.000 --> 02:12:02.000
component are going to be 5

02:12:02.000 --> 02:12:04.000
whenever it resolves, and then here it is

02:12:04.000 --> 02:12:06.000
here is that dump

02:12:06.000 --> 02:12:08.000
from the Bjork album file

02:12:08.000 --> 02:12:10.000
and we're going to pass it into this component

02:12:10.000 --> 02:12:12.000
which I think we can trace back up

02:12:12.000 --> 02:12:14.000
to

02:12:14.000 --> 02:12:16.000
somewhere

02:12:16.000 --> 02:12:18.000
5 is

02:12:18.000 --> 02:12:20.000
right at the end

02:12:20.000 --> 02:12:22.000
5 is children L5

02:12:22.000 --> 02:12:24.000
Yep, and that's being

02:12:24.000 --> 02:12:26.000
passed into searchable album list

02:12:26.000 --> 02:12:28.000
so the numbers correspond

02:12:28.000 --> 02:12:30.000
where it's like that's the data

02:12:30.000 --> 02:12:32.000
that's the children prop that we're going to pass in

02:12:32.000 --> 02:12:34.000
and all of this corresponds to number 4

02:12:34.000 --> 02:12:36.000
which is

02:12:36.000 --> 02:12:38.000
the actual album list that we're rendering

02:12:38.000 --> 02:12:40.000
onto the page

02:12:40.000 --> 02:12:42.000
and all of this is

02:12:42.000 --> 02:12:44.000
composable, so of course if you put

02:12:44.000 --> 02:12:46.000
suspense

02:12:46.000 --> 02:12:48.000
around the Bjork album

02:12:48.000 --> 02:12:50.000
now, so you do

02:12:50.000 --> 02:12:52.000
like, I don't know

02:12:52.000 --> 02:12:54.000
let me try to

02:12:54.000 --> 02:12:56.000
do something here

02:13:00.000 --> 02:13:02.000
I'm also forcing

02:13:02.000 --> 02:13:04.000
Dan Abramov to use VS Code, I'm sorry

02:13:04.000 --> 02:13:06.000
people, are you a Vim user?

02:13:06.000 --> 02:13:08.000
No, no, I can't

02:13:08.000 --> 02:13:10.000
but I'm a happy

02:13:10.000 --> 02:13:12.000
Sublime user, I don't understand why it keeps

02:13:12.000 --> 02:13:14.000
trying to close my tags, like it never

02:13:14.000 --> 02:13:16.000
does it the way that I want

02:13:16.000 --> 02:13:18.000
Yeah, it's a Prime Machine raid

02:13:18.000 --> 02:13:20.000
so I have to ask about Vim, so

02:13:20.000 --> 02:13:22.000
it's neither, you use Sublime tags, interesting

02:13:22.000 --> 02:13:24.000
So I'm also

02:13:24.000 --> 02:13:26.000
going to add an artificial delay

02:13:26.000 --> 02:13:28.000
here so that we

02:13:28.000 --> 02:13:30.000
can, let's say, wait for

02:13:32.000 --> 02:13:34.000
wait for like 2 seconds

02:13:34.000 --> 02:13:36.000
like imagine this file system

02:13:36.000 --> 02:13:38.000
call is super expensive

02:13:38.000 --> 02:13:40.000
so maybe let's have a look at what

02:13:40.000 --> 02:13:42.000
happens after this

02:13:44.000 --> 02:13:46.000
Yeah, let's see what happens

02:13:46.000 --> 02:13:48.000
Okay, something

02:13:48.000 --> 02:13:50.000
failed with just parsing

02:13:50.000 --> 02:13:52.000
the file

02:13:52.000 --> 02:13:54.000
Don't know what happened there, let me double check

02:13:54.000 --> 02:13:56.000
It might have tried to save at the wrong time

02:13:56.000 --> 02:13:58.000
I know VS Code can get out of sync with that

02:13:58.000 --> 02:14:00.000
Yeah, there we go

02:14:00.000 --> 02:14:02.000
Okay, and yeah, now we have this out of order

02:14:02.000 --> 02:14:04.000
streaming setup

02:14:04.000 --> 02:14:06.000
where when you load the page first

02:14:06.000 --> 02:14:08.000
it loads everything

02:14:08.000 --> 02:14:10.000
then it does the file system call and it slots

02:14:10.000 --> 02:14:12.000
it in here later

02:14:12.000 --> 02:14:14.000
while preserving the other markup

02:14:14.000 --> 02:14:16.000
that you have

02:14:16.000 --> 02:14:18.000
Yeah, and so the cool

02:14:18.000 --> 02:14:20.000
about it from my perspective is

02:14:20.000 --> 02:14:22.000
like in

02:14:22.000 --> 02:14:24.000
you know, we parse some

02:14:24.000 --> 02:14:26.000
server stuff that still might be

02:14:26.000 --> 02:14:28.000
waiting for something, but we kind of

02:14:28.000 --> 02:14:30.000
unblock the rest of the

02:14:30.000 --> 02:14:32.000
even like client stuff from rendering by

02:14:32.000 --> 02:14:34.000
just putting suspense in there

02:14:34.000 --> 02:14:36.000
Yeah, exactly

02:14:36.000 --> 02:14:38.000
It's the easiest switch to slot into

02:14:38.000 --> 02:14:40.000
where the default is like wait for everything

02:14:40.000 --> 02:14:42.000
which is usually what you want so you don't

02:14:42.000 --> 02:14:44.000
have layout shift, and then it's like

02:14:44.000 --> 02:14:46.000
well actually I do have

02:14:46.000 --> 02:14:48.000
I actually have a way to handle layout shift

02:14:48.000 --> 02:14:50.000
I have like a loading spinner that's a perfectly sized

02:14:50.000 --> 02:14:52.000
skeleton, so I'm going to see

02:14:52.000 --> 02:14:54.000
Yeah, here it's not really ideal

02:14:54.000 --> 02:14:56.000
what we're doing where it like bops things

02:14:56.000 --> 02:14:58.000
down the page as soon as it comes in

02:14:58.000 --> 02:15:00.000
because you know, if that's like above the

02:15:00.000 --> 02:15:02.000
fold on your hero banner

02:15:02.000 --> 02:15:04.000
you probably want to have like a loading state

02:15:04.000 --> 02:15:06.000
that's matched up to it

02:15:06.000 --> 02:15:08.000
Yeah

02:15:08.000 --> 02:15:10.000
So I don't know how much

02:15:10.000 --> 02:15:12.000
time to have

02:15:12.000 --> 02:15:14.000
but how deep do we want to go

02:15:14.000 --> 02:15:16.000
because it would be fun to also

02:15:16.000 --> 02:15:18.000
like I added a bunch of hacks just to

02:15:18.000 --> 02:15:20.000
kind of show the idea

02:15:20.000 --> 02:15:22.000
but I think it might be fun to

02:15:22.000 --> 02:15:24.000
get rid of the weird

02:15:24.000 --> 02:15:26.000
PR problem component and instead look at

02:15:26.000 --> 02:15:28.000
what it would look like to

02:15:28.000 --> 02:15:30.000
refetch, like to do

02:15:30.000 --> 02:15:32.000
search on the server, I think that's like one

02:15:32.000 --> 02:15:34.000
That would be very cool

02:15:34.000 --> 02:15:36.000
Yeah, I mean I only

02:15:36.000 --> 02:15:38.000
booked two hours to like be conscious of your time

02:15:38.000 --> 02:15:40.000
but if you're good to keep going, I am

02:15:40.000 --> 02:15:42.000
as well

02:15:42.000 --> 02:15:44.000
I think I have some more time

02:15:44.000 --> 02:15:46.000
I don't have to run anywhere

02:15:46.000 --> 02:15:48.000
Okay

02:15:48.000 --> 02:15:50.000
So to do that, I'm wondering if

02:15:50.000 --> 02:15:52.000
we can, should we hop over

02:15:52.000 --> 02:15:54.000
to the Next.js example to try server search

02:15:54.000 --> 02:15:56.000
or are we still comfortable here?

02:15:56.000 --> 02:15:58.000
I think we can try to do it here

02:15:58.000 --> 02:16:00.000
like if it doesn't work, we can do

02:16:00.000 --> 02:16:02.000
you know, we can use Next.js but now I'm kind of like

02:16:02.000 --> 02:16:04.000
you seem to have a setup that kind of

02:16:04.000 --> 02:16:06.000
works and I like the

02:16:06.000 --> 02:16:08.000
you know, I like your

02:16:08.000 --> 02:16:10.000
I like your, it's

02:16:10.000 --> 02:16:12.000
no small effort because like none of it is documented

02:16:12.000 --> 02:16:14.000
so it's

02:16:14.000 --> 02:16:16.000
yeah, it is

02:16:16.000 --> 02:16:18.000
impressive, so I'd say

02:16:18.000 --> 02:16:20.000
let's keep going until your setup breaks

02:16:20.000 --> 02:16:22.000
I like it, it's gotten

02:16:22.000 --> 02:16:24.000
close, it's definitely gotten close

02:16:24.000 --> 02:16:26.000
but the duct tape's holding

02:16:26.000 --> 02:16:28.000
Yeah, I really like your development panel

02:16:28.000 --> 02:16:30.000
I think I'm a bit conflicted

02:16:30.000 --> 02:16:32.000
about it because I'm worried

02:16:32.000 --> 02:16:34.000
that like people on the stream would be like

02:16:34.000 --> 02:16:36.000
oh, this is so complicated, like

02:16:36.000 --> 02:16:38.000
this whole output, but it's really

02:16:38.000 --> 02:16:40.000
kind of like reading the network tab

02:16:40.000 --> 02:16:42.000
so the point is not, you know

02:16:42.000 --> 02:16:44.000
you wouldn't see this as a user

02:16:44.000 --> 02:16:46.000
but I do see the value, you know, as an

02:16:46.000 --> 02:16:48.000
instructional tool of here's how it actually

02:16:48.000 --> 02:16:50.000
works, because it's not that

02:16:50.000 --> 02:16:52.000
complicated if you think, you know

02:16:52.000 --> 02:16:54.000
about what it's

02:16:54.000 --> 02:16:56.000
trying to do

02:16:56.000 --> 02:16:58.000
Yeah, exactly. Yeah, the dev panel

02:16:58.000 --> 02:17:00.000
was really, I just intended it for

02:17:00.000 --> 02:17:02.000
like the first 30 minutes to show

02:17:02.000 --> 02:17:04.000
oh, here's the data streaming down and now

02:17:04.000 --> 02:17:06.000
it waits for suspense, but it's like

02:17:06.000 --> 02:17:08.000
it's also kind of useful to see like how much

02:17:08.000 --> 02:17:10.000
stuff is coming down, like when we

02:17:10.000 --> 02:17:12.000
pass down albums as a prop

02:17:12.000 --> 02:17:14.000
suddenly the response got huge

02:17:14.000 --> 02:17:16.000
because now it's passing down like all the songs

02:17:16.000 --> 02:17:18.000
and stuff that you don't care about, so

02:17:18.000 --> 02:17:20.000
it's useful to just see like volume and time

02:17:20.000 --> 02:17:22.000
not necessarily the details

02:17:22.000 --> 02:17:24.000
so maybe just like showing

02:17:24.000 --> 02:17:26.000
well, it's always dangerous to show kilobyte

02:17:26.000 --> 02:17:28.000
numbers because they're lies, but there's probably

02:17:28.000 --> 02:17:30.000
a way to do it

02:17:30.000 --> 02:17:32.000
Yeah, I'd love to see them both

02:17:32.000 --> 02:17:34.000
so let's

02:17:34.000 --> 02:17:36.000
let me just clean up, I want to

02:17:36.000 --> 02:17:38.000
get rid of this part that doesn't

02:17:38.000 --> 02:17:40.000
make sense because we just added it

02:17:40.000 --> 02:17:42.000
as a demo, so let me

02:17:42.000 --> 02:17:44.000
clean it back up to what

02:17:44.000 --> 02:17:46.000
we had that

02:17:46.000 --> 02:17:48.000
still made sense

02:17:48.000 --> 02:17:50.000
as an example, I'm gonna get

02:17:50.000 --> 02:17:52.000
rid of this children prop as well

02:17:54.000 --> 02:17:56.000
Yeah, so I think

02:17:56.000 --> 02:17:58.000
we should be back to our previous

02:17:58.000 --> 02:18:00.000
example

02:18:00.000 --> 02:18:02.000
and instant

02:18:02.000 --> 02:18:04.000
search

02:18:04.000 --> 02:18:06.000
and yeah, do you want to

02:18:06.000 --> 02:18:08.000
do you want to try to add the

02:18:08.000 --> 02:18:10.000
like the add in the

02:18:10.000 --> 02:18:12.000
so what do we want

02:18:12.000 --> 02:18:14.000
to do, right? Like we want to

02:18:16.000 --> 02:18:18.000
we want to refetch

02:18:18.000 --> 02:18:20.000
the server component tree

02:18:20.000 --> 02:18:22.000
when you type into the input

02:18:22.000 --> 02:18:24.000
right? Right

02:18:24.000 --> 02:18:26.000
so maybe we want to

02:18:26.000 --> 02:18:28.000
do like search on the server

02:18:28.000 --> 02:18:30.000
maybe we show like just the first

02:18:30.000 --> 02:18:32.000
like, I don't

02:18:32.000 --> 02:18:34.000
know, two results

02:18:34.000 --> 02:18:36.000
it doesn't seem to have like much data here

02:18:36.000 --> 02:18:38.000
anyway, right? But maybe we

02:18:38.000 --> 02:18:40.000
Yeah, there's only three albums

02:18:40.000 --> 02:18:42.000
Okay, yeah

02:18:42.000 --> 02:18:44.000
Yeah, so do you want to

02:18:44.000 --> 02:18:46.000
do you want to drive

02:18:46.000 --> 02:18:48.000
edit and we'll see

02:18:48.000 --> 02:18:50.000
where it becomes confusing

02:18:50.000 --> 02:18:52.000
I can try to do that

02:18:52.000 --> 02:18:54.000
and one thing before we go

02:18:54.000 --> 02:18:56.000
I'm actually going to

02:18:56.000 --> 02:18:58.000
make the dev panel just a little bit

02:18:58.000 --> 02:19:00.000
less tall in case

02:19:00.000 --> 02:19:02.000
we have issues with that

02:19:02.000 --> 02:19:04.000
I, oh man, I thought it would be an easy switch

02:19:04.000 --> 02:19:06.000
where did I put it

02:19:06.000 --> 02:19:08.000
yeah, okay

02:19:08.000 --> 02:19:10.000
72

02:19:10.000 --> 02:19:12.000
yeah, alright

02:19:12.000 --> 02:19:14.000
and it scrolls for the rest, perfect

02:19:14.000 --> 02:19:16.000
so in order to

02:19:16.000 --> 02:19:18.000
do something like that

02:19:18.000 --> 02:19:20.000
well the first thing

02:19:20.000 --> 02:19:22.000
I'm going to do, I guess

02:19:22.000 --> 02:19:24.000
and this feels like a coding interview right now

02:19:24.000 --> 02:19:26.000
I'm thinking, but

02:19:26.000 --> 02:19:28.000
yeah, we can remove that

02:19:28.000 --> 02:19:30.000
we're not going to use that anymore

02:19:30.000 --> 02:19:32.000
no use state

02:19:32.000 --> 02:19:34.000
the filter album function is fine

02:19:34.000 --> 02:19:36.000
to keep around

02:19:38.000 --> 02:19:40.000
and as you input things

02:19:40.000 --> 02:19:42.000
I assume we're going to

02:19:42.000 --> 02:19:44.000
well, if we put query parameters

02:19:44.000 --> 02:19:46.000
on the top of the page, it's going to refresh the

02:19:46.000 --> 02:19:48.000
browser on every

02:19:48.000 --> 02:19:50.000
input, but if we did like

02:19:50.000 --> 02:19:52.000
JSON requests, then we could avoid

02:19:52.000 --> 02:19:54.000
refreshing the page every time

02:19:54.000 --> 02:19:56.000
I don't know, there's two ways to do it

02:19:56.000 --> 02:19:58.000
so I think

02:19:58.000 --> 02:20:00.000
the, maybe you're kind of

02:20:00.000 --> 02:20:02.000
approaching it from the perspective of like

02:20:02.000 --> 02:20:04.000
how would I do this in a client-side application

02:20:04.000 --> 02:20:06.000
so you're like

02:20:06.000 --> 02:20:08.000
yeah, well I'm thinking form requests, I guess

02:20:08.000 --> 02:20:10.000
like literally just using form action

02:20:10.000 --> 02:20:12.000
and submitting it and using stuff

02:20:12.000 --> 02:20:14.000
but I assume you have

02:20:14.000 --> 02:20:16.000
something else in mind that isn't just a form action

02:20:16.000 --> 02:20:18.000
yeah, so if form action

02:20:18.000 --> 02:20:20.000
is usually used for stuff

02:20:20.000 --> 02:20:22.000
like post, I guess

02:20:22.000 --> 02:20:24.000
here we kind of just want to refresh

02:20:24.000 --> 02:20:26.000
the output

02:20:26.000 --> 02:20:28.000
so I think I would probably use get

02:20:28.000 --> 02:20:30.000
but also form action

02:20:30.000 --> 02:20:32.000
yes, like default browser

02:20:32.000 --> 02:20:34.000
handling of forms, like that would reload

02:20:34.000 --> 02:20:36.000
the page completely

02:20:36.000 --> 02:20:38.000
so it makes sense that that's not

02:20:38.000 --> 02:20:40.000
quite what we want

02:20:40.000 --> 02:20:42.000
I think the

02:20:44.000 --> 02:20:46.000
so let me maybe think a little bit

02:20:46.000 --> 02:20:48.000
about this as well

02:20:48.000 --> 02:20:50.000
so I think we still need

02:20:50.000 --> 02:20:52.000
I think we still need

02:20:52.000 --> 02:20:54.000
state, actually, because we want

02:20:54.000 --> 02:20:56.000
the

02:20:58.000 --> 02:21:00.000
well, not

02:21:00.000 --> 02:21:02.000
okay

02:21:08.000 --> 02:21:10.000
okay, so there's a question

02:21:10.000 --> 02:21:12.000
of like how deep

02:21:12.000 --> 02:21:14.000
do we want, because this is the stuff that

02:21:14.000 --> 02:21:16.000
Next.js or an RSE

02:21:16.000 --> 02:21:18.000
framework is supposed to handle

02:21:18.000 --> 02:21:20.000
so I think there's kind of two

02:21:20.000 --> 02:21:22.000
levels to this, like we can

02:21:22.000 --> 02:21:24.000
do this with

02:21:24.000 --> 02:21:26.000
like do we want to hook it up to the URL

02:21:26.000 --> 02:21:28.000
because one option is to

02:21:28.000 --> 02:21:30.000
hook it up to the URL

02:21:30.000 --> 02:21:32.000
and other options like not to

02:21:32.000 --> 02:21:34.000
I think

02:21:34.000 --> 02:21:36.000
probably not hooking it up to the URL

02:21:36.000 --> 02:21:38.000
might be a bit less code

02:21:38.000 --> 02:21:40.000
so maybe we

02:21:40.000 --> 02:21:42.000
sure, yeah

02:21:42.000 --> 02:21:44.000
maybe that's

02:21:44.000 --> 02:21:46.000
maybe that's what

02:21:46.000 --> 02:21:48.000
yeah, because I guess what I'm wondering

02:21:48.000 --> 02:21:50.000
is, because what we're trying to avoid is

02:21:50.000 --> 02:21:52.000
passing the whole album list as

02:21:52.000 --> 02:21:54.000
a prop and doing the filter logic on

02:21:54.000 --> 02:21:56.000
the client, so I assume

02:21:56.000 --> 02:21:58.000
that would also mean if we're not passing down the

02:21:58.000 --> 02:22:00.000
prop, where

02:22:00.000 --> 02:22:02.000
if we're doing anything client-side, it's just

02:22:02.000 --> 02:22:04.000
going to be the search box, but not the

02:22:04.000 --> 02:22:06.000
Yeah, exactly, yeah, so maybe let's

02:22:06.000 --> 02:22:08.000
do you want to like rearrange

02:22:08.000 --> 02:22:10.000
the code a little bit, like I think I would

02:22:10.000 --> 02:22:12.000
just move the

02:22:12.000 --> 02:22:14.000
yeah, so maybe we do like

02:22:14.000 --> 02:22:16.000
the search box component

02:22:16.000 --> 02:22:18.000
and we make that a client component

02:22:18.000 --> 02:22:20.000
and then we extract it to like a new

02:22:20.000 --> 02:22:22.000
file and then we keep this file

02:22:22.000 --> 02:22:24.000
as it is

02:22:24.000 --> 02:22:26.000
Yeah, let's go ahead and do that

02:22:26.000 --> 02:22:28.000
I'll make a search over here

02:22:30.000 --> 02:22:32.000
and pull that out

02:22:32.000 --> 02:22:34.000
and also, I'm actually just going to

02:22:34.000 --> 02:22:36.000
undo my way back here

02:22:38.000 --> 02:22:40.000
I won't save that because I think that

02:22:40.000 --> 02:22:42.000
breaks everything

02:22:42.000 --> 02:22:44.000
Okay, I'm in the search now

02:22:46.000 --> 02:22:48.000
and in here, I will

02:22:48.000 --> 02:22:50.000
do input

02:22:50.000 --> 02:22:52.000
Oh, it doesn't know about state yet

02:22:52.000 --> 02:22:54.000
so let me introduce that

02:23:02.000 --> 02:23:04.000
This is so much fun, I'm really enjoying it

02:23:06.000 --> 02:23:08.000
Oh, it remembered my styles

02:23:08.000 --> 02:23:10.000
It remembered my styles

02:23:10.000 --> 02:23:12.000
Oh, that's so good

02:23:12.000 --> 02:23:14.000
Okay

02:23:14.000 --> 02:23:16.000
I don't even understand, like, you're

02:23:16.000 --> 02:23:18.000
using Copilot or something

02:23:18.000 --> 02:23:20.000
because I've never used it, I don't even know how

02:23:20.000 --> 02:23:22.000
what it is

02:23:22.000 --> 02:23:24.000
So, I think Copilot

02:23:24.000 --> 02:23:26.000
and actually the Prime Engine had a good

02:23:26.000 --> 02:23:28.000
video on this, where like for

02:23:28.000 --> 02:23:30.000
migrations, it's really good

02:23:30.000 --> 02:23:32.000
at knowing context, of like

02:23:32.000 --> 02:23:34.000
it knows I typed a search box before

02:23:34.000 --> 02:23:36.000
and now it's picking up like, oh, you're probably

02:23:36.000 --> 02:23:38.000
extracting this to a separate component

02:23:38.000 --> 02:23:40.000
Let me pull in those styles that you wrote earlier

02:23:40.000 --> 02:23:42.000
So does it like

02:23:42.000 --> 02:23:44.000
stuff it into the prompt? Like, how

02:23:44.000 --> 02:23:46.000
does it keep track of the context?

02:23:46.000 --> 02:23:48.000
Well, it understands

02:23:48.000 --> 02:23:50.000
your code base, as far as I know

02:23:50.000 --> 02:23:52.000
and it is

02:23:52.000 --> 02:23:54.000
I don't know how much of it is local

02:23:54.000 --> 02:23:56.000
versus network requests

02:23:56.000 --> 02:23:58.000
but, yeah

02:23:58.000 --> 02:24:00.000
We should have a dev panel to see

02:24:00.000 --> 02:24:02.000
what it sends and what it receives

02:24:02.000 --> 02:24:04.000
That would be nice to know

02:24:04.000 --> 02:24:06.000
because like, yeah

02:24:06.000 --> 02:24:08.000
if it's sending your code base over to

02:24:08.000 --> 02:24:10.000
Wired, that is a massive problem

02:24:10.000 --> 02:24:12.000
I don't know what it

02:24:12.000 --> 02:24:14.000
does. That's the scary part

02:24:14.000 --> 02:24:16.000
I don't know what it says

02:24:16.000 --> 02:24:18.000
It's fine. Yeah, so let's

02:24:18.000 --> 02:24:20.000
Okay, let's go. Let's get this working

02:24:20.000 --> 02:24:22.000
Yep

02:24:22.000 --> 02:24:24.000
And everyone is searching for what my

02:24:24.000 --> 02:24:26.000
theme and font are. Just calm down

02:24:26.000 --> 02:24:28.000
I'll make extensions someday, people

02:24:28.000 --> 02:24:30.000
But I use Monolisa font and the

02:24:30.000 --> 02:24:32.000
Houston theme, made by Astro

02:24:32.000 --> 02:24:34.000
and by using it, you get access

02:24:34.000 --> 02:24:36.000
to this beautiful little Houston floating guy

02:24:36.000 --> 02:24:38.000
in your editor, anytime you want it

02:24:38.000 --> 02:24:40.000
So, you know, go ahead and use that

02:24:40.000 --> 02:24:42.000
Dan, you actually can't see that, sadly

02:24:42.000 --> 02:24:44.000
No, no, I see the default theme

02:24:44.000 --> 02:24:46.000
Yeah, dang

02:24:46.000 --> 02:24:48.000
Yeah, we have this little

02:24:48.000 --> 02:24:50.000
Houston animation

02:24:50.000 --> 02:24:52.000
where it's just a Houston panel, if you want to

02:24:52.000 --> 02:24:54.000
just have him watch what you're doing

02:24:54.000 --> 02:24:56.000
and he gets progressively more sad

02:24:56.000 --> 02:24:58.000
the more syntax errors you have

02:24:58.000 --> 02:25:00.000
Okay. Yeah, I have no idea

02:25:00.000 --> 02:25:02.000
what you're talking about, but

02:25:02.000 --> 02:25:04.000
Don't worry about it

02:25:04.000 --> 02:25:06.000
I can send a screenshot later

02:25:06.000 --> 02:25:08.000
Okay, okay

02:25:08.000 --> 02:25:10.000
But yeah, we have our search box here

02:25:10.000 --> 02:25:12.000
and

02:25:12.000 --> 02:25:14.000
well, we can render

02:25:14.000 --> 02:25:16.000
that inside of our root server, I guess

02:25:16.000 --> 02:25:18.000
We can hop all the way back

02:25:18.000 --> 02:25:20.000
Well, why though?

02:25:20.000 --> 02:25:22.000
Can't we just render it in

02:25:22.000 --> 02:25:24.000
the component

02:25:24.000 --> 02:25:26.000
you extracted it from?

02:25:26.000 --> 02:25:28.000
That's a good point

02:25:28.000 --> 02:25:30.000
You already have it here

02:25:30.000 --> 02:25:32.000
And I guess our filter code

02:25:32.000 --> 02:25:34.000
is going to go over there, too

02:25:34.000 --> 02:25:36.000
No, I mean, I don't think you have

02:25:36.000 --> 02:25:38.000
to change anything

02:25:38.000 --> 02:25:40.000
Oh wait, no, it doesn't go over there, that's the whole point

02:25:40.000 --> 02:25:42.000
Yeah, yeah

02:25:42.000 --> 02:25:44.000
Here is where it goes in

02:25:44.000 --> 02:25:46.000
Yeah

02:25:48.000 --> 02:25:50.000
Yeah, so the problem

02:25:50.000 --> 02:25:52.000
right now is that you don't really have

02:25:52.000 --> 02:25:54.000
Yeah, you don't really have filtered albums

02:25:54.000 --> 02:25:56.000
yet, but we'll add it back

02:25:56.000 --> 02:25:58.000
later

02:25:58.000 --> 02:26:00.000
So I think for

02:26:02.000 --> 02:26:04.000
I would write it like this

02:26:08.000 --> 02:26:10.000
And then the thing you want to

02:26:10.000 --> 02:26:12.000
render is this

02:26:12.000 --> 02:26:14.000
Let's just verify that it still works

02:26:16.000 --> 02:26:18.000
Yeah, it is working

02:26:20.000 --> 02:26:22.000
But then typing into the input

02:26:22.000 --> 02:26:24.000
doesn't really do anything, right?

02:26:24.000 --> 02:26:26.000
Right

02:26:26.000 --> 02:26:28.000
So I think maybe

02:26:28.000 --> 02:26:30.000
again, there's two ways we could go

02:26:30.000 --> 02:26:32.000
about this, either

02:26:32.000 --> 02:26:34.000
with the URL or

02:26:34.000 --> 02:26:36.000
without

02:26:36.000 --> 02:26:38.000
I think with the URL probably makes

02:26:38.000 --> 02:26:40.000
more sense, because if we're

02:26:40.000 --> 02:26:42.000
going

02:26:42.000 --> 02:26:44.000
to show what frameworks do, we might as well

02:26:44.000 --> 02:26:46.000
just try to do it

02:26:46.000 --> 02:26:48.000
ourselves

02:26:48.000 --> 02:26:50.000
So maybe let's make it so that when you type

02:26:50.000 --> 02:26:52.000
into the input

02:26:52.000 --> 02:26:54.000
let's make the URL update

02:26:54.000 --> 02:26:56.000
using client-side

02:26:56.000 --> 02:26:58.000
like history.pushState

02:27:00.000 --> 02:27:02.000
We could use the history package

02:27:02.000 --> 02:27:04.000
I think it's a bit more

02:27:06.000 --> 02:27:08.000
But we could probably just use the browser API as well

02:27:08.000 --> 02:27:10.000
Let's start with the browser API and then see

02:27:10.000 --> 02:27:12.000
if we need anything more

02:27:12.000 --> 02:27:14.000
But let's try to make it so that when you type

02:27:14.000 --> 02:27:16.000
into the input, we also update

02:27:16.000 --> 02:27:18.000
the URL

02:27:18.000 --> 02:27:20.000
Gotcha

02:27:20.000 --> 02:27:22.000
Yeah, for something like that

02:27:22.000 --> 02:27:24.000
On

02:27:24.000 --> 02:27:26.000
change, sure

02:27:26.000 --> 02:27:28.000
Basically that

02:27:28.000 --> 02:27:30.000
But then we want to also

02:27:30.000 --> 02:27:32.000
I have to think about this

02:27:32.000 --> 02:27:34.000
So is it window.location

02:27:34.000 --> 02:27:36.000
pushState

02:27:36.000 --> 02:27:38.000
It's been a while since I've used this API

02:27:38.000 --> 02:27:40.000
I think it's history.pushState

02:27:40.000 --> 02:27:42.000
Yeah, I think it is

02:27:42.000 --> 02:27:44.000
history.

02:27:44.000 --> 02:27:46.000
Yep, yep, yep

02:27:46.000 --> 02:27:48.000
pushState

02:27:48.000 --> 02:27:50.000
I think

02:27:50.000 --> 02:27:52.000
So there's like pushState and a replaceState

02:27:52.000 --> 02:27:54.000
I don't know if the search bar

02:27:54.000 --> 02:27:56.000
is like

02:27:56.000 --> 02:27:58.000
Yeah, that will

02:27:58.000 --> 02:28:00.000
We don't want history

02:28:00.000 --> 02:28:02.000
as we type

02:28:02.000 --> 02:28:04.000
So maybe let's check

02:28:04.000 --> 02:28:06.000
if this works

02:28:06.000 --> 02:28:08.000
I don't actually see your address bar

02:28:08.000 --> 02:28:10.000
so I don't know if it works, you'll have to tell me

02:28:10.000 --> 02:28:12.000
It's really tiny at the top

02:28:12.000 --> 02:28:14.000
but it's up there

02:28:14.000 --> 02:28:16.000
When you bump the font size

02:28:16.000 --> 02:28:18.000
it doesn't bump the size of that, sadly

02:28:18.000 --> 02:28:20.000
I don't see it because

02:28:20.000 --> 02:28:22.000
it doesn't share

02:28:22.000 --> 02:28:24.000
Oh, it doesn't

02:28:24.000 --> 02:28:26.000
That's so silly

02:28:26.000 --> 02:28:28.000
Well, it is working

02:28:28.000 --> 02:28:30.000
I can tell you that much

02:28:30.000 --> 02:28:32.000
It is working

02:28:32.000 --> 02:28:34.000
Just putting up search equals

02:28:34.000 --> 02:28:36.000
Okay, I'll have to believe you on this

02:28:36.000 --> 02:28:38.000
So

02:28:38.000 --> 02:28:40.000
Okay, so maybe let's

02:28:40.000 --> 02:28:42.000
I think I might

02:28:42.000 --> 02:28:44.000
have to drive this a little bit

02:28:44.000 --> 02:28:46.000
if you don't mind

02:28:46.000 --> 02:28:48.000
I will need your help

02:28:48.000 --> 02:28:50.000
as well, I think, because I

02:28:50.000 --> 02:28:52.000
can only do the parts that I know about

02:28:52.000 --> 02:28:54.000
So I'm gonna

02:28:54.000 --> 02:28:56.000
go to the thing

02:28:56.000 --> 02:28:58.000
called root.client.js

02:28:58.000 --> 02:29:00.000
and it's kind of interesting

02:29:00.000 --> 02:29:02.000
You do have

02:29:02.000 --> 02:29:04.000
kind of the server entry point and the client

02:29:04.000 --> 02:29:06.000
entry point

02:29:06.000 --> 02:29:08.000
and it's a bit confusing because conceptually

02:29:08.000 --> 02:29:10.000
it's the server entry point that's

02:29:10.000 --> 02:29:12.000
the real root of your app

02:29:12.000 --> 02:29:14.000
It's the real root

02:29:14.000 --> 02:29:16.000
where things start conceptually

02:29:16.000 --> 02:29:18.000
but then

02:29:18.000 --> 02:29:20.000
in reality, you do need this bootstrapping

02:29:20.000 --> 02:29:22.000
thing that makes

02:29:22.000 --> 02:29:24.000
this real root appear somewhere on the page

02:29:24.000 --> 02:29:26.000
Yeah, what I really want to call it is

02:29:26.000 --> 02:29:28.000
bootstrapping and index

02:29:28.000 --> 02:29:30.000
Yeah

02:29:30.000 --> 02:29:32.000
I think that's what it is

02:29:32.000 --> 02:29:34.000
It's also kind of like, if you think about

02:29:34.000 --> 02:29:36.000
how would it work with nested routing

02:29:36.000 --> 02:29:38.000
you would also

02:29:38.000 --> 02:29:40.000
have the server

02:29:40.000 --> 02:29:42.000
be the root

02:29:42.000 --> 02:29:44.000
It would also be possible to start

02:29:44.000 --> 02:29:46.000
from the middle of

02:29:46.000 --> 02:29:48.000
some nested route and treat that

02:29:48.000 --> 02:29:50.000
as a root, and that's what happens with

02:29:50.000 --> 02:29:52.000
navigations in NextAppRouter

02:29:52.000 --> 02:29:54.000
and then this thing

02:29:54.000 --> 02:29:56.000
that you have here, this bootstrapping

02:29:56.000 --> 02:29:58.000
thing, that would turn

02:29:58.000 --> 02:30:00.000
into the client-side

02:30:00.000 --> 02:30:02.000
routing part

02:30:02.000 --> 02:30:04.000
that bootstraps

02:30:04.000 --> 02:30:06.000
the top-level thing, but also

02:30:06.000 --> 02:30:08.000
bootstraps these holes

02:30:08.000 --> 02:30:10.000
and manages

02:30:10.000 --> 02:30:12.000
how to slot in the server responses

02:30:12.000 --> 02:30:14.000
into them

02:30:14.000 --> 02:30:16.000
This is hidden in a framework, that's what

02:30:16.000 --> 02:30:18.000
Next.js does, for example

02:30:18.000 --> 02:30:20.000
but we're going to do a simple

02:30:20.000 --> 02:30:22.000
version of that where it only bootstraps

02:30:22.000 --> 02:30:24.000
them at the top, but I'm just saying

02:30:24.000 --> 02:30:26.000
if you were building a nested router

02:30:26.000 --> 02:30:28.000
you would have to

02:30:28.000 --> 02:30:30.000
have a very similar thing

02:30:30.000 --> 02:30:32.000
managing it somewhere

02:30:32.000 --> 02:30:34.000
around your

02:30:34.000 --> 02:30:36.000
route holes

02:30:36.000 --> 02:30:38.000
to replace them

02:30:38.000 --> 02:30:40.000
if necessary

02:30:40.000 --> 02:30:42.000
But yeah, so

02:30:42.000 --> 02:30:44.000
you have this thing where here

02:30:44.000 --> 02:30:46.000
so these are internal APIs

02:30:46.000 --> 02:30:48.000
this file is the

02:30:48.000 --> 02:30:50.000
kind of stuff that, as a product developer, you

02:30:50.000 --> 02:30:52.000
wouldn't touch or do any of

02:30:52.000 --> 02:30:54.000
that, and I also

02:30:54.000 --> 02:30:56.000
want to make clear that

02:30:56.000 --> 02:30:58.000
all of this stuff below is

02:30:58.000 --> 02:31:00.000
for debugging, because it's

02:31:00.000 --> 02:31:02.000
your dev panel component

02:31:02.000 --> 02:31:04.000
so it actually has nothing to do with React

02:31:04.000 --> 02:31:06.000
but then

02:31:06.000 --> 02:31:08.000
as a framework developer

02:31:08.000 --> 02:31:10.000
this part is kind of the bootstrap

02:31:10.000 --> 02:31:12.000
where you're like

02:31:12.000 --> 02:31:14.000
okay, here's where

02:31:14.000 --> 02:31:16.000
I'm going to move this here because it's unrelated

02:31:16.000 --> 02:31:18.000
Yep

02:31:18.000 --> 02:31:20.000
Like

02:31:20.000 --> 02:31:22.000
Honestly, all of this is unrelated

02:31:22.000 --> 02:31:24.000
This was me trying to

02:31:24.000 --> 02:31:26.000
I never finished it

02:31:26.000 --> 02:31:28.000
Wait, show me

02:31:28.000 --> 02:31:30.000
what did you delete?

02:31:30.000 --> 02:31:32.000
Yeah, this was some code I was writing

02:31:32.000 --> 02:31:34.000
to allow multiple routes

02:31:34.000 --> 02:31:36.000
and all it was really doing is getting

02:31:36.000 --> 02:31:38.000
the current window location and fetching the

02:31:38.000 --> 02:31:40.000
file that corresponds to that location

02:31:40.000 --> 02:31:42.000
Okay, yeah, no, we don't need

02:31:42.000 --> 02:31:44.000
that, but we are going to need something

02:31:44.000 --> 02:31:46.000
similar, but let's

02:31:46.000 --> 02:31:48.000
delete this for now, it's fine, let's delete this

02:31:50.000 --> 02:31:52.000
So what I'm going to do is

02:31:52.000 --> 02:31:54.000
what it currently does

02:31:54.000 --> 02:31:56.000
I don't love this, can I just rename this

02:31:56.000 --> 02:31:58.000
to slash

02:31:58.000 --> 02:32:00.000
Yeah

02:32:00.000 --> 02:32:02.000
I'll see what source code needs to be fixed to make that work

02:32:02.000 --> 02:32:04.000
but yeah, that's what it is

02:32:04.000 --> 02:32:06.000
I think it's in the

02:32:06.000 --> 02:32:08.000
handler, right?

02:32:08.000 --> 02:32:10.000
Yeah, I think it might just be this

02:32:10.000 --> 02:32:12.000
So maybe let's change this

02:32:12.000 --> 02:32:14.000
to rsc, let's verify that it

02:32:14.000 --> 02:32:16.000
still loads

02:32:16.000 --> 02:32:18.000
I mean, obviously it doesn't have to be called that way

02:32:18.000 --> 02:32:20.000
I just kind of want to stress that

02:32:20.000 --> 02:32:22.000
Okay, yeah, so there's just one

02:32:22.000 --> 02:32:24.000
endpoint, it's not like multiple files

02:32:24.000 --> 02:32:26.000
or anything, it's just one endpoint

02:32:26.000 --> 02:32:28.000
And so I'm going to make a react

02:32:28.000 --> 02:32:30.000
component that's like

02:32:30.000 --> 02:32:32.000
I don't know, I'm going to call it

02:32:32.000 --> 02:32:34.000
like boots

02:32:34.000 --> 02:32:36.000
I don't know, client

02:32:36.000 --> 02:32:38.000
root or something like this

02:32:38.000 --> 02:32:40.000
which is just this bootstrapping

02:32:40.000 --> 02:32:42.000
thing

02:32:42.000 --> 02:32:44.000
And currently

02:32:46.000 --> 02:32:48.000
Yeah, I'm going to move

02:32:48.000 --> 02:32:50.000
I'm going to move this a little bit, so I'll make it

02:32:50.000 --> 02:32:52.000
render restrict

02:32:52.000 --> 02:32:54.000
mode, and I'm just going to do this

02:32:54.000 --> 02:32:56.000
client root thing here

02:32:56.000 --> 02:32:58.000
Okay

02:32:58.000 --> 02:33:00.000
Our

02:33:00.000 --> 02:33:02.000
component

02:33:02.000 --> 02:33:04.000
And then I'm going to

02:33:04.000 --> 02:33:06.000
So again, this

02:33:06.000 --> 02:33:08.000
is like create from fetch

02:33:08.000 --> 02:33:10.000
This is like an internal API

02:33:10.000 --> 02:33:12.000
for framework developers

02:33:12.000 --> 02:33:14.000
This is the protocol reader

02:33:14.000 --> 02:33:16.000
So we have a protocol writer

02:33:16.000 --> 02:33:18.000
that runs on the server, so if you go

02:33:18.000 --> 02:33:20.000
to

02:33:20.000 --> 02:33:22.000
the

02:33:22.000 --> 02:33:24.000
Yeah, so if you

02:33:24.000 --> 02:33:26.000
go to the handler, this is where

02:33:26.000 --> 02:33:28.000
you wrote this logic

02:33:28.000 --> 02:33:30.000
for the actual handler

02:33:30.000 --> 02:33:32.000
of this endpoint that runs

02:33:32.000 --> 02:33:34.000
server components, you'll see

02:33:34.000 --> 02:33:36.000
you have

02:33:36.000 --> 02:33:38.000
So you call this react-server-dom

02:33:38.000 --> 02:33:40.000
which is maybe a bit

02:33:40.000 --> 02:33:42.000
confusing because people might think it's

02:33:42.000 --> 02:33:44.000
like react-dom-server

02:33:44.000 --> 02:33:46.000
I didn't know what to call it

02:33:46.000 --> 02:33:48.000
Yeah, I don't know either

02:33:48.000 --> 02:33:50.000
React-server-dom-webpack

02:33:50.000 --> 02:33:52.000
And I thought, is that really what it is?

02:33:52.000 --> 02:33:54.000
But that's the package

02:33:54.000 --> 02:33:56.000
I don't think we actually figured out

02:33:56.000 --> 02:33:58.000
how to name this thing

02:33:58.000 --> 02:34:00.000
This is not

02:34:00.000 --> 02:34:02.000
SSR, this is not

02:34:02.000 --> 02:34:04.000
the react-dom-server

02:34:04.000 --> 02:34:06.000
that emits HTML

02:34:06.000 --> 02:34:08.000
This is the thing that emits

02:34:08.000 --> 02:34:10.000
This is the protocol writer

02:34:10.000 --> 02:34:12.000
This is the thing that executes

02:34:12.000 --> 02:34:14.000
your server components

02:34:14.000 --> 02:34:16.000
and emits this protocol

02:34:16.000 --> 02:34:18.000
this streaming thing that you show

02:34:18.000 --> 02:34:20.000
in the dev panel

02:34:20.000 --> 02:34:22.000
And so the

02:34:22.000 --> 02:34:24.000
it comes from this package

02:34:24.000 --> 02:34:26.000
I don't actually think you need

02:34:26.000 --> 02:34:28.000
that browser here, I think this should just work

02:34:28.000 --> 02:34:30.000
Can you check if that

02:34:30.000 --> 02:34:32.000
Oh, I guess I broke some other

02:34:32.000 --> 02:34:34.000
I think it'll try to import

02:34:34.000 --> 02:34:36.000
the node version, and that uses

02:34:36.000 --> 02:34:38.000
pipes, and I was like, I think I can do it simpler

02:34:38.000 --> 02:34:40.000
So I did it this way

02:34:40.000 --> 02:34:42.000
Okay, cool

02:34:42.000 --> 02:34:44.000
Alright, and then

02:34:46.000 --> 02:34:48.000
Yeah, if I go to the correspondent

02:34:48.000 --> 02:34:50.000
this is the reader

02:34:50.000 --> 02:34:52.000
This is the thing that

02:34:52.000 --> 02:34:54.000
reads the client protocol

02:34:54.000 --> 02:34:56.000
and really, all it does

02:34:56.000 --> 02:34:58.000
is it turns it into

02:34:58.000 --> 02:35:00.000
JSX, essentially

02:35:00.000 --> 02:35:02.000
So it converts the

02:35:02.000 --> 02:35:04.000
it streams the output

02:35:04.000 --> 02:35:06.000
from the server, and it converts it

02:35:06.000 --> 02:35:08.000
to a tree of

02:35:08.000 --> 02:35:10.000
lazy components that get

02:35:10.000 --> 02:35:12.000
filled in later

02:35:12.000 --> 02:35:14.000
And this is why

02:35:14.000 --> 02:35:16.000
it's kind of funny, React

02:35:16.000 --> 02:35:18.000
the React library

02:35:18.000 --> 02:35:20.000
doesn't really have any code to support

02:35:20.000 --> 02:35:22.000
server components

02:35:22.000 --> 02:35:24.000
because it's

02:35:24.000 --> 02:35:26.000
like, this ability to

02:35:26.000 --> 02:35:28.000
render a tree from the server

02:35:28.000 --> 02:35:30.000
it relies on exactly the same

02:35:30.000 --> 02:35:32.000
mechanism that, for example, React.lazy

02:35:32.000 --> 02:35:34.000
uses, which is just

02:35:34.000 --> 02:35:36.000
this built-in support in React

02:35:36.000 --> 02:35:38.000
to have a tree where some parts

02:35:38.000 --> 02:35:40.000
are not ready, and then suspense will catch

02:35:40.000 --> 02:35:42.000
them, and so this is the thing that

02:35:42.000 --> 02:35:44.000
translates from the protocol

02:35:44.000 --> 02:35:46.000
to a lazy React tree, and then

02:35:46.000 --> 02:35:48.000
React knows how to deal with lazy trees

02:35:50.000 --> 02:35:52.000
And so the

02:35:52.000 --> 02:35:54.000
we could maybe

02:35:54.000 --> 02:35:56.000
call this stream

02:35:56.000 --> 02:35:58.000
create from fetch, and then you have

02:35:58.000 --> 02:36:00.000
fetch from this

02:36:00.000 --> 02:36:02.000
RSC endpoint, I think that's how it

02:36:02.000 --> 02:36:04.000
worked, and

02:36:04.000 --> 02:36:06.000
I guess we can just say this is

02:36:06.000 --> 02:36:08.000
just JSX

02:36:08.000 --> 02:36:10.000
maybe, well, lazy JSX

02:36:10.000 --> 02:36:12.000
I don't know. Yeah, lazy JSX

02:36:12.000 --> 02:36:14.000
Yeah, the best

02:36:14.000 --> 02:36:16.000
way is like, that's the interpreter

02:36:16.000 --> 02:36:18.000
that's going to take these instructions and

02:36:18.000 --> 02:36:20.000
turn them into JSX, and that

02:36:20.000 --> 02:36:22.000
is actually what we get

02:36:22.000 --> 02:36:24.000
Yeah, so maybe let's see if

02:36:24.000 --> 02:36:26.000
this works so far, because I'm going to

02:36:26.000 --> 02:36:28.000
add a few things

02:36:28.000 --> 02:36:30.000
Okay, can I

02:36:30.000 --> 02:36:32.000
refresh it?

02:36:32.000 --> 02:36:34.000
Yeah, it's working

02:36:34.000 --> 02:36:36.000
Awesome, and so the thing that we want

02:36:36.000 --> 02:36:38.000
to be able to do now is

02:36:38.000 --> 02:36:40.000
before we deal with client-side

02:36:40.000 --> 02:36:42.000
navigations and stuff, I think

02:36:42.000 --> 02:36:44.000
what we want to do is just

02:36:44.000 --> 02:36:46.000
to be able to pass

02:36:46.000 --> 02:36:48.000
something during the initial load to the

02:36:48.000 --> 02:36:50.000
server, right? That's the easiest part

02:36:50.000 --> 02:36:52.000
It's like, if you have some

02:36:52.000 --> 02:36:54.000
query in the query string and you

02:36:54.000 --> 02:36:56.000
refresh the page, at least we should be

02:36:56.000 --> 02:36:58.000
able to ask the server to

02:36:58.000 --> 02:37:00.000
filter for that

02:37:00.000 --> 02:37:02.000
It's like with manual refreshes for now

02:37:02.000 --> 02:37:04.000
and then we'll fix that

02:37:04.000 --> 02:37:06.000
So I think what we want to do is

02:37:06.000 --> 02:37:08.000
we can look at

02:37:08.000 --> 02:37:10.000
I don't actually remember

02:37:10.000 --> 02:37:12.000
how to do it, but

02:37:14.000 --> 02:37:16.000
Okay, so here's what I want

02:37:16.000 --> 02:37:18.000
I want to

02:37:20.000 --> 02:37:22.000
search equals

02:37:22.000 --> 02:37:24.000
Okay, so

02:37:24.000 --> 02:37:26.000
let's actually start there

02:37:26.000 --> 02:37:28.000
I want to search for

02:37:28.000 --> 02:37:30.000
what is it?

02:37:30.000 --> 02:37:32.000
Yeah, let's say

02:37:32.000 --> 02:37:34.000
fame, that's what I'm searching for

02:37:34.000 --> 02:37:36.000
This is my search query

02:37:36.000 --> 02:37:38.000
So I'm going to look for the album

02:37:38.000 --> 02:37:40.000
of fame

02:37:40.000 --> 02:37:42.000
And then I will go to

02:37:42.000 --> 02:37:44.000
the server handler

02:37:44.000 --> 02:37:46.000
So now we need to plumb that information

02:37:46.000 --> 02:37:48.000
into your root server

02:37:48.000 --> 02:37:50.000
component so that it knows

02:37:50.000 --> 02:37:52.000
what the search

02:37:52.000 --> 02:37:54.000
parameter is

02:37:54.000 --> 02:37:56.000
And so I'll go to the

02:37:56.000 --> 02:37:58.000
your server

02:37:58.000 --> 02:38:00.000
handler. Again, this is the framework

02:38:00.000 --> 02:38:02.000
part, like a framework

02:38:02.000 --> 02:38:04.000
Yeah

02:38:04.000 --> 02:38:06.000
And they have path name

02:38:06.000 --> 02:38:08.000
So that we pass the query

02:38:08.000 --> 02:38:10.000
Like we pass

02:38:10.000 --> 02:38:12.000
all the query arguments as

02:38:12.000 --> 02:38:14.000
props to

02:38:14.000 --> 02:38:16.000
Yeah, it should be right up here

02:38:16.000 --> 02:38:18.000
So it's just a web-friendly URL

02:38:18.000 --> 02:38:20.000
So we can just do search params

02:38:20.000 --> 02:38:22.000
and grab that

02:38:24.000 --> 02:38:26.000
I'm so bad at these APIs

02:38:26.000 --> 02:38:28.000
I'm like, I don't remember

02:38:28.000 --> 02:38:30.000
I think it should be like has and get

02:38:30.000 --> 02:38:32.000
in order to access

02:38:32.000 --> 02:38:34.000
what we're looking for

02:38:34.000 --> 02:38:36.000
Yeah, it can be turned into

02:38:36.000 --> 02:38:38.000
just plain JSONs so that we can

02:38:38.000 --> 02:38:40.000
spread it as props to the

02:38:40.000 --> 02:38:42.000
Docker component

02:38:42.000 --> 02:38:44.000
I think there's a way to do it

02:38:44.000 --> 02:38:46.000
if you do like

02:38:48.000 --> 02:38:50.000
Ah, there's a simple way

02:38:50.000 --> 02:38:52.000
and I can't remember what it is

02:38:52.000 --> 02:38:54.000
search params

02:38:54.000 --> 02:38:56.000
JSON

02:38:56.000 --> 02:38:58.000
equals, yes! That's it

02:38:58.000 --> 02:39:00.000
Yeah, you convert it to an object

02:39:00.000 --> 02:39:02.000
and then JSON stringify it, thanks

02:39:02.000 --> 02:39:04.000
Well, okay, then you would have to parse it again

02:39:04.000 --> 02:39:06.000
But

02:39:06.000 --> 02:39:08.000
Hang on

02:39:08.000 --> 02:39:10.000
No, just this

02:39:10.000 --> 02:39:12.000
Yeah, just this

02:39:14.000 --> 02:39:16.000
Okay, is that

02:39:16.000 --> 02:39:18.000
Okay, we'll see

02:39:18.000 --> 02:39:20.000
Let's see if it works

02:39:20.000 --> 02:39:22.000
So now we want to

02:39:22.000 --> 02:39:24.000
Yeah, and now we want to

02:39:24.000 --> 02:39:26.000
This is your app here

02:39:26.000 --> 02:39:28.000
This is the rooted-server.js expert

02:39:28.000 --> 02:39:30.000
So this is your

02:39:30.000 --> 02:39:32.000
It's actually

02:39:32.000 --> 02:39:34.000
Oh, okay, you're calling it

02:39:34.000 --> 02:39:36.000
I think that's a bit wrong

02:39:36.000 --> 02:39:38.000
I mean, it ends up working

02:39:38.000 --> 02:39:40.000
Yeah, I couldn't get it working without calling it

02:39:40.000 --> 02:39:42.000
I don't know why

02:39:42.000 --> 02:39:44.000
Like, I think this is supposed to work

02:39:44.000 --> 02:39:46.000
So I think you're supposed to

02:39:46.000 --> 02:39:48.000
I mean, you're like server root

02:39:48.000 --> 02:39:50.000
That's how you call it, right?

02:39:50.000 --> 02:39:52.000
That's just the expert of this thing

02:39:52.000 --> 02:39:54.000
And I think you're supposed to be

02:39:54.000 --> 02:39:56.000
Can I use just the expert?

02:39:56.000 --> 02:39:58.000
Yeah, no

02:39:58.000 --> 02:40:00.000
I don't know how to process on this thing

02:40:00.000 --> 02:40:02.000
You could use react-create-element, right?

02:40:02.000 --> 02:40:04.000
Yeah, yeah, that's what I'm going to do

02:40:04.000 --> 02:40:06.000
So I'm going to do like

02:40:06.000 --> 02:40:08.000
convert createElement

02:40:08.000 --> 02:40:10.000
from react

02:40:10.000 --> 02:40:12.000
And I'm going to do

02:40:12.000 --> 02:40:14.000
createElement for server root

02:40:14.000 --> 02:40:16.000
And I'm going to parse it

02:40:16.000 --> 02:40:18.000
Well, I'm just going to parse

02:40:18.000 --> 02:40:20.000
the search

02:40:20.000 --> 02:40:22.000
params object as props

02:40:22.000 --> 02:40:24.000
And then in the server root

02:40:24.000 --> 02:40:26.000
I'm going to try to

02:40:26.000 --> 02:40:28.000
read the

02:40:28.000 --> 02:40:30.000
What did I call it?

02:40:30.000 --> 02:40:32.000
I call it search

02:40:32.000 --> 02:40:34.000
Which has nothing to do with search API

02:40:34.000 --> 02:40:36.000
It's just like our variable name

02:40:36.000 --> 02:40:38.000
And I'll say

02:40:38.000 --> 02:40:40.000
we are

02:40:40.000 --> 02:40:42.000
the bytes of keeping certain things

02:40:42.000 --> 02:40:44.000
in the wrong place

02:40:44.000 --> 02:40:46.000
I'm looking for search

02:40:48.000 --> 02:40:50.000
So let's see if that works

02:40:50.000 --> 02:40:52.000
Try to load it with like

02:40:52.000 --> 02:40:54.000
search

02:40:54.000 --> 02:40:56.000
Construct your search of undefined

02:40:56.000 --> 02:40:58.000
Okay, so the props aren't being passed

02:40:58.000 --> 02:41:00.000
but I think we have to restart

02:41:00.000 --> 02:41:02.000
Because it's not going to

02:41:02.000 --> 02:41:04.000
Okay!

02:41:04.000 --> 02:41:06.000
Oh my god! It's working

02:41:06.000 --> 02:41:08.000
Okay, nice, nice

02:41:08.000 --> 02:41:10.000
Whoa! Oh, that's cool

02:41:10.000 --> 02:41:12.000
Okay, so now your task

02:41:12.000 --> 02:41:14.000
is to

02:41:14.000 --> 02:41:16.000
I want you to do the

02:41:16.000 --> 02:41:18.000
to take search into account

02:41:18.000 --> 02:41:20.000
and do the filtering, like add the filtering back in

02:41:20.000 --> 02:41:22.000
Mm-hmm

02:41:22.000 --> 02:41:24.000
Yeah, that's interesting

02:41:24.000 --> 02:41:26.000
Because I would want to do it from here, right?

02:41:26.000 --> 02:41:28.000
Because I need to trigger a new

02:41:28.000 --> 02:41:30.000
create from fetch

02:41:30.000 --> 02:41:32.000
Well, let's not think about this yet

02:41:32.000 --> 02:41:34.000
So for now I just want to do it for the first render

02:41:34.000 --> 02:41:36.000
So it's not going to respond

02:41:36.000 --> 02:41:38.000
to input, but let's just make it

02:41:38.000 --> 02:41:40.000
respect the initial URL

02:41:40.000 --> 02:41:42.000
Mm, okay

02:41:42.000 --> 02:41:44.000
So for now

02:41:44.000 --> 02:41:46.000
you just need to plumb down

02:41:46.000 --> 02:41:48.000
We got it in the root components

02:41:48.000 --> 02:41:50.000
Connect the logic so it actually does the search

02:41:50.000 --> 02:41:52.000
on the server

02:41:52.000 --> 02:41:54.000
Okay, so we would need

02:41:54.000 --> 02:41:56.000
to pass this search down

02:41:56.000 --> 02:41:58.000
Yeah

02:41:58.000 --> 02:42:00.000
I mean, ideally a framework would make

02:42:00.000 --> 02:42:02.000
So the way this works in Next

02:42:02.000 --> 02:42:04.000
is they make it available as

02:42:04.000 --> 02:42:06.000
import

02:42:06.000 --> 02:42:08.000
I don't know, import search

02:42:08.000 --> 02:42:10.000
part

02:42:10.000 --> 02:42:12.000
I think there's some way to get it without

02:42:12.000 --> 02:42:14.000
plumbing it down in Next

02:42:14.000 --> 02:42:16.000
Mm-hmm

02:42:16.000 --> 02:42:18.000
Maybe I'm confusing it with headers

02:42:18.000 --> 02:42:20.000
I can actually check

02:42:20.000 --> 02:42:22.000
Yeah, because you can't do hooks

02:42:22.000 --> 02:42:24.000
when you're passing down server

02:42:24.000 --> 02:42:26.000
contacts, that's still like an unexplored thing

02:42:26.000 --> 02:42:28.000
Yeah

02:42:28.000 --> 02:42:30.000
Yeah, okay

02:42:30.000 --> 02:42:32.000
Page params are props

02:42:32.000 --> 02:42:34.000
like they become props to your page

02:42:34.000 --> 02:42:36.000
function, so it's

02:42:36.000 --> 02:42:38.000
pretty much almost exactly

02:42:38.000 --> 02:42:40.000
as Next.js would do it

02:42:40.000 --> 02:42:42.000
So yeah

02:42:42.000 --> 02:42:44.000
let's keep passing it down

02:42:44.000 --> 02:42:46.000
So I do that

02:42:46.000 --> 02:42:48.000
and

02:42:48.000 --> 02:42:50.000
we've done that

02:42:50.000 --> 02:42:52.000
I don't think you passed it to this album component

02:42:52.000 --> 02:42:54.000
I think you missed it here

02:42:54.000 --> 02:42:56.000
Oh, did I?

02:42:56.000 --> 02:42:58.000
Okay

02:42:58.000 --> 02:43:00.000
I passed it down to searchable album list

02:43:00.000 --> 02:43:02.000
and I passed it to search

02:43:02.000 --> 02:43:04.000
Yeah, but you don't pass it to album search

02:43:04.000 --> 02:43:06.000
It's undefined

02:43:06.000 --> 02:43:08.000
Oh, yeah

02:43:08.000 --> 02:43:10.000
That's actually good, Squiggles

02:43:10.000 --> 02:43:12.000
Yeah

02:43:12.000 --> 02:43:14.000
Squiggles

02:43:14.000 --> 02:43:16.000
Yeah, the squiggles are really annoying

02:43:16.000 --> 02:43:18.000
There's some kind of thing in TypeScript

02:43:18.000 --> 02:43:20.000
where we need a solution

02:43:20.000 --> 02:43:22.000
to allow

02:43:22.000 --> 02:43:24.000
async await

02:43:24.000 --> 02:43:26.000
Right

02:43:26.000 --> 02:43:28.000
Okay, and we have it

02:43:28.000 --> 02:43:30.000
in our input right here

02:43:30.000 --> 02:43:32.000
Okay, but we also want to have it

02:43:32.000 --> 02:43:34.000
in the... wait, what did you do?

02:43:34.000 --> 02:43:36.000
Let me see what you did

02:43:36.000 --> 02:43:38.000
So this should...

02:43:38.000 --> 02:43:40.000
Yeah, so that makes sure the input matches

02:43:40.000 --> 02:43:42.000
what's actually being passed to the server

02:43:42.000 --> 02:43:44.000
and now we can also use it here

02:43:44.000 --> 02:43:46.000
which I assume is actually what you're asking for

02:43:46.000 --> 02:43:48.000
to start with

02:43:48.000 --> 02:43:50.000
So we have filtered albums

02:43:50.000 --> 02:43:52.000
and that can just be

02:43:52.000 --> 02:43:54.000
filter albums, pass in the search

02:43:54.000 --> 02:43:56.000
Yep

02:44:02.000 --> 02:44:04.000
Okay

02:44:04.000 --> 02:44:06.000
It works

02:44:06.000 --> 02:44:08.000
Nice

02:44:08.000 --> 02:44:10.000
So it works for the first load

02:44:10.000 --> 02:44:12.000
but then it doesn't... like if you type

02:44:12.000 --> 02:44:14.000
if you type into the input

02:44:14.000 --> 02:44:16.000
Yeah, it's not refetching

02:44:16.000 --> 02:44:18.000
It's not refetching

02:44:18.000 --> 02:44:20.000
Okay, so I'll try

02:44:20.000 --> 02:44:22.000
the refetching piece for a little bit

02:44:22.000 --> 02:44:24.000
So I think

02:44:24.000 --> 02:44:26.000
for refetching

02:44:26.000 --> 02:44:28.000
the way we would do it in the framework

02:44:30.000 --> 02:44:32.000
That's my...

02:44:32.000 --> 02:44:34.000
Wait, let me open the right file

02:44:34.000 --> 02:44:36.000
Okay, so I'm going back to this

02:44:36.000 --> 02:44:38.000
I don't actually know, do you see where I am

02:44:38.000 --> 02:44:40.000
in VS Code?

02:44:40.000 --> 02:44:42.000
How do you know which file I'm in?

02:44:42.000 --> 02:44:44.000
Does it show you?

02:44:48.000 --> 02:44:50.000
Or which part are you asking about?

02:44:50.000 --> 02:44:52.000
Do you know where...

02:44:52.000 --> 02:44:54.000
Do you track where I am in VS Code?

02:44:54.000 --> 02:44:56.000
Oh yes

02:44:56.000 --> 02:44:58.000
No, I can't. I'm in the file

02:44:58.000 --> 02:45:00.000
Okay, cool

02:45:00.000 --> 02:45:02.000
So what we want to do here

02:45:02.000 --> 02:45:04.000
is essentially...

02:45:04.000 --> 02:45:06.000
This is the framework bit

02:45:08.000 --> 02:45:10.000
But what we want to do here

02:45:10.000 --> 02:45:12.000
is we want to

02:45:12.000 --> 02:45:14.000
replace this thing with

02:45:14.000 --> 02:45:16.000
another stream essentially

02:45:16.000 --> 02:45:18.000
and show that JSX tree

02:45:18.000 --> 02:45:20.000
instead

02:45:20.000 --> 02:45:22.000
So

02:45:22.000 --> 02:45:24.000
the way we could do this

02:45:24.000 --> 02:45:26.000
is... let me

02:45:26.000 --> 02:45:28.000
think a little bit

02:45:30.000 --> 02:45:32.000
So

02:45:32.000 --> 02:45:34.000
I think

02:45:34.000 --> 02:45:36.000
the way we would do it

02:45:36.000 --> 02:45:38.000
let me write a little bit of code

02:45:38.000 --> 02:45:40.000
So

02:45:40.000 --> 02:45:42.000
I think we would hold the...

02:45:42.000 --> 02:45:44.000
So we need to create a cache

02:45:44.000 --> 02:45:46.000
Yeah, this is what I was trying to build

02:45:46.000 --> 02:45:48.000
a little bit ago

02:45:48.000 --> 02:45:50.000
where I wanted to call createFromFetch

02:45:50.000 --> 02:45:52.000
inside of here

02:45:52.000 --> 02:45:54.000
and be able to

02:45:54.000 --> 02:45:56.000
store the lazy JSX

02:45:56.000 --> 02:45:58.000
in a state variable

02:45:58.000 --> 02:46:00.000
and return that result

02:46:00.000 --> 02:46:02.000
to re-render

02:46:02.000 --> 02:46:04.000
Yeah, yeah

02:46:04.000 --> 02:46:06.000
So I think that's kind of what we want to do

02:46:06.000 --> 02:46:08.000
and

02:46:08.000 --> 02:46:10.000
maybe

02:46:10.000 --> 02:46:12.000
maybe we can make

02:46:12.000 --> 02:46:14.000
actually like this

02:46:14.000 --> 02:46:16.000
ClientRoot, I'm going to call

02:46:16.000 --> 02:46:18.000
I'm going to have a component called

02:46:18.000 --> 02:46:20.000
a router

02:46:20.000 --> 02:46:22.000
that renders ClientRoot

02:46:22.000 --> 02:46:24.000
and I think

02:46:24.000 --> 02:46:26.000
from the perspective of the ClientRoot

02:46:26.000 --> 02:46:28.000
I think I'd like it to receive

02:46:28.000 --> 02:46:30.000
the

02:46:34.000 --> 02:46:36.000
should it receive the search params

02:46:36.000 --> 02:46:38.000
or

02:46:44.000 --> 02:46:46.000
I'll just

02:46:46.000 --> 02:46:48.000
call it router for now and I'll write

02:46:48.000 --> 02:46:50.000
the line in the router and then maybe I'll split

02:46:50.000 --> 02:46:52.000
the components

02:46:52.000 --> 02:46:54.000
But I think I want to have a

02:46:54.000 --> 02:46:56.000
I want to have a cache

02:46:56.000 --> 02:46:58.000
so

02:46:58.000 --> 02:47:00.000
it's just going to be

02:47:00.000 --> 02:47:02.000
just a regular map

02:47:02.000 --> 02:47:04.000
So I want to

02:47:04.000 --> 02:47:06.000
I think I want to keep a

02:47:06.000 --> 02:47:08.000
this

02:47:08.000 --> 02:47:10.000
createFromFetch

02:47:10.000 --> 02:47:12.000
this represents build the stream

02:47:12.000 --> 02:47:14.000
and kind of response you can use later

02:47:14.000 --> 02:47:16.000
because it's

02:47:16.000 --> 02:47:18.000
as long as we don't create it during rendering

02:47:18.000 --> 02:47:20.000
it's going to be showing the same thing

02:47:20.000 --> 02:47:22.000
So I think

02:47:22.000 --> 02:47:24.000
what we want to do is we want to

02:47:24.000 --> 02:47:26.000
I'm going to turn

02:47:26.000 --> 02:47:28.000
off the light because it's getting really dark

02:47:28.000 --> 02:47:30.000
Oh, okay

02:47:32.000 --> 02:47:34.000
So I think we want to keep it

02:47:34.000 --> 02:47:36.000
keep

02:47:36.000 --> 02:47:38.000
a response cache per

02:47:38.000 --> 02:47:40.000
this string

02:47:40.000 --> 02:47:42.000
This is going to be the key

02:47:42.000 --> 02:47:44.000
of how we're going to

02:47:44.000 --> 02:47:46.000
cache it. So I'm going to have a map

02:47:46.000 --> 02:47:48.000
Oh, yeah, you're already

02:47:48.000 --> 02:47:50.000
jumping ahead to caching there

02:47:50.000 --> 02:47:52.000
Yeah

02:47:52.000 --> 02:47:54.000
So the initial

02:47:54.000 --> 02:47:56.000
version I'm going to do is like

02:47:58.000 --> 02:48:00.000
if the cache does

02:48:00.000 --> 02:48:02.000
not have anything for

02:48:02.000 --> 02:48:04.000
Yeah, so the

02:48:04.000 --> 02:48:06.000
router

02:48:06.000 --> 02:48:08.000
Okay

02:48:08.000 --> 02:48:10.000
Okay, so I'm going to

02:48:10.000 --> 02:48:12.000
I would assume

02:48:12.000 --> 02:48:14.000
that this is like an effect

02:48:14.000 --> 02:48:16.000
that's going to update as the

02:48:16.000 --> 02:48:18.000
window updates and we're going to use

02:48:18.000 --> 02:48:20.000
that to trigger

02:48:20.000 --> 02:48:22.000
I think we're going

02:48:22.000 --> 02:48:24.000
to do that, but

02:48:26.000 --> 02:48:28.000
we're going to get there

02:48:28.000 --> 02:48:30.000
Give me a moment

02:48:30.000 --> 02:48:32.000
I wrote this kind of code like a couple

02:48:32.000 --> 02:48:34.000
of times, so

02:48:34.000 --> 02:48:36.000
I'm still not sure what's the best way to structure it

02:48:38.000 --> 02:48:40.000
But I think

02:48:40.000 --> 02:48:42.000
maybe I can call this component

02:48:42.000 --> 02:48:44.000
server output

02:48:44.000 --> 02:48:46.000
That's kind of what it is

02:48:46.000 --> 02:48:48.000
And then this

02:48:48.000 --> 02:48:50.000
is kind of the URL

02:48:50.000 --> 02:48:52.000
I'll use URL as the key

02:48:52.000 --> 02:48:54.000
And so I think that is the part

02:48:54.000 --> 02:48:56.000
Yeah, and then the router will

02:48:56.000 --> 02:48:58.000
return server

02:48:58.000 --> 02:49:00.000
output

02:49:00.000 --> 02:49:02.000
And I'll just hard code the URL here

02:49:02.000 --> 02:49:04.000
So that will be the

02:49:04.000 --> 02:49:06.000
kind of the initial URL

02:49:06.000 --> 02:49:08.000
And later we'll make it

02:49:08.000 --> 02:49:10.000
respond to

02:49:10.000 --> 02:49:12.000
the client-side routing

02:49:14.000 --> 02:49:16.000
But I think what we want to do

02:49:16.000 --> 02:49:18.000
is

02:49:18.000 --> 02:49:20.000
I don't need this anymore

02:49:20.000 --> 02:49:22.000
Instead, the router

02:49:22.000 --> 02:49:24.000
renders this thing and this thing

02:49:24.000 --> 02:49:26.000
I guess maybe I call

02:49:26.000 --> 02:49:28.000
this server

02:49:28.000 --> 02:49:30.000
endpoint

02:49:30.000 --> 02:49:32.000
server endpoint

02:49:34.000 --> 02:49:36.000
Nah, it's going to be

02:49:36.000 --> 02:49:38.000
a cold URL, sorry

02:49:38.000 --> 02:49:40.000
So if it's not in the

02:49:40.000 --> 02:49:42.000
If the URL is

02:49:42.000 --> 02:49:44.000
not in the cache, I think we'll want to

02:49:44.000 --> 02:49:46.000
put it

02:49:46.000 --> 02:49:48.000
put this

02:49:48.000 --> 02:49:50.000
into the cache

02:49:50.000 --> 02:49:52.000
Let me see

02:49:52.000 --> 02:49:54.000
So this is going to be

02:49:54.000 --> 02:49:56.000
URL

02:49:58.000 --> 02:50:00.000
And then

02:50:00.000 --> 02:50:02.000
I think we just want to return

02:50:02.000 --> 02:50:04.000
what's in the cache for this URL

02:50:04.000 --> 02:50:06.000
And so

02:50:06.000 --> 02:50:08.000
this might be

02:50:08.000 --> 02:50:10.000
Yeah, that's interesting

02:50:10.000 --> 02:50:12.000
I don't actually use set cache here

02:50:12.000 --> 02:50:14.000
Although there is a use case

02:50:14.000 --> 02:50:16.000
It's a ref as it stands

02:50:16.000 --> 02:50:18.000
That's what it's acting like

02:50:18.000 --> 02:50:20.000
Yeah

02:50:20.000 --> 02:50:22.000
But I think we do need it for some

02:50:22.000 --> 02:50:24.000
Like I think we would need this for invalidation

02:50:24.000 --> 02:50:26.000
It's just, in our case, we don't have

02:50:26.000 --> 02:50:28.000
Invalidation, so we don't have a reason

02:50:28.000 --> 02:50:30.000
to do this

02:50:30.000 --> 02:50:32.000
Because it's always, like it's caching everything forever

02:50:32.000 --> 02:50:34.000
But if we had

02:50:34.000 --> 02:50:36.000
invalidation where we want to say

02:50:36.000 --> 02:50:38.000
throw away the cache you had

02:50:38.000 --> 02:50:40.000
because something got modified

02:50:40.000 --> 02:50:42.000
Then we would model it as

02:50:42.000 --> 02:50:44.000
a set state where we

02:50:44.000 --> 02:50:46.000
set state to a new map

02:50:46.000 --> 02:50:48.000
So it would be like an empty cache

02:50:48.000 --> 02:50:50.000
And that's why, like, conceptually

02:50:50.000 --> 02:50:52.000
I think it should leave in state

02:50:52.000 --> 02:50:54.000
That's why it's not like a ref

02:50:54.000 --> 02:50:56.000
And maybe we can actually

02:50:56.000 --> 02:50:58.000
also show it

02:50:58.000 --> 02:51:00.000
We could have a small example that shows it

02:51:00.000 --> 02:51:02.000
Yeah

02:51:02.000 --> 02:51:04.000
Also, sorry that

02:51:04.000 --> 02:51:06.000
Sorry I just do, can we do a quick pause

02:51:06.000 --> 02:51:08.000
for like a bathroom break, get some more water

02:51:08.000 --> 02:51:10.000
Yeah, yeah, sure

02:51:10.000 --> 02:51:12.000
Okay, cool. I also don't have a standby screen

02:51:12.000 --> 02:51:14.000
So, uh, yeah

02:51:14.000 --> 02:51:16.000
BRB

02:51:16.000 --> 02:51:18.000
Okay, one second

02:51:18.000 --> 02:51:20.000
Alright

02:51:20.000 --> 02:51:22.000
Am I still on the

02:51:22.000 --> 02:51:24.000
stream? Like, I don't know, are people there?

02:51:24.000 --> 02:51:26.000
I guess

02:51:26.000 --> 02:51:28.000
maybe

02:51:28.000 --> 02:51:30.000
Um

02:51:30.000 --> 02:51:32.000
Yeah, I don't really have access to the

02:51:32.000 --> 02:51:34.000
I don't have access

02:51:34.000 --> 02:51:36.000
to the actual server, so I have

02:51:36.000 --> 02:51:38.000
I have no idea if this

02:51:38.000 --> 02:51:40.000
if this code works

02:51:40.000 --> 02:51:42.000
because I can't, for some reason I can't

02:51:42.000 --> 02:51:44.000
I can't

02:51:44.000 --> 02:51:46.000
Like, the VS Code tunneling

02:51:46.000 --> 02:51:48.000
doesn't work for me, I think it's

02:51:48.000 --> 02:51:50.000
maybe

02:51:50.000 --> 02:51:52.000
because of a firewall

02:51:52.000 --> 02:51:54.000
or something

02:51:54.000 --> 02:51:56.000
But maybe if, yeah, maybe for now I could

02:51:56.000 --> 02:51:58.000
just go over this a little bit

02:51:58.000 --> 02:52:00.000
So, yeah, we render

02:52:00.000 --> 02:52:02.000
this router that, like, renders

02:52:02.000 --> 02:52:04.000
this server output

02:52:04.000 --> 02:52:06.000
for this key

02:52:06.000 --> 02:52:08.000
and then, this might look a bit

02:52:08.000 --> 02:52:10.000
weird, because this might look, you know, like

02:52:10.000 --> 02:52:12.000
aren't you supposed, like, aren't components

02:52:12.000 --> 02:52:14.000
supposed to be pure, like, isn't this

02:52:14.000 --> 02:52:16.000
a mutation? And so

02:52:16.000 --> 02:52:18.000
the key thing here is that

02:52:18.000 --> 02:52:20.000
it's completely unobservable

02:52:20.000 --> 02:52:22.000
So

02:52:22.000 --> 02:52:24.000
it's, um

02:52:26.000 --> 02:52:28.000
because, like, the state

02:52:28.000 --> 02:52:30.000
the state is, like, local to this component

02:52:30.000 --> 02:52:32.000
and this lazily

02:52:32.000 --> 02:52:34.000
kind of fills it in the first time

02:52:34.000 --> 02:52:36.000
you ask for it, it kind of acts

02:52:36.000 --> 02:52:38.000
as

02:52:38.000 --> 02:52:40.000
you know, it is going to give you, like, the same

02:52:40.000 --> 02:52:42.000
result for, like

02:52:42.000 --> 02:52:44.000
multiple attempts, regardless of

02:52:44.000 --> 02:52:46.000
in, like, which order you do them

02:52:46.000 --> 02:52:48.000
and this is why it's okay to

02:52:48.000 --> 02:52:50.000
mutate in this particular

02:52:50.000 --> 02:52:52.000
example

02:52:56.000 --> 02:52:58.000
Yeah, so maybe let's see if this

02:52:58.000 --> 02:53:00.000
works at all, like, can we

02:53:00.000 --> 02:53:02.000
Did I break it?

02:53:02.000 --> 02:53:04.000
I don't know yet

02:53:04.000 --> 02:53:06.000
This should, I mean, as it looks

02:53:06.000 --> 02:53:08.000
it should be fine

02:53:08.000 --> 02:53:10.000
but if we save it, we get

02:53:10.000 --> 02:53:12.000
something

02:53:12.000 --> 02:53:14.000
Okay

02:53:14.000 --> 02:53:16.000
properties of undefined reading to lowercase

02:53:16.000 --> 02:53:18.000
Okay, so

02:53:18.000 --> 02:53:20.000
Something's trying to render

02:53:20.000 --> 02:53:22.000
that shouldn't be

02:53:22.000 --> 02:53:24.000
Well, wait, are we currently

02:53:24.000 --> 02:53:26.000
do you have question mark

02:53:26.000 --> 02:53:28.000
search equals blah blah in your

02:53:28.000 --> 02:53:30.000
URL bar? I do

02:53:30.000 --> 02:53:32.000
Oh, actually, no, wait, no, we're not using that

02:53:32.000 --> 02:53:34.000
we've hardcoded it

02:53:34.000 --> 02:53:36.000
Create from

02:53:36.000 --> 02:53:38.000
fetch fetch URL

02:53:38.000 --> 02:53:40.000
Yeah, it's happening server-side

02:53:40.000 --> 02:53:42.000
So

02:53:42.000 --> 02:53:44.000
it's trying to, okay

02:53:44.000 --> 02:53:46.000
I think it's because the dev panel

02:53:46.000 --> 02:53:48.000
assumes that you're fetching the same thing

02:53:48.000 --> 02:53:50.000
so if we just stop rendering the

02:53:50.000 --> 02:53:52.000
dev panel, I think it'll just go away

02:53:52.000 --> 02:53:54.000
Oh, no, that's, wait

02:53:54.000 --> 02:53:56.000
let's just fix it, it's fine

02:53:56.000 --> 02:53:58.000
I'll fix it

02:53:58.000 --> 02:54:00.000
Let's just make it so that

02:54:00.000 --> 02:54:02.000
the, so since the URL

02:54:02.000 --> 02:54:04.000
is owned by the router, I'm just

02:54:04.000 --> 02:54:06.000
I'm just gonna

02:54:06.000 --> 02:54:08.000
Yeah, I'm just gonna render dev panel here

02:54:08.000 --> 02:54:10.000
myself

02:54:10.000 --> 02:54:12.000
So we can

02:54:12.000 --> 02:54:14.000
put dev panel

02:54:14.000 --> 02:54:16.000
and I'm gonna make this URL

02:54:16.000 --> 02:54:18.000
a constant

02:54:18.000 --> 02:54:20.000
and

02:54:20.000 --> 02:54:22.000
I'm gonna pass it to both

02:54:22.000 --> 02:54:24.000
things

02:54:24.000 --> 02:54:26.000
so that

02:54:26.000 --> 02:54:28.000
I guess I don't actually know how your

02:54:28.000 --> 02:54:30.000
dev panel works, let me have a look

02:54:30.000 --> 02:54:32.000
So I'm gonna get rid of, oh, you have like

02:54:32.000 --> 02:54:34.000
a separate root

02:54:34.000 --> 02:54:36.000
It's just a separate root and separate call

02:54:36.000 --> 02:54:38.000
I ideally wanted it to trace

02:54:38.000 --> 02:54:40.000
what was happening

02:54:40.000 --> 02:54:42.000
Oh, I see

02:54:42.000 --> 02:54:44.000
And I couldn't find a way to do it, so I just

02:54:44.000 --> 02:54:46.000
do another fetch at the same time

02:54:46.000 --> 02:54:48.000
and apparently it wasn't, I did two roots

02:54:48.000 --> 02:54:50.000
I see, I see

02:54:50.000 --> 02:54:52.000
Interesting

02:54:52.000 --> 02:54:54.000
Yeah, right

02:54:54.000 --> 02:54:56.000
because you're not hooking into the same

02:54:56.000 --> 02:54:58.000
stream, but okay, that's fine

02:54:58.000 --> 02:55:00.000
so we'll do the same thing

02:55:00.000 --> 02:55:02.000
except it would, you know, do it with a different

02:55:02.000 --> 02:55:04.000
different URL

02:55:04.000 --> 02:55:06.000
because if I just pass the URL here

02:55:06.000 --> 02:55:08.000
and I also make it dependency of the

02:55:08.000 --> 02:55:10.000
effect

02:55:10.000 --> 02:55:12.000
I think it would, well I guess

02:55:12.000 --> 02:55:14.000
like our panel would behave maybe a bit

02:55:14.000 --> 02:55:16.000
weirdly

02:55:16.000 --> 02:55:18.000
if the URL changes

02:55:18.000 --> 02:55:20.000
but maybe not, so let's just see if it works

02:55:20.000 --> 02:55:22.000
And then can we

02:55:22.000 --> 02:55:24.000
where's the HTML for

02:55:24.000 --> 02:55:26.000
your thing, so that

02:55:26.000 --> 02:55:28.000
Oh yeah, that

02:55:28.000 --> 02:55:30.000
should be in a public folder, but I

02:55:30.000 --> 02:55:32.000
didn't have time for it, so I think it's inside of this

02:55:32.000 --> 02:55:34.000
templates index file

02:55:34.000 --> 02:55:36.000
I'll bring it over here

02:55:36.000 --> 02:55:38.000
But yeah, it's very simple

02:55:38.000 --> 02:55:40.000
This is all it's doing

02:55:40.000 --> 02:55:42.000
I can just remove it from here, right

02:55:42.000 --> 02:55:44.000
and make it like a regular

02:55:44.000 --> 02:55:46.000
Okay, yeah, so I'll just

02:55:46.000 --> 02:55:48.000
get rid of this

02:55:48.000 --> 02:55:50.000
and then I'll

02:55:50.000 --> 02:55:52.000
and so this is not going to be like a separate root

02:55:52.000 --> 02:55:54.000
it's just a React component that we're

02:55:54.000 --> 02:55:56.000
rendering

02:55:56.000 --> 02:55:58.000
Does it have any styles

02:55:58.000 --> 02:56:00.000
that are, that depend on that

02:56:00.000 --> 02:56:02.000
ID

02:56:02.000 --> 02:56:04.000
Uh

02:56:04.000 --> 02:56:06.000
I don't think so

02:56:06.000 --> 02:56:08.000
Oh, because you're using

02:56:08.000 --> 02:56:10.000
Tailwind, there's no styles

02:56:10.000 --> 02:56:12.000
Love it, love it

02:56:12.000 --> 02:56:14.000
Yep, hacks for everything

02:56:14.000 --> 02:56:16.000
That's the amazing thing about

02:56:16.000 --> 02:56:18.000
You just copy and paste things

02:56:18.000 --> 02:56:20.000
move them around

02:56:20.000 --> 02:56:22.000
Works fine

02:56:22.000 --> 02:56:24.000
So style files

02:56:24.000 --> 02:56:26.000
Okay, so let's see if

02:56:26.000 --> 02:56:28.000
Okay, does this work

02:56:28.000 --> 02:56:30.000
So if you

02:56:30.000 --> 02:56:32.000
try it now

02:56:32.000 --> 02:56:34.000
Did we fix it

02:56:34.000 --> 02:56:36.000
Yeah, we got no errors

02:56:36.000 --> 02:56:38.000
and we just get fetching from server

02:56:38.000 --> 02:56:40.000
which I think is right, since we're not

02:56:40.000 --> 02:56:42.000
rendering anything yet

02:56:42.000 --> 02:56:44.000
But we are, no I think we are

02:56:44.000 --> 02:56:46.000
rendering, like we're supposed to be

02:56:46.000 --> 02:56:48.000
rendering that JSX tree for that

02:56:48.000 --> 02:56:50.000
URL

02:56:50.000 --> 02:56:52.000
Oh, okay, that actually should work, huh

02:56:52.000 --> 02:56:54.000
So it does fetching from server

02:56:54.000 --> 02:56:56.000
Can you see if there are any errors in the console

02:56:56.000 --> 02:56:58.000
Yeah, let's see, there's no server errors

02:57:00.000 --> 02:57:02.000
The client console, it looks like it's just getting

02:57:02.000 --> 02:57:04.000
the first one, but it's not reading the rest of the

02:57:04.000 --> 02:57:06.000
stream onto the page

02:57:06.000 --> 02:57:08.000
And I remember that earlier

02:57:08.000 --> 02:57:10.000
we removed the function

02:57:10.000 --> 02:57:12.000
call and changed it to createL

02:57:12.000 --> 02:57:14.000
That was working

02:57:14.000 --> 02:57:16.000
So this is the part

02:57:20.000 --> 02:57:22.000
Okay, maybe let's

02:57:22.000 --> 02:57:24.000
go back a little bit

02:57:24.000 --> 02:57:26.000
and simplify it

02:57:26.000 --> 02:57:28.000
and then see if it still breaks

02:57:28.000 --> 02:57:30.000
So I'm gonna make

02:57:30.000 --> 02:57:32.000
a fake thing

02:57:32.000 --> 02:57:34.000
and I'm gonna

02:57:34.000 --> 02:57:36.000
instead of router, I'm gonna render this fake thing

02:57:36.000 --> 02:57:38.000
It's a bit hard

02:57:38.000 --> 02:57:40.000
for me to debug because I don't see the output

02:57:40.000 --> 02:57:42.000
and I don't see

02:57:42.000 --> 02:57:44.000
I can't actually check anything

02:57:44.000 --> 02:57:46.000
But maybe

02:57:46.000 --> 02:57:48.000
let's go back to

02:57:48.000 --> 02:57:50.000
like

02:57:50.000 --> 02:57:52.000
if I know

02:57:52.000 --> 02:57:54.000
my URL

02:57:54.000 --> 02:57:56.000
my thing

02:57:56.000 --> 02:57:58.000
equals

02:57:58.000 --> 02:58:00.000
Sorry

02:58:00.000 --> 02:58:02.000
I'm gonna name it in my

02:58:02.000 --> 02:58:04.000
weird ways

02:58:04.000 --> 02:58:06.000
Yeah, so I'm gonna create from fetch

02:58:06.000 --> 02:58:08.000
for my URL

02:58:08.000 --> 02:58:10.000
Oops, that's gonna be my

02:58:10.000 --> 02:58:12.000
URL

02:58:12.000 --> 02:58:14.000
And we're gonna render this

02:58:16.000 --> 02:58:18.000
Okay, so can we just get this thing

02:58:18.000 --> 02:58:20.000
working? Does it still break?

02:58:20.000 --> 02:58:22.000
This works

02:58:22.000 --> 02:58:24.000
Okay, this works

02:58:24.000 --> 02:58:26.000
And then

02:58:26.000 --> 02:58:28.000
if I swap it out with the router

02:58:28.000 --> 02:58:30.000
I can confirm that it doesn't

02:58:30.000 --> 02:58:32.000
work again

02:58:34.000 --> 02:58:36.000
Okay, it doesn't work

02:58:36.000 --> 02:58:38.000
So let's switch it back to fake thing

02:58:38.000 --> 02:58:40.000
It is trying to resolve the client-side

02:58:40.000 --> 02:58:42.000
component import though, which is interesting

02:58:42.000 --> 02:58:44.000
But yeah, that's working

02:58:44.000 --> 02:58:46.000
Okay, so let's

02:58:46.000 --> 02:58:48.000
maybe now change this to just

02:58:48.000 --> 02:58:50.000
use this

02:58:50.000 --> 02:58:52.000
component to see if the problem is with this

02:58:52.000 --> 02:58:54.000
component. Try it again

02:58:54.000 --> 02:58:56.000
That is not

02:58:56.000 --> 02:58:58.000
working

02:58:58.000 --> 02:59:00.000
That is not working, so that's where the problem is

02:59:00.000 --> 02:59:02.000
It's the cache

02:59:02.000 --> 02:59:04.000
Okay, that's good though because it means

02:59:04.000 --> 02:59:06.000
something here

02:59:08.000 --> 02:59:10.000
What am I doing wrong?

02:59:10.000 --> 02:59:12.000
Okay

02:59:12.000 --> 02:59:14.000
Cache, if not cache

02:59:14.000 --> 02:59:16.000
has cache set

02:59:16.000 --> 02:59:18.000
cache is

02:59:18.000 --> 02:59:20.000
a piece of state

02:59:20.000 --> 02:59:22.000
If it doesn't have this URL

02:59:22.000 --> 02:59:24.000
put this

02:59:24.000 --> 02:59:26.000
thing into it and then

02:59:26.000 --> 02:59:28.000
read it. Yeah, I don't see

02:59:28.000 --> 02:59:30.000
a mistake in the code, but maybe let's

02:59:30.000 --> 02:59:32.000
keep, you know, let's keep

02:59:32.000 --> 02:59:34.000
I mean, we can log what this is

02:59:34.000 --> 02:59:36.000
Yeah, let's log what this is

02:59:36.000 --> 02:59:38.000
But I'm not going to see the log because I don't see

02:59:38.000 --> 02:59:40.000
the console

02:59:40.000 --> 02:59:42.000
It should be the browser console, so I can at least

02:59:42.000 --> 02:59:44.000
bump up the font size on the screen share

02:59:44.000 --> 02:59:46.000
No, no, your tab share

02:59:46.000 --> 02:59:48.000
doesn't show me anything

02:59:48.000 --> 02:59:50.000
You're right

02:59:50.000 --> 02:59:52.000
Alright, you get chunk pending, which is a familiar

02:59:52.000 --> 02:59:54.000
site

02:59:54.000 --> 02:59:56.000
Yeah, that seems legit. Okay, no, it's fine

02:59:56.000 --> 02:59:58.000
I think I have a way to debug it, like I have

02:59:58.000 --> 03:00:00.000
a methodology. I'm just going to

03:00:00.000 --> 03:00:02.000
put it piece by piece and then we'll find

03:00:02.000 --> 03:00:04.000
where the mistake is

03:00:04.000 --> 03:00:06.000
Okay, so the next thing is I'm going to

03:00:06.000 --> 03:00:08.000
copy and paste like this

03:00:08.000 --> 03:00:10.000
part into the fake

03:00:10.000 --> 03:00:12.000
thing

03:00:12.000 --> 03:00:14.000
It's also doing an infinite loop, which might

03:00:14.000 --> 03:00:16.000
be something

03:00:16.000 --> 03:00:18.000
Yeah, that seems

03:00:18.000 --> 03:00:20.000
good to know

03:00:20.000 --> 03:00:22.000
if not cache, but I don't know

03:00:22.000 --> 03:00:24.000
why it... Yeah, because I was getting infinite

03:00:24.000 --> 03:00:26.000
logs

03:00:26.000 --> 03:00:28.000
Interesting

03:00:29.000 --> 03:00:31.000
Yeah, yeah, yeah, yeah

03:00:31.000 --> 03:00:33.000
Interesting

03:00:33.000 --> 03:00:35.000
Very interesting

03:00:37.000 --> 03:00:39.000
Yeah, well, let's

03:00:39.000 --> 03:00:41.000
keep going. I think I should be able to

03:00:41.000 --> 03:00:43.000
figure it out

03:00:45.000 --> 03:00:47.000
Okay, just

03:00:47.000 --> 03:00:49.000
Okay, so the first thing I could maybe

03:00:49.000 --> 03:00:51.000
try is just like

03:00:51.000 --> 03:00:53.000
for now, I'll move this cache

03:00:53.000 --> 03:00:55.000
outside maybe

03:00:55.000 --> 03:00:57.000
So I've had this issue in the past for

03:00:57.000 --> 03:00:59.000
when I tried to use use

03:00:59.000 --> 03:01:01.000
and I didn't put any

03:01:01.000 --> 03:01:03.000
wrappers around it, I didn't

03:01:03.000 --> 03:01:05.000
put a cache, and it was calling my

03:01:05.000 --> 03:01:07.000
useFetch infinitely

03:01:07.000 --> 03:01:09.000
because it was a weighted

03:01:09.000 --> 03:01:11.000
promise, and I don't know if that's why

03:01:11.000 --> 03:01:13.000
because this is definitely another case of returning a

03:01:13.000 --> 03:01:15.000
promise and passing it

03:01:15.000 --> 03:01:17.000
Yeah, maybe

03:01:17.000 --> 03:01:19.000
that is...

03:01:19.000 --> 03:01:21.000
Yeah, maybe actually, maybe you're right. Let me see

03:01:21.000 --> 03:01:23.000
Maybe that's not... Let me check

03:01:23.000 --> 03:01:25.000
how our

03:01:25.000 --> 03:01:27.000
our

03:01:27.000 --> 03:01:29.000
fixture does it, because maybe I'm

03:01:29.000 --> 03:01:31.000
just supposed to use use, and we

03:01:31.000 --> 03:01:33.000
don't have warnings yet, so

03:01:33.000 --> 03:01:35.000
that's why

03:01:35.000 --> 03:01:37.000
Yeah, okay, let's try this

03:01:37.000 --> 03:01:39.000
actually. Maybe that's how it's

03:01:39.000 --> 03:01:41.000
supposed to work. So I'll import

03:01:41.000 --> 03:01:43.000
use from React

03:01:43.000 --> 03:01:45.000
and let's...

03:01:45.000 --> 03:01:47.000
instead of fakeThing, let's render the

03:01:47.000 --> 03:01:49.000
router again, and let's

03:01:49.000 --> 03:01:51.000
get this back, except

03:01:51.000 --> 03:01:53.000
this will be just

03:01:53.000 --> 03:01:55.000
lazyJSX

03:01:55.000 --> 03:01:57.000
and then I'll say return

03:01:57.000 --> 03:01:59.000
use lazyJSX

03:01:59.000 --> 03:02:01.000
because I think we haven't implemented

03:02:01.000 --> 03:02:03.000
support for this yet, but we also haven't

03:02:03.000 --> 03:02:05.000
implemented good error messages

03:02:05.000 --> 03:02:07.000
Interesting. Let's see if that's better

03:02:07.000 --> 03:02:09.000
That's the same

03:02:09.000 --> 03:02:11.000
Now it's the same

03:02:11.000 --> 03:02:13.000
Yeah, we're still getting nothing

03:02:13.000 --> 03:02:15.000
back. Okay, now

03:02:15.000 --> 03:02:17.000
let's try this

03:02:17.000 --> 03:02:19.000
thing next. Can you

03:02:19.000 --> 03:02:21.000
refresh?

03:02:21.000 --> 03:02:23.000
Ooh, things are happening

03:02:25.000 --> 03:02:27.000
Okay, I don't...

03:02:27.000 --> 03:02:29.000
Let me look here. Okay, we do have something on the page

03:02:29.000 --> 03:02:31.000
Okay, so this

03:02:31.000 --> 03:02:33.000
works. This works

03:02:33.000 --> 03:02:35.000
Interesting

03:02:35.000 --> 03:02:37.000
So what was the important bit? Wait, what changed?

03:02:37.000 --> 03:02:39.000
Well, the part that changed

03:02:39.000 --> 03:02:41.000
is the... No longer useState

03:02:41.000 --> 03:02:43.000
Okay

03:02:43.000 --> 03:02:45.000
Yeah, I don't understand

03:02:45.000 --> 03:02:47.000
It definitely works like in

03:02:47.000 --> 03:02:49.000
the example I wrote a few days ago

03:02:49.000 --> 03:02:51.000
Yeah

03:02:51.000 --> 03:02:53.000
Oh, wait, maybe we can remove strictMode

03:02:53.000 --> 03:02:55.000
I mean, I wouldn't necessarily...

03:02:55.000 --> 03:02:57.000
I couldn't get anything

03:02:57.000 --> 03:02:59.000
to work without strictMode

03:02:59.000 --> 03:03:01.000
Oh, it works! Okay, nevermind

03:03:01.000 --> 03:03:03.000
Okay, if we remove strictMode

03:03:03.000 --> 03:03:05.000
and I put this back

03:03:05.000 --> 03:03:07.000
Let's see

03:03:07.000 --> 03:03:09.000
I think maybe we just have a bug there

03:03:09.000 --> 03:03:11.000
Is it still broken?

03:03:11.000 --> 03:03:13.000
Yeah

03:03:13.000 --> 03:03:15.000
Yeah, maybe it's like a different React

03:03:15.000 --> 03:03:17.000
version

03:03:17.000 --> 03:03:19.000
Yeah, I'm on an experimental

03:03:19.000 --> 03:03:21.000
18 release because it's the only thing that

03:03:21.000 --> 03:03:23.000
worked with createFromFetch

03:03:23.000 --> 03:03:25.000
But yeah

03:03:25.000 --> 03:03:27.000
Okay, let me see

03:03:27.000 --> 03:03:29.000
Experiment. Yeah, I don't...

03:03:29.000 --> 03:03:31.000
I think...

03:03:31.000 --> 03:03:33.000
Let's try to

03:03:33.000 --> 03:03:35.000
Let's try to

03:03:35.000 --> 03:03:37.000
use a different React version

03:03:37.000 --> 03:03:39.000
I will copy and paste the version that

03:03:39.000 --> 03:03:41.000
I think should work

03:03:41.000 --> 03:03:43.000
Can we

03:03:43.000 --> 03:03:45.000
Can we

03:03:45.000 --> 03:03:47.000
yarn and

03:03:47.000 --> 03:03:49.000
whatever

03:03:49.000 --> 03:03:51.000
It like upgrade to

03:03:51.000 --> 03:03:53.000
a new experimental release?

03:03:53.000 --> 03:03:55.000
No, it's actually

03:03:55.000 --> 03:03:57.000
different. It's like the next

03:03:57.000 --> 03:03:59.000
It's like a canary

03:03:59.000 --> 03:04:01.000
Because I don't know what's...

03:04:01.000 --> 03:04:03.000
Experimental might have too many things

03:04:03.000 --> 03:04:05.000
enabled that could be broken

03:04:05.000 --> 03:04:07.000
Could be

03:04:07.000 --> 03:04:09.000
That could be the reason

03:04:09.000 --> 03:04:11.000
I mean, can't we just roll without the state variable

03:04:11.000 --> 03:04:13.000
though? Because I feel like...

03:04:13.000 --> 03:04:15.000
I just want to see if that helps

03:04:15.000 --> 03:04:17.000
If it doesn't help, we'll just roll without it

03:04:17.000 --> 03:04:19.000
It's just annoying because like

03:04:19.000 --> 03:04:21.000
I do have this working in literally

03:04:21.000 --> 03:04:23.000
I know

03:04:23.000 --> 03:04:25.000
It's written the same way in a different project

03:04:25.000 --> 03:04:27.000
and I'm like, why doesn't

03:04:27.000 --> 03:04:29.000
it work if I have it working in another

03:04:29.000 --> 03:04:31.000
file

03:04:31.000 --> 03:04:33.000
Yeah, as a framework maintainer, whenever something goes wrong in Astra

03:04:33.000 --> 03:04:35.000
I'm like, no, no, no, what is it?

03:04:35.000 --> 03:04:37.000
What version is it?

03:04:37.000 --> 03:04:39.000
No, I already did

03:04:39.000 --> 03:04:41.000
You don't need to specify versions. I already put them in package.json

03:04:41.000 --> 03:04:43.000
You could just like re-run this

03:04:43.000 --> 03:04:45.000
Perfect

03:04:45.000 --> 03:04:47.000
Oh, you just found it

03:04:47.000 --> 03:04:49.000
Alright

03:04:49.000 --> 03:04:51.000
That'll do

03:04:51.000 --> 03:04:53.000
So these are next releases instead of experimental

03:04:53.000 --> 03:04:55.000
Yeah

03:04:55.000 --> 03:04:57.000
These are a bit more kind of stable

03:04:57.000 --> 03:04:59.000
Okay

03:04:59.000 --> 03:05:01.000
And yeah, this is where you get funny peer dependency issues

03:05:01.000 --> 03:05:03.000
Yeah

03:05:07.000 --> 03:05:09.000
And it's the same thing, I think

03:05:11.000 --> 03:05:13.000
Interesting

03:05:17.000 --> 03:05:19.000
Yeah, so it's

03:05:19.000 --> 03:05:21.000
Yeah, it's running infinitely

03:05:23.000 --> 03:05:25.000
Can we wrap this

03:05:25.000 --> 03:05:27.000
with the actual cache helper

03:05:27.000 --> 03:05:29.000
from React?

03:05:31.000 --> 03:05:33.000
No, we don't use that anymore

03:05:33.000 --> 03:05:35.000
Okay, yeah

03:05:35.000 --> 03:05:37.000
Okay

03:05:37.000 --> 03:05:39.000
Okay, let's

03:05:39.000 --> 03:05:41.000
Okay, let's forget about

03:05:41.000 --> 03:05:43.000
I mean, it doesn't matter that much because we're not doing

03:05:43.000 --> 03:05:45.000
invalidation anyway, so

03:05:45.000 --> 03:05:47.000
let's just, I'll add back the strict mode

03:05:47.000 --> 03:05:49.000
and I will

03:05:51.000 --> 03:05:53.000
Yeah, I will remove the state variable

03:05:53.000 --> 03:05:55.000
I'm not sure why it doesn't work

03:05:55.000 --> 03:05:57.000
without it, but maybe we just broke something

03:05:59.000 --> 03:06:01.000
So, yeah, I'll just keep it global

03:06:03.000 --> 03:06:05.000
But I think at least like this

03:06:05.000 --> 03:06:07.000
this is actually supposed to

03:06:07.000 --> 03:06:09.000
I don't need use here in that case

03:06:09.000 --> 03:06:11.000
I think

03:06:11.000 --> 03:06:13.000
So I think this is supposed to work

03:06:15.000 --> 03:06:17.000
I know, we definitely need use

03:06:17.000 --> 03:06:19.000
What's going on?

03:06:19.000 --> 03:06:21.000
Oh, we do? Okay, I can add that

03:06:21.000 --> 03:06:23.000
Yeah, objects, okay, it's saying promise

03:06:23.000 --> 03:06:25.000
is invalid

03:06:25.000 --> 03:06:27.000
Okay, yeah, so we

03:06:27.000 --> 03:06:29.000
didn't implement this yet, so let's

03:06:29.000 --> 03:06:31.000
Okay, let's put it back

03:06:31.000 --> 03:06:33.000
If anyone at home is wondering

03:06:33.000 --> 03:06:35.000
like what's going on, we've kind of graduated

03:06:35.000 --> 03:06:37.000
from exploring Rack server components

03:06:37.000 --> 03:06:39.000
to like how do they really work

03:06:39.000 --> 03:06:41.000
within a framework if you're trying

03:06:41.000 --> 03:06:43.000
to build one

03:06:43.000 --> 03:06:45.000
So this is going more in the weeds for sure

03:06:45.000 --> 03:06:47.000
but one interesting fact is like when you want to

03:06:47.000 --> 03:06:49.000
unwrap asynchronous stuff

03:06:49.000 --> 03:06:51.000
on the client, use is

03:06:51.000 --> 03:06:53.000
basically in a wait for the client, right?

03:06:53.000 --> 03:06:55.000
But it can also do other things

03:06:55.000 --> 03:06:57.000
beyond a wait

03:06:57.000 --> 03:06:59.000
Yeah, yeah

03:06:59.000 --> 03:07:01.000
Okay, so I think that

03:07:01.000 --> 03:07:03.000
actually should be enough for now, I don't think we need

03:07:03.000 --> 03:07:05.000
more fancy

03:07:05.000 --> 03:07:07.000
So let's just hook up the router

03:07:07.000 --> 03:07:09.000
to the actual routing

03:07:09.000 --> 03:07:11.000
Right, so let's

03:07:11.000 --> 03:07:13.000
Maybe you can drive this bit

03:07:13.000 --> 03:07:15.000
What we want to have in the router

03:07:15.000 --> 03:07:17.000
we have the URL

03:07:17.000 --> 03:07:19.000
variable, so let's make that

03:07:19.000 --> 03:07:21.000
initialized to

03:07:21.000 --> 03:07:23.000
window.location

03:07:23.000 --> 03:07:25.000
Let's take

03:07:25.000 --> 03:07:27.000
the search query from

03:07:27.000 --> 03:07:29.000
the actual location

03:07:29.000 --> 03:07:31.000
and let's make it update

03:07:31.000 --> 03:07:33.000
as the location updates

03:07:35.000 --> 03:07:37.000
Yeah, so for that

03:07:37.000 --> 03:07:39.000
Well, I'm wondering

03:07:39.000 --> 03:07:41.000
where it would go

03:07:41.000 --> 03:07:43.000
but first I'll just do

03:07:43.000 --> 03:07:45.000
window.location.

03:07:47.000 --> 03:07:49.000
We want it as a prop yet, let's just do search

03:07:51.000 --> 03:07:53.000
Do that

03:07:53.000 --> 03:07:55.000
and we want

03:07:55.000 --> 03:07:57.000
Oh boy

03:07:57.000 --> 03:07:59.000
I don't really want all of that

03:07:59.000 --> 03:08:01.000
but

03:08:01.000 --> 03:08:03.000
yeah, that's fine

03:08:03.000 --> 03:08:05.000
Clean up, I don't know yet

03:08:05.000 --> 03:08:07.000
but to do

03:08:07.000 --> 03:08:09.000
abort controller

03:08:09.000 --> 03:08:11.000
for create fetch

03:08:11.000 --> 03:08:13.000
Oh no, you don't need to do this part

03:08:13.000 --> 03:08:15.000
We already have this part down below

03:08:15.000 --> 03:08:17.000
Like all we want to do is

03:08:17.000 --> 03:08:19.000
Yeah, all we want to do is

03:08:19.000 --> 03:08:21.000
we want to have

03:08:21.000 --> 03:08:23.000
we want to have something that gives us

03:08:23.000 --> 03:08:25.000
window.location.search

03:08:25.000 --> 03:08:27.000
all the time

03:08:27.000 --> 03:08:29.000
Okay, so literally that

03:08:29.000 --> 03:08:31.000
Yeah, but

03:08:31.000 --> 03:08:33.000
Okay, so we're going to build this in later

03:08:33.000 --> 03:08:35.000
because right now it's not going to be reactive

03:08:35.000 --> 03:08:37.000
to anything, it's just going to render the initial

03:08:37.000 --> 03:08:39.000
cache

03:08:39.000 --> 03:08:41.000
Yeah, so I think maybe I can try to do

03:08:41.000 --> 03:08:43.000
so what does window.location.search

03:08:43.000 --> 03:08:45.000
return, what kind of file

03:08:45.000 --> 03:08:47.000
is it like a string or

03:08:47.000 --> 03:08:49.000
Yeah, that'll just be the string, so question mark

03:08:49.000 --> 03:08:51.000
Yeah, that, so it's a key that we could use

03:08:51.000 --> 03:08:53.000
Okay, so we do need

03:08:53.000 --> 03:08:55.000
this thing

03:08:55.000 --> 03:08:57.000
Do we need to

03:08:57.000 --> 03:08:59.000
encode the URI component

03:08:59.000 --> 03:09:01.000
or is it already encoded?

03:09:01.000 --> 03:09:03.000
Yeah, I think we can put this

03:09:03.000 --> 03:09:05.000
in the create from fetch actually

03:09:05.000 --> 03:09:07.000
Might make a little more sense, I don't know

03:09:07.000 --> 03:09:09.000
But yeah, this would be right

03:09:09.000 --> 03:09:11.000
Okay

03:09:11.000 --> 03:09:13.000
You could also just do

03:09:13.000 --> 03:09:15.000
window.location.pathname if that's what we're looking for

03:09:15.000 --> 03:09:17.000
Okay

03:09:17.000 --> 03:09:19.000
Or actually no, that's the query we're making

03:09:19.000 --> 03:09:21.000
so this is right

03:09:21.000 --> 03:09:23.000
Okay, let me just

03:09:23.000 --> 03:09:25.000
see, yeah, I think we can just

03:09:25.000 --> 03:09:27.000
so we don't need this, I think that's

03:09:27.000 --> 03:09:29.000
that's the URL we want

03:09:29.000 --> 03:09:31.000
to get, and I think we

03:09:31.000 --> 03:09:33.000
I agree, maybe this makes sense to actually

03:09:33.000 --> 03:09:35.000
put here, but maybe

03:09:35.000 --> 03:09:37.000
let's just do like a

03:09:37.000 --> 03:09:39.000
useEffect thing that's going to

03:09:39.000 --> 03:09:41.000
be

03:09:41.000 --> 03:09:43.000
so I think this, we're going to model

03:09:43.000 --> 03:09:45.000
this as like, you know, a state

03:09:45.000 --> 03:09:47.000
so this is the

03:09:47.000 --> 03:09:49.000
kind of the initial

03:09:49.000 --> 03:09:51.000
state, and then

03:09:51.000 --> 03:09:53.000
when we have a

03:09:53.000 --> 03:09:55.000
so I think it's

03:09:55.000 --> 03:09:57.000
window.addEventListener

03:09:57.000 --> 03:09:59.000
popState, I think

03:09:59.000 --> 03:10:01.000
that's the thing that

03:10:01.000 --> 03:10:03.000
Oh yeah

03:10:03.000 --> 03:10:05.000
That's the thing that's supposed

03:10:05.000 --> 03:10:07.000
to be

03:10:07.000 --> 03:10:09.000
to be doing this

03:10:11.000 --> 03:10:13.000
And then

03:10:13.000 --> 03:10:15.000
this is

03:10:15.000 --> 03:10:17.000
where we

03:10:17.000 --> 03:10:19.000
I

03:10:19.000 --> 03:10:21.000
don't know if

03:10:21.000 --> 03:10:23.000
this will

03:10:23.000 --> 03:10:25.000
work, but maybe it

03:10:25.000 --> 03:10:27.000
does, so let's

03:10:27.000 --> 03:10:29.000
can we

03:10:29.000 --> 03:10:31.000
see if this works?

03:10:31.000 --> 03:10:33.000
That should do it, I think

03:10:33.000 --> 03:10:35.000
so

03:10:35.000 --> 03:10:37.000
yeah, is this actually

03:10:37.000 --> 03:10:39.000
going to log anything?

03:10:39.000 --> 03:10:41.000
So this is going to re-render

03:10:41.000 --> 03:10:43.000
Oh, yeah, this might actually do

03:10:43.000 --> 03:10:45.000
a lot more, so as I

03:10:45.000 --> 03:10:47.000
start typing, nothing is changing

03:10:48.000 --> 03:10:50.000
Does it

03:10:50.000 --> 03:10:52.000
Let's see handlePopState

03:10:58.000 --> 03:11:00.000
Well, only I can see it, sadly

03:11:00.000 --> 03:11:02.000
But as I, okay, it's not

03:11:02.000 --> 03:11:04.000
doing handlePopState

03:11:04.000 --> 03:11:06.000
It's not calling it? Maybe I

03:11:06.000 --> 03:11:08.000
miss, is that wrong?

03:11:08.000 --> 03:11:10.000
Because I think you

03:11:10.000 --> 03:11:12.000
were calling the replaceState, right?

03:11:12.000 --> 03:11:14.000
I think you're right

03:11:14.000 --> 03:11:16.000
windowPopState

03:11:16.000 --> 03:11:18.000
I don't think it's going to

03:11:18.000 --> 03:11:20.000
fire

03:11:20.000 --> 03:11:22.000
navigateSessionHistory, right

03:11:24.000 --> 03:11:26.000
It changes the currentHistory

03:11:26.000 --> 03:11:28.000
entry to that of the last page

03:11:28.000 --> 03:11:30.000
of the, right, so it might

03:11:30.000 --> 03:11:32.000
require pushState instead of

03:11:32.000 --> 03:11:34.000
replaceState in order for it to work

03:11:34.000 --> 03:11:36.000
No, that

03:11:36.000 --> 03:11:38.000
doesn't sound plausible

03:11:38.000 --> 03:11:40.000
to me

03:11:40.000 --> 03:11:42.000
I think

03:11:42.000 --> 03:11:44.000
replaceState should trigger

03:11:44.000 --> 03:11:46.000
the browser

03:11:46.000 --> 03:11:48.000
I would think so

03:11:48.000 --> 03:11:50.000
Is this

03:11:52.000 --> 03:11:54.000
Okay, maybe

03:11:56.000 --> 03:11:58.000
Sorry, I'm just going to debug this

03:11:58.000 --> 03:12:00.000
locally in, like, Chrome

03:12:00.000 --> 03:12:02.000
I don't see anything that's happening

03:12:02.000 --> 03:12:04.000
It's very hard to do anything

03:12:04.000 --> 03:12:06.000
if I don't have the console

03:12:06.000 --> 03:12:08.000
I can do one last try

03:12:08.000 --> 03:12:10.000
on just sharing the browser window

03:12:10.000 --> 03:12:12.000
instead and see if it actually

03:12:12.000 --> 03:12:14.000
Yeah, let's try sharing the browser window

03:12:14.000 --> 03:12:16.000
Yeah

03:12:16.000 --> 03:12:18.000
I can do that

03:12:18.000 --> 03:12:20.000
shareScreen

03:12:20.000 --> 03:12:22.000
window

03:12:22.000 --> 03:12:24.000
There

03:12:24.000 --> 03:12:26.000
All right, and I'm going to start typing

03:12:26.000 --> 03:12:28.000
It is working, I think

03:12:28.000 --> 03:12:30.000
Oh, but then it stopped

03:12:30.000 --> 03:12:32.000
Okay, no, I see

03:12:32.000 --> 03:12:34.000
typing, okay, so

03:12:34.000 --> 03:12:36.000
Does it understand correctly that

03:12:36.000 --> 03:12:38.000
handled never runs?

03:12:38.000 --> 03:12:40.000
Yeah, handledPopState

03:12:40.000 --> 03:12:42.000
Yeah, handledPopState's never running

03:12:42.000 --> 03:12:44.000
HandledPopState is not

03:12:44.000 --> 03:12:46.000
But we do have

03:12:46.000 --> 03:12:48.000
We do have it

03:12:48.000 --> 03:12:50.000
That's so weird

03:12:50.000 --> 03:12:52.000
Let me just try this

03:12:52.000 --> 03:12:54.000
Let me try this locally

03:12:54.000 --> 03:12:56.000
I'll just try to do

03:12:56.000 --> 03:12:58.000
window.addEventListener

03:12:58.000 --> 03:13:00.000
popState

03:13:00.000 --> 03:13:02.000
with some

03:13:02.000 --> 03:13:04.000
log

03:13:04.000 --> 03:13:06.000
Sure

03:13:06.000 --> 03:13:08.000
listener, and then I'm going to try to

03:13:08.000 --> 03:13:10.000
window.history.replaceState

03:13:12.000 --> 03:13:14.000
with some

03:13:16.000 --> 03:13:18.000
Oh, yeah, that doesn't

03:13:18.000 --> 03:13:20.000
run it for some reason for me either

03:13:20.000 --> 03:13:22.000
Let me try pushState

03:13:22.000 --> 03:13:24.000
Maybe you were right

03:13:24.000 --> 03:13:26.000
No, pushState doesn't do this either

03:13:28.000 --> 03:13:30.000
handledPopState

03:13:32.000 --> 03:13:34.000
Does anyone, can you ask somebody

03:13:34.000 --> 03:13:36.000
who knows how

03:13:36.000 --> 03:13:38.000
browsers work?

03:13:38.000 --> 03:13:40.000
Why is this not doing anything?

03:13:40.000 --> 03:13:42.000
Yeah, I'm sure there's a lot of people in chat

03:13:42.000 --> 03:13:44.000
who know how browsers work

03:13:44.000 --> 03:13:46.000
I can also

03:13:46.000 --> 03:13:48.000
Well

03:13:48.000 --> 03:13:50.000
There's people I can message

03:13:50.000 --> 03:13:52.000
Because like the

03:13:52.000 --> 03:13:54.000
mdn, I'm looking at the mdn examples

03:13:54.000 --> 03:13:56.000
It's right here

03:13:56.000 --> 03:13:58.000
They show the exact same thing

03:13:58.000 --> 03:14:00.000
Right?

03:14:00.000 --> 03:14:02.000
What is different in what we're doing?

03:14:02.000 --> 03:14:04.000
Oh

03:14:04.000 --> 03:14:06.000
Oh, interesting

03:14:06.000 --> 03:14:08.000
Yeah, notice that the pushStates don't

03:14:08.000 --> 03:14:10.000
do it, but back and go will

03:14:10.000 --> 03:14:12.000
log

03:14:12.000 --> 03:14:14.000
Oh

03:14:14.000 --> 03:14:16.000
I forgot that's how it works

03:14:16.000 --> 03:14:18.000
This is so confusing

03:14:18.000 --> 03:14:20.000
Because this API was invented

03:14:20.000 --> 03:14:22.000
before client-side routing

03:14:22.000 --> 03:14:24.000
Yeah, so there's a new

03:14:24.000 --> 03:14:26.000
transitions API, which I don't know enough

03:14:26.000 --> 03:14:28.000
about, but that can be

03:14:28.000 --> 03:14:30.000
one way to try

03:14:30.000 --> 03:14:32.000
Let's see, I think I saw something like this

03:14:32.000 --> 03:14:34.000
recently

03:14:34.000 --> 03:14:36.000
So, replacement for history

03:14:36.000 --> 03:14:38.000
Yeah, that's why people use this history

03:14:38.000 --> 03:14:40.000
package, I think that's

03:14:40.000 --> 03:14:42.000
Oh yeah, that's it

03:14:42.000 --> 03:14:44.000
New API for

03:14:44.000 --> 03:14:46.000
How do I search this?

03:14:46.000 --> 03:14:48.000
Like, mdn

03:14:48.000 --> 03:14:50.000
history, API

03:14:50.000 --> 03:14:52.000
replacement

03:14:54.000 --> 03:14:56.000
I don't remember the new name

03:14:56.000 --> 03:14:58.000
What is the new

03:14:58.000 --> 03:15:00.000
Can I ask chatGP?

03:15:00.000 --> 03:15:02.000
Maybe it doesn't know

03:15:02.000 --> 03:15:04.000
We can ask

03:15:04.000 --> 03:15:06.000
What's the name of the spec

03:15:06.000 --> 03:15:08.000
that

03:15:08.000 --> 03:15:10.000
supersedes

03:15:10.000 --> 03:15:12.000
history API

03:15:12.000 --> 03:15:14.000
for browsers

03:15:14.000 --> 03:15:16.000
I've definitely read about

03:15:16.000 --> 03:15:18.000
Yeah

03:15:18.000 --> 03:15:20.000
There is, yeah, the new transition is going to

03:15:20.000 --> 03:15:22.000
assume a navigation is happening

03:15:22.000 --> 03:15:24.000
and it's going to slide in a new page

03:15:24.000 --> 03:15:26.000
which is actually not what we're trying to do

03:15:26.000 --> 03:15:28.000
viewTransitions

03:15:28.000 --> 03:15:30.000
No, I think viewTransitions

03:15:30.000 --> 03:15:32.000
has something to do with

03:15:32.000 --> 03:15:34.000
I think that's different

03:15:36.000 --> 03:15:38.000
It's about

03:15:38.000 --> 03:15:40.000
making it look

03:15:40.000 --> 03:15:42.000
nicer, right?

03:15:42.000 --> 03:15:44.000
It's about navigating

03:15:44.000 --> 03:15:46.000
It's meant to be different

03:15:46.000 --> 03:15:48.000
than doing a manual push

03:15:48.000 --> 03:15:50.000
state and changing parts of the page

03:15:50.000 --> 03:15:52.000
where you can say start viewTransition

03:15:52.000 --> 03:15:54.000
get a snapshot of what's on the page right now

03:15:54.000 --> 03:15:56.000
and then replace the DOM here

03:15:56.000 --> 03:15:58.000
It assumes DOM's being replaced

03:15:58.000 --> 03:16:00.000
Yes, I found it

03:16:00.000 --> 03:16:02.000
The new thing is called navigation API

03:16:02.000 --> 03:16:04.000
It's window.navigation

03:16:04.000 --> 03:16:06.000
Let's see if that's

03:16:06.000 --> 03:16:08.000
Is that different?

03:16:08.000 --> 03:16:10.000
Yeah

03:16:10.000 --> 03:16:12.000
So maybe window.navigation

03:16:14.000 --> 03:16:16.000
Let's see if I can

03:16:16.000 --> 03:16:18.000
navigation API

03:16:18.000 --> 03:16:20.000
blah blah blah

03:16:20.000 --> 03:16:22.000
navigate

03:16:22.000 --> 03:16:24.000
How do you

03:16:24.000 --> 03:16:26.000
replace?

03:16:26.000 --> 03:16:28.000
I actually don't see that

03:16:28.000 --> 03:16:30.000
navigate

03:16:30.000 --> 03:16:32.000
So if I go to navigate

03:16:32.000 --> 03:16:34.000
options

03:16:34.000 --> 03:16:36.000
the current state

03:16:36.000 --> 03:16:38.000
info

03:16:38.000 --> 03:16:40.000
history, replace

03:16:40.000 --> 03:16:42.000
Okay, you can do that

03:16:42.000 --> 03:16:44.000
Where is that?

03:16:44.000 --> 03:16:46.000
I'm looking

03:16:46.000 --> 03:16:48.000
through, oh yeah, it's addEventList or

03:16:48.000 --> 03:16:50.000
navigate, this could work

03:16:50.000 --> 03:16:52.000
So what you would do instead of history

03:16:52.000 --> 03:16:54.000
is

03:16:54.000 --> 03:16:56.000
inside of search

03:16:56.000 --> 03:16:58.000
just search

03:16:58.000 --> 03:17:00.000
It should be window.navigation

03:17:02.000 --> 03:17:04.000
Oh, I'm actually not getting

03:17:04.000 --> 03:17:06.000
the API

03:17:06.000 --> 03:17:08.000
Is it too new?

03:17:08.000 --> 03:17:10.000
I'm just going to try and navigate

03:17:10.000 --> 03:17:12.000
Yeah, it's too new, it's experimental

03:17:12.000 --> 03:17:14.000
Yeah, that's fine

03:17:14.000 --> 03:17:16.000
So yeah, we navigate to that

03:17:16.000 --> 03:17:18.000
and then options you can say

03:17:18.000 --> 03:17:20.000
not replace

03:17:20.000 --> 03:17:22.000
true, it's

03:17:24.000 --> 03:17:26.000
history, replace

03:17:26.000 --> 03:17:28.000
Okay

03:17:30.000 --> 03:17:32.000
That'll do it

03:17:32.000 --> 03:17:34.000
And let's try to

03:17:34.000 --> 03:17:36.000
listen to, what is the

03:17:36.000 --> 03:17:38.000
event handler on?

03:17:38.000 --> 03:17:40.000
Just navigate

03:17:40.000 --> 03:17:42.000
And it's also suggesting

03:17:42.000 --> 03:17:44.000
an event.intercept

03:17:44.000 --> 03:17:46.000
I don't know why

03:17:46.000 --> 03:17:48.000
I don't know what that is, let's for now

03:17:48.000 --> 03:17:50.000
ignore whatever that is

03:17:50.000 --> 03:17:52.000
Yeah, that's intercepting

03:17:52.000 --> 03:17:54.000
Yeah, I don't know

03:17:54.000 --> 03:17:56.000
because you're already intercepting if you're listening

03:17:56.000 --> 03:17:58.000
I guess

03:17:58.000 --> 03:18:00.000
So I'm going to change this to

03:18:00.000 --> 03:18:02.000
handleNavigate

03:18:02.000 --> 03:18:04.000
and let's see if that

03:18:04.000 --> 03:18:06.000
even gets triggered

03:18:06.000 --> 03:18:08.000
Can you check?

03:18:08.000 --> 03:18:10.000
Let's check

03:18:11.000 --> 03:18:13.000
All right

03:18:13.000 --> 03:18:15.000
Reload here

03:18:17.000 --> 03:18:19.000
And as we type, it's actually not

03:18:19.000 --> 03:18:21.000
It's not letting me type

03:18:23.000 --> 03:18:25.000
Let me see here

03:18:25.000 --> 03:18:27.000
It's not letting me

03:18:27.000 --> 03:18:29.000
type

03:18:29.000 --> 03:18:31.000
It's not letting me type

03:18:31.000 --> 03:18:33.000
Uh

03:18:39.000 --> 03:18:41.000
I just

03:18:41.000 --> 03:18:43.000
I wonder if it's

03:18:43.000 --> 03:18:45.000
re-fetching the page when I type

03:18:45.000 --> 03:18:47.000
it's losing the context and then it's all

03:18:47.000 --> 03:18:49.000
gone

03:18:49.000 --> 03:18:51.000
Maybe we need to disable

03:18:51.000 --> 03:18:53.000
some things that are happening, just to be sure

03:18:53.000 --> 03:18:55.000
Yeah

03:18:59.000 --> 03:19:01.000
Yeah, just don't do this part

03:19:01.000 --> 03:19:03.000
but log it

03:19:03.000 --> 03:19:05.000
Yeah, okay, let's do this

03:19:07.000 --> 03:19:09.000
Oh, now I get

03:19:09.000 --> 03:19:11.000
actual errors

03:19:11.000 --> 03:19:13.000
Navigate is not defined. What?

03:19:13.000 --> 03:19:15.000
Okay, okay

03:19:15.000 --> 03:19:17.000
This is all, like, we're going down

03:19:17.000 --> 03:19:19.000
the rabbit hole. Let's do it completely differently

03:19:19.000 --> 03:19:21.000
I'm just going to

03:19:21.000 --> 03:19:23.000
This is too much

03:19:23.000 --> 03:19:25.000
We're going to do this

03:19:25.000 --> 03:19:27.000
I wanted to know about the browser APIs, though

03:19:27.000 --> 03:19:29.000
It's a shame

03:19:29.000 --> 03:19:31.000
The browser API

03:19:31.000 --> 03:19:33.000
We're going to invent our own browser APIs

03:19:33.000 --> 03:19:35.000
I was thinking some custom events or something

03:19:35.000 --> 03:19:37.000
We can do this

03:19:37.000 --> 03:19:39.000
Yeah, we're just going to be

03:19:39.000 --> 03:19:41.000
window on

03:19:41.000 --> 03:19:43.000
URL changed

03:19:43.000 --> 03:19:45.000
That's going to be our custom

03:19:45.000 --> 03:19:47.000
I mean, this doesn't make any sense

03:19:47.000 --> 03:19:49.000
but I don't want to

03:19:50.000 --> 03:19:52.000
I think my patience

03:19:52.000 --> 03:19:54.000
is a bit

03:19:54.000 --> 03:19:56.000
Yeah, we're just going to have

03:19:56.000 --> 03:19:58.000
Yeah, that'll do. Let's do that

03:19:58.000 --> 03:20:00.000
That's, you know

03:20:00.000 --> 03:20:02.000
callbacks

03:20:02.000 --> 03:20:04.000
Yeah, I was going to do it a little bit more politely

03:20:04.000 --> 03:20:06.000
This is fine

03:20:06.000 --> 03:20:08.000
Yeah, we're just going to do this

03:20:08.000 --> 03:20:10.000
and then we're going to

03:20:10.000 --> 03:20:12.000
we're just going to do, like, callbacks

03:20:12.000 --> 03:20:14.000
push

03:20:14.000 --> 03:20:16.000
navigate

03:20:16.000 --> 03:20:18.000
and then this is going to be

03:20:18.000 --> 03:20:20.000
something like

03:20:20.000 --> 03:20:22.000
callbacks

03:20:22.000 --> 03:20:24.000
Yeah, just pop it off

03:20:24.000 --> 03:20:26.000
or slice

03:20:30.000 --> 03:20:32.000
Oh

03:20:32.000 --> 03:20:34.000
Yeah, that worked

03:20:34.000 --> 03:20:36.000
Maybe like this

03:20:36.000 --> 03:20:38.000
Can we see if that

03:20:38.000 --> 03:20:40.000
is called?

03:20:40.000 --> 03:20:42.000
Let's see

03:20:42.000 --> 03:20:44.000
Handled

03:20:44.000 --> 03:20:46.000
Yeah

03:20:46.000 --> 03:20:48.000
Okay, so now let's try to update

03:20:48.000 --> 03:20:50.000
the state as well

03:20:54.000 --> 03:20:56.000
Oh, it's filtering

03:20:56.000 --> 03:20:58.000
Is it working?

03:20:58.000 --> 03:21:00.000
Oh my god!

03:21:00.000 --> 03:21:02.000
Okay, it hides the search box

03:21:02.000 --> 03:21:04.000
while we're searching because we put it

03:21:04.000 --> 03:21:06.000
behind the wrong suspense

03:21:06.000 --> 03:21:08.000
but oh my god, it works

03:21:08.000 --> 03:21:10.000
So, wait, this is actually the part

03:21:10.000 --> 03:21:12.000
that we can fix

03:21:12.000 --> 03:21:14.000
So the issue is that

03:21:14.000 --> 03:21:16.000
Can you demonstrate the problem?

03:21:16.000 --> 03:21:18.000
Yeah

03:21:20.000 --> 03:21:22.000
Yeah, I can follow you

03:21:22.000 --> 03:21:24.000
Perfect

03:21:24.000 --> 03:21:26.000
Can you show the

03:21:26.000 --> 03:21:28.000
I guess I don't see it because the stream is not fast enough

03:21:28.000 --> 03:21:30.000
I don't know if people see it

03:21:30.000 --> 03:21:32.000
The problem is

03:21:32.000 --> 03:21:34.000
Let's increase the delay so that

03:21:34.000 --> 03:21:36.000
it's, yeah, okay

03:21:36.000 --> 03:21:38.000
So the search bar disappears

03:21:38.000 --> 03:21:40.000
because we actually need to get

03:21:40.000 --> 03:21:42.000
the server component output

03:21:42.000 --> 03:21:44.000
And the server component output is waiting

03:21:44.000 --> 03:21:46.000
for that filter

03:21:46.000 --> 03:21:48.000
or whatever

03:21:48.000 --> 03:21:50.000
to fetch the data before

03:21:50.000 --> 03:21:52.000
we can even know what to show

03:21:52.000 --> 03:21:54.000
and so it suspends

03:21:54.000 --> 03:21:56.000
And so the way

03:21:56.000 --> 03:21:58.000
the way you handle it

03:22:00.000 --> 03:22:02.000
One thing we could do

03:22:02.000 --> 03:22:04.000
is maybe restructure it a little bit

03:22:04.000 --> 03:22:06.000
so that the

03:22:06.000 --> 03:22:08.000
search input isn't kind of blocked

03:22:08.000 --> 03:22:10.000
on anything

03:22:10.000 --> 03:22:12.000
But the

03:22:12.000 --> 03:22:14.000
idiomatic solution in React is

03:22:16.000 --> 03:22:18.000
router changes

03:22:18.000 --> 03:22:20.000
Again, this is

03:22:20.000 --> 03:22:22.000
primarily if you're developing the framework

03:22:22.000 --> 03:22:24.000
I think this is something like

03:22:24.000 --> 03:22:26.000
if you're making a framework for

03:22:26.000 --> 03:22:28.000
server components, this is something

03:22:28.000 --> 03:22:30.000
you should probably know, is that

03:22:30.000 --> 03:22:32.000
the route changes

03:22:32.000 --> 03:22:34.000
so the set states

03:22:34.000 --> 03:22:36.000
that lead the route changes

03:22:36.000 --> 03:22:38.000
should be wrapped into transitions

03:22:38.000 --> 03:22:40.000
So what I'm going to do is

03:22:40.000 --> 03:22:42.000
I'm going to import startTransition

03:22:42.000 --> 03:22:44.000
from React here

03:22:44.000 --> 03:22:46.000
Ooh, yes

03:22:46.000 --> 03:22:48.000
I wanted a transition demo

03:22:48.000 --> 03:22:50.000
Okay

03:22:50.000 --> 03:22:52.000
And so I'm going to wrap the set state

03:22:52.000 --> 03:22:54.000
into a transition

03:22:54.000 --> 03:22:56.000
And so this tells React that

03:22:56.000 --> 03:22:58.000
actually it's okay for

03:22:58.000 --> 03:23:00.000
the screen to be inconsistent

03:23:00.000 --> 03:23:02.000
So even though we know we're fetching something

03:23:02.000 --> 03:23:04.000
we're waiting for something to happen

03:23:04.000 --> 03:23:06.000
it's okay to let that

03:23:06.000 --> 03:23:08.000
We don't need to immediately

03:23:08.000 --> 03:23:10.000
show the spinner, we can actually wait

03:23:10.000 --> 03:23:12.000
for that thing to be

03:23:12.000 --> 03:23:14.000
complete enough that

03:23:14.000 --> 03:23:16.000
Oh!

03:23:16.000 --> 03:23:18.000
I've been wanting to understand transition for so

03:23:18.000 --> 03:23:20.000
long and I get it

03:23:20.000 --> 03:23:22.000
I see the use case there

03:23:22.000 --> 03:23:24.000
And everything works

03:23:24.000 --> 03:23:26.000
Yeah, and so what should also

03:23:26.000 --> 03:23:28.000
work now is

03:23:28.000 --> 03:23:30.000
Cached ones are faster

03:23:30.000 --> 03:23:32.000
Yeah, so now if you type the same thing again because you've

03:23:32.000 --> 03:23:34.000
cached the server component

03:23:34.000 --> 03:23:36.000
the response is

03:23:36.000 --> 03:23:38.000
Ooh, yeah

03:23:38.000 --> 03:23:40.000
Oh, this is mind-blowing

03:23:40.000 --> 03:23:42.000
I love that cache was involved too

03:23:42.000 --> 03:23:44.000
The other thing we can try

03:23:44.000 --> 03:23:46.000
which I don't know if it's going to work

03:23:46.000 --> 03:23:48.000
because we had a bug related to this

03:23:48.000 --> 03:23:50.000
but I think maybe it works

03:23:50.000 --> 03:23:52.000
is I'm going to go to search.jsx

03:23:52.000 --> 03:23:54.000
and I'm also going

03:23:54.000 --> 03:23:56.000
to

03:23:56.000 --> 03:23:58.000
Yeah, so

03:23:58.000 --> 03:24:00.000
Okay, yeah

03:24:00.000 --> 03:24:02.000
Okay

03:24:02.000 --> 03:24:04.000
I'm also going to

03:24:04.000 --> 03:24:06.000
add useTransition here

03:24:06.000 --> 03:24:08.000
So if you only want to start a transition

03:24:08.000 --> 03:24:10.000
you can just start a transition

03:24:10.000 --> 03:24:12.000
But if you want to show visual feedback in the

03:24:12.000 --> 03:24:14.000
component tree itself

03:24:14.000 --> 03:24:16.000
when something is being refetched

03:24:16.000 --> 03:24:18.000
and you don't want it to be just

03:24:18.000 --> 03:24:20.000
like the user doesn't know what's happening

03:24:20.000 --> 03:24:22.000
you can

03:24:22.000 --> 03:24:24.000
have useTransition here

03:24:24.000 --> 03:24:26.000
And that gives you this

03:24:28.000 --> 03:24:30.000
Let's call it startTransition

03:24:30.000 --> 03:24:32.000
useTransition

03:24:32.000 --> 03:24:34.000
So that gives you this expanding Boolean

03:24:34.000 --> 03:24:36.000
And so what you can do is

03:24:36.000 --> 03:24:38.000
I know that

03:24:40.000 --> 03:24:42.000
You know, this is

03:24:42.000 --> 03:24:44.000
I'm actually going to

03:24:44.000 --> 03:24:46.000
I'm going to rename this

03:24:46.000 --> 03:24:48.000
I'll call this

03:24:48.000 --> 03:24:50.000
Well, okay, that's what I'm going to do

03:24:50.000 --> 03:24:52.000
I'm going to call this window.router.navigate

03:24:54.000 --> 03:24:56.000
to here

03:24:56.000 --> 03:24:58.000
And I'll just

03:24:58.000 --> 03:25:00.000
That's supposed to be

03:25:00.000 --> 03:25:02.000
your framework

03:25:02.000 --> 03:25:04.000
I mean, you wouldn't put it on the window variable, of course

03:25:06.000 --> 03:25:08.000
But it would be like

03:25:08.000 --> 03:25:10.000
Yeah, but that's

03:25:10.000 --> 03:25:12.000
We're going to go back to the root.client

03:25:12.000 --> 03:25:14.000
And I'll just

03:25:14.000 --> 03:25:16.000
This is going to be our toy router that has

03:25:16.000 --> 03:25:18.000
navigate the URL

03:25:18.000 --> 03:25:20.000
And so this is the part that actually does

03:25:20.000 --> 03:25:22.000
the

03:25:22.000 --> 03:25:24.000
This is the URL

03:25:24.000 --> 03:25:26.000
It does the state and then

03:25:26.000 --> 03:25:28.000
It calls

03:25:28.000 --> 03:25:30.000
the callbacks we registered

03:25:30.000 --> 03:25:32.000
So I

03:25:32.000 --> 03:25:34.000
think

03:25:34.000 --> 03:25:36.000
window.router.navigate

03:25:36.000 --> 03:25:38.000
replace state URL

03:25:38.000 --> 03:25:40.000
Okay

03:25:40.000 --> 03:25:42.000
Yeah, and so this is

03:25:44.000 --> 03:25:46.000
Say again

03:25:48.000 --> 03:25:50.000
We're hitting a client error

03:25:50.000 --> 03:25:52.000
What is the error?

03:25:52.000 --> 03:25:54.000
The user, no, no, not that

03:25:54.000 --> 03:25:56.000
Callbacks is not defined. Okay

03:25:56.000 --> 03:25:58.000
It's just a

03:25:58.000 --> 03:26:00.000
Yeah, it's just a typo

03:26:02.000 --> 03:26:04.000
I think I deleted it accidentally

03:26:04.000 --> 03:26:06.000
Yeah, we just deleted it

03:26:08.000 --> 03:26:10.000
Okay, let's try again

03:26:10.000 --> 03:26:12.000
Okay, that's working

03:26:12.000 --> 03:26:14.000
Yeah, so now let's go back to the search

03:26:14.000 --> 03:26:16.000
And let's say

03:26:18.000 --> 03:26:20.000
Oh, and look at this

03:26:20.000 --> 03:26:22.000
We can actually see all the requests coming down the wire too

03:26:22.000 --> 03:26:24.000
It's going to

03:26:24.000 --> 03:26:26.000
keep doing this

03:26:26.000 --> 03:26:28.000
So let's add a little bit

03:26:28.000 --> 03:26:30.000
Yeah, that's a new

03:26:30.000 --> 03:26:32.000
Can I add this back?

03:26:34.000 --> 03:26:36.000
This is going to look a little bit ugly

03:26:36.000 --> 03:26:38.000
But I'm just going to add like a

03:26:38.000 --> 03:26:40.000
Also like if is pending

03:26:40.000 --> 03:26:42.000
Then I'm going to

03:26:42.000 --> 03:26:44.000
add like a little

03:26:46.000 --> 03:26:48.000
You know, like a little

03:26:48.000 --> 03:26:50.000
I don't know

03:26:50.000 --> 03:26:52.000
Margin left

03:26:52.000 --> 03:26:54.000
Two or something

03:26:56.000 --> 03:26:58.000
I don't remember how to do it

03:26:58.000 --> 03:27:00.000
Sure

03:27:00.000 --> 03:27:02.000
But let's see

03:27:02.000 --> 03:27:04.000
Yeah

03:27:04.000 --> 03:27:06.000
Yeah, I think italics are what we want here

03:27:06.000 --> 03:27:08.000
That should work

03:27:08.000 --> 03:27:10.000
So can we see

03:27:10.000 --> 03:27:12.000
if that does anything?

03:27:12.000 --> 03:27:14.000
It looks like it is

03:27:14.000 --> 03:27:16.000
Yeah, we get a little

03:27:16.000 --> 03:27:18.000
We get a little loading

03:27:18.000 --> 03:27:20.000
flash

03:27:20.000 --> 03:27:22.000
But if we do something

03:27:22.000 --> 03:27:24.000
and it's cached

03:27:24.000 --> 03:27:26.000
It's pretty much instant

03:27:26.000 --> 03:27:28.000
It shows a little flash of it

03:27:28.000 --> 03:27:30.000
while it fetches from the cache

03:27:30.000 --> 03:27:32.000
Yeah

03:27:32.000 --> 03:27:34.000
So the way you deal with like

03:27:34.000 --> 03:27:36.000
So what we kind of want to do here

03:27:36.000 --> 03:27:38.000
is like we want to show

03:27:40.000 --> 03:27:42.000
You see like

03:27:42.000 --> 03:27:44.000
this you are looking for

03:27:44.000 --> 03:27:46.000
So this is the

03:27:46.000 --> 03:27:48.000
example that we have

03:27:48.000 --> 03:27:50.000
It doesn't quite make sense

03:27:50.000 --> 03:27:52.000
Well

03:27:52.000 --> 03:27:54.000
So this is the thing that will be updated later

03:27:54.000 --> 03:27:56.000
Because like we need to go to the server

03:27:56.000 --> 03:27:58.000
And like that part is like on the server

03:27:58.000 --> 03:28:00.000
And we could have moved that to the client

03:28:00.000 --> 03:28:02.000
And like show it in the search box instead

03:28:02.000 --> 03:28:04.000
So I think it just depends on like

03:28:04.000 --> 03:28:06.000
What kind of UI do you want?

03:28:06.000 --> 03:28:08.000
Like do you want

03:28:08.000 --> 03:28:10.000
You know

03:28:10.000 --> 03:28:12.000
Like other patterns could be

03:28:12.000 --> 03:28:14.000
Like grayed out

03:28:14.000 --> 03:28:16.000
While the

03:28:16.000 --> 03:28:18.000
While you're refetching it

03:28:18.000 --> 03:28:20.000
So that's another

03:28:20.000 --> 03:28:22.000
kind of common pattern

03:28:22.000 --> 03:28:24.000
Yeah

03:28:24.000 --> 03:28:26.000
Maybe do you want to

03:28:26.000 --> 03:28:28.000
try to do that?

03:28:28.000 --> 03:28:30.000
Sure, yeah

03:28:30.000 --> 03:28:32.000
Could be fun

03:28:36.000 --> 03:28:38.000
It's a little bit

03:28:38.000 --> 03:28:40.000
It's a little bit trickier

03:28:40.000 --> 03:28:42.000
to figure out how to do this

03:28:42.000 --> 03:28:44.000
Yeah, okay, I'll be honest

03:28:44.000 --> 03:28:46.000
I was reading something from chat and missed the last 20 seconds

03:28:46.000 --> 03:28:48.000
of what you said. Can you say that again?

03:28:48.000 --> 03:28:50.000
Yeah, I was saying

03:28:50.000 --> 03:28:52.000
Now like we

03:28:52.000 --> 03:28:54.000
We can kind of

03:28:54.000 --> 03:28:56.000
I don't know

03:28:56.000 --> 03:28:58.000
Maybe we should go through the code

03:28:58.000 --> 03:29:00.000
And just kind of recap

03:29:00.000 --> 03:29:02.000
Because like we have a solution now

03:29:02.000 --> 03:29:04.000
So it seems like a good time

03:29:04.000 --> 03:29:06.000
Like we built a tiny framework

03:29:06.000 --> 03:29:08.000
That does a little bit of routing

03:29:08.000 --> 03:29:10.000
In a way that

03:29:10.000 --> 03:29:12.000
Works with server components

03:29:12.000 --> 03:29:14.000
So maybe it's a good time to recap

03:29:14.000 --> 03:29:16.000
What's going on in our

03:29:16.000 --> 03:29:18.000
setup. Do you want to try to do that?

03:29:18.000 --> 03:29:20.000
Let's do it

03:29:20.000 --> 03:29:22.000
Yeah, so I

03:29:22.000 --> 03:29:24.000
Will try to trace it from the top

03:29:24.000 --> 03:29:26.000
But basically what we built

03:29:26.000 --> 03:29:28.000
Is a

03:29:28.000 --> 03:29:30.000
Search box

03:29:30.000 --> 03:29:32.000
That's able to have just a little bit

03:29:32.000 --> 03:29:34.000
Of client-side JavaScript in order to

03:29:34.000 --> 03:29:36.000
Store a state

03:29:36.000 --> 03:29:38.000
Of what you're trying to search for

03:29:38.000 --> 03:29:40.000
And then anytime you put in an input

03:29:40.000 --> 03:29:42.000
We're updating the URL bar up here

03:29:42.000 --> 03:29:44.000
At the top

03:29:44.000 --> 03:29:46.000
And anytime that you update the URL

03:29:46.000 --> 03:29:48.000
We want to re-render

03:29:48.000 --> 03:29:50.000
The parts of the page that depends on that URL

03:29:50.000 --> 03:29:52.000
Here the part that depends is

03:29:52.000 --> 03:29:54.000
The amount of albums that we're showing

03:29:54.000 --> 03:29:56.000
So when we say search post, we want to

03:29:56.000 --> 03:29:58.000
Go to the server, figure out which albums

03:29:58.000 --> 03:30:00.000
Actually have the word post in them

03:30:00.000 --> 03:30:02.000
And then send that new result

03:30:02.000 --> 03:30:04.000
Down to the client

03:30:04.000 --> 03:30:06.000
Without actually having to render all of those albums

03:30:06.000 --> 03:30:08.000
With client-side JavaScript

03:30:08.000 --> 03:30:10.000
So if we head over to our root

03:30:10.000 --> 03:30:12.000
Client where we're doing this

03:30:12.000 --> 03:30:14.000
Slight hack, but you could formalize

03:30:14.000 --> 03:30:16.000
This into a framework as Dan mentioned

03:30:16.000 --> 03:30:18.000
In here

03:30:18.000 --> 03:30:20.000
The client is able to trigger

03:30:20.000 --> 03:30:22.000
Navigate, or any client component

03:30:22.000 --> 03:30:24.000
Is able to trigger a navigate command

03:30:24.000 --> 03:30:26.000
Which will tell it the URL

03:30:26.000 --> 03:30:28.000
It wants to go to, we're going to use

03:30:28.000 --> 03:30:30.000
The web standard history API to update

03:30:30.000 --> 03:30:32.000
That state, and then pass in

03:30:32.000 --> 03:30:34.000
A callback here that's going

03:30:34.000 --> 03:30:36.000
To trigger

03:30:36.000 --> 03:30:38.000
Actual navigation events

03:30:38.000 --> 03:30:40.000
So we mentioned it a little bit earlier

03:30:40.000 --> 03:30:42.000
But we had a, now I'm actually

03:30:42.000 --> 03:30:44.000
Losing where it is, but yeah

03:30:44.000 --> 03:30:46.000
Way down here is where we're actually going to

03:30:46.000 --> 03:30:48.000
Fetch the server component and render it

03:30:48.000 --> 03:30:50.000
Onto the page

03:30:50.000 --> 03:30:52.000
But up here we're using an effect

03:30:52.000 --> 03:30:54.000
To say anytime that you

03:30:54.000 --> 03:30:56.000
Navigate on the page, first off we're going to

03:30:56.000 --> 03:30:58.000
Start a transition, which

03:30:58.000 --> 03:31:00.000
I'm still wrapping my head around a little bit

03:31:00.000 --> 03:31:02.000
But it's basically saying, keep the DOM

03:31:02.000 --> 03:31:04.000
That you already have

03:31:04.000 --> 03:31:06.000
Until all the other async stuff has resolved

03:31:06.000 --> 03:31:08.000
And then replace it

03:31:08.000 --> 03:31:10.000
Once all of that is settled, is that kind of what it's doing?

03:31:12.000 --> 03:31:14.000
It's, yeah, I would maybe

03:31:14.000 --> 03:31:16.000
And again, just to clarify

03:31:16.000 --> 03:31:18.000
This file we're looking at, that's not

03:31:18.000 --> 03:31:20.000
That is the part that's the framework part

03:31:20.000 --> 03:31:22.000
This is the framework part

03:31:22.000 --> 03:31:24.000
It's not the part that you're

03:31:24.000 --> 03:31:26.000
You don't need any effects here

03:31:26.000 --> 03:31:28.000
As a server components user or something like this

03:31:28.000 --> 03:31:30.000
So this is like the framework router part

03:31:30.000 --> 03:31:32.000
Really

03:31:32.000 --> 03:31:34.000
Actually I just realized that we made one

03:31:34.000 --> 03:31:36.000
Omission, which is, I think we still need

03:31:36.000 --> 03:31:38.000
To handle pop state

03:31:38.000 --> 03:31:40.000
Because we want the back button to work, right?

03:31:40.000 --> 03:31:42.000
So we want the back button to also

03:31:42.000 --> 03:31:44.000
Update the

03:31:46.000 --> 03:31:48.000
So I think that should

03:31:48.000 --> 03:31:50.000
That should give us the

03:31:50.000 --> 03:31:52.000
Well, I guess we don't, we replaced

03:31:52.000 --> 03:31:54.000
State, so it's, you're not going to see it

03:31:54.000 --> 03:31:56.000
Yeah, you're not going to see it

03:31:56.000 --> 03:31:58.000
But yeah, this is another thing

03:31:58.000 --> 03:32:00.000
That frameworks deal with, where if you

03:32:00.000 --> 03:32:02.000
Don't want to have like a full page refresh

03:32:02.000 --> 03:32:04.000
Every time, because if you did this fully server

03:32:04.000 --> 03:32:06.000
Side, we could anytime

03:32:06.000 --> 03:32:08.000
You type in the input, send a form request

03:32:08.000 --> 03:32:10.000
Refresh the page

03:32:10.000 --> 03:32:12.000
And send that new stuff down

03:32:12.000 --> 03:32:14.000
But here we want to say, don't refresh the whole page

03:32:14.000 --> 03:32:16.000
Keep it where it is, we're going to

03:32:16.000 --> 03:32:18.000
Handle those changes to the URL

03:32:18.000 --> 03:32:20.000
Bar ourselves, and we're going to

03:32:20.000 --> 03:32:22.000
Make sure like, when you do all your web standard

03:32:22.000 --> 03:32:24.000
Back buttons, they still work

03:32:24.000 --> 03:32:26.000
And when you actually navigate

03:32:26.000 --> 03:32:28.000
We don't want to blow away the app

03:32:28.000 --> 03:32:30.000
And re-render it top to bottom, we want to keep it where it is

03:32:30.000 --> 03:32:32.000
And trigger anyone that

03:32:32.000 --> 03:32:34.000
Cares about the transition to also

03:32:34.000 --> 03:32:36.000
Show little loading states

03:32:36.000 --> 03:32:38.000
Yeah, so just to clarify

03:32:38.000 --> 03:32:40.000
The start transition stuff here

03:32:40.000 --> 03:32:42.000
It doesn't prevent

03:32:42.000 --> 03:32:44.000
It doesn't have anything to do with

03:32:44.000 --> 03:32:46.000
Reloading the page completely

03:32:46.000 --> 03:32:48.000
Because React wouldn't reload the page

03:32:48.000 --> 03:32:50.000
We're just set in state

03:32:50.000 --> 03:32:52.000
There's no reason to reload the page

03:32:52.000 --> 03:32:54.000
What happens here

03:32:54.000 --> 03:32:56.000
Is it just prevents

03:32:56.000 --> 03:32:58.000
React from hiding content

03:32:58.000 --> 03:33:00.000
That was already visible

03:33:00.000 --> 03:33:02.000
Like if you're interacting with

03:33:02.000 --> 03:33:04.000
A search input, you don't want that

03:33:04.000 --> 03:33:06.000
Input to get hidden, because

03:33:06.000 --> 03:33:08.000
We're waiting

03:33:08.000 --> 03:33:10.000
Our new state is this response

03:33:10.000 --> 03:33:12.000
From the server that's still streaming in

03:33:12.000 --> 03:33:14.000
So start transition just says

03:33:14.000 --> 03:33:16.000
This state update is not urgent

03:33:16.000 --> 03:33:18.000
You don't have to

03:33:18.000 --> 03:33:20.000
React doesn't have to

03:33:20.000 --> 03:33:22.000
React can wait

03:33:22.000 --> 03:33:24.000
Until we have something

03:33:24.000 --> 03:33:26.000
Meaningful to show

03:33:26.000 --> 03:33:28.000
So in reality what that means

03:33:28.000 --> 03:33:30.000
Is it wouldn't wait

03:33:30.000 --> 03:33:32.000
It will wait long enough

03:33:32.000 --> 03:33:34.000
Not so that

03:33:34.000 --> 03:33:36.000
It doesn't have to hide any existing content

03:33:36.000 --> 03:33:38.000
But for example

03:33:38.000 --> 03:33:40.000
If your server response

03:33:40.000 --> 03:33:42.000
Includes some new suspense boundary

03:33:42.000 --> 03:33:44.000
With a bunch of stuff inside

03:33:44.000 --> 03:33:46.000
It's not going to wait for that

03:33:46.000 --> 03:33:48.000
Because there's no reason to

03:33:48.000 --> 03:33:50.000
But start transition

03:33:50.000 --> 03:33:52.000
Is this opt-in

03:33:52.000 --> 03:33:54.000
This is not urgent

03:33:54.000 --> 03:33:56.000
So you don't have to hide a bunch of stuff

03:33:56.000 --> 03:33:58.000
While we're waiting

03:33:58.000 --> 03:34:00.000
Keep things as they are

03:34:00.000 --> 03:34:02.000
And then we can keep track of them

03:34:02.000 --> 03:34:04.000
Inline in the search component

03:34:04.000 --> 03:34:06.000
It has an inline indicator

03:34:06.000 --> 03:34:08.000
That it's parent

03:34:08.000 --> 03:34:10.000
Is actually refetching

03:34:10.000 --> 03:34:12.000
But yeah

03:34:12.000 --> 03:34:14.000
This is kind of what it is

03:34:14.000 --> 03:34:16.000
That's what happens inside the framework

03:34:16.000 --> 03:34:18.000
But if we forget this file exists

03:34:18.000 --> 03:34:20.000
And we just approach it from

03:34:20.000 --> 03:34:22.000
I think it's helpful to describe it

03:34:22.000 --> 03:34:24.000
From the server components

03:34:24.000 --> 03:34:26.000
Point of view

03:34:26.000 --> 03:34:28.000
As a user you don't even have this root client.js file

03:34:28.000 --> 03:34:30.000
It's somewhere in the framework

03:34:30.000 --> 03:34:32.000
But as a user where do you start

03:34:32.000 --> 03:34:34.000
Where does the story start

03:34:34.000 --> 03:34:36.000
For a user

03:34:36.000 --> 03:34:38.000
Gotcha

03:34:38.000 --> 03:34:40.000
Because that's the boundary that we set

03:34:40.000 --> 03:34:42.000
With suspense

03:34:42.000 --> 03:34:44.000
Anytime you

03:34:44.000 --> 03:34:46.000
Well we can't see it anymore

03:34:46.000 --> 03:34:48.000
But it used to

03:34:48.000 --> 03:34:50.000
It'll sort of show that fallback

03:34:50.000 --> 03:34:52.000
And then show the whole result

03:34:52.000 --> 03:34:54.000
But what we've done is we've put the search box

03:34:54.000 --> 03:34:56.000
Alongside the stuff that's loading

03:34:56.000 --> 03:34:58.000
So in order to make sure all of

03:34:58.000 --> 03:35:00.000
The stuff you're looking at in the search box itself

03:35:00.000 --> 03:35:02.000
Aren't as you mentioned

03:35:02.000 --> 03:35:04.000
Removed from the page

03:35:04.000 --> 03:35:06.000
Or changed in some way

03:35:06.000 --> 03:35:08.000
Transition is the way to do that

03:35:08.000 --> 03:35:10.000
And I'm assuming

03:35:10.000 --> 03:35:12.000
Use transition is a pretty global thing

03:35:12.000 --> 03:35:14.000
So when you start transition

03:35:14.000 --> 03:35:16.000
Is it based on parents

03:35:16.000 --> 03:35:18.000
Where if a parent starts a transition

03:35:18.000 --> 03:35:20.000
The child picks it up here

03:35:20.000 --> 03:35:22.000
No

03:35:22.000 --> 03:35:24.000
It's really about the state updates

03:35:24.000 --> 03:35:26.000
It's like whatever you

03:35:26.000 --> 03:35:28.000
Whichever set state calls happen

03:35:28.000 --> 03:35:30.000
Inside of a strategic goal

03:35:30.000 --> 03:35:32.000
They are kind of marked as

03:35:32.000 --> 03:35:34.000
This stuff is not urgent

03:35:34.000 --> 03:35:36.000
And react will display the output

03:35:36.000 --> 03:35:38.000
When the stuff is ready

03:35:38.000 --> 03:35:40.000
But what I meant more

03:35:40.000 --> 03:35:42.000
I think if we ignore all this wiring

03:35:42.000 --> 03:35:44.000
And we focus on how you approach it as a user

03:35:44.000 --> 03:35:46.000
The entry point

03:35:46.000 --> 03:35:48.000
Is really root.server.js

03:35:48.000 --> 03:35:50.000
That's where the story starts

03:35:50.000 --> 03:35:52.000
From the user perspective

03:35:52.000 --> 03:35:54.000
And so you kind of just see it as

03:35:54.000 --> 03:35:56.000
You have a root component

03:35:56.000 --> 03:35:58.000
Like in this case server root

03:35:58.000 --> 03:36:00.000
That accepts the search

03:36:00.000 --> 03:36:02.000
And it doesn't matter if it's the first time it loads

03:36:02.000 --> 03:36:04.000
Or if it's like a refresh

03:36:04.000 --> 03:36:06.000
The way you think about it is the same

03:36:06.000 --> 03:36:08.000
It's like you got a response

03:36:08.000 --> 03:36:10.000
You got a request

03:36:10.000 --> 03:36:12.000
You're going to re-render the tree

03:36:12.000 --> 03:36:14.000
And so you think about it as

03:36:14.000 --> 03:36:16.000
I received some search query

03:36:16.000 --> 03:36:18.000
I'm going to pass it to albums

03:36:18.000 --> 03:36:20.000
Albums passes it to

03:36:20.000 --> 03:36:22.000
This searchable album list

03:36:22.000 --> 03:36:24.000
Which also runs on the server

03:36:24.000 --> 03:36:26.000
This is where we

03:36:26.000 --> 03:36:28.000
Actually do the filtering

03:36:28.000 --> 03:36:30.000
And then we render the search box

03:36:30.000 --> 03:36:32.000
And the list of albums

03:36:32.000 --> 03:36:34.000
And so the search box

03:36:34.000 --> 03:36:36.000
Is kind of

03:36:36.000 --> 03:36:38.000
This is where

03:36:38.000 --> 03:36:40.000
This is where this other side

03:36:40.000 --> 03:36:42.000
Of the flow triggers

03:36:42.000 --> 03:36:44.000
Where it's like when I tap into the search

03:36:44.000 --> 03:36:46.000
I want to navigate

03:36:46.000 --> 03:36:48.000
As a user

03:36:48.000 --> 03:36:50.000
I just want to navigate here

03:36:50.000 --> 03:36:52.000
And then that's

03:36:52.000 --> 03:36:54.000
The whole story

03:36:54.000 --> 03:36:56.000
Because now it's the server

03:36:56.000 --> 03:36:58.000
Like we're again in the server

03:36:58.000 --> 03:37:00.000
In root.server.js

03:37:00.000 --> 03:37:02.000
And we just kind of render again

03:37:02.000 --> 03:37:04.000
Using the new search value

03:37:04.000 --> 03:37:06.000
So you don't really

03:37:06.000 --> 03:37:08.000
Think of it as state management

03:37:08.000 --> 03:37:10.000
Right

03:37:10.000 --> 03:37:12.000
In fact we could even

03:37:12.000 --> 03:37:14.000
Just for fun we could even delete

03:37:14.000 --> 03:37:16.000
The state here

03:37:16.000 --> 03:37:18.000
I believe we could get rid of the

03:37:18.000 --> 03:37:20.000
State completely

03:37:20.000 --> 03:37:22.000
And this could just be uncontrolled input

03:37:22.000 --> 03:37:24.000
That has default value

03:37:24.000 --> 03:37:26.000
Equals initial search

03:37:26.000 --> 03:37:28.000
And it has this onChangeHandler

03:37:28.000 --> 03:37:30.000
That just does the navigation

03:37:30.000 --> 03:37:32.000
Doesn't do anything else

03:37:32.000 --> 03:37:34.000
And I think it should still work

03:37:34.000 --> 03:37:36.000
It actually does

03:37:36.000 --> 03:37:38.000
Yeah so there's like no state management

03:37:38.000 --> 03:37:40.000
Here

03:37:40.000 --> 03:37:42.000
There's no managing caches yourself

03:37:42.000 --> 03:37:44.000
Or you just want to change some data

03:37:44.000 --> 03:37:46.000
You just

03:37:46.000 --> 03:37:48.000
Re-render the page

03:37:48.000 --> 03:37:50.000
But then it doesn't recreate the DOM

03:37:50.000 --> 03:37:52.000
It doesn't recreate the DOM

03:37:52.000 --> 03:37:54.000
Yeah

03:37:54.000 --> 03:37:56.000
And the boundary that was like

03:37:56.000 --> 03:37:58.000
If you don't have a transition

03:37:58.000 --> 03:38:00.000
It will use the suspense fallback

03:38:00.000 --> 03:38:02.000
So one thing I'm wondering

03:38:02.000 --> 03:38:04.000
Inside of root server

03:38:04.000 --> 03:38:06.000
If we remove the suspense wrapper

03:38:06.000 --> 03:38:08.000
What will happen?

03:38:08.000 --> 03:38:10.000
Do we need transition anymore?

03:38:10.000 --> 03:38:12.000
Let's try

03:38:12.000 --> 03:38:14.000
I don't know

03:38:14.000 --> 03:38:16.000
I think maybe it would

03:38:16.000 --> 03:38:18.000
Work without a transition

03:38:18.000 --> 03:38:20.000
I think

03:38:20.000 --> 03:38:22.000
But it's

03:38:22.000 --> 03:38:24.000
Well

03:38:24.000 --> 03:38:26.000
I guess it depends on where you want

03:38:26.000 --> 03:38:28.000
To remove the transition

03:38:28.000 --> 03:38:30.000
They're nested

03:38:30.000 --> 03:38:32.000
Just to be able to show the

03:38:32.000 --> 03:38:34.000
IsPending

03:38:34.000 --> 03:38:36.000
Because the routers should always

03:38:36.000 --> 03:38:38.000
Navigate in transitions

03:38:38.000 --> 03:38:40.000
But we can also wrap it in extra time

03:38:40.000 --> 03:38:42.000
To get this

03:38:42.000 --> 03:38:44.000
Is it happening

03:38:44.000 --> 03:38:46.000
For feedback

03:38:46.000 --> 03:38:48.000
Yeah

03:38:48.000 --> 03:38:50.000
And so how does it know when

03:38:50.000 --> 03:38:52.000
IsPending is done?

03:38:52.000 --> 03:38:54.000
Is that when everything down the parent

03:38:54.000 --> 03:38:56.000
Chain of components is now rendered?

03:38:56.000 --> 03:38:58.000
Not quite

03:38:58.000 --> 03:39:00.000
It's

03:39:00.000 --> 03:39:02.000
I think conceptually

03:39:02.000 --> 03:39:04.000
The way it's implemented

03:39:06.000 --> 03:39:08.000
There are different ways to do it

03:39:08.000 --> 03:39:10.000
But I think conceptually you can imagine it

03:39:10.000 --> 03:39:12.000
As

03:39:12.000 --> 03:39:14.000
It kind of spawns

03:39:14.000 --> 03:39:16.000
A new parallel universe

03:39:16.000 --> 03:39:18.000
Where the state is

03:39:18.000 --> 03:39:20.000
If we go to

03:39:20.000 --> 03:39:22.000
root.client.js

03:39:22.000 --> 03:39:24.000
And you see that

03:39:24.000 --> 03:39:26.000
It does this set URL

03:39:26.000 --> 03:39:28.000
Call

03:39:28.000 --> 03:39:30.000
Traditionally this would mean

03:39:30.000 --> 03:39:32.000
The state changed

03:39:32.000 --> 03:39:34.000
Get the new thing on the screen

03:39:34.000 --> 03:39:36.000
Immediately

03:39:36.000 --> 03:39:38.000
If we get rid of startTransition

03:39:38.000 --> 03:39:40.000
In both places

03:39:40.000 --> 03:39:42.000
We would see traditional re-rendering

03:39:42.000 --> 03:39:44.000
Behavior where

03:39:44.000 --> 03:39:46.000
It's kind of

03:39:46.000 --> 03:39:48.000
We changed this, now it has to update

03:39:48.000 --> 03:39:50.000
To reflect what's in the state

03:39:50.000 --> 03:39:52.000
We don't have the

03:39:52.000 --> 03:39:54.000
JSX tree for what's in the state

03:39:54.000 --> 03:39:56.000
That's why it's showing

03:39:56.000 --> 03:39:58.000
The closest suspense spinner

03:39:58.000 --> 03:40:00.000
Which

03:40:00.000 --> 03:40:02.000
You would need to add

03:40:02.000 --> 03:40:04.000
And the analogy that I like to use

03:40:04.000 --> 03:40:06.000
For this is git

03:40:06.000 --> 03:40:08.000
So if you work on main

03:40:08.000 --> 03:40:10.000
If you only work on main

03:40:10.000 --> 03:40:12.000
And then

03:40:12.000 --> 03:40:14.000
You

03:40:14.000 --> 03:40:16.000
Make a change that

03:40:16.000 --> 03:40:18.000
You start refactoring something

03:40:18.000 --> 03:40:20.000
And you change

03:40:20.000 --> 03:40:22.000
One file

03:40:22.000 --> 03:40:24.000
And

03:40:24.000 --> 03:40:26.000
It's not done until you finish refactoring

03:40:26.000 --> 03:40:28.000
Your project is kind of

03:40:28.000 --> 03:40:30.000
In the loading state

03:40:30.000 --> 03:40:32.000
It's not ready

03:40:32.000 --> 03:40:34.000
And the users would see

03:40:34.000 --> 03:40:36.000
Imagine you refactored in production

03:40:36.000 --> 03:40:38.000
Your users would see

03:40:38.000 --> 03:40:40.000
That you're doing it

03:40:40.000 --> 03:40:42.000
And that's why we don't do it this way

03:40:42.000 --> 03:40:44.000
We start a branch, we work in a branch

03:40:44.000 --> 03:40:46.000
And then we think

03:40:46.000 --> 03:40:48.000
This is enough to ship

03:40:48.000 --> 03:40:50.000
To the main branch

03:40:50.000 --> 03:40:52.000
And so transitions are kind of the same concept

03:40:52.000 --> 03:40:54.000
It's like branches

03:40:54.000 --> 03:40:56.000
It's like you're telling React

03:40:56.000 --> 03:40:58.000
Here's a set state I want you to do

03:40:58.000 --> 03:41:00.000
But actually start

03:41:00.000 --> 03:41:02.000
Working on it

03:41:02.000 --> 03:41:04.000
In background

03:41:04.000 --> 03:41:06.000
Start preparing it

03:41:06.000 --> 03:41:08.000
You can almost imagine

03:41:08.000 --> 03:41:10.000
You had two screens

03:41:10.000 --> 03:41:12.000
And one screen was what the user sees

03:41:12.000 --> 03:41:14.000
And the other screen

03:41:14.000 --> 03:41:16.000
Is background stuff

03:41:16.000 --> 03:41:18.000
And on the screen

03:41:18.000 --> 03:41:20.000
With the background stuff

03:41:20.000 --> 03:41:22.000
You would see a big loading indicator

03:41:22.000 --> 03:41:24.000
Because nothing is ready yet

03:41:24.000 --> 03:41:26.000
And then it would kind of gradually refine

03:41:26.000 --> 03:41:28.000
To get

03:41:28.000 --> 03:41:30.000
With the server data

03:41:30.000 --> 03:41:32.000
And at some point you have enough server data

03:41:32.000 --> 03:41:34.000
That you don't

03:41:34.000 --> 03:41:36.000
You wouldn't need to hide anything to show it

03:41:36.000 --> 03:41:38.000
You wouldn't need to hide any

03:41:38.000 --> 03:41:40.000
Existing content

03:41:40.000 --> 03:41:42.000
So this is where React commits the transition

03:41:42.000 --> 03:41:44.000
So React is like

03:41:44.000 --> 03:41:46.000
We have enough of the tree

03:41:46.000 --> 03:41:48.000
That we wouldn't need to hide anything

03:41:48.000 --> 03:41:50.000
Nothing would

03:41:50.000 --> 03:41:52.000
Disappear under you

03:41:52.000 --> 03:41:54.000
It's automatic

03:41:54.000 --> 03:41:56.000
You don't think about this as a user

03:41:56.000 --> 03:41:58.000
But that's the heuristic we use

03:41:58.000 --> 03:42:00.000
We're going to show you

03:42:00.000 --> 03:42:02.000
The output as soon as we have enough

03:42:02.000 --> 03:42:04.000
That

03:42:04.000 --> 03:42:06.000
It doesn't feel disruptive

03:42:06.000 --> 03:42:08.000
Because nothing disappears

03:42:08.000 --> 03:42:10.000
From under you

03:42:10.000 --> 03:42:12.000
Right

03:42:12.000 --> 03:42:14.000
So React commits transitions off

03:42:14.000 --> 03:42:16.000
To decide what if I delete it here

03:42:16.000 --> 03:42:18.000
What if I remove it here

03:42:18.000 --> 03:42:20.000
What if we remove the suspense boundary

03:42:20.000 --> 03:42:22.000
And I think it will still take some time

03:42:22.000 --> 03:42:24.000
To really feel it out

03:42:24.000 --> 03:42:26.000
Because I'm sure you use it

03:42:26.000 --> 03:42:28.000
In a lot of different contexts

03:42:28.000 --> 03:42:30.000
But for the search box it makes sense to me

03:42:30.000 --> 03:42:32.000
Where you definitely want to start transition here

03:42:32.000 --> 03:42:34.000
Because we want

03:42:34.000 --> 03:42:36.000
To be able to track

03:42:36.000 --> 03:42:38.000
Like okay this

03:42:38.000 --> 03:42:40.000
We've started something

03:42:40.000 --> 03:42:42.000
We don't know when it's done

03:42:42.000 --> 03:42:44.000
All we want to do is show that it is pending

03:42:44.000 --> 03:42:46.000
And then as soon as React

03:42:46.000 --> 03:42:48.000
Has figured out

03:42:48.000 --> 03:42:50.000
Everything

03:42:50.000 --> 03:42:52.000
It's resolved all the components down the tree

03:42:52.000 --> 03:42:54.000
I'm trying to find the perfect vocabulary here

03:42:54.000 --> 03:42:56.000
And I don't think I have it yet

03:42:56.000 --> 03:42:58.000
I wouldn't say

03:42:58.000 --> 03:43:00.000
It doesn't need to resolve everything

03:43:00.000 --> 03:43:02.000
Because maybe you have some new components

03:43:02.000 --> 03:43:04.000
And there's no reason to wait for them

03:43:04.000 --> 03:43:06.000
So as soon as you have enough

03:43:06.000 --> 03:43:08.000
That would be not embarrassing

03:43:08.000 --> 03:43:10.000
To show

03:43:10.000 --> 03:43:12.000
That's kind of how I explain it

03:43:12.000 --> 03:43:14.000
As soon as you have a decent

03:43:14.000 --> 03:43:16.000
Floating state

03:43:16.000 --> 03:43:18.000
And it's determined automatically

03:43:18.000 --> 03:43:20.000
So you don't need to think about it

03:43:20.000 --> 03:43:22.000
Yeah

03:43:22.000 --> 03:43:24.000
It's contextual

03:43:24.000 --> 03:43:26.000
We know you called this from the search box

03:43:26.000 --> 03:43:28.000
So we know what this search box

03:43:28.000 --> 03:43:30.000
Depends on

03:43:30.000 --> 03:43:32.000
The parents that it has in order to render that search box again

03:43:32.000 --> 03:43:34.000
No

03:43:34.000 --> 03:43:36.000
That's not how it works

03:43:36.000 --> 03:43:38.000
It's not conceptual

03:43:38.000 --> 03:43:40.000
I think that's kind of the cool thing

03:43:40.000 --> 03:43:42.000
About this

03:43:42.000 --> 03:43:44.000
It really doesn't care

03:43:44.000 --> 03:43:46.000
Because you could be navigating to another page

03:43:46.000 --> 03:43:48.000
You could be navigating

03:43:48.000 --> 03:43:50.000
From a feed page

03:43:50.000 --> 03:43:52.000
To a profile page

03:43:52.000 --> 03:43:54.000
And then let's say on the profile page

03:43:54.000 --> 03:43:56.000
You have profile cover

03:43:56.000 --> 03:43:58.000
And then you have

03:43:58.000 --> 03:44:00.000
Profile timeline inside of suspense

03:44:00.000 --> 03:44:02.000
So what that means

03:44:02.000 --> 03:44:04.000
And then

03:44:04.000 --> 03:44:06.000
My start transition is built into the router

03:44:06.000 --> 03:44:08.000
So it's not

03:44:08.000 --> 03:44:10.000
Just for this search box

03:44:10.000 --> 03:44:12.000
Like here

03:44:12.000 --> 03:44:14.000
We could completely remove start transition

03:44:14.000 --> 03:44:16.000
Like we just want to show a state

03:44:16.000 --> 03:44:18.000
Tracking what's going on

03:44:18.000 --> 03:44:20.000
Yeah so here it's not essential

03:44:20.000 --> 03:44:22.000
Because we only added it here

03:44:22.000 --> 03:44:24.000
To get this access to this is pending

03:44:24.000 --> 03:44:26.000
Where it's important

03:44:26.000 --> 03:44:28.000
Is only at the router level

03:44:28.000 --> 03:44:30.000
And so what this does

03:44:30.000 --> 03:44:32.000
What this does

03:44:32.000 --> 03:44:34.000
Here for example

03:44:34.000 --> 03:44:36.000
If we're moving from feed to profile

03:44:36.000 --> 03:44:38.000
And then profile has like a cover

03:44:38.000 --> 03:44:40.000
And a timeline

03:44:40.000 --> 03:44:42.000
Wrapped in suspense

03:44:42.000 --> 03:44:44.000
What's going to happen is that

03:44:44.000 --> 03:44:46.000
If profile cover needs to load some data

03:44:46.000 --> 03:44:48.000
For example profile name

03:44:48.000 --> 03:44:50.000
And your avatar

03:44:50.000 --> 03:44:52.000
Then the router will wait

03:44:52.000 --> 03:44:54.000
For that to be ready

03:44:54.000 --> 03:44:56.000
It won't teleport you to this empty profile page

03:44:56.000 --> 03:44:58.000
That doesn't have anything

03:44:58.000 --> 03:45:00.000
Because we don't have a decent loading state

03:45:00.000 --> 03:45:02.000
For it

03:45:02.000 --> 03:45:04.000
We don't have something to show yet

03:45:04.000 --> 03:45:06.000
But then as soon as

03:45:06.000 --> 03:45:08.000
The profile cover is ready

03:45:08.000 --> 03:45:10.000
And the remaining stuff is wrapped in suspense

03:45:10.000 --> 03:45:12.000
It will be like

03:45:12.000 --> 03:45:14.000
Now I can actually move to this page

03:45:14.000 --> 03:45:16.000
Because I can show the cover

03:45:16.000 --> 03:45:18.000
And then the rest will have a spinner

03:45:18.000 --> 03:45:20.000
So this is what it does

03:45:20.000 --> 03:45:22.000
It just opts you into this

03:45:22.000 --> 03:45:24.000
It doesn't have to happen right away

03:45:24.000 --> 03:45:26.000
But we're going to wait enough

03:45:26.000 --> 03:45:28.000
Until we have something decent to show

03:45:28.000 --> 03:45:30.000
And it's based on this heuristic

03:45:30.000 --> 03:45:32.000
So it doesn't really care

03:45:32.000 --> 03:45:34.000
From which component

03:45:34.000 --> 03:45:36.000
Because like you see here

03:45:36.000 --> 03:45:38.000
It's really at the root level

03:45:38.000 --> 03:45:40.000
So it doesn't even know

03:45:40.000 --> 03:45:42.000
You're calling it from search input

03:45:42.000 --> 03:45:44.000
It doesn't care where you're calling it from

03:45:44.000 --> 03:45:46.000
Yeah

03:45:46.000 --> 03:45:48.000
I guess in the other example I was trying to figure out

03:45:48.000 --> 03:45:50.000
When is pending resolved

03:45:50.000 --> 03:45:52.000
And it sounds like there's more heuristics involved

03:45:52.000 --> 03:45:54.000
Than just like

03:45:54.000 --> 03:45:56.000
Everything down the tree has re-rendered

03:45:56.000 --> 03:45:58.000
There's a lot more to it

03:45:58.000 --> 03:46:00.000
Well it's not a lot more

03:46:00.000 --> 03:46:02.000
It's a very simple heuristic

03:46:02.000 --> 03:46:04.000
But it's very non-intuitive

03:46:04.000 --> 03:46:06.000
Because we only figured it out

03:46:06.000 --> 03:46:08.000
In the initial design

03:46:08.000 --> 03:46:10.000
It didn't work like this

03:46:10.000 --> 03:46:12.000
And this is the most natural

03:46:12.000 --> 03:46:14.000
It's a bit weird

03:46:14.000 --> 03:46:16.000
Because understanding the heuristic

03:46:16.000 --> 03:46:18.000
Is pretty difficult

03:46:18.000 --> 03:46:20.000
But then the way it works is very natural

03:46:20.000 --> 03:46:22.000
So you don't have to think about it

03:46:22.000 --> 03:46:24.000
You don't need to know about it as a user

03:46:24.000 --> 03:46:26.000
If you're curious

03:46:26.000 --> 03:46:28.000
As a framework author

03:46:28.000 --> 03:46:30.000
How it works

03:46:30.000 --> 03:46:32.000
Then it's really

03:46:32.000 --> 03:46:34.000
Can we

03:46:34.000 --> 03:46:36.000
Every time

03:46:36.000 --> 03:46:38.000
We're about to

03:46:38.000 --> 03:46:40.000
We got some new data

03:46:40.000 --> 03:46:42.000
We could maybe make some progress

03:46:42.000 --> 03:46:44.000
On rendering the tree

03:46:44.000 --> 03:46:46.000
And then every time

03:46:46.000 --> 03:46:48.000
We're like okay

03:46:48.000 --> 03:46:50.000
For now it seems like we're done

03:46:50.000 --> 03:46:52.000
We've done everything we could

03:46:52.000 --> 03:46:54.000
And we make a decision

03:46:54.000 --> 03:46:56.000
Is this enough to

03:46:56.000 --> 03:46:58.000
Show this to the user now

03:46:58.000 --> 03:47:00.000
Or do we have to keep waiting longer

03:47:00.000 --> 03:47:02.000
And the way we make the

03:47:02.000 --> 03:47:04.000
Decision is pretty simple

03:47:04.000 --> 03:47:06.000
It's if we

03:47:06.000 --> 03:47:08.000
Have rendered it now

03:47:08.000 --> 03:47:10.000
Would we have to hide any

03:47:10.000 --> 03:47:12.000
Existing content

03:47:12.000 --> 03:47:14.000
So this moment

03:47:14.000 --> 03:47:16.000
Where the search bar disappeared

03:47:16.000 --> 03:47:18.000
Because something there was not ready

03:47:18.000 --> 03:47:20.000
And there was a suspense boundary above

03:47:20.000 --> 03:47:22.000
It kind of means we're

03:47:22.000 --> 03:47:24.000
Resuspending it

03:47:24.000 --> 03:47:26.000
It wasn't here

03:47:26.000 --> 03:47:28.000
But it has to disappear

03:47:28.000 --> 03:47:30.000
Because some part of the tree is not ready

03:47:30.000 --> 03:47:32.000
And so if we have to do this

03:47:32.000 --> 03:47:34.000
We're not going to commit it

03:47:34.000 --> 03:47:36.000
No, let's keep waiting a bit longer

03:47:36.000 --> 03:47:38.000
But

03:47:38.000 --> 03:47:40.000
If we have enough of the tree

03:47:40.000 --> 03:47:42.000
That we don't need to hide any

03:47:42.000 --> 03:47:44.000
Existing content

03:47:44.000 --> 03:47:46.000
It's just maybe we have some new content

03:47:46.000 --> 03:47:48.000
That's not fully fetched yet

03:47:48.000 --> 03:47:50.000
We would be like, yeah, sure, let's go ahead

03:47:50.000 --> 03:47:52.000
Let's show it

03:47:52.000 --> 03:47:54.000
I think I'm getting it then

03:47:54.000 --> 03:47:56.000
It's definitely based on what you have now

03:47:56.000 --> 03:47:58.000
And what you're trying to get

03:47:58.000 --> 03:48:00.000
And if

03:48:00.000 --> 03:48:02.000
You have enough of a match

03:48:02.000 --> 03:48:04.000
In what you're trying to get that you're not going to hide anything

03:48:04.000 --> 03:48:06.000
Then we'll go ahead and resolve it

03:48:06.000 --> 03:48:08.000
Exactly

03:48:08.000 --> 03:48:10.000
That's how it works

03:48:10.000 --> 03:48:12.000
It's a very simple thing

03:48:12.000 --> 03:48:14.000
But it's hard to wrap your mind around it

03:48:14.000 --> 03:48:16.000
But I find it

03:48:16.000 --> 03:48:18.000
Kind of fascinating

03:48:18.000 --> 03:48:20.000
Because it is a solution

03:48:20.000 --> 03:48:22.000
To the

03:48:22.000 --> 03:48:24.000
If you ever developed a router

03:48:24.000 --> 03:48:26.000
In traditional kind of JavaScript

03:48:26.000 --> 03:48:28.000
Ecosystem

03:48:28.000 --> 03:48:30.000
There were always

03:48:30.000 --> 03:48:32.000
You always had to make

03:48:32.000 --> 03:48:34.000
This tradeoff between

03:48:34.000 --> 03:48:36.000
How do I know

03:48:36.000 --> 03:48:38.000
When to show the route

03:48:38.000 --> 03:48:40.000
During navigation

03:48:40.000 --> 03:48:42.000
And different routers solve this

03:48:42.000 --> 03:48:44.000
Differently

03:48:44.000 --> 03:48:46.000
So

03:48:46.000 --> 03:48:48.000
In some routers

03:48:48.000 --> 03:48:50.000
I think maybe Ember router

03:48:50.000 --> 03:48:52.000
I'm not sure

03:48:52.000 --> 03:48:54.000
But in some routers

03:48:54.000 --> 03:48:56.000
They wait for all data

03:48:56.000 --> 03:48:58.000
For the new route to be ready

03:48:58.000 --> 03:49:00.000
And then they transition you

03:49:00.000 --> 03:49:02.000
To the new route

03:49:02.000 --> 03:49:04.000
And so the benefit of this is that the user

03:49:04.000 --> 03:49:06.000
Doesn't see this immediate

03:49:06.000 --> 03:49:08.000
Big spinner

03:49:08.000 --> 03:49:10.000
That's like, you're pressing a link

03:49:10.000 --> 03:49:12.000
And you have nothing to show yet

03:49:12.000 --> 03:49:14.000
And you have to wait for everything to load

03:49:14.000 --> 03:49:16.000
Which could be slow

03:49:16.000 --> 03:49:18.000
So ideally

03:49:18.000 --> 03:49:20.000
You wouldn't have to

03:49:20.000 --> 03:49:22.000
And then the other extreme

03:49:22.000 --> 03:49:24.000
Which I think most React solutions

03:49:24.000 --> 03:49:26.000
At least for some time

03:49:26.000 --> 03:49:28.000
It depends on how we configure it

03:49:28.000 --> 03:49:30.000
But at least it was very common

03:49:30.000 --> 03:49:32.000
That routing happens immediately

03:49:32.000 --> 03:49:34.000
So you press a link

03:49:34.000 --> 03:49:36.000
You immediately re-render

03:49:36.000 --> 03:49:38.000
Like you rendered a new page

03:49:38.000 --> 03:49:40.000
But maybe it's not ready

03:49:40.000 --> 03:49:42.000
And so I think the beautiful thing

03:49:42.000 --> 03:49:44.000
About this paradigm

03:49:44.000 --> 03:49:46.000
Is that it lets you draw

03:49:46.000 --> 03:49:48.000
The boundary exactly where you want

03:49:48.000 --> 03:49:50.000
Just by placing suspense

03:49:50.000 --> 03:49:52.000
Around it

03:49:52.000 --> 03:49:54.000
Because the router

03:49:54.000 --> 03:49:56.000
Uses transitions by default

03:49:56.000 --> 03:49:58.000
So you don't have to

03:49:58.000 --> 03:50:00.000
By default everything is sticky

03:50:00.000 --> 03:50:02.000
So until everything is ready

03:50:02.000 --> 03:50:04.000
It doesn't do it

03:50:04.000 --> 03:50:06.000
But then suspense lets you say

03:50:06.000 --> 03:50:08.000
No, actually this part of the tree

03:50:08.000 --> 03:50:10.000
That's okay to wait a little bit

03:50:10.000 --> 03:50:12.000
It doesn't have to wait for it

03:50:12.000 --> 03:50:14.000
So it's kind of like inverse await

03:50:14.000 --> 03:50:16.000
Where you say

03:50:16.000 --> 03:50:18.000
This part, it's independent

03:50:18.000 --> 03:50:20.000
I wrap it in a loading state

03:50:20.000 --> 03:50:22.000
Now transitions won't wait for it anymore

03:50:22.000 --> 03:50:24.000
And I think that's maybe

03:50:24.000 --> 03:50:26.000
A natural way to explain it

03:50:26.000 --> 03:50:28.000
It's like by default

03:50:28.000 --> 03:50:30.000
Everything is sticky

03:50:30.000 --> 03:50:32.000
And suspense is what unsticks it

03:50:32.000 --> 03:50:34.000
Yeah

03:50:34.000 --> 03:50:36.000
That's a wild way to think about it

03:50:36.000 --> 03:50:38.000
Because there wasn't really

03:50:38.000 --> 03:50:40.000
A convention for this before

03:50:40.000 --> 03:50:42.000
You were just going to grab whatever the tree is

03:50:42.000 --> 03:50:44.000
And plop it on the page

03:50:44.000 --> 03:50:46.000
You can't use heuristics to know

03:50:46.000 --> 03:50:48.000
What was there before in the new thing

03:50:48.000 --> 03:50:50.000
It's not really like diffing

03:50:50.000 --> 03:50:52.000
But it is figuring out

03:50:52.000 --> 03:50:54.000
You don't really want to suspend again

03:50:54.000 --> 03:50:56.000
We don't want to keep suspending every time we type in the search box

03:50:56.000 --> 03:50:58.000
We've suspended before

03:50:58.000 --> 03:51:00.000
And we don't want the user to see it

03:51:00.000 --> 03:51:02.000
So if we do a start transition

03:51:02.000 --> 03:51:04.000
We can still get the new state

03:51:04.000 --> 03:51:06.000
Or the new text inside the search box

03:51:06.000 --> 03:51:08.000
But we're going to avoid

03:51:08.000 --> 03:51:10.000
Blowing it away while we're doing it

03:51:10.000 --> 03:51:12.000
Yep

03:51:12.000 --> 03:51:14.000
Very cool

03:51:14.000 --> 03:51:16.000
Okay, I'll also admit that I'm like

03:51:16.000 --> 03:51:18.000
I'm running on fumes

03:51:18.000 --> 03:51:20.000
I had breakfast like eight hours ago

03:51:20.000 --> 03:51:22.000
At this point

03:51:22.000 --> 03:51:24.000
I didn't think we would go this long

03:51:24.000 --> 03:51:26.000
I definitely thought we were going to go for like two hours

03:51:26.000 --> 03:51:28.000
Maybe two hours thirty

03:51:28.000 --> 03:51:30.000
You've been super generous with your time

03:51:30.000 --> 03:51:32.000
But I'm going to push this up

03:51:32.000 --> 03:51:34.000
To make a separate branch

03:51:34.000 --> 03:51:36.000
Just in case people want to see

03:51:36.000 --> 03:51:38.000
Co-authored by Danny Ramone

03:51:38.000 --> 03:51:40.000
Absolutely

03:51:40.000 --> 03:51:42.000
We'll call it, oh boy, Router Toy

03:51:42.000 --> 03:51:44.000
It's what I kind of liked

03:51:44.000 --> 03:51:46.000
RSC Demo also

03:51:46.000 --> 03:51:48.000
RSC Stream Demo

03:51:48.000 --> 03:51:50.000
If anyone's wondering what the Twitch Stream Demo had

03:51:50.000 --> 03:51:52.000
Yeah, we'll do that

03:51:54.000 --> 03:51:56.000
And if anyone wants to play with this

03:51:56.000 --> 03:51:58.000
I'm tired from just following along

03:51:58.000 --> 03:52:00.000
Man, thanks for sticking through here

03:52:00.000 --> 03:52:02.000
In the chat, thank you

03:52:02.000 --> 03:52:04.000
But I shared it just above

03:52:04.000 --> 03:52:06.000
If anyone wants to play with this

03:52:06.000 --> 03:52:08.000
Toy implementation of React Server

03:52:08.000 --> 03:52:10.000
Components, we never actually got to look

03:52:10.000 --> 03:52:12.000
At a framework, we built our own

03:52:12.000 --> 03:52:14.000
But this is simple RSC

03:52:14.000 --> 03:52:16.000
It doesn't even have a readme at the moment

03:52:16.000 --> 03:52:18.000
I was very undergun trying to get it in

03:52:18.000 --> 03:52:20.000
For the stream today

03:52:20.000 --> 03:52:22.000
So I'll try to add some docs

03:52:22.000 --> 03:52:24.000
And maybe explain the dev panel a little bit more

03:52:24.000 --> 03:52:26.000
But the goal is to not add

03:52:26.000 --> 03:52:28.000
Any more features to this

03:52:28.000 --> 03:52:30.000
Maybe delete the files that we don't use

03:52:30.000 --> 03:52:32.000
So that, like, I think you have

03:52:32.000 --> 03:52:34.000
A bunch of files that we didn't end up using

03:52:34.000 --> 03:52:36.000
Yeah, I think the Bjork album's gone

03:52:36.000 --> 03:52:38.000
The like button was never pulled in

03:52:38.000 --> 03:52:40.000
Counter was never pulled in

03:52:40.000 --> 03:52:42.000
That should be it

03:52:46.000 --> 03:52:48.000
And I'll double check on this

03:52:48.000 --> 03:52:50.000
In case it was floating around somewhere

03:52:50.000 --> 03:52:52.000
Yeah, it still is

03:52:52.000 --> 03:52:54.000
Maybe let's rename root.server.js

03:52:54.000 --> 03:52:56.000
To something like

03:52:56.000 --> 03:52:58.000
Server root, and then

03:52:58.000 --> 03:53:00.000
The root.client.js to something like

03:53:00.000 --> 03:53:02.000
Router, or I don't know

03:53:02.000 --> 03:53:04.000
Ideally we would

03:53:04.000 --> 03:53:06.000
Maybe make a

03:53:06.000 --> 03:53:08.000
I'd like to see some separation so that it's clear

03:53:08.000 --> 03:53:10.000
This is the framework part, this is not the part

03:53:10.000 --> 03:53:12.000
You're supposed to be writing

03:53:12.000 --> 03:53:14.000
No, exactly

03:53:14.000 --> 03:53:16.000
Yeah, I definitely prefer to

03:53:16.000 --> 03:53:18.000
Oh, did we actually get an index file?

03:53:18.000 --> 03:53:20.000
Where did this come from?

03:53:20.000 --> 03:53:22.000
I think this is just like an old thing

03:53:22.000 --> 03:53:24.000
Yeah, this is not being used

03:53:24.000 --> 03:53:26.000
I wanted to call it

03:53:26.000 --> 03:53:28.000
We decided on index and bootstrapping

03:53:28.000 --> 03:53:30.000
As like loose names

03:53:30.000 --> 03:53:32.000
I don't mind it

03:53:32.000 --> 03:53:34.000
But index feels right for that

03:53:34.000 --> 03:53:36.000
Because that's like the index route

03:53:36.000 --> 03:53:38.000
And this is just

03:53:38.000 --> 03:53:40.000
Yeah, there's a few ways to put this one

03:53:40.000 --> 03:53:42.000
Maybe not the index

03:53:42.000 --> 03:53:44.000
Maybe like page

03:53:44.000 --> 03:53:46.000
Or something

03:53:46.000 --> 03:53:48.000
Oh, page is good

03:53:48.000 --> 03:53:50.000
Next.js style

03:53:50.000 --> 03:53:52.000
This can be

03:53:52.000 --> 03:53:54.000
Route handler

03:53:54.000 --> 03:53:56.000
Well, it does a lot of things

03:53:56.000 --> 03:53:58.000
It mounts it onto the page

03:53:58.000 --> 03:54:00.000
Yeah

03:54:00.000 --> 03:54:02.000
Client

03:54:02.000 --> 03:54:04.000
I think

03:54:04.000 --> 03:54:06.000
Can we move it

03:54:06.000 --> 03:54:08.000
Out of the source directory

03:54:08.000 --> 03:54:10.000
And put it

03:54:10.000 --> 03:54:12.000
Closer to the handler

03:54:12.000 --> 03:54:14.000
I think conceptually

03:54:14.000 --> 03:54:16.000
It's related to this handler.js

03:54:16.000 --> 03:54:18.000
In a way

03:54:18.000 --> 03:54:20.000
It's like the client part of it

03:54:22.000 --> 03:54:24.000
I hear what you're saying

03:54:24.000 --> 03:54:26.000
Or maybe you could move to source

03:54:26.000 --> 03:54:28.000
Like make a directory called framework

03:54:28.000 --> 03:54:30.000
And then there would be

03:54:30.000 --> 03:54:32.000
Like server.js

03:54:32.000 --> 03:54:34.000
And client.js

03:54:34.000 --> 03:54:36.000
Yeah

03:54:36.000 --> 03:54:38.000
Router.server.js

03:54:38.000 --> 03:54:40.000
I don't know

03:54:40.000 --> 03:54:42.000
I went back and forth so long

03:54:42.000 --> 03:54:44.000
I landed on the remix names

03:54:44.000 --> 03:54:46.000
And I still don't like them

03:54:46.000 --> 03:54:48.000
So

03:54:48.000 --> 03:54:50.000
I just think it's important to

03:54:50.000 --> 03:54:52.000
Make sure that people don't think that this is the stuff

03:54:52.000 --> 03:54:54.000
You're supposed to be writing

03:54:54.000 --> 03:54:56.000
The actual application code is just

03:54:56.000 --> 03:54:58.000
Page.js

03:54:58.000 --> 03:55:00.000
Search.js and searchablealbum.js

03:55:00.000 --> 03:55:02.000
Yeah

03:55:02.000 --> 03:55:04.000
We could call it

03:55:04.000 --> 03:55:06.000
Underscore internals

03:55:06.000 --> 03:55:08.000
Yeah

03:55:08.000 --> 03:55:10.000
Bubble it up

03:55:10.000 --> 03:55:12.000
The only thing left to do is to

03:55:12.000 --> 03:55:14.000
Track down a couple hard-coded things

03:55:14.000 --> 03:55:16.000
I think I was pretty

03:55:16.000 --> 03:55:18.000
I wasn't great about this

03:55:18.000 --> 03:55:20.000
So that would be page now

03:55:20.000 --> 03:55:22.000
I'm hoping

03:55:22.000 --> 03:55:24.000
Also this is not the client part anymore

03:55:24.000 --> 03:55:26.000
Yeah

03:55:30.000 --> 03:55:32.000
Wherever we did root.client

03:55:32.000 --> 03:55:34.000
We did that

03:55:34.000 --> 03:55:36.000
Okay

03:55:36.000 --> 03:55:38.000
Yeah

03:55:38.000 --> 03:55:40.000
Oh so let's rename search to

03:55:40.000 --> 03:55:42.000
Searchbox because that's how you named it

03:55:42.000 --> 03:55:44.000
Oh yeah I noticed

03:55:44.000 --> 03:55:46.000
We were a little inconsistent

03:55:46.000 --> 03:55:48.000
Okay I renamed it

03:55:48.000 --> 03:55:50.000
Okay

03:55:50.000 --> 03:55:52.000
And I'll move

03:55:52.000 --> 03:55:54.000
The filter albums function down

03:55:54.000 --> 03:55:56.000
So that it doesn't obscure the

03:55:56.000 --> 03:55:58.000
Component

03:55:58.000 --> 03:56:00.000
Build successfully

03:56:00.000 --> 03:56:02.000
I think everything works

03:56:02.000 --> 03:56:04.000
What?

03:56:04.000 --> 03:56:06.000
Awesome

03:56:06.000 --> 03:56:08.000
That's searchbox

03:56:08.000 --> 03:56:10.000
That's that

03:56:10.000 --> 03:56:12.000
This index file is just not a thing

03:56:12.000 --> 03:56:14.000
I don't know why it keeps coming back actually

03:56:14.000 --> 03:56:16.000
Why does it keep coming back

03:56:22.000 --> 03:56:24.000
Nice

03:56:24.000 --> 03:56:26.000
Maybe stick it in support

03:56:26.000 --> 03:56:28.000
I hear you

03:56:28.000 --> 03:56:30.000
I don't know about that

03:56:30.000 --> 03:56:32.000
I don't know

03:56:32.000 --> 03:56:34.000
Yeah I think internals is still

03:56:34.000 --> 03:56:36.000
Where I'm sitting

03:56:36.000 --> 03:56:38.000
I've also seen engine as a convention

03:56:38.000 --> 03:56:40.000
But that's a little more

03:56:40.000 --> 03:56:42.000
We can also call it

03:56:42.000 --> 03:56:44.000
Yeah

03:56:44.000 --> 03:56:46.000
That's fine

03:56:46.000 --> 03:56:48.000
It does kind of indicate you can have

03:56:48.000 --> 03:56:50.000
Multiple routes but

03:56:50.000 --> 03:56:52.000
It is a router

03:56:54.000 --> 03:56:56.000
It's like toy router

03:56:56.000 --> 03:56:58.000
Toy router

03:56:58.000 --> 03:57:00.000
Yeah I mean the whole thing's

03:57:00.000 --> 03:57:02.000
A toy so I'm not going to call it that

03:57:02.000 --> 03:57:04.000
Yeah that's good

03:57:04.000 --> 03:57:06.000
Yeah that'll

03:57:06.000 --> 03:57:08.000
Work fine

03:57:13.000 --> 03:57:15.000
Okay

03:57:15.000 --> 03:57:17.000
I'm feeling good about these names

03:57:19.000 --> 03:57:21.000
And the only squiggles we have should just be

03:57:21.000 --> 03:57:23.000
Yeah we're abusing window

03:57:23.000 --> 03:57:25.000
And async

03:57:25.000 --> 03:57:27.000
Is not part of like the

03:57:27.000 --> 03:57:29.000
Built in TypeScript JSX thing

03:57:29.000 --> 03:57:31.000
It's kind of funny that JSX has been hijacked

03:57:31.000 --> 03:57:33.000
As like this standard that can be highlighted

03:57:33.000 --> 03:57:35.000
The same way for everyone

03:57:35.000 --> 03:57:37.000
Because you can use it different ways

03:57:37.000 --> 03:57:39.000
And you end up with funky situations like this

03:57:39.000 --> 03:57:41.000
Where some people support promises

03:57:41.000 --> 03:57:43.000
And some people don't

03:57:43.000 --> 03:57:45.000
But it's still JSX

03:57:45.000 --> 03:57:47.000
Yeah

03:57:47.000 --> 03:57:49.000
Why does it keep showing client part

03:57:49.000 --> 03:57:51.000
I think I deleted this comment before

03:57:51.000 --> 03:57:53.000
Yeah

03:57:53.000 --> 03:57:55.000
Sometimes LiveShare

03:57:55.000 --> 03:57:57.000
Gets out of sync

03:57:57.000 --> 03:57:59.000
And luckily we've been pretty in sync this whole time

03:58:01.000 --> 03:58:03.000
Perfactor

03:58:03.000 --> 03:58:05.000
New naming

03:58:06.000 --> 03:58:08.000
All right

03:58:08.000 --> 03:58:10.000
That's up

03:58:10.000 --> 03:58:12.000
Beautiful

03:58:12.000 --> 03:58:14.000
Beautiful

03:58:14.000 --> 03:58:16.000
Yeah

03:58:16.000 --> 03:58:18.000
Well I'll go back to our big faces I think

03:58:18.000 --> 03:58:20.000
Your lighting's gone down a bit

03:58:20.000 --> 03:58:22.000
I have some more time

03:58:22.000 --> 03:58:24.000
But yeah let me

03:58:24.000 --> 03:58:26.000
Make sure of the branch

03:58:26.000 --> 03:58:28.000
Before we sign off

03:58:28.000 --> 03:58:30.000
Okay my computer's chugging

03:58:30.000 --> 03:58:32.000
Y'all can find the branch don't worry about it

03:58:32.000 --> 03:58:34.000
But hey if you enjoyed the stream

03:58:35.000 --> 03:58:37.000
I try to do Twitch streams

03:58:37.000 --> 03:58:39.000
Every week

03:58:39.000 --> 03:58:41.000
Thursdays at

03:58:41.000 --> 03:58:43.000
What is it now

03:58:43.000 --> 03:58:45.000
It should be 3pm eastern

03:58:45.000 --> 03:58:47.000
But we bumped it forward a little bit

03:58:47.000 --> 03:58:49.000
For this special edition stream

03:58:49.000 --> 03:58:51.000
But I've been doing React server components a lot

03:58:51.000 --> 03:58:53.000
I've been going really deep on it

03:58:53.000 --> 03:58:55.000
Because I'm also someone who works on Astro

03:58:55.000 --> 03:58:57.000
Which is a meta framework

03:58:57.000 --> 03:58:59.000
It would be cool to support some implementation

03:58:59.000 --> 03:59:01.000
Of server components if not for the migration story

03:59:01.000 --> 03:59:03.000
So I'm going to be playing with it a lot more

03:59:04.000 --> 03:59:06.000
And yeah

03:59:06.000 --> 03:59:08.000
Drop a follow if that interests you

03:59:08.000 --> 03:59:10.000
You can also of course follow Dan

03:59:10.000 --> 03:59:12.000
If you're not I don't know why

03:59:12.000 --> 03:59:14.000
But he's around Twitter

03:59:14.000 --> 03:59:16.000
Dan underscore Abramov

03:59:16.000 --> 03:59:18.000
You can see the title of this stream

03:59:18.000 --> 03:59:20.000
I think that is the Twitter handle

03:59:20.000 --> 03:59:22.000
Is there anyone else

03:59:22.000 --> 03:59:24.000
That you want people to find you

03:59:24.000 --> 03:59:26.000
Or any closing thoughts

03:59:26.000 --> 03:59:28.000
I don't think I want people to find me

03:59:28.000 --> 03:59:30.000
All right

03:59:30.000 --> 03:59:32.000
Enough of them have found me

03:59:33.000 --> 03:59:35.000
I just want to say I really appreciate you

03:59:35.000 --> 03:59:37.000
Offering

03:59:37.000 --> 03:59:39.000
For me to be on this stream

03:59:41.000 --> 03:59:43.000
And also

03:59:43.000 --> 03:59:45.000
You really did the homework

03:59:45.000 --> 03:59:47.000
I mean the only reason

03:59:47.000 --> 03:59:49.000
We were even able to

03:59:49.000 --> 03:59:51.000
Build a mini framework

03:59:51.000 --> 03:59:53.000
Is because you've already built 80% of it

03:59:53.000 --> 03:59:55.000
So I really appreciate

03:59:55.000 --> 03:59:57.000
Doing the homework

03:59:57.000 --> 03:59:59.000
So well

03:59:59.000 --> 04:00:01.000
It's really impressive

04:00:01.000 --> 04:00:03.000
And there aren't

04:00:03.000 --> 04:00:05.000
There isn't that much documentation around it

04:00:05.000 --> 04:00:07.000
But yeah

04:00:07.000 --> 04:00:09.000
Thank you so much for

04:00:09.000 --> 04:00:11.000
Creating this opportunity

04:00:11.000 --> 04:00:13.000
It was really fun

04:00:13.000 --> 04:00:15.000
Yeah

04:00:15.000 --> 04:00:17.000
I mean thanks for just saying yes

04:00:17.000 --> 04:00:19.000
On a random Twitter DM

04:00:19.000 --> 04:00:21.000
I wasn't sure

04:00:21.000 --> 04:00:23.000
But I thought like

04:00:23.000 --> 04:00:25.000
Because I saw the stream you did with

04:00:25.000 --> 04:00:27.000
Ken C Dodds and others

04:00:27.000 --> 04:00:29.000
And it was like this stream was great

04:00:29.000 --> 04:00:31.000
And I was like

04:00:31.000 --> 04:00:33.000
Can we actually

04:00:33.000 --> 04:00:35.000
Draw a flow diagram

04:00:35.000 --> 04:00:37.000
And see some code

04:00:37.000 --> 04:00:39.000
Because conceptually

04:00:39.000 --> 04:00:41.000
There's a lot going on

04:00:41.000 --> 04:00:43.000
So yeah

04:00:43.000 --> 04:00:45.000
I think this went over really well

04:00:45.000 --> 04:00:47.000
And the replay will be on YouTube also

04:00:47.000 --> 04:00:49.000
I'll share the link in the chat again

04:00:49.000 --> 04:00:51.000
But I'll try to upload this live stream over there

04:00:51.000 --> 04:00:53.000
It might go up by tomorrow

04:00:53.000 --> 04:00:55.000
Because downloading four hours of stream from Twitch

04:00:55.000 --> 04:00:57.000
And uploading four hours of stream to YouTube

04:00:57.000 --> 04:00:59.000
It might be a little bit

04:00:59.000 --> 04:01:01.000
To see if we can get like

04:01:01.000 --> 04:01:03.000
The let's build a router part

04:01:03.000 --> 04:01:05.000
Separate from the let's understand server components

04:01:05.000 --> 04:01:07.000
Because one's more intermediate and advanced

04:01:07.000 --> 04:01:09.000
Than the other

04:01:09.000 --> 04:01:11.000
But yeah

04:01:11.000 --> 04:01:13.000
Okay

04:01:13.000 --> 04:01:15.000
Yeah well good having you

04:01:15.000 --> 04:01:17.000
Thanks for stopping in

04:01:17.000 --> 04:01:19.000
And oh

04:01:19.000 --> 04:01:21.000
Let's actually find someone to raid

04:01:21.000 --> 04:01:23.000
Before I hop off

04:01:23.000 --> 04:01:25.000
Does anyone have suggestions

04:01:25.000 --> 04:01:27.000
What does it mean

04:01:27.000 --> 04:01:29.000
What is raiding

04:01:29.000 --> 04:01:31.000
I don't understand

04:01:31.000 --> 04:01:33.000
It's something you can do on Twitch

04:01:33.000 --> 04:01:35.000
To take your audience and push them

04:01:35.000 --> 04:01:37.000
Into another stream that's active

04:01:37.000 --> 04:01:39.000
Oh

04:01:39.000 --> 04:01:41.000
Are they like forced

04:01:41.000 --> 04:01:43.000
To do that

04:01:43.000 --> 04:01:45.000
Well I mean you can just stop watching

04:01:45.000 --> 04:01:47.000
If you don't want to do that

04:01:47.000 --> 04:01:49.000
It's kind of like YouTube autoplay

04:01:49.000 --> 04:01:51.000
Yeah

04:01:51.000 --> 04:01:53.000
But it hosts inside of yours

04:01:53.000 --> 04:01:55.000
And you can leave

04:01:55.000 --> 04:01:57.000
It's I don't know it's a fun system

04:01:57.000 --> 04:01:59.000
But I'll raid Cassidy

04:01:59.000 --> 04:02:01.000
Because she's great and does a ton of React tutorials

04:02:01.000 --> 04:02:03.000
And everything

04:02:03.000 --> 04:02:05.000
We still had a ton of people sticking around

04:02:05.000 --> 04:02:07.000
Thank y'all so much

04:02:07.000 --> 04:02:09.000
Drop a follow for the next stream

04:02:09.000 --> 04:02:11.000
Obviously do all of that

04:02:11.000 --> 04:02:13.000
But yeah

04:02:13.000 --> 04:02:15.000
See y'all around

04:02:15.000 --> 04:02:17.000
Bye

04:02:17.000 --> 04:02:19.000
Okay

