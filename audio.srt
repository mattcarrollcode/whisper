1
00:00:00,000 --> 00:00:02,520
I don't know what those letters meant in blue.

2
00:00:21,660 --> 00:00:22,980
I'm obsessed.

3
00:00:30,000 --> 00:00:32,000
I don't know what those letters meant in blue.

4
00:01:00,000 --> 00:01:02,000
I don't know what those letters meant in blue.

5
00:01:30,000 --> 00:01:32,000
I don't know what those letters meant in blue.

6
00:02:00,000 --> 00:02:02,000
I don't know what those letters meant in blue.

7
00:03:00,000 --> 00:03:02,000
I don't know what those letters meant in blue.

8
00:03:30,000 --> 00:03:32,000
I don't know what those letters meant in blue.

9
00:04:00,000 --> 00:04:02,000
I don't know what those letters meant in blue.

10
00:04:30,000 --> 00:04:32,000
I don't know what those letters meant in blue.

11
00:05:00,000 --> 00:05:02,000
I don't know what those letters meant in blue.

12
00:05:30,000 --> 00:05:32,000
I don't know what those letters meant in blue.

13
00:06:00,000 --> 00:06:02,000
I am obsessed.

14
00:06:02,000 --> 00:06:04,000
I am obsessed.

15
00:06:04,000 --> 00:06:06,000
I am obsessed.

16
00:06:06,000 --> 00:06:08,000
I am obsessed

17
00:06:08,000 --> 00:06:10,000
I am obsessed

18
00:06:10,000 --> 00:06:12,000
I am obsessed

19
00:06:12,000 --> 00:06:14,000
I am obsessed

20
00:06:14,000 --> 00:06:16,000
I am obsessed

21
00:06:16,000 --> 00:06:18,000
I am obsessed

22
00:06:18,000 --> 00:06:20,000
I am obsessed

23
00:06:20,000 --> 00:06:22,000
I am obsessed

24
00:06:22,000 --> 00:06:24,000
I am obsessed

25
00:06:24,000 --> 00:06:26,000
I am obsessed

26
00:06:26,000 --> 00:06:28,000
I am obsessed

27
00:06:28,000 --> 00:06:30,000
I am obsessed

28
00:06:30,000 --> 00:06:32,000
I am obsessed

29
00:06:32,000 --> 00:06:34,000
I am obsessed

30
00:06:34,000 --> 00:06:36,000
I am obsessed

31
00:06:36,000 --> 00:06:38,000
I am obsessed

32
00:06:38,000 --> 00:06:40,000
I am obsessed

33
00:06:40,000 --> 00:06:42,000
I am obsessed

34
00:06:42,000 --> 00:06:44,000
I am obsessed

35
00:06:44,000 --> 00:06:46,000
I am obsessed

36
00:06:46,000 --> 00:06:48,000
I am obsessed

37
00:06:48,000 --> 00:06:50,000
I am obsessed

38
00:06:50,000 --> 00:06:52,000
I am obsessed

39
00:06:52,000 --> 00:06:54,000
I am obsessed

40
00:06:54,000 --> 00:06:56,000
I am obsessed

41
00:06:56,000 --> 00:06:58,000
I am obsessed

42
00:06:58,000 --> 00:07:00,000
I am obsessed

43
00:07:00,000 --> 00:07:02,000
I am obsessed

44
00:07:02,000 --> 00:07:04,000
I am obsessed

45
00:07:04,000 --> 00:07:06,000
I am obsessed

46
00:07:06,000 --> 00:07:08,000
I am obsessed

47
00:07:08,000 --> 00:07:10,000
I am obsessed

48
00:07:10,000 --> 00:07:12,000
I am obsessed

49
00:07:12,000 --> 00:07:14,000
I am obsessed

50
00:07:14,000 --> 00:07:16,000
I am obsessed

51
00:07:16,000 --> 00:07:18,000
I am obsessed

52
00:07:18,000 --> 00:07:20,000
I am obsessed

53
00:07:20,000 --> 00:07:22,000
I am obsessed

54
00:07:22,000 --> 00:07:24,000
I am obsessed

55
00:07:25,000 --> 00:07:27,000
Yeah, I think we will

56
00:07:27,000 --> 00:07:29,000
I think we'll at least explain

57
00:07:29,000 --> 00:07:31,000
My goal is to explain like

58
00:07:31,000 --> 00:07:33,000
mental model, way to think about it

59
00:07:33,000 --> 00:07:35,000
and maybe build a little something

60
00:07:35,000 --> 00:07:37,000
along the way. No promises it'll look good

61
00:07:37,000 --> 00:07:39,000
but it should be at least functional

62
00:07:39,000 --> 00:07:41,000
But yeah

63
00:07:41,000 --> 00:07:43,000
So I also

64
00:07:43,000 --> 00:07:45,000
like before we started just wanted to like

65
00:07:45,000 --> 00:07:47,000
sort of catch up and see how you've been

66
00:07:47,000 --> 00:07:49,000
doing with all this like

67
00:07:49,000 --> 00:07:51,000
working with React for the past

68
00:07:51,000 --> 00:07:53,000
few years. It feels like React Server Components

69
00:07:53,000 --> 00:07:55,000
has been going

70
00:07:55,000 --> 00:07:57,000
for a long time or I've heard about it

71
00:07:57,000 --> 00:07:59,000
for a long time and it's taken many forms

72
00:07:59,000 --> 00:08:01,000
and I'm kind of curious like what did

73
00:08:01,000 --> 00:08:03,000
it take to get to this point

74
00:08:03,000 --> 00:08:05,000
like what was the process

75
00:08:05,000 --> 00:08:07,000
there and the collaboration

76
00:08:07,000 --> 00:08:09,000
Yeah

77
00:08:11,000 --> 00:08:13,000
So I think we first

78
00:08:13,000 --> 00:08:15,000
started like specifically

79
00:08:15,000 --> 00:08:17,000
Sebastian

80
00:08:17,000 --> 00:08:19,000
is like the person who tends

81
00:08:19,000 --> 00:08:21,000
to

82
00:08:21,000 --> 00:08:23,000
kind of look at our vision

83
00:08:23,000 --> 00:08:25,000
going forward like he started thinking

84
00:08:25,000 --> 00:08:27,000
about this maybe in 2016

85
00:08:27,000 --> 00:08:29,000
so

86
00:08:29,000 --> 00:08:31,000
there he had a

87
00:08:31,000 --> 00:08:33,000
internal document

88
00:08:33,000 --> 00:08:35,000
called perhaps provocatively

89
00:08:35,000 --> 00:08:37,000
what comes

90
00:08:37,000 --> 00:08:39,000
after GraphQL

91
00:08:39,000 --> 00:08:41,000
and the idea

92
00:08:41,000 --> 00:08:43,000
was

93
00:08:43,000 --> 00:08:45,000
basically the architecture

94
00:08:45,000 --> 00:08:47,000
like the architecture we had

95
00:08:47,000 --> 00:08:49,000
at Meta for

96
00:08:49,000 --> 00:08:51,000
like

97
00:08:51,000 --> 00:08:53,000
for web apps

98
00:08:53,000 --> 00:08:55,000
was using GraphQL

99
00:08:55,000 --> 00:08:57,000
and Relay for

100
00:08:57,000 --> 00:08:59,000
data access and that worked pretty

101
00:08:59,000 --> 00:09:01,000
well but what ends up

102
00:09:01,000 --> 00:09:03,000
happening is you

103
00:09:03,000 --> 00:09:05,000
you push more and more code

104
00:09:05,000 --> 00:09:07,000
to the client

105
00:09:07,000 --> 00:09:09,000
and so like the client bundle really

106
00:09:09,000 --> 00:09:11,000
grows but that's

107
00:09:11,000 --> 00:09:13,000
also not the whole story it's like

108
00:09:13,000 --> 00:09:15,000
you also push a lot

109
00:09:15,000 --> 00:09:17,000
data like the traditional kind

110
00:09:17,000 --> 00:09:19,000
of rich client architecture

111
00:09:19,000 --> 00:09:21,000
is you push all the data

112
00:09:21,000 --> 00:09:23,000
that you might kind of plausibly

113
00:09:23,000 --> 00:09:25,000
need into a client cache

114
00:09:25,000 --> 00:09:27,000
and then your components pick parts

115
00:09:27,000 --> 00:09:29,000
of the data and somehow massage it

116
00:09:29,000 --> 00:09:31,000
and so what you

117
00:09:31,000 --> 00:09:33,000
the problem you kind of run into

118
00:09:33,000 --> 00:09:35,000
you know as you scale it up is

119
00:09:35,000 --> 00:09:37,000
you end

120
00:09:37,000 --> 00:09:39,000
up having all the data

121
00:09:39,000 --> 00:09:41,000
and all the code you might possibly need

122
00:09:41,000 --> 00:09:43,000
even if actually

123
00:09:43,000 --> 00:09:45,000
it's not needed for the specific

124
00:09:45,000 --> 00:09:47,000
case and

125
00:09:47,000 --> 00:09:49,000
like a canonical

126
00:09:49,000 --> 00:09:51,000
example of this could be

127
00:09:51,000 --> 00:09:53,000
you know like when you want

128
00:09:53,000 --> 00:09:55,000
to show you know a post was

129
00:09:55,000 --> 00:09:57,000
liked by

130
00:09:57,000 --> 00:09:59,000
like your friend

131
00:09:59,000 --> 00:10:01,000
like I don't know

132
00:10:01,000 --> 00:10:03,000
Dan and like Anna

133
00:10:03,000 --> 00:10:05,000
and like five others

134
00:10:05,000 --> 00:10:07,000
something like this and so you don't

135
00:10:07,000 --> 00:10:09,000
actually need for example

136
00:10:09,000 --> 00:10:11,000
their avatars

137
00:10:11,000 --> 00:10:13,000
or

138
00:10:13,000 --> 00:10:15,000
and like you need like very specific bits

139
00:10:15,000 --> 00:10:17,000
of information and really like it's just

140
00:10:17,000 --> 00:10:19,000
you don't even need like the links to their

141
00:10:19,000 --> 00:10:21,000
profiles it's really

142
00:10:21,000 --> 00:10:23,000
just the string that you want to get

143
00:10:23,000 --> 00:10:25,000
but even though the GraphQL

144
00:10:25,000 --> 00:10:27,000
of course like GraphQL lets you be very selective

145
00:10:27,000 --> 00:10:29,000
about what you fetch

146
00:10:29,000 --> 00:10:31,000
and like how you use it so it does

147
00:10:31,000 --> 00:10:33,000
solve this problem partially

148
00:10:33,000 --> 00:10:35,000
but you still

149
00:10:35,000 --> 00:10:37,000
the shape of the data you

150
00:10:37,000 --> 00:10:39,000
download is dictated by the GraphQL

151
00:10:39,000 --> 00:10:41,000
endpoint and so if you

152
00:10:41,000 --> 00:10:43,000
like transform a bunch of

153
00:10:43,000 --> 00:10:45,000
stuff and

154
00:10:45,000 --> 00:10:47,000
get you know like get something

155
00:10:47,000 --> 00:10:49,000
that you know just the

156
00:10:49,000 --> 00:10:51,000
data for the UI layer you kind of

157
00:10:51,000 --> 00:10:53,000
have to do it on the client

158
00:10:53,000 --> 00:10:55,000
and this problem

159
00:10:55,000 --> 00:10:57,000
it's like an inefficiency problem

160
00:10:57,000 --> 00:10:59,000
I think that's like one way

161
00:10:59,000 --> 00:11:01,000
you know one way to think of this is like

162
00:11:01,000 --> 00:11:03,000
we'd like to optimize it so

163
00:11:03,000 --> 00:11:05,000
that like the natural way

164
00:11:05,000 --> 00:11:07,000
to optimize it if you think about it is

165
00:11:07,000 --> 00:11:09,000
okay like you're on the server anyway

166
00:11:09,000 --> 00:11:11,000
why not have some kind of

167
00:11:11,000 --> 00:11:13,000
abstraction kind of like view models

168
00:11:13,000 --> 00:11:15,000
that used to be like a thing

169
00:11:15,000 --> 00:11:17,000
in I don't know 20

170
00:11:17,000 --> 00:11:19,000
2010 or something like this there was

171
00:11:19,000 --> 00:11:21,000
this idea of like view models that

172
00:11:21,000 --> 00:11:23,000
massage the actual model from the

173
00:11:23,000 --> 00:11:25,000
database for the view kind of

174
00:11:25,000 --> 00:11:27,000
preparing just what the view

175
00:11:27,000 --> 00:11:29,000
needs

176
00:11:29,000 --> 00:11:31,000
and I think that's one

177
00:11:31,000 --> 00:11:33,000
angle and it doesn't

178
00:11:33,000 --> 00:11:35,000
have to do like I also want to clarify

179
00:11:35,000 --> 00:11:37,000
it doesn't have to do with like just like big

180
00:11:37,000 --> 00:11:39,000
pages or anything like

181
00:11:39,000 --> 00:11:41,000
a classic kind of low

182
00:11:41,000 --> 00:11:43,000
scale example of this is a documentation

183
00:11:43,000 --> 00:11:45,000
website where you

184
00:11:45,000 --> 00:11:47,000
have like you have many

185
00:11:47,000 --> 00:11:49,000
MDX components

186
00:11:49,000 --> 00:11:51,000
like you know code

187
00:11:51,000 --> 00:11:53,000
snippets or interactive code

188
00:11:53,000 --> 00:11:55,000
editor and so on and

189
00:11:55,000 --> 00:11:57,000
the way you would do this today

190
00:11:57,000 --> 00:11:59,000
probably is you just have

191
00:11:59,000 --> 00:12:01,000
like all of them in a single

192
00:12:01,000 --> 00:12:03,000
bundle and then like all of them get

193
00:12:03,000 --> 00:12:05,000
loaded but ideally what you want

194
00:12:05,000 --> 00:12:07,000
is like if a page has no

195
00:12:07,000 --> 00:12:09,000
interactive code snippets and also

196
00:12:09,000 --> 00:12:11,000
only has like static code

197
00:12:11,000 --> 00:12:13,000
examples you probably don't want to like

198
00:12:13,000 --> 00:12:15,000
download the parser you kind of want to have

199
00:12:15,000 --> 00:12:17,000
that output instead

200
00:12:17,000 --> 00:12:19,000
so I think like that is like

201
00:12:19,000 --> 00:12:21,000
one part of it is this idea

202
00:12:21,000 --> 00:12:23,000
like let's not download the data

203
00:12:23,000 --> 00:12:25,000
we're not going to need let's not

204
00:12:25,000 --> 00:12:27,000
download the code we might

205
00:12:27,000 --> 00:12:29,000
not need let's

206
00:12:29,000 --> 00:12:31,000
just you know download

207
00:12:31,000 --> 00:12:33,000
the things that we actually do need and then

208
00:12:33,000 --> 00:12:35,000
if you need to like pre-process a bunch of stuff

209
00:12:35,000 --> 00:12:37,000
we'll just do that on the server because

210
00:12:37,000 --> 00:12:39,000
we're going to the server anyway

211
00:12:39,000 --> 00:12:41,000
why not do it there

212
00:12:41,000 --> 00:12:43,000
but I think another

213
00:12:43,000 --> 00:12:45,000
way to look at it is just from the

214
00:12:45,000 --> 00:12:47,000
mental model perspective

215
00:12:47,000 --> 00:12:49,000
so if you've been coding

216
00:12:49,000 --> 00:12:51,000
you know like for a while

217
00:12:51,000 --> 00:12:53,000
like especially like before

218
00:12:53,000 --> 00:12:55,000
like before all the client

219
00:12:55,000 --> 00:12:57,000
stuff explosion

220
00:12:57,000 --> 00:12:59,000
which you know it was warranted like people

221
00:12:59,000 --> 00:13:01,000
wanted to do more stuff on the client

222
00:13:01,000 --> 00:13:03,000
because they wanted to have like

223
00:13:03,000 --> 00:13:05,000
zero latency

224
00:13:05,000 --> 00:13:07,000
for like interactions and like really

225
00:13:07,000 --> 00:13:09,000
reach interactions without reloading the page

226
00:13:09,000 --> 00:13:11,000
but then if you think in terms of

227
00:13:11,000 --> 00:13:13,000
like mental model

228
00:13:13,000 --> 00:13:15,000
kind of thinking in terms of

229
00:13:15,000 --> 00:13:17,000
like state management and

230
00:13:17,000 --> 00:13:19,000
caching and like all of this stuff

231
00:13:19,000 --> 00:13:21,000
it gets really complicated

232
00:13:21,000 --> 00:13:23,000
like how do you even know like what to

233
00:13:23,000 --> 00:13:25,000
fetch for the next page how do you

234
00:13:25,000 --> 00:13:27,000
avoid waterfalls

235
00:13:27,000 --> 00:13:29,000
like it gets pretty complex and then if you

236
00:13:29,000 --> 00:13:31,000
think of like the way we used to write

237
00:13:31,000 --> 00:13:33,000
web apps in you know

238
00:13:33,000 --> 00:13:35,000
in 2000s before

239
00:13:35,000 --> 00:13:37,000
like in traditional server

240
00:13:37,000 --> 00:13:39,000
client model the mental model is

241
00:13:39,000 --> 00:13:41,000
so much simpler because you just describe

242
00:13:41,000 --> 00:13:43,000
like I'm going to go to the database

243
00:13:43,000 --> 00:13:45,000
I'm going to fetch these different things I'm going to spit

244
00:13:45,000 --> 00:13:47,000
out this response and then

245
00:13:47,000 --> 00:13:49,000
if you want to like go to another page

246
00:13:49,000 --> 00:13:51,000
that cycle repeats again

247
00:13:51,000 --> 00:13:53,000
and so I think like server components

248
00:13:53,000 --> 00:13:55,000
is you know kind of this idea of

249
00:13:55,000 --> 00:13:57,000
let's keep the user

250
00:13:57,000 --> 00:13:59,000
experience where like things

251
00:13:59,000 --> 00:14:01,000
don't you know you don't reload the page

252
00:14:01,000 --> 00:14:03,000
all the time but let's

253
00:14:03,000 --> 00:14:05,000
keep also like the mental model

254
00:14:05,000 --> 00:14:07,000
of the kind of traditional

255
00:14:07,000 --> 00:14:09,000
request response

256
00:14:09,000 --> 00:14:11,000
where you just

257
00:14:11,000 --> 00:14:13,000
describe what you want to see on the page

258
00:14:13,000 --> 00:14:15,000
and then it somehow reconciles

259
00:14:15,000 --> 00:14:17,000
and also like

260
00:14:17,000 --> 00:14:19,000
let's while we're here why

261
00:14:19,000 --> 00:14:21,000
not like apply a bunch of optimizations

262
00:14:21,000 --> 00:14:23,000
now that we know you know like let's not download

263
00:14:23,000 --> 00:14:25,000
more code than we need let's not

264
00:14:25,000 --> 00:14:27,000
download more data and so

265
00:14:27,000 --> 00:14:29,000
in terms of like historical scale

266
00:14:29,000 --> 00:14:31,000
I think we so we

267
00:14:31,000 --> 00:14:33,000
started with this

268
00:14:33,000 --> 00:14:35,000
I think like idea of

269
00:14:35,000 --> 00:14:37,000
and we knew we also knew that

270
00:14:37,000 --> 00:14:39,000
you know this approach was also

271
00:14:39,000 --> 00:14:41,000
not new exactly it was more about

272
00:14:41,000 --> 00:14:43,000
bringing it to react

273
00:14:43,000 --> 00:14:45,000
because for

274
00:14:45,000 --> 00:14:47,000
like we've had

275
00:14:47,000 --> 00:14:49,000
at Facebook we've had XHP

276
00:14:49,000 --> 00:14:51,000
so this is

277
00:14:51,000 --> 00:14:53,000
Wait what is XHP?

278
00:14:53,000 --> 00:14:55,000
It's sort of like an alternative universe

279
00:14:55,000 --> 00:14:57,000
and I think we're kind of

280
00:14:57,000 --> 00:14:59,000
seeing this again with

281
00:14:59,000 --> 00:15:01,000
you know like when JSX was weird

282
00:15:01,000 --> 00:15:03,000
to everyone when react came out

283
00:15:03,000 --> 00:15:05,000
and we didn't even realize that it

284
00:15:05,000 --> 00:15:07,000
would be controversial

285
00:15:07,000 --> 00:15:09,000
I think like with server components maybe

286
00:15:09,000 --> 00:15:11,000
it's a little bit similar because

287
00:15:11,000 --> 00:15:13,000
the thing we had

288
00:15:13,000 --> 00:15:15,000
before react

289
00:15:15,000 --> 00:15:17,000
the way like the

290
00:15:17,000 --> 00:15:19,000
Facebook website was built

291
00:15:19,000 --> 00:15:21,000
was with like PHP and later

292
00:15:21,000 --> 00:15:23,000
changed to hack

293
00:15:23,000 --> 00:15:25,000
but we have this syntax for

294
00:15:25,000 --> 00:15:27,000
defining

295
00:15:27,000 --> 00:15:29,000
components there

296
00:15:29,000 --> 00:15:31,000
so it was a very different

297
00:15:31,000 --> 00:15:33,000
mindset from

298
00:15:33,000 --> 00:15:35,000
I guess dominant solutions like

299
00:15:35,000 --> 00:15:37,000
Rails or

300
00:15:37,000 --> 00:15:39,000
you know like the old school

301
00:15:39,000 --> 00:15:41,000
server solutions

302
00:15:41,000 --> 00:15:43,000
like in the open source

303
00:15:43,000 --> 00:15:45,000
XHP was pretty different because it felt

304
00:15:45,000 --> 00:15:47,000
more like react as in

305
00:15:47,000 --> 00:15:49,000
you have no like there are no

306
00:15:49,000 --> 00:15:51,000
additional controllers in

307
00:15:51,000 --> 00:15:53,000
this kind of MVC sense

308
00:15:53,000 --> 00:15:55,000
it's more like there's a component

309
00:15:55,000 --> 00:15:57,000
tree, components can be

310
00:15:57,000 --> 00:15:59,000
asynchronous so they can like fetch

311
00:15:59,000 --> 00:16:01,000
some data and then return what they render

312
00:16:01,000 --> 00:16:03,000
and you can compose them

313
00:16:03,000 --> 00:16:05,000
and you can have your own components

314
00:16:05,000 --> 00:16:07,000
and so this is actually like

315
00:16:07,000 --> 00:16:09,000
where JSX came from

316
00:16:09,000 --> 00:16:11,000
is like people writing XHP

317
00:16:11,000 --> 00:16:13,000
code wanted to keep writing

318
00:16:13,000 --> 00:16:15,000
something similar like on the client

319
00:16:15,000 --> 00:16:17,000
but the problem with that paradigm is that

320
00:16:17,000 --> 00:16:19,000
it couldn't refresh

321
00:16:19,000 --> 00:16:21,000
without like losing the entire page

322
00:16:21,000 --> 00:16:23,000
and so

323
00:16:23,000 --> 00:16:25,000
we had this thing as inspiration

324
00:16:25,000 --> 00:16:27,000
and we also had

325
00:16:27,000 --> 00:16:29,000
our native apps also kind of worked

326
00:16:29,000 --> 00:16:31,000
like at least some

327
00:16:31,000 --> 00:16:33,000
parts of them worked with that model where

328
00:16:33,000 --> 00:16:35,000
the actual logic for how

329
00:16:35,000 --> 00:16:37,000
to massage data and like turn it

330
00:16:37,000 --> 00:16:39,000
into UI tree was on the server

331
00:16:39,000 --> 00:16:41,000
it was written in XHP

332
00:16:41,000 --> 00:16:43,000
Is that kind of like PHP?

333
00:16:43,000 --> 00:16:45,000
I mean I see the similarity

334
00:16:45,000 --> 00:16:47,000
conceptually of just like you're

335
00:16:47,000 --> 00:16:49,000
wild-westing your database queries here

336
00:16:49,000 --> 00:16:51,000
you're turning that into server markup

337
00:16:51,000 --> 00:16:53,000
and then you're sending it down. It's just there was no

338
00:16:53,000 --> 00:16:55,000
like server-client relationship yet

339
00:16:55,000 --> 00:16:57,000
so I kind of see that React like took that

340
00:16:57,000 --> 00:16:59,000
bit out, the templating was the good part

341
00:16:59,000 --> 00:17:01,000
let's do the client thing first because that's

342
00:17:01,000 --> 00:17:03,000
kind of a no-brainer of like yeah that's

343
00:17:03,000 --> 00:17:05,000
like the end of the spectrum

344
00:17:05,000 --> 00:17:07,000
that's what you need and now

345
00:17:07,000 --> 00:17:09,000
we're kind of cycling back

346
00:17:09,000 --> 00:17:11,000
when we realized oh yeah we probably could

347
00:17:11,000 --> 00:17:13,000
have a dynamic setup here

348
00:17:13,000 --> 00:17:15,000
yeah I think it's

349
00:17:15,000 --> 00:17:17,000
it's just that we already

350
00:17:17,000 --> 00:17:19,000
had a solution to the server part

351
00:17:19,000 --> 00:17:21,000
and like XHP was actually

352
00:17:21,000 --> 00:17:23,000
pretty sophisticated so

353
00:17:23,000 --> 00:17:25,000
there was another part that was

354
00:17:25,000 --> 00:17:27,000
related to it called BigPipe

355
00:17:27,000 --> 00:17:29,000
which we you know like we published

356
00:17:29,000 --> 00:17:31,000
an article about it in

357
00:17:31,000 --> 00:17:33,000
2011 maybe

358
00:17:33,000 --> 00:17:35,000
and it's just

359
00:17:35,000 --> 00:17:37,000
this idea that if you have

360
00:17:37,000 --> 00:17:39,000
this kind of like asynchronous

361
00:17:39,000 --> 00:17:41,000
component abstraction on the server

362
00:17:41,000 --> 00:17:43,000
you also don't want to

363
00:17:43,000 --> 00:17:45,000
like hold the entire page

364
00:17:45,000 --> 00:17:47,000
before starting to

365
00:17:47,000 --> 00:17:49,000
like emit output

366
00:17:49,000 --> 00:17:51,000
and I was actually

367
00:17:51,000 --> 00:17:53,000
surprised like I learned that in

368
00:17:53,000 --> 00:17:55,000
PHP or Rails like you would

369
00:17:55,000 --> 00:17:57,000
usually just you know

370
00:17:57,000 --> 00:17:59,000
fetch everything and kind of then

371
00:17:59,000 --> 00:18:01,000
start rendering and like that's

372
00:18:01,000 --> 00:18:03,000
not efficient

373
00:18:03,000 --> 00:18:05,000
and so yeah

374
00:18:05,000 --> 00:18:07,000
so the way like BigPipe worked is that

375
00:18:07,000 --> 00:18:09,000
it had this ability to chunk

376
00:18:09,000 --> 00:18:11,000
the page like your feed your

377
00:18:11,000 --> 00:18:13,000
like I don't know like the sidebar

378
00:18:13,000 --> 00:18:15,000
something else those could be

379
00:18:15,000 --> 00:18:17,000
parallelized

380
00:18:17,000 --> 00:18:19,000
so like all of them could have some data

381
00:18:19,000 --> 00:18:21,000
dependencies but we could stream

382
00:18:21,000 --> 00:18:23,000
kind of the initial shell and then fill

383
00:18:23,000 --> 00:18:25,000
them in and so we wanted to bring

384
00:18:25,000 --> 00:18:27,000
like so I think like we had

385
00:18:27,000 --> 00:18:29,000
these solutions

386
00:18:29,000 --> 00:18:31,000
but then we needed client

387
00:18:31,000 --> 00:18:33,000
interactivity and so React

388
00:18:33,000 --> 00:18:35,000
kind of started solving that

389
00:18:35,000 --> 00:18:37,000
and then as we kind of did more

390
00:18:37,000 --> 00:18:39,000
with React

391
00:18:39,000 --> 00:18:41,000
there was like this split between

392
00:18:41,000 --> 00:18:43,000
technologies that became very noticeable

393
00:18:43,000 --> 00:18:45,000
because they did not really

394
00:18:45,000 --> 00:18:47,000
integrate well

395
00:18:47,000 --> 00:18:49,000
no they were used together

396
00:18:49,000 --> 00:18:51,000
so you could in XHP

397
00:18:51,000 --> 00:18:53,000
you could render a React component

398
00:18:53,000 --> 00:18:55,000
but this would only

399
00:18:55,000 --> 00:18:57,000
work kind of once so this

400
00:18:57,000 --> 00:18:59,000
would just say you know like

401
00:18:59,000 --> 00:19:01,000
in this like tree

402
00:19:01,000 --> 00:19:03,000
when it loads on the client like put

403
00:19:03,000 --> 00:19:05,000
this React component there but then there

404
00:19:05,000 --> 00:19:07,000
was no way to update the tree because

405
00:19:07,000 --> 00:19:09,000
it was just HTML in the end

406
00:19:09,000 --> 00:19:11,000
so there was no

407
00:19:11,000 --> 00:19:13,000
way to kind of refresh it without losing

408
00:19:13,000 --> 00:19:15,000
the page

409
00:19:15,000 --> 00:19:17,000
okay so there was no

410
00:19:17,000 --> 00:19:19,000
like client side routing story

411
00:19:19,000 --> 00:19:21,000
is kind of the big part there

412
00:19:21,000 --> 00:19:23,000
yeah well it's not just

413
00:19:23,000 --> 00:19:25,000
routing necessarily it's just there was no

414
00:19:25,000 --> 00:19:27,000
way to refresh the server

415
00:19:27,000 --> 00:19:29,000
output without like losing everything

416
00:19:29,000 --> 00:19:31,000
and so

417
00:19:31,000 --> 00:19:33,000
I think the

418
00:19:33,000 --> 00:19:35,000
yeah so I think

419
00:19:35,000 --> 00:19:37,000
the story kind of

420
00:19:37,000 --> 00:19:39,000
it really became

421
00:19:39,000 --> 00:19:41,000
I think like

422
00:19:41,000 --> 00:19:43,000
the way to explain it

423
00:19:43,000 --> 00:19:45,000
conceptually

424
00:19:45,000 --> 00:19:47,000
makes more

425
00:19:47,000 --> 00:19:49,000
sense like if you do this in a different

426
00:19:49,000 --> 00:19:51,000
order then things actually happen

427
00:19:51,000 --> 00:19:53,000
chronologically yeah it does make

428
00:19:53,000 --> 00:19:55,000
sense because server components are like it's fitting

429
00:19:55,000 --> 00:19:57,000
this thing that's actually a new starting

430
00:19:57,000 --> 00:19:59,000
point instead of a new feature

431
00:19:59,000 --> 00:20:01,000
so it's like if you want to use it

432
00:20:01,000 --> 00:20:03,000
properly you

433
00:20:03,000 --> 00:20:05,000
refactor from the top you're not refactoring

434
00:20:05,000 --> 00:20:07,000
by just let's add a server component right here

435
00:20:07,000 --> 00:20:09,000
and see how it goes exactly

436
00:20:09,000 --> 00:20:11,000
yeah and I think it's because

437
00:20:11,000 --> 00:20:13,000
like we've already like we've had a piece

438
00:20:13,000 --> 00:20:15,000
you know that works on the server so we did

439
00:20:15,000 --> 00:20:17,000
the client part and now okay let's

440
00:20:17,000 --> 00:20:19,000
rethink the server piece

441
00:20:19,000 --> 00:20:21,000
to work with the client part seamlessly

442
00:20:21,000 --> 00:20:23,000
because we now know you know the entire

443
00:20:23,000 --> 00:20:25,000
like how to fit them

444
00:20:25,000 --> 00:20:27,000
together and so that

445
00:20:27,000 --> 00:20:29,000
took a long time and I think like suspense

446
00:20:29,000 --> 00:20:31,000
is especially interesting as a feature

447
00:20:31,000 --> 00:20:33,000
because the original

448
00:20:33,000 --> 00:20:35,000
the

449
00:20:35,000 --> 00:20:37,000
motivation for his design which

450
00:20:37,000 --> 00:20:39,000
I think was in like 2016 or

451
00:20:39,000 --> 00:20:41,000
2017 yeah was

452
00:20:41,000 --> 00:20:43,000
like how do we adopt this

453
00:20:43,000 --> 00:20:45,000
big pipe architecture like

454
00:20:45,000 --> 00:20:47,000
this idea of streaming things

455
00:20:47,000 --> 00:20:49,000
in and like having them kind of appear

456
00:20:49,000 --> 00:20:51,000
as they're ready like

457
00:20:51,000 --> 00:20:53,000
how do we fit this into React

458
00:20:53,000 --> 00:20:55,000
server rendering model

459
00:20:55,000 --> 00:20:57,000
and so we started there that let

460
00:20:57,000 --> 00:20:59,000
that let the like design of suspense

461
00:20:59,000 --> 00:21:01,000
then but the first

462
00:21:01,000 --> 00:21:03,000
way we shift suspense was actually on the client

463
00:21:03,000 --> 00:21:05,000
only and it was not supported for

464
00:21:05,000 --> 00:21:07,000
SSR because we didn't have a streaming

465
00:21:07,000 --> 00:21:09,000
server render yet and then we did like

466
00:21:09,000 --> 00:21:11,000
streaming server rendering and then

467
00:21:11,000 --> 00:21:13,000
we realized actually this still leads

468
00:21:13,000 --> 00:21:15,000
to waterfalls because like then

469
00:21:15,000 --> 00:21:17,000
your app lives on the client

470
00:21:17,000 --> 00:21:19,000
and you need to somehow prevent

471
00:21:19,000 --> 00:21:21,000
client server waterfalls

472
00:21:21,000 --> 00:21:23,000
and so then we're like okay maybe we need like

473
00:21:23,000 --> 00:21:25,000
to actually like do something like

474
00:21:25,000 --> 00:21:27,000
XFP first or you know like

475
00:21:27,000 --> 00:21:29,000
do something that actually lets you avoid

476
00:21:29,000 --> 00:21:31,000
client server waterfalls

477
00:21:31,000 --> 00:21:33,000
and this idea of like splitting

478
00:21:33,000 --> 00:21:35,000
components into two types

479
00:21:35,000 --> 00:21:37,000
was actually using like

480
00:21:37,000 --> 00:21:39,000
almost the same mechanism as

481
00:21:39,000 --> 00:21:41,000
Sebastian explored in

482
00:21:41,000 --> 00:21:43,000
2015 but for

483
00:21:43,000 --> 00:21:45,000
using Reacting workers

484
00:21:45,000 --> 00:21:47,000
so it's

485
00:21:47,000 --> 00:21:49,000
exactly the same idea but applied

486
00:21:49,000 --> 00:21:51,000
like a different so it's like many things

487
00:21:51,000 --> 00:21:53,000
came together that were developed

488
00:21:53,000 --> 00:21:55,000
in like in different years and

489
00:21:55,000 --> 00:21:57,000
now like we have this consistent vision

490
00:21:57,000 --> 00:21:59,000
but it's it's a bit hard

491
00:21:59,000 --> 00:22:01,000
to unpack how it happened exactly

492
00:22:01,000 --> 00:22:03,000
it yeah and it's

493
00:22:03,000 --> 00:22:05,000
it's cool to hear the context of like

494
00:22:05,000 --> 00:22:07,000
where this was born inside

495
00:22:07,000 --> 00:22:09,000
of Facebook because it starts

496
00:22:09,000 --> 00:22:11,000
to make a little more sense with that I just know it

497
00:22:11,000 --> 00:22:13,000
as like an outsider that used

498
00:22:13,000 --> 00:22:15,000
React first with create React app

499
00:22:15,000 --> 00:22:17,000
then with Next.js and just kind of learn

500
00:22:17,000 --> 00:22:19,000
patterns from there for small scale things

501
00:22:19,000 --> 00:22:21,000
without ever really thinking about the server

502
00:22:21,000 --> 00:22:23,000
it was like I learned about client stuff

503
00:22:23,000 --> 00:22:25,000
then I learned about SSR and now

504
00:22:25,000 --> 00:22:27,000
I'm pushing everything that I can to the server

505
00:22:27,000 --> 00:22:29,000
it's backwards from how like

506
00:22:29,000 --> 00:22:31,000
the progress of web

507
00:22:31,000 --> 00:22:33,000
dev happened like it started with Rails

508
00:22:33,000 --> 00:22:35,000
and then we started exploring client side

509
00:22:35,000 --> 00:22:37,000
but I'm like in a generation

510
00:22:37,000 --> 00:22:39,000
that started with Angular 1 like

511
00:22:39,000 --> 00:22:41,000
I was middle school before

512
00:22:41,000 --> 00:22:43,000
that so I just didn't even know what was

513
00:22:43,000 --> 00:22:45,000
going on in web dev before that

514
00:22:45,000 --> 00:22:47,000
so it's just different

515
00:22:47,000 --> 00:22:49,000
yeah I guess the other

516
00:22:49,000 --> 00:22:51,000
thing that's like relevant is I think a lot

517
00:22:51,000 --> 00:22:53,000
of people because like the

518
00:22:53,000 --> 00:22:55,000
word server is so like overloaded

519
00:22:55,000 --> 00:22:57,000
in like for us at

520
00:22:57,000 --> 00:22:59,000
least because we

521
00:23:01,000 --> 00:23:03,000
we try to solve like a more

522
00:23:03,000 --> 00:23:05,000
general problem so

523
00:23:05,000 --> 00:23:07,000
like server components for example

524
00:23:07,000 --> 00:23:09,000
they can run during the

525
00:23:09,000 --> 00:23:11,000
build right so it doesn't

526
00:23:11,000 --> 00:23:13,000
mean that you literally need to like have

527
00:23:13,000 --> 00:23:15,000
a server it's more like

528
00:23:15,000 --> 00:23:17,000
the server client distinction

529
00:23:17,000 --> 00:23:19,000
for us is just

530
00:23:19,000 --> 00:23:21,000
the stuff that runs first and kind of

531
00:23:21,000 --> 00:23:23,000
the stuff that runs later and so

532
00:23:23,000 --> 00:23:25,000
the stuff that runs first that could run

533
00:23:25,000 --> 00:23:27,000
during the build time or

534
00:23:27,000 --> 00:23:29,000
where actually

535
00:23:29,000 --> 00:23:31,000
it won't do and it also gets confusing

536
00:23:31,000 --> 00:23:33,000
right because like client components

537
00:23:33,000 --> 00:23:35,000
they kind of also run on the server

538
00:23:35,000 --> 00:23:37,000
during like SSR

539
00:23:37,000 --> 00:23:39,000
so it's not

540
00:23:39,000 --> 00:23:41,000
exactly this like client

541
00:23:41,000 --> 00:23:43,000
stuff is like in the browser server

542
00:23:43,000 --> 00:23:45,000
stuff is like on the machine

543
00:23:45,000 --> 00:23:47,000
it's more like just two stages and we need

544
00:23:47,000 --> 00:23:49,000
some names for the stages

545
00:23:49,000 --> 00:23:51,000
and we also want to support

546
00:23:51,000 --> 00:23:53,000
running server components

547
00:23:53,000 --> 00:23:55,000
on the client

548
00:23:55,000 --> 00:23:57,000
of course you wouldn't be able to

549
00:23:57,000 --> 00:23:59,000
read a database but it's just

550
00:23:59,000 --> 00:24:01,000
using the same mental model

551
00:24:01,000 --> 00:24:03,000
if you really don't have a server and

552
00:24:03,000 --> 00:24:05,000
also you don't want to

553
00:24:05,000 --> 00:24:07,000
you know generate things

554
00:24:07,000 --> 00:24:09,000
at the build time but you want to structure

555
00:24:09,000 --> 00:24:11,000
your code like in the same way so that

556
00:24:11,000 --> 00:24:13,000
it's later possible to like extend

557
00:24:13,000 --> 00:24:15,000
it or like port it

558
00:24:15,000 --> 00:24:17,000
so it's really about the paradigm

559
00:24:17,000 --> 00:24:19,000
of like this you know

560
00:24:19,000 --> 00:24:21,000
two component types

561
00:24:21,000 --> 00:24:23,000
rather than specific places where you put

562
00:24:23,000 --> 00:24:25,000
them

563
00:24:25,000 --> 00:24:27,000
yeah exactly and I've heard

564
00:24:27,000 --> 00:24:29,000
the thought in the past

565
00:24:29,000 --> 00:24:31,000
of like maybe it should have been called use

566
00:24:31,000 --> 00:24:33,000
interactive or something like that

567
00:24:33,000 --> 00:24:35,000
where it implies like I'm not a fan of

568
00:24:35,000 --> 00:24:37,000
that personally but it

569
00:24:37,000 --> 00:24:39,000
implies that it's adding things

570
00:24:39,000 --> 00:24:41,000
that could basically

571
00:24:41,000 --> 00:24:43,000
change state after the fact

572
00:24:43,000 --> 00:24:45,000
it's not just passing things down through server

573
00:24:45,000 --> 00:24:47,000
components and it's like

574
00:24:47,000 --> 00:24:49,000
I get it I think my bigger

575
00:24:49,000 --> 00:24:51,000
maybe not issue but

576
00:24:51,000 --> 00:24:53,000
when you hear React server components you think server

577
00:24:53,000 --> 00:24:55,000
immediately that's definitely a thing

578
00:24:55,000 --> 00:24:57,000
but it really just means

579
00:24:57,000 --> 00:24:59,000
thing that doesn't run in the browser

580
00:24:59,000 --> 00:25:01,000
necessarily usually

581
00:25:01,000 --> 00:25:03,000
you would do like a static build up front

582
00:25:03,000 --> 00:25:05,000
and then ship anything down that you can

583
00:25:05,000 --> 00:25:07,000
or if you want to stream and suspense

584
00:25:07,000 --> 00:25:09,000
stuff then you can go

585
00:25:09,000 --> 00:25:11,000
boot up the server and

586
00:25:11,000 --> 00:25:13,000
Next.js is pretty graceful with that where it's like

587
00:25:13,000 --> 00:25:15,000
actually figuring out what could

588
00:25:15,000 --> 00:25:17,000
be sandwiched into a big cache and what

589
00:25:17,000 --> 00:25:19,000
can't so you don't really have to think about that

590
00:25:19,000 --> 00:25:21,000
but if you're building it on your own

591
00:25:21,000 --> 00:25:23,000
I totally agree that server components

592
00:25:23,000 --> 00:25:25,000
are just like

593
00:25:25,000 --> 00:25:27,000
pre-rendering I think is one word I've heard

594
00:25:27,000 --> 00:25:29,000
also like build time versus

595
00:25:29,000 --> 00:25:31,000
server it could be either one

596
00:25:31,000 --> 00:25:33,000
so build time components it just

597
00:25:33,000 --> 00:25:35,000
depends where you're running it

598
00:25:35,000 --> 00:25:37,000
yeah

599
00:25:37,000 --> 00:25:39,000
it's confusing I think it's

600
00:25:39,000 --> 00:25:41,000
one of those cases where everybody has

601
00:25:41,000 --> 00:25:43,000
suggestions on how to name them but then

602
00:25:43,000 --> 00:25:45,000
they don't seem

603
00:25:45,000 --> 00:25:47,000
they all have weird cases

604
00:25:47,000 --> 00:25:49,000
where it's not exactly true

605
00:25:49,000 --> 00:25:51,000
and server client is

606
00:25:51,000 --> 00:25:53,000
like

607
00:25:53,000 --> 00:25:55,000
maybe this is one of those

608
00:25:55,000 --> 00:25:57,000
cases where we just

609
00:25:57,000 --> 00:25:59,000
redefine the terms

610
00:25:59,000 --> 00:26:01,000
like rendering

611
00:26:01,000 --> 00:26:03,000
in React rendering

612
00:26:03,000 --> 00:26:05,000
doesn't mean updating the

613
00:26:05,000 --> 00:26:07,000
the graphical

614
00:26:07,000 --> 00:26:09,000
like it's a different concept

615
00:26:09,000 --> 00:26:11,000
from rendering in graphics

616
00:26:11,000 --> 00:26:13,000
programming because like in React I

617
00:26:13,000 --> 00:26:15,000
re-render it doesn't mean that

618
00:26:15,000 --> 00:26:17,000
a bunch of stuff actually changes on the screen

619
00:26:17,000 --> 00:26:19,000
it just means we recompute what should

620
00:26:19,000 --> 00:26:21,000
be on the screen and like maybe we change something

621
00:26:21,000 --> 00:26:23,000
maybe we don't and so people have

622
00:26:23,000 --> 00:26:25,000
intuitions like oh I have to avoid re-rendering

623
00:26:25,000 --> 00:26:27,000
but actually you don't it's

624
00:26:27,000 --> 00:26:29,000
just a question of like is it actually slow

625
00:26:29,000 --> 00:26:31,000
if it's not slow you're fine

626
00:26:31,000 --> 00:26:33,000
like everything is fine and so

627
00:26:33,000 --> 00:26:35,000
we kind of hijacked this definition

628
00:26:35,000 --> 00:26:37,000
like in React rendering means

629
00:26:37,000 --> 00:26:39,000
something different and I feel like maybe

630
00:26:39,000 --> 00:26:41,000
this is another example of like yeah we kind of

631
00:26:41,000 --> 00:26:43,000
we need some words to describe

632
00:26:43,000 --> 00:26:45,000
the relationship and these are the best words

633
00:26:45,000 --> 00:26:47,000
we found but it's gonna

634
00:26:47,000 --> 00:26:49,000
be a bit confusing and we haven't

635
00:26:49,000 --> 00:26:51,000
found any better options so far

636
00:26:51,000 --> 00:26:53,000
yeah

637
00:26:53,000 --> 00:26:55,000
it goes all down the stack and

638
00:26:55,000 --> 00:26:57,000
I work at Astro right now

639
00:26:57,000 --> 00:26:59,000
and you know maintaining a meta framework

640
00:26:59,000 --> 00:27:01,000
we were dealing with these really primitive ideas

641
00:27:01,000 --> 00:27:03,000
where it's like you don't want to use

642
00:27:03,000 --> 00:27:05,000
complicated names for this stuff you want it

643
00:27:05,000 --> 00:27:07,000
to feel accessible but

644
00:27:07,000 --> 00:27:09,000
it also needs to describe what it does

645
00:27:09,000 --> 00:27:11,000
pretty well I also know

646
00:27:11,000 --> 00:27:13,000
with React like a big debacle came around

647
00:27:13,000 --> 00:27:15,000
use as just like a term

648
00:27:15,000 --> 00:27:17,000
that you can use to unwrap

649
00:27:17,000 --> 00:27:19,000
something that happens later

650
00:27:19,000 --> 00:27:21,000
and like I'm getting used

651
00:27:21,000 --> 00:27:23,000
to it I suggested

652
00:27:23,000 --> 00:27:25,000
unwrap and people are like well not always

653
00:27:25,000 --> 00:27:27,000
sometimes use is used for this

654
00:27:27,000 --> 00:27:29,000
use use that's also

655
00:27:29,000 --> 00:27:31,000
a thing so it's hard

656
00:27:31,000 --> 00:27:33,000
you want it to be simple and you want

657
00:27:33,000 --> 00:27:35,000
it to encompass whatever use

658
00:27:35,000 --> 00:27:37,000
cases it's actually trying to do

659
00:27:37,000 --> 00:27:39,000
and yeah I feel like at

660
00:27:39,000 --> 00:27:41,000
least with server components it strikes a decent

661
00:27:41,000 --> 00:27:43,000
balance of like you're gonna think about this differently

662
00:27:43,000 --> 00:27:45,000
it's not running in the client

663
00:27:45,000 --> 00:27:47,000
yeah I think

664
00:27:47,000 --> 00:27:49,000
sometimes

665
00:27:49,000 --> 00:27:51,000
I don't know

666
00:27:51,000 --> 00:27:53,000
maybe we'll come to regret this but I

667
00:27:53,000 --> 00:27:55,000
think sometimes you

668
00:27:55,000 --> 00:27:57,000
you know when people

669
00:27:57,000 --> 00:27:59,000
talk about oh like I wish this was

670
00:27:59,000 --> 00:28:01,000
more explicit

671
00:28:01,000 --> 00:28:03,000
I think one thing we've noticed is that people

672
00:28:03,000 --> 00:28:05,000
always say that in the beginning

673
00:28:05,000 --> 00:28:07,000
and then six months later everyone is

674
00:28:07,000 --> 00:28:09,000
like oh I want like a shortcut I want

675
00:28:09,000 --> 00:28:11,000
to you know this term is too long or

676
00:28:11,000 --> 00:28:13,000
it's like API name like I know what

677
00:28:13,000 --> 00:28:15,000
it is already why do I have to type all

678
00:28:15,000 --> 00:28:17,000
of this and so we

679
00:28:17,000 --> 00:28:19,000
kind of I think we discount a little

680
00:28:19,000 --> 00:28:21,000
bit of this initial knee-jerk reaction

681
00:28:21,000 --> 00:28:23,000
because we just know yeah you know when

682
00:28:23,000 --> 00:28:25,000
it's a common thing it's gonna feel different

683
00:28:25,000 --> 00:28:27,000
like for example with use

684
00:28:27,000 --> 00:28:29,000
like yeah I just gonna search for react use

685
00:28:29,000 --> 00:28:31,000
that's gonna be like a top result in Google

686
00:28:31,000 --> 00:28:33,000
because like we have enough

687
00:28:33,000 --> 00:28:35,000
like mode to

688
00:28:35,000 --> 00:28:37,000
you know to actually bubble up

689
00:28:37,000 --> 00:28:39,000
so I think that helps

690
00:28:41,000 --> 00:28:43,000
but it's also sometimes

691
00:28:43,000 --> 00:28:45,000
sometimes you just

692
00:28:45,000 --> 00:28:47,000
can't have an intuitive term because

693
00:28:47,000 --> 00:28:49,000
the whole idea is different and

694
00:28:49,000 --> 00:28:51,000
you might as well kind of

695
00:28:51,000 --> 00:28:53,000
realize that

696
00:28:53,000 --> 00:28:55,000
no this doesn't make sense I need to like

697
00:28:55,000 --> 00:28:57,000
sit down and understand what this is about

698
00:28:57,000 --> 00:28:59,000
none of my intuitions are

699
00:28:59,000 --> 00:29:01,000
helping and like that's fine that's

700
00:29:01,000 --> 00:29:03,000
because it's a new thing it is different

701
00:29:03,000 --> 00:29:05,000
like it's good if you realize

702
00:29:05,000 --> 00:29:07,000
that it's different

703
00:29:07,000 --> 00:29:09,000
yeah I definitely think

704
00:29:09,000 --> 00:29:11,000
it's signaling that but the

705
00:29:11,000 --> 00:29:13,000
main thing people are wondering which I'm hoping

706
00:29:13,000 --> 00:29:15,000
we can get through like with the live

707
00:29:15,000 --> 00:29:17,000
coding today is like up until

708
00:29:17,000 --> 00:29:19,000
now I've been able to just

709
00:29:19,000 --> 00:29:21,000
spin up you know V or something like

710
00:29:21,000 --> 00:29:23,000
that put a div with an ID of

711
00:29:23,000 --> 00:29:25,000
main and hydrate a thing

712
00:29:25,000 --> 00:29:27,000
in there and now we're basically saying

713
00:29:27,000 --> 00:29:29,000
no there's there's more than that if you

714
00:29:29,000 --> 00:29:31,000
really want to think about it this way having set

715
00:29:31,000 --> 00:29:33,000
up my own service for

716
00:29:33,000 --> 00:29:35,000
a week I can

717
00:29:35,000 --> 00:29:37,000
say there is more to it and

718
00:29:37,000 --> 00:29:39,000
I don't know if the react

719
00:29:39,000 --> 00:29:41,000
team has any opinions on that right now of like

720
00:29:41,000 --> 00:29:43,000
is DIY server components

721
00:29:43,000 --> 00:29:45,000
something that's like does it matter

722
00:29:45,000 --> 00:29:47,000
is it something we need or

723
00:29:47,000 --> 00:29:49,000
is next.js just the way you should try it

724
00:29:49,000 --> 00:29:51,000
yeah I think

725
00:29:51,000 --> 00:29:53,000
so well there's

726
00:29:53,000 --> 00:29:55,000
a bunch of different things there so

727
00:29:55,000 --> 00:29:57,000
yeah I think like one thing

728
00:29:57,000 --> 00:29:59,000
question yeah because like you kind

729
00:29:59,000 --> 00:30:01,000
of alluded to this thing like I can

730
00:30:01,000 --> 00:30:03,000
just like have a div and like put something

731
00:30:03,000 --> 00:30:05,000
in there and so I think that

732
00:30:05,000 --> 00:30:07,000
was more about not about

733
00:30:07,000 --> 00:30:09,000
frameworks per se it was about like

734
00:30:09,000 --> 00:30:11,000
client only versus

735
00:30:11,000 --> 00:30:13,000
like build time or

736
00:30:13,000 --> 00:30:15,000
SSR and so I think

737
00:30:15,000 --> 00:30:17,000
like that's that's one question

738
00:30:17,000 --> 00:30:19,000
the other question is like

739
00:30:19,000 --> 00:30:21,000
do you know do it yourself

740
00:30:21,000 --> 00:30:23,000
set up versus like a

741
00:30:23,000 --> 00:30:25,000
framework or like should there be one

742
00:30:25,000 --> 00:30:27,000
framework or many and I think that's that's a separate

743
00:30:27,000 --> 00:30:29,000
question so which which one

744
00:30:29,000 --> 00:30:31,000
which one of those do you want to go into

745
00:30:33,000 --> 00:30:35,000
I'm more interested in the second one I guess

746
00:30:35,000 --> 00:30:37,000
because the first one I've already

747
00:30:37,000 --> 00:30:39,000
I pretty much agreed like yeah

748
00:30:39,000 --> 00:30:41,000
I probably wouldn't point people to

749
00:30:41,000 --> 00:30:43,000
just feed and react or

750
00:30:43,000 --> 00:30:45,000
create react app to build something

751
00:30:45,000 --> 00:30:47,000
I would if you're going to deploy it

752
00:30:47,000 --> 00:30:49,000
anywhere I'm probably going to point you

753
00:30:49,000 --> 00:30:51,000
to next.js or astro or

754
00:30:51,000 --> 00:30:53,000
more likely next.js if you really want to

755
00:30:53,000 --> 00:30:55,000
try server components

756
00:30:55,000 --> 00:30:57,000
I think like on the first one my

757
00:30:57,000 --> 00:30:59,000
perspective is that

758
00:30:59,000 --> 00:31:01,000
and I mean that that's also

759
00:31:01,000 --> 00:31:03,000
by you know we know that

760
00:31:03,000 --> 00:31:05,000
the recommendation change was

761
00:31:05,000 --> 00:31:07,000
pretty controversial

762
00:31:07,000 --> 00:31:09,000
but we also didn't try to motivate it

763
00:31:09,000 --> 00:31:11,000
like we do have like a deep dive there

764
00:31:11,000 --> 00:31:13,000
that's like can I use react without the framework

765
00:31:13,000 --> 00:31:15,000
sure yeah I think

766
00:31:15,000 --> 00:31:17,000
it's a really nice documentation page

767
00:31:17,000 --> 00:31:19,000
looking through it

768
00:31:19,000 --> 00:31:21,000
the specific thing I think

769
00:31:21,000 --> 00:31:23,000
that gets a bit lost is like

770
00:31:23,000 --> 00:31:25,000
nobody

771
00:31:25,000 --> 00:31:27,000
is you know it's not

772
00:31:27,000 --> 00:31:29,000
about like the push

773
00:31:29,000 --> 00:31:31,000
like the reason we don't suggest

774
00:31:31,000 --> 00:31:33,000
Vite is

775
00:31:33,000 --> 00:31:35,000
an option for you know you want to make

776
00:31:35,000 --> 00:31:37,000
an app fully with react use Vite

777
00:31:37,000 --> 00:31:39,000
like the reason we don't say this is

778
00:31:39,000 --> 00:31:41,000
again because like default Vite

779
00:31:41,000 --> 00:31:43,000
you know when you say Vite you probably

780
00:31:43,000 --> 00:31:45,000
mean like a template that's blindside

781
00:31:45,000 --> 00:31:47,000
only because if you use like a template

782
00:31:47,000 --> 00:31:49,000
that has SSR and a bunch of other

783
00:31:49,000 --> 00:31:51,000
stuff let's be real it is a framework

784
00:31:51,000 --> 00:31:53,000
it's not a template

785
00:31:53,000 --> 00:31:55,000
like it's an ad hoc framework

786
00:31:55,000 --> 00:31:57,000
that is maybe a good framework but

787
00:31:57,000 --> 00:31:59,000
if you compare it in terms of usage

788
00:31:59,000 --> 00:32:01,000
community it's like a very

789
00:32:01,000 --> 00:32:03,000
niche framework with you know

790
00:32:03,000 --> 00:32:05,000
a very small community which is maybe

791
00:32:05,000 --> 00:32:07,000
what you want but let's not fool ourselves

792
00:32:07,000 --> 00:32:09,000
saying that this isn't

793
00:32:09,000 --> 00:32:11,000
a framework and then if we talk

794
00:32:11,000 --> 00:32:13,000
about like a default Vite setup with

795
00:32:13,000 --> 00:32:15,000
this just like blindside

796
00:32:15,000 --> 00:32:17,000
only the problem with this is

797
00:32:17,000 --> 00:32:19,000
it's not that client

798
00:32:19,000 --> 00:32:21,000
only is bad I don't think that's true

799
00:32:21,000 --> 00:32:23,000
I think like for some cases it totally makes

800
00:32:23,000 --> 00:32:25,000
sense it's more

801
00:32:25,000 --> 00:32:27,000
that you're kind of

802
00:32:27,000 --> 00:32:29,000
locking yourself into this

803
00:32:29,000 --> 00:32:31,000
setup it's like let's say like later

804
00:32:31,000 --> 00:32:33,000
you want to add a landing page

805
00:32:33,000 --> 00:32:35,000
and you want the landing page

806
00:32:35,000 --> 00:32:37,000
to have HTML in it and

807
00:32:37,000 --> 00:32:39,000
because it's like it's silly not

808
00:32:39,000 --> 00:32:41,000
to like why would you not have

809
00:32:41,000 --> 00:32:43,000
HTML in a webpage

810
00:32:43,000 --> 00:32:45,000
it's like it's better for SEO

811
00:32:45,000 --> 00:32:47,000
sure like crawlers can understand

812
00:32:47,000 --> 00:32:49,000
JavaScript but like not as fast

813
00:32:49,000 --> 00:32:51,000
it's like better for

814
00:32:51,000 --> 00:32:53,000
just like your users you don't have to

815
00:32:53,000 --> 00:32:55,000
download the bundle to like show anything

816
00:32:55,000 --> 00:32:57,000
and there are many

817
00:32:57,000 --> 00:32:59,000
of these like benefits like you

818
00:32:59,000 --> 00:33:01,000
you don't have like to spin up

819
00:33:01,000 --> 00:33:03,000
like a separate project with like a static site

820
00:33:03,000 --> 00:33:05,000
generator you just add a page

821
00:33:05,000 --> 00:33:07,000
for this page you use

822
00:33:07,000 --> 00:33:09,000
kind of you know static

823
00:33:09,000 --> 00:33:11,000
static build whereas for

824
00:33:11,000 --> 00:33:13,000
another page maybe you like opt

825
00:33:13,000 --> 00:33:15,000
out and you return like

826
00:33:15,000 --> 00:33:17,000
just a shell or like even

827
00:33:17,000 --> 00:33:19,000
null for the server pass

828
00:33:19,000 --> 00:33:21,000
for the build pass

829
00:33:21,000 --> 00:33:23,000
then you do client only so it's

830
00:33:23,000 --> 00:33:25,000
really about like encouraging you to use

831
00:33:25,000 --> 00:33:27,000
a tool that lets you

832
00:33:27,000 --> 00:33:29,000
even start with client only

833
00:33:29,000 --> 00:33:31,000
but then the moment you want to have a page

834
00:33:31,000 --> 00:33:33,000
or like a part of your

835
00:33:33,000 --> 00:33:35,000
even enhance existing

836
00:33:35,000 --> 00:33:37,000
pages

837
00:33:37,000 --> 00:33:39,000
to be like generated at build time

838
00:33:39,000 --> 00:33:41,000
or the server features

839
00:33:41,000 --> 00:33:43,000
you don't have to migrate to another tool

840
00:33:43,000 --> 00:33:45,000
you don't have to like redo your whole project

841
00:33:45,000 --> 00:33:47,000
because your router wasn't designed

842
00:33:47,000 --> 00:33:49,000
for this it's kind of like

843
00:33:49,000 --> 00:33:51,000
it's also kind of like you used to put

844
00:33:51,000 --> 00:33:53,000
the router inside

845
00:33:53,000 --> 00:33:55,000
the you know your react app

846
00:33:55,000 --> 00:33:57,000
and this is kind of like no the router

847
00:33:57,000 --> 00:33:59,000
belongs outside

848
00:33:59,000 --> 00:34:01,000
because if you put the router outside

849
00:34:01,000 --> 00:34:03,000
then that lets you have like multiple

850
00:34:03,000 --> 00:34:05,000
pages that are automatically

851
00:34:05,000 --> 00:34:07,000
code split that have all these like different

852
00:34:07,000 --> 00:34:09,000
optimization modes

853
00:34:09,000 --> 00:34:11,000
it's really about like architectural question of pulling it out

854
00:34:11,000 --> 00:34:13,000
so this is why

855
00:34:13,000 --> 00:34:15,000
yeah this is why we don't recommend

856
00:34:15,000 --> 00:34:17,000
the you know even though if you

857
00:34:17,000 --> 00:34:19,000
want to do client side rendering only

858
00:34:19,000 --> 00:34:21,000
that's fine but we do recommend

859
00:34:21,000 --> 00:34:23,000
to do it in a way that lets you

860
00:34:23,000 --> 00:34:25,000
enhance it with

861
00:34:25,000 --> 00:34:27,000
build time or server logic later if you

862
00:34:27,000 --> 00:34:29,000
want to

863
00:34:29,000 --> 00:34:31,000
which kind of goes back to that point of like server

864
00:34:31,000 --> 00:34:33,000
components can run in multiple ways

865
00:34:33,000 --> 00:34:35,000
and you don't want a tool that just locks you

866
00:34:35,000 --> 00:34:37,000
into one like I've definitely

867
00:34:37,000 --> 00:34:39,000
had well at least for

868
00:34:39,000 --> 00:34:41,000
most of the things I build I think this could

869
00:34:41,000 --> 00:34:43,000
go on serverless if I just had

870
00:34:43,000 --> 00:34:45,000
one query per RAM I could put this on something

871
00:34:45,000 --> 00:34:47,000
and it would be way better and I don't

872
00:34:47,000 --> 00:34:49,000
want to change frameworks to do that I just want to flip

873
00:34:49,000 --> 00:34:51,000
a switch and this route is now on SSR

874
00:34:51,000 --> 00:34:53,000
which is something a lot of

875
00:34:53,000 --> 00:34:55,000
frameworks already do and it's

876
00:34:55,000 --> 00:34:57,000
something like something like VEET

877
00:34:57,000 --> 00:34:59,000
which is like a half framework

878
00:34:59,000 --> 00:35:01,000
it's like a batteries included tool for

879
00:35:01,000 --> 00:35:03,000
framework authors is how I kind of think

880
00:35:03,000 --> 00:35:05,000
about it like you can go nuts

881
00:35:05,000 --> 00:35:07,000
trying to build your own world inside of

882
00:35:07,000 --> 00:35:09,000
VEET but the default is just like

883
00:35:09,000 --> 00:35:11,000
sort of showing React on a workbench

884
00:35:11,000 --> 00:35:13,000
without any opinions of where you put it

885
00:35:13,000 --> 00:35:15,000
which for like

886
00:35:15,000 --> 00:35:17,000
Ruby on Rails and stuff like that you're embedding a

887
00:35:17,000 --> 00:35:19,000
React component in something that's fine and

888
00:35:19,000 --> 00:35:21,000
I think the docs come out really well of like

889
00:35:21,000 --> 00:35:23,000
if you have a stack right now here's

890
00:35:23,000 --> 00:35:25,000
how you can put it in

891
00:35:25,000 --> 00:35:27,000
as simply as possible wire up Babel

892
00:35:27,000 --> 00:35:29,000
here you go but yeah

893
00:35:29,000 --> 00:35:31,000
it lists out any other frameworks that

894
00:35:31,000 --> 00:35:33,000
put those opinions on top so you

895
00:35:33,000 --> 00:35:35,000
can deploy it somewhere which is

896
00:35:35,000 --> 00:35:37,000
what 99% of people are going to do

897
00:35:37,000 --> 00:35:39,000
even for like a hello world

898
00:35:39,000 --> 00:35:41,000
yeah and

899
00:35:41,000 --> 00:35:43,000
then like for your second question

900
00:35:43,000 --> 00:35:45,000
about you know it should be like

901
00:35:45,000 --> 00:35:47,000
should there be like a next only thing or

902
00:35:47,000 --> 00:35:49,000
should there be many frameworks

903
00:35:49,000 --> 00:35:51,000
or should you like do it yourself

904
00:35:51,000 --> 00:35:53,000
I think it's still

905
00:35:53,000 --> 00:35:55,000
an open question of what people will actually

906
00:35:55,000 --> 00:35:57,000
want to do like I'm not sure

907
00:35:57,000 --> 00:35:59,000
I think like personally I'd like

908
00:35:59,000 --> 00:36:01,000
to see many solutions

909
00:36:01,000 --> 00:36:03,000
I think there's like a

910
00:36:03,000 --> 00:36:05,000
natural question of like how

911
00:36:05,000 --> 00:36:07,000
I think there's like a

912
00:36:07,000 --> 00:36:09,000
tension there with differentiation

913
00:36:09,000 --> 00:36:11,000
because

914
00:36:11,000 --> 00:36:13,000
if you're a framework like if you look

915
00:36:13,000 --> 00:36:15,000
at next app router API

916
00:36:15,000 --> 00:36:17,000
you'll notice like a lot of

917
00:36:17,000 --> 00:36:19,000
next APIs are kind of gone

918
00:36:19,000 --> 00:36:21,000
so it kind of

919
00:36:21,000 --> 00:36:23,000
feels more vanilla in a weird

920
00:36:23,000 --> 00:36:25,000
way because it feels like

921
00:36:25,000 --> 00:36:27,000
well there's no like gets that you know

922
00:36:27,000 --> 00:36:29,000
there is

923
00:36:29,000 --> 00:36:31,000
something for like static generation because it can

924
00:36:31,000 --> 00:36:33,000
it can be handled directly but

925
00:36:33,000 --> 00:36:35,000
there's no like gets

926
00:36:35,000 --> 00:36:37,000
server side props it's just async

927
00:36:37,000 --> 00:36:39,000
await right there's

928
00:36:39,000 --> 00:36:41,000
you know like there's no like special APIs

929
00:36:41,000 --> 00:36:43,000
for a bunch of stuff that used

930
00:36:43,000 --> 00:36:45,000
to have special APIs

931
00:36:45,000 --> 00:36:47,000
you know exports which is

932
00:36:47,000 --> 00:36:49,000
like the big thing yeah

933
00:36:49,000 --> 00:36:51,000
there are I think there are some

934
00:36:51,000 --> 00:36:53,000
but you know for metadata and a few

935
00:36:53,000 --> 00:36:55,000
other things that react doesn't handle

936
00:36:55,000 --> 00:36:57,000
by itself but for

937
00:36:57,000 --> 00:36:59,000
a bunch of things there isn't and

938
00:36:59,000 --> 00:37:01,000
you can also compare it to remix I think

939
00:37:01,000 --> 00:37:03,000
in like you don't render

940
00:37:03,000 --> 00:37:05,000
an outlet you just accept children

941
00:37:05,000 --> 00:37:07,000
which is like accepting children is

942
00:37:07,000 --> 00:37:09,000
the most react

943
00:37:09,000 --> 00:37:11,000
API possible it's like the most

944
00:37:11,000 --> 00:37:13,000
vanilla thing and so

945
00:37:13,000 --> 00:37:15,000
there's this question of like if

946
00:37:15,000 --> 00:37:17,000
frameworks can and that was

947
00:37:17,000 --> 00:37:19,000
the goal really with server components

948
00:37:19,000 --> 00:37:21,000
is to get rid of

949
00:37:21,000 --> 00:37:23,000
these framework concepts and kind of

950
00:37:23,000 --> 00:37:25,000
fold them into react in a way that feels

951
00:37:25,000 --> 00:37:27,000
vanilla and so

952
00:37:27,000 --> 00:37:29,000
there's a question of like okay if other

953
00:37:29,000 --> 00:37:31,000
frameworks

954
00:37:31,000 --> 00:37:33,000
jump on the same train and try

955
00:37:33,000 --> 00:37:35,000
to do a similar thing there

956
00:37:35,000 --> 00:37:37,000
is a natural push to kind of

957
00:37:37,000 --> 00:37:39,000
become more similar to

958
00:37:39,000 --> 00:37:41,000
next app router maybe there's

959
00:37:41,000 --> 00:37:43,000
ways to differentiate there like I don't

960
00:37:43,000 --> 00:37:45,000
know but I think there

961
00:37:45,000 --> 00:37:47,000
is like tension between

962
00:37:47,000 --> 00:37:49,000
okay but how do you choose between frameworks then

963
00:37:49,000 --> 00:37:51,000
if they're kind of

964
00:37:51,000 --> 00:37:53,000
looking the same because we've

965
00:37:53,000 --> 00:37:55,000
taken the primitives and like put

966
00:37:55,000 --> 00:37:57,000
them into react

967
00:37:57,000 --> 00:37:59,000
so I think that's something

968
00:37:59,000 --> 00:38:01,000
that remains to be seen

969
00:38:01,000 --> 00:38:03,000
but if

970
00:38:03,000 --> 00:38:05,000
you compare it to like do it yourself

971
00:38:05,000 --> 00:38:07,000
setup I think that's just kind of

972
00:38:07,000 --> 00:38:09,000
exceedingly hard today and

973
00:38:09,000 --> 00:38:11,000
it's mostly because server components

974
00:38:11,000 --> 00:38:13,000
is a very futuristic

975
00:38:13,000 --> 00:38:15,000
architecture I think maybe we

976
00:38:15,000 --> 00:38:17,000
undersold like it

977
00:38:17,000 --> 00:38:19,000
like for the bundling side

978
00:38:19,000 --> 00:38:21,000
it relies on features that just don't

979
00:38:21,000 --> 00:38:23,000
exist in bundlers today like

980
00:38:23,000 --> 00:38:25,000
it has a whole you know like it

981
00:38:25,000 --> 00:38:27,000
relies on a next generation bundler

982
00:38:27,000 --> 00:38:29,000
and like a next generation router

983
00:38:29,000 --> 00:38:31,000
and these things are being

984
00:38:31,000 --> 00:38:33,000
built right now right like

985
00:38:33,000 --> 00:38:35,000
we have some like we have

986
00:38:35,000 --> 00:38:37,000
a backpack plugin that's like not very good

987
00:38:37,000 --> 00:38:39,000
so some frameworks kind of

988
00:38:39,000 --> 00:38:41,000
I wrestled it for a while I'm reading

989
00:38:41,000 --> 00:38:43,000
commit messages from Sebastian like everything

990
00:38:43,000 --> 00:38:45,000
is experimental like it's

991
00:38:45,000 --> 00:38:47,000
very very experimental right now

992
00:38:47,000 --> 00:38:49,000
if you want to DIY I actually got it working in ES

993
00:38:49,000 --> 00:38:51,000
build because I reverse engineered what

994
00:38:51,000 --> 00:38:53,000
the bundler is adding and I like

995
00:38:53,000 --> 00:38:55,000
monkey patched it in which

996
00:38:55,000 --> 00:38:57,000
like it's a way but I

997
00:38:57,000 --> 00:38:59,000
agree like what it's doing is fundamentally

998
00:38:59,000 --> 00:39:01,000
like it looks at each module

999
00:39:01,000 --> 00:39:03,000
it figures out what it is and then

1000
00:39:03,000 --> 00:39:05,000
adds a lot of information and metadata so

1001
00:39:05,000 --> 00:39:07,000
we can like trace it back putting the client

1002
00:39:07,000 --> 00:39:09,000
components where they're supposed to go

1003
00:39:09,000 --> 00:39:11,000
and to set that all up yourself it's not as

1004
00:39:11,000 --> 00:39:13,000
simple as just like webpack

1005
00:39:13,000 --> 00:39:15,000
target JSX files react

1006
00:39:15,000 --> 00:39:17,000
plugin like there's

1007
00:39:17,000 --> 00:39:19,000
more to it yeah

1008
00:39:19,000 --> 00:39:21,000
I wouldn't say that the like I'd say

1009
00:39:21,000 --> 00:39:23,000
the bundler I think like

1010
00:39:23,000 --> 00:39:25,000
one thing I

1011
00:39:25,000 --> 00:39:27,000
I feel a bit

1012
00:39:27,000 --> 00:39:29,000
I think sometimes people

1013
00:39:29,000 --> 00:39:31,000
say oh it's so complicated

1014
00:39:31,000 --> 00:39:33,000
and I think if you really look at the ideas

1015
00:39:33,000 --> 00:39:35,000
the ideas are very simple it's just

1016
00:39:35,000 --> 00:39:37,000
that implementing them is complicated

1017
00:39:37,000 --> 00:39:39,000
because the tools were not designed for

1018
00:39:39,000 --> 00:39:41,000
these ideas so

1019
00:39:41,000 --> 00:39:43,000
if you think of the bundler integration

1020
00:39:43,000 --> 00:39:45,000
it's really about

1021
00:39:45,000 --> 00:39:47,000
supporting this use client directive

1022
00:39:47,000 --> 00:39:49,000
like that's a feature

1023
00:39:49,000 --> 00:39:51,000
with like one line

1024
00:39:51,000 --> 00:39:53,000
API it's not you know

1025
00:39:53,000 --> 00:39:55,000
it's not something that's like super

1026
00:39:55,000 --> 00:39:57,000
it's not some Java monstrosity right

1027
00:39:57,000 --> 00:39:59,000
it's a very simple idea

1028
00:39:59,000 --> 00:40:01,000
but the bundlers

1029
00:40:01,000 --> 00:40:03,000
like the today's generation

1030
00:40:03,000 --> 00:40:05,000
of bundlers was not designed

1031
00:40:05,000 --> 00:40:07,000
for this kind of feature

1032
00:40:07,000 --> 00:40:09,000
because it's like fundamentally different

1033
00:40:09,000 --> 00:40:11,000
it's on a similar scope

1034
00:40:11,000 --> 00:40:13,000
as you know if you went

1035
00:40:13,000 --> 00:40:15,000
back in time to like 2007

1036
00:40:15,000 --> 00:40:17,000
and was

1037
00:40:17,000 --> 00:40:19,000
trying to explain code splitting

1038
00:40:19,000 --> 00:40:21,000
to somebody who uses

1039
00:40:21,000 --> 00:40:23,000
if you

1040
00:40:23,000 --> 00:40:25,000
I don't know if you remember there was like require.js

1041
00:40:25,000 --> 00:40:27,000
which was like a bundler

1042
00:40:27,000 --> 00:40:29,000
that people used at the time

1043
00:40:29,000 --> 00:40:31,000
and I think like it didn't support

1044
00:40:31,000 --> 00:40:33,000
I don't think it supported code splitting

1045
00:40:33,000 --> 00:40:35,000
it was kind of loaded

1046
00:40:35,000 --> 00:40:37,000
like the optimizing bundler would put everything

1047
00:40:37,000 --> 00:40:39,000
into the same file

1048
00:40:39,000 --> 00:40:41,000
but it's a similar feature to like dynamic import

1049
00:40:41,000 --> 00:40:43,000
that lets you do code splitting

1050
00:40:43,000 --> 00:40:45,000
except it's like a different kind of

1051
00:40:45,000 --> 00:40:47,000
code splitting that splits apart

1052
00:40:47,000 --> 00:40:49,000
like the client parts

1053
00:40:49,000 --> 00:40:51,000
from the server parts

1054
00:40:51,000 --> 00:40:53,000
and so an ideal bundler would

1055
00:40:53,000 --> 00:40:55,000
treat all of this

1056
00:40:55,000 --> 00:40:57,000
as a single you know as a built in feature

1057
00:40:57,000 --> 00:40:59,000
and be able to

1058
00:40:59,000 --> 00:41:01,000
kind of process the

1059
00:41:01,000 --> 00:41:03,000
server tree and the client tree as like a

1060
00:41:03,000 --> 00:41:05,000
single pass with multiple

1061
00:41:05,000 --> 00:41:07,000
bundle outputs for different

1062
00:41:07,000 --> 00:41:09,000
targets and that's not something

1063
00:41:09,000 --> 00:41:11,000
that bundlers are great at today so

1064
00:41:11,000 --> 00:41:13,000
we can try to add it as plugins which is what

1065
00:41:13,000 --> 00:41:15,000
we've been doing but really ideally

1066
00:41:15,000 --> 00:41:17,000
you would redesign a bundler

1067
00:41:17,000 --> 00:41:19,000
around this idea and I think

1068
00:41:19,000 --> 00:41:21,000
you know TurboPack is like

1069
00:41:21,000 --> 00:41:23,000
one you know implementation

1070
00:41:23,000 --> 00:41:25,000
that currently treats it as a first class feature

1071
00:41:25,000 --> 00:41:27,000
and I think with time

1072
00:41:27,000 --> 00:41:29,000
other bundlers will and like I know

1073
00:41:29,000 --> 00:41:31,000
Devon from Parcel is also working on this

1074
00:41:31,000 --> 00:41:33,000
and I think with time we'll see

1075
00:41:33,000 --> 00:41:35,000
this feature adopted more broadly

1076
00:41:35,000 --> 00:41:37,000
and then I think we'll see

1077
00:41:37,000 --> 00:41:39,000
other libraries now that the feature

1078
00:41:39,000 --> 00:41:41,000
is in the bundlers I think we'll see

1079
00:41:41,000 --> 00:41:43,000
maybe Vue or

1080
00:41:43,000 --> 00:41:45,000
Svelte or others taking advantage

1081
00:41:45,000 --> 00:41:47,000
of that in like implementing similar

1082
00:41:47,000 --> 00:41:49,000
architectures on top of those features

1083
00:41:49,000 --> 00:41:51,000
yeah I actually

1084
00:41:51,000 --> 00:41:53,000
saw a stream yesterday with Evan Yu

1085
00:41:53,000 --> 00:41:55,000
who hopped on with Theo to talk

1086
00:41:55,000 --> 00:41:57,000
about what they're doing with Vite and Vue

1087
00:41:57,000 --> 00:41:59,000
and all of that and one part of that

1088
00:41:59,000 --> 00:42:01,000
discussion was Vapor which I believe

1089
00:42:01,000 --> 00:42:03,000
is like an early exploration of like what

1090
00:42:03,000 --> 00:42:05,000
could server stuff look like in

1091
00:42:05,000 --> 00:42:07,000
Vue and it doesn't mean Vaporware by the way

1092
00:42:07,000 --> 00:42:09,000
I'm hoping it doesn't anyways

1093
00:42:09,000 --> 00:42:11,000
but it's definitely

1094
00:42:11,000 --> 00:42:13,000
spreading right now and

1095
00:42:13,000 --> 00:42:15,000
if the creator of Vite is exploring

1096
00:42:15,000 --> 00:42:17,000
it that could mean it sort of

1097
00:42:17,000 --> 00:42:19,000
you know spreads out to anyone else

1098
00:42:19,000 --> 00:42:21,000
who's using Vite which as far as I know

1099
00:42:21,000 --> 00:42:23,000
is most frameworks that aren't Next.js

1100
00:42:23,000 --> 00:42:25,000
or Remix even Remix is

1101
00:42:25,000 --> 00:42:27,000
trying Vite as far as I know

1102
00:42:27,000 --> 00:42:29,000
so TurboPack for me is like a

1103
00:42:29,000 --> 00:42:31,000
wait and see I'm very curious about it

1104
00:42:31,000 --> 00:42:33,000
because I got to speak with Jared

1105
00:42:33,000 --> 00:42:35,000
a little bit in person

1106
00:42:35,000 --> 00:42:37,000
and it's definitely about like

1107
00:42:37,000 --> 00:42:39,000
build caching being very

1108
00:42:39,000 --> 00:42:41,000
focused on you know compiling

1109
00:42:41,000 --> 00:42:43,000
everything down to the very function

1110
00:42:43,000 --> 00:42:45,000
that you're trying to get and doing it

1111
00:42:45,000 --> 00:42:47,000
efficiently so I think

1112
00:42:47,000 --> 00:42:49,000
there will be sort of two competing

1113
00:42:49,000 --> 00:42:51,000
threads of like Vite is using

1114
00:42:51,000 --> 00:42:53,000
all the tech we have today and

1115
00:42:53,000 --> 00:42:55,000
TurboPack is kind of adapting Webpack

1116
00:42:55,000 --> 00:42:57,000
into something that could work

1117
00:42:57,000 --> 00:42:59,000
better tomorrow

1118
00:42:59,000 --> 00:43:01,000
I think TurboPack is

1119
00:43:01,000 --> 00:43:03,000
TurboPack is a completely new

1120
00:43:03,000 --> 00:43:05,000
codebase right it's not related to

1121
00:43:05,000 --> 00:43:07,000
Webpack so it's a rethinking

1122
00:43:07,000 --> 00:43:09,000
of

1123
00:43:09,000 --> 00:43:11,000
yeah it's complicated

1124
00:43:11,000 --> 00:43:13,000
because I heard the talk that said this is the

1125
00:43:13,000 --> 00:43:15,000
successor to Webpack even though it's

1126
00:43:15,000 --> 00:43:17,000
entirely different as far as

1127
00:43:17,000 --> 00:43:19,000
I can tell like I don't think it uses the same

1128
00:43:19,000 --> 00:43:21,000
config or conventions but

1129
00:43:21,000 --> 00:43:23,000
I haven't tried to use any of it yet

1130
00:43:23,000 --> 00:43:25,000
yeah I think it's successor just in the sense

1131
00:43:25,000 --> 00:43:27,000
that like Tobias

1132
00:43:27,000 --> 00:43:29,000
is working it so it's like

1133
00:43:29,000 --> 00:43:31,000
what did Tobias learn

1134
00:43:31,000 --> 00:43:33,000
from like I don't

1135
00:43:33,000 --> 00:43:35,000
know how many years of Webpack

1136
00:43:35,000 --> 00:43:37,000
and

1137
00:43:37,000 --> 00:43:39,000
yeah how do you design it again

1138
00:43:39,000 --> 00:43:41,000
now that you know all these lessons

1139
00:43:41,000 --> 00:43:43,000
which is kind of similar but you know with like

1140
00:43:43,000 --> 00:43:45,000
server components that's kind of what we've

1141
00:43:45,000 --> 00:43:47,000
seen and

1142
00:43:47,000 --> 00:43:49,000
I want actually to mention because

1143
00:43:49,000 --> 00:43:51,000
you know you were asking about the history and like

1144
00:43:51,000 --> 00:43:53,000
influences and for server

1145
00:43:53,000 --> 00:43:55,000
components it's really many

1146
00:43:55,000 --> 00:43:57,000
it's like it's our old

1147
00:43:57,000 --> 00:43:59,000
XHP stuff it's our

1148
00:43:59,000 --> 00:44:01,000
native stack that you know

1149
00:44:01,000 --> 00:44:03,000
works let's just do native

1150
00:44:03,000 --> 00:44:05,000
apps but driven by server

1151
00:44:05,000 --> 00:44:07,000
server driven UI

1152
00:44:07,000 --> 00:44:09,000
it's really so a lot of

1153
00:44:09,000 --> 00:44:11,000
a lot of contributions to server

1154
00:44:11,000 --> 00:44:13,000
components model came from Relay

1155
00:44:13,000 --> 00:44:15,000
and Joe Savona and

1156
00:44:15,000 --> 00:44:17,000
you know people on the Relay team

1157
00:44:17,000 --> 00:44:19,000
it was early exploration

1158
00:44:19,000 --> 00:44:21,000
like some of the earliest

1159
00:44:21,000 --> 00:44:23,000
design drafts were collaboration

1160
00:44:23,000 --> 00:44:25,000
with the Chrome team

1161
00:44:25,000 --> 00:44:27,000
and with

1162
00:44:27,000 --> 00:44:29,000
the Next.js team

1163
00:44:29,000 --> 00:44:31,000
so Next.js was kind of

1164
00:44:31,000 --> 00:44:33,000
because like get initial props was one

1165
00:44:33,000 --> 00:44:35,000
of the inspirations for this kind of API

1166
00:44:35,000 --> 00:44:37,000
so

1167
00:44:37,000 --> 00:44:39,000
that like we were kind of

1168
00:44:39,000 --> 00:44:41,000
like talking about it with Next.js team a long

1169
00:44:41,000 --> 00:44:43,000
time ago and so it's really

1170
00:44:43,000 --> 00:44:45,000
it's unifying many

1171
00:44:45,000 --> 00:44:47,000
many branches and there's

1172
00:44:47,000 --> 00:44:49,000
a lot you know there's a lot that we were

1173
00:44:49,000 --> 00:44:51,000
inspired by while working

1174
00:44:51,000 --> 00:44:53,000
on it. Yeah

1175
00:44:53,000 --> 00:44:55,000
and I kind of let that GraphQL point drop

1176
00:44:55,000 --> 00:44:57,000
earlier but it's a really

1177
00:44:57,000 --> 00:44:59,000
I never made that parallel but it makes

1178
00:44:59,000 --> 00:45:01,000
sense of like it has that same

1179
00:45:01,000 --> 00:45:03,000
goal of only send data to the

1180
00:45:03,000 --> 00:45:05,000
client that is necessary

1181
00:45:05,000 --> 00:45:07,000
in order to render what's on the page

1182
00:45:07,000 --> 00:45:09,000
and today like if you want to render

1183
00:45:09,000 --> 00:45:11,000
anything you can optimize your

1184
00:45:11,000 --> 00:45:13,000
API as hard as you can to make sure

1185
00:45:13,000 --> 00:45:15,000
it only sends the data that you want

1186
00:45:15,000 --> 00:45:17,000
but people kind of realize GraphQL is hard

1187
00:45:17,000 --> 00:45:19,000
to set up sometimes it's too heavy weight

1188
00:45:19,000 --> 00:45:21,000
so if there was a way that basically filters

1189
00:45:21,000 --> 00:45:23,000
it out for you where you're writing

1190
00:45:23,000 --> 00:45:25,000
your own back end to grab that data

1191
00:45:25,000 --> 00:45:27,000
and just hydrate the little pieces you want down

1192
00:45:27,000 --> 00:45:29,000
the chain like that's oddly

1193
00:45:29,000 --> 00:45:31,000
a successor to that idea

1194
00:45:31,000 --> 00:45:33,000
of like making sure all

1195
00:45:33,000 --> 00:45:35,000
the data you send down is actually lightweight

1196
00:45:35,000 --> 00:45:37,000
and I'm curious if we'll ever

1197
00:45:37,000 --> 00:45:39,000
end up with dev tools around I'm sure we will

1198
00:45:39,000 --> 00:45:41,000
end up with dev tools around that but

1199
00:45:41,000 --> 00:45:43,000
it's something I've never really thought about is like

1200
00:45:43,000 --> 00:45:45,000
how big are my props like I'm probably

1201
00:45:45,000 --> 00:45:47,000
sending a ton of props right now and I have no idea

1202
00:45:47,000 --> 00:45:49,000
what it is and the easiest thing

1203
00:45:49,000 --> 00:45:51,000
is to just send all the props

1204
00:45:51,000 --> 00:45:53,000
but if there was a way to debug like

1205
00:45:53,000 --> 00:45:55,000
your props bundle is like 10 kilobytes

1206
00:45:55,000 --> 00:45:57,000
of JSON are you sure you wanted to do that

1207
00:45:57,000 --> 00:45:59,000
like I think that would really make

1208
00:45:59,000 --> 00:46:01,000
server components start to make even more sense

1209
00:46:01,000 --> 00:46:03,000
yeah it's

1210
00:46:03,000 --> 00:46:05,000
pretty tricky

1211
00:46:05,000 --> 00:46:07,000
I think like the whole

1212
00:46:07,000 --> 00:46:09,000
kind of monitoring story

1213
00:46:09,000 --> 00:46:11,000
like the other piece

1214
00:46:11,000 --> 00:46:13,000
of the puzzle there is

1215
00:46:13,000 --> 00:46:15,000
you don't really have much

1216
00:46:15,000 --> 00:46:17,000
like you don't have a network timeline

1217
00:46:17,000 --> 00:46:19,000
for the server which

1218
00:46:19,000 --> 00:46:21,000
I think makes people anxious like

1219
00:46:21,000 --> 00:46:23,000
oh is it going to have so many waterfalls

1220
00:46:23,000 --> 00:46:25,000
and like you can have waterfalls

1221
00:46:25,000 --> 00:46:27,000
you know with something like Remix too

1222
00:46:27,000 --> 00:46:29,000
like it's actually pretty trivial

1223
00:46:29,000 --> 00:46:31,000
to have one

1224
00:46:31,000 --> 00:46:33,000
but it's not obvious like

1225
00:46:33,000 --> 00:46:35,000
I think if we had better tooling

1226
00:46:35,000 --> 00:46:37,000
for just visualizing

1227
00:46:37,000 --> 00:46:39,000
what actually happens on the server

1228
00:46:39,000 --> 00:46:41,000
how did your requests get processed

1229
00:46:41,000 --> 00:46:43,000
I think that would ease a lot of this anxiety

1230
00:46:43,000 --> 00:46:45,000
and it would also be useful

1231
00:46:45,000 --> 00:46:47,000
for other frameworks like it's not

1232
00:46:47,000 --> 00:46:49,000
server component specific

1233
00:46:49,000 --> 00:46:51,000
so I think like we need a lot more

1234
00:46:51,000 --> 00:46:53,000
like I think the

1235
00:46:53,000 --> 00:46:55,000
kind of the optimizations and developer

1236
00:46:55,000 --> 00:46:57,000
experience would get like

1237
00:46:57,000 --> 00:46:59,000
a lot better when we have better

1238
00:46:59,000 --> 00:47:01,000
observability into

1239
00:47:01,000 --> 00:47:03,000
what happens on the server

1240
00:47:03,000 --> 00:47:05,000
and what crosses the boundary

1241
00:47:05,000 --> 00:47:07,000
yeah and like what is contributing

1242
00:47:07,000 --> 00:47:09,000
to that like which components have

1243
00:47:09,000 --> 00:47:11,000
really like

1244
00:47:11,000 --> 00:47:13,000
you know a lot of output and then

1245
00:47:13,000 --> 00:47:15,000
you're like okay let's make this one client

1246
00:47:15,000 --> 00:47:17,000
component and then increases

1247
00:47:17,000 --> 00:47:19,000
the bundle size a bit but then we don't have to send

1248
00:47:19,000 --> 00:47:21,000
the stuff it generates

1249
00:47:21,000 --> 00:47:23,000
on like every navigation

1250
00:47:23,000 --> 00:47:25,000
but that's also the beauty of this paradigm is you can

1251
00:47:25,000 --> 00:47:27,000
you know you can flip it back and forth

1252
00:47:27,000 --> 00:47:29,000
you can flip it back and forth

1253
00:47:29,000 --> 00:47:31,000
yeah I remember for that space I was like

1254
00:47:31,000 --> 00:47:33,000
that's the one thing Astro doesn't do very well

1255
00:47:33,000 --> 00:47:35,000
because it's like you use styling

1256
00:47:35,000 --> 00:47:37,000
or you can do styling differently which can get

1257
00:47:37,000 --> 00:47:39,000
in the way I also do want to shout out

1258
00:47:39,000 --> 00:47:41,000
Joshua who rated and

1259
00:47:41,000 --> 00:47:43,000
apparently works at Code Academy as well

1260
00:47:43,000 --> 00:47:45,000
he was chiming in a bit

1261
00:47:45,000 --> 00:47:47,000
oh I tried to shout out but it said it doesn't exist

1262
00:47:47,000 --> 00:47:49,000
sorry go follow Joshua everyone

1263
00:47:49,000 --> 00:47:51,000
but he was saying like

1264
00:47:51,000 --> 00:47:53,000
yeah definitely run into the

1265
00:47:53,000 --> 00:47:55,000
big props bundle at Code Academy

1266
00:47:55,000 --> 00:47:57,000
of like the slowdowns were really just

1267
00:47:57,000 --> 00:47:59,000
slamming a bunch of data down the pipe that

1268
00:47:59,000 --> 00:48:01,000
didn't need to be and it was just delaying

1269
00:48:01,000 --> 00:48:03,000
the amount because it had to

1270
00:48:03,000 --> 00:48:05,000
get initial props which was a lot

1271
00:48:05,000 --> 00:48:07,000
and then hydrate it all onto the page

1272
00:48:07,000 --> 00:48:09,000
and there was no way to sort of

1273
00:48:09,000 --> 00:48:11,000
introspect that like

1274
00:48:11,000 --> 00:48:13,000
because you're on the client you're not really introspecting

1275
00:48:13,000 --> 00:48:15,000
what your server is doing

1276
00:48:15,000 --> 00:48:17,000
when you're on that boundary

1277
00:48:17,000 --> 00:48:19,000
yeah so the other thing that maybe

1278
00:48:19,000 --> 00:48:21,000
is not obvious but you know when I

1279
00:48:21,000 --> 00:48:23,000
talk about server components

1280
00:48:23,000 --> 00:48:25,000
also including like

1281
00:48:25,000 --> 00:48:27,000
10 years of hard thinking about

1282
00:48:27,000 --> 00:48:29,000
optimizations it's also stuff like this

1283
00:48:29,000 --> 00:48:31,000
so like with server components

1284
00:48:31,000 --> 00:48:33,000
you don't actually have

1285
00:48:33,000 --> 00:48:35,000
this kind of waterfall

1286
00:48:35,000 --> 00:48:37,000
where like in

1287
00:48:37,000 --> 00:48:39,000
traditional server rendered

1288
00:48:39,000 --> 00:48:41,000
React frameworks including

1289
00:48:41,000 --> 00:48:43,000
Next.js you would have this

1290
00:48:43,000 --> 00:48:45,000
you have to download all the code

1291
00:48:45,000 --> 00:48:47,000
then like

1292
00:48:47,000 --> 00:48:49,000
enough to hydrate your page

1293
00:48:49,000 --> 00:48:51,000
like the main chunk

1294
00:48:51,000 --> 00:48:53,000
you have to get all the data

1295
00:48:53,000 --> 00:48:55,000
like inlined into HTML

1296
00:48:55,000 --> 00:48:57,000
and only then you can start hydrating

1297
00:48:57,000 --> 00:48:59,000
so server components doesn't work like this

1298
00:48:59,000 --> 00:49:01,000
in server components you only need

1299
00:49:01,000 --> 00:49:03,000
like enough to

1300
00:49:03,000 --> 00:49:05,000
get the initial shell

1301
00:49:05,000 --> 00:49:07,000
to hydrate so actually

1302
00:49:07,000 --> 00:49:09,000
your components

1303
00:49:09,000 --> 00:49:11,000
your client component chunks

1304
00:49:11,000 --> 00:49:13,000
they're loaded asynchronously

1305
00:49:13,000 --> 00:49:15,000
and so React can start hydrating

1306
00:49:15,000 --> 00:49:17,000
before all the data arrives

1307
00:49:17,000 --> 00:49:19,000
before all the code arrives

1308
00:49:19,000 --> 00:49:21,000
we actually want to start as early as possible

1309
00:49:21,000 --> 00:49:23,000
and then we kind of

1310
00:49:23,000 --> 00:49:25,000
make a tree interactive

1311
00:49:25,000 --> 00:49:27,000
as like chunks of code

1312
00:49:27,000 --> 00:49:29,000
chunks of data

1313
00:49:29,000 --> 00:49:31,000
streaming, they're like separated

1314
00:49:31,000 --> 00:49:33,000
if you see like how Next

1315
00:49:33,000 --> 00:49:35,000
kind of generates the stuff

1316
00:49:35,000 --> 00:49:37,000
it emits separate script tags

1317
00:49:37,000 --> 00:49:39,000
that add a little bit more data

1318
00:49:39,000 --> 00:49:41,000
as it becomes available

1319
00:49:41,000 --> 00:49:43,000
and we update the UI

1320
00:49:43,000 --> 00:49:45,000
as it becomes available

1321
00:49:45,000 --> 00:49:47,000
even before React actually loads

1322
00:49:47,000 --> 00:49:49,000
we're able to update the UI to progressively show

1323
00:49:49,000 --> 00:49:51,000
more output from the server

1324
00:49:51,000 --> 00:49:53,000
it's all designed to be very

1325
00:49:53,000 --> 00:49:55,000
incremental so that you don't

1326
00:49:55,000 --> 00:49:57,000
have these things where you have to do

1327
00:49:57,000 --> 00:49:59,000
the whole pass

1328
00:49:59,000 --> 00:50:01,000
of one thing and then the whole pass

1329
00:50:01,000 --> 00:50:03,000
of another thing it's like you do small bits

1330
00:50:03,000 --> 00:50:05,000
here and there so it progressively

1331
00:50:05,000 --> 00:50:07,000
becomes more and more interactive

1332
00:50:07,000 --> 00:50:09,000
yeah exactly

1333
00:50:09,000 --> 00:50:11,000
and I think that's a good segue into

1334
00:50:11,000 --> 00:50:13,000
a little bit of code that I have to

1335
00:50:13,000 --> 00:50:15,000
demo that's outside of Next.js

1336
00:50:15,000 --> 00:50:17,000
so

1337
00:50:17,000 --> 00:50:19,000
it looks like you can still see my live share

1338
00:50:19,000 --> 00:50:21,000
but I'll start

1339
00:50:21,000 --> 00:50:23,000
by giving a little context on

1340
00:50:23,000 --> 00:50:25,000
what we might try to build today

1341
00:50:25,000 --> 00:50:27,000
it's meant to have multiple

1342
00:50:27,000 --> 00:50:29,000
steps so if we don't get to all of them

1343
00:50:29,000 --> 00:50:31,000
we at least have something at the end of the day

1344
00:50:31,000 --> 00:50:33,000
but let me also

1345
00:50:33,000 --> 00:50:35,000
screen share for the lovelies out there

1346
00:50:35,000 --> 00:50:37,000
guest screen share, cool

1347
00:50:37,000 --> 00:50:39,000
so

1348
00:50:39,000 --> 00:50:41,000
this is just a basic mockup

1349
00:50:41,000 --> 00:50:43,000
that I put together of something you might

1350
00:50:43,000 --> 00:50:45,000
try to build when you're building

1351
00:50:45,000 --> 00:50:47,000
an application. I called it

1352
00:50:47,000 --> 00:50:49,000
abramix as a pun on abramov

1353
00:50:49,000 --> 00:50:51,000
I tried, I really tried here

1354
00:50:51,000 --> 00:50:53,000
sorry about that

1355
00:50:53,000 --> 00:50:55,000
well thank you

1356
00:50:55,000 --> 00:50:57,000
but this is like a basic song

1357
00:50:57,000 --> 00:50:59,000
interface you might have where

1358
00:50:59,000 --> 00:51:01,000
you just have a readout of all of your albums

1359
00:51:01,000 --> 00:51:03,000
you might have a search bar that filters

1360
00:51:03,000 --> 00:51:05,000
which albums are showing on the page

1361
00:51:05,000 --> 00:51:07,000
and I'd love to talk about how would you

1362
00:51:07,000 --> 00:51:09,000
do search, where would you do that logic

1363
00:51:09,000 --> 00:51:11,000
client versus server since

1364
00:51:11,000 --> 00:51:13,000
I've wondered that a lot

1365
00:51:13,000 --> 00:51:15,000
and maybe you

1366
00:51:15,000 --> 00:51:17,000
have individual routes for every album

1367
00:51:17,000 --> 00:51:19,000
where you click into one, it goes to

1368
00:51:19,000 --> 00:51:21,000
slash album name and then it shows you

1369
00:51:21,000 --> 00:51:23,000
more information and that can be

1370
00:51:23,000 --> 00:51:25,000
client side routing

1371
00:51:25,000 --> 00:51:27,000
we use Next.js for that

1372
00:51:27,000 --> 00:51:29,000
I think it's a pretty clear

1373
00:51:29,000 --> 00:51:31,000
upgrade journey

1374
00:51:31,000 --> 00:51:33,000
but as a workbench

1375
00:51:33,000 --> 00:51:35,000
to try that out I have

1376
00:51:35,000 --> 00:51:37,000
a server running over here

1377
00:51:37,000 --> 00:51:39,000
on what I called simple

1378
00:51:39,000 --> 00:51:41,000
RSC which is a

1379
00:51:41,000 --> 00:51:43,000
repo that people can go try out now

1380
00:51:43,000 --> 00:51:45,000
if they want to, it only runs on node

1381
00:51:45,000 --> 00:51:47,000
version 18.13

1382
00:51:47,000 --> 00:51:49,000
because I'm bad at testing things before I

1383
00:51:49,000 --> 00:51:51,000
deploy, but if you want to

1384
00:51:51,000 --> 00:51:53,000
try it out, it's just a node

1385
00:51:53,000 --> 00:51:55,000
server that builds

1386
00:51:55,000 --> 00:51:57,000
some React components using esbuild

1387
00:51:57,000 --> 00:51:59,000
and lets you see

1388
00:51:59,000 --> 00:52:01,000
a single route on the page, there's no

1389
00:52:01,000 --> 00:52:03,000
routing, there's no opinions around really

1390
00:52:03,000 --> 00:52:05,000
anything, all that's coded into this

1391
00:52:05,000 --> 00:52:07,000
is a way to write a server component

1392
00:52:07,000 --> 00:52:09,000
and a debugging view

1393
00:52:09,000 --> 00:52:11,000
at the bottom of the page that shows

1394
00:52:11,000 --> 00:52:13,000
you all of the stuff that is

1395
00:52:13,000 --> 00:52:15,000
coming down from the server as the page

1396
00:52:15,000 --> 00:52:17,000
is rendering in real time

1397
00:52:17,000 --> 00:52:19,000
and you can see a basic example

1398
00:52:19,000 --> 00:52:21,000
of that off to the right

1399
00:52:21,000 --> 00:52:23,000
where we have our server

1400
00:52:23,000 --> 00:52:25,000
component over here in our editor

1401
00:52:25,000 --> 00:52:27,000
there's some stale imports that we're not using

1402
00:52:27,000 --> 00:52:29,000
right now, but all this is doing

1403
00:52:29,000 --> 00:52:31,000
is it's creating a server component

1404
00:52:31,000 --> 00:52:33,000
it's rendering an h1 saying

1405
00:52:33,000 --> 00:52:35,000
welcome to server components

1406
00:52:35,000 --> 00:52:37,000
oh is the repo still private, oh dang

1407
00:52:37,000 --> 00:52:39,000
thank you for the call out

1408
00:52:39,000 --> 00:52:41,000
let me

1409
00:52:41,000 --> 00:52:43,000
make my screen share and change it to public

1410
00:52:43,000 --> 00:52:45,000
so I don't dox myself

1411
00:52:45,000 --> 00:52:47,000
and then I will show it again

1412
00:52:47,000 --> 00:52:49,000
if I go to settings

1413
00:52:49,000 --> 00:52:51,000
change visibility, change to public

1414
00:52:51,000 --> 00:52:53,000
I want to make this repository

1415
00:52:53,000 --> 00:52:55,000
public, please please

1416
00:52:55,000 --> 00:52:57,000
please, I have to send an

1417
00:52:57,000 --> 00:52:59,000
SMS to myself to make it public

1418
00:52:59,000 --> 00:53:01,000
oh my god

1419
00:53:01,000 --> 00:53:03,000
there's three dialogues

1420
00:53:03,000 --> 00:53:05,000
and a text message, that's crazy

1421
00:53:05,000 --> 00:53:07,000
605

1422
00:53:07,000 --> 00:53:09,000
043

1423
00:53:09,000 --> 00:53:11,000
okay, now

1424
00:53:11,000 --> 00:53:13,000
it should be public, if anyone wants to

1425
00:53:13,000 --> 00:53:15,000
click on that link

1426
00:53:15,000 --> 00:53:17,000
you can go try it out

1427
00:53:17,000 --> 00:53:19,000
and now I have to go back

1428
00:53:19,000 --> 00:53:21,000
to code, hold that up

1429
00:53:21,000 --> 00:53:23,000
and send in the chat

1430
00:53:23,000 --> 00:53:25,000
alright

1431
00:53:25,000 --> 00:53:27,000
but yeah, I heard your opinions

1432
00:53:27,000 --> 00:53:29,000
earlier of like, you're probably not going to

1433
00:53:29,000 --> 00:53:31,000
do this to do anything production ready

1434
00:53:31,000 --> 00:53:33,000
which is why I only set this up with the dev

1435
00:53:33,000 --> 00:53:35,000
server, I only set it up with

1436
00:53:35,000 --> 00:53:37,000
a panel of everything

1437
00:53:37,000 --> 00:53:39,000
that's going on, and there's no way

1438
00:53:39,000 --> 00:53:41,000
to actually deploy this to production right now

1439
00:53:41,000 --> 00:53:43,000
because that's not really the intended use case

1440
00:53:43,000 --> 00:53:45,000
but yeah, off to

1441
00:53:45,000 --> 00:53:47,000
the right is the most user-friendly

1442
00:53:47,000 --> 00:53:49,000
feed that I could create

1443
00:53:49,000 --> 00:53:51,000
and it is literally

1444
00:53:51,000 --> 00:53:53,000
showing you all of the stuff that is coming down the

1445
00:53:53,000 --> 00:53:55,000
wire when you stream something

1446
00:53:55,000 --> 00:53:57,000
so here, what we're rendering on the page

1447
00:53:57,000 --> 00:53:59,000
is just some instructions

1448
00:53:59,000 --> 00:54:01,000
as I would call them, from the server

1449
00:54:01,000 --> 00:54:03,000
to go make some JSX DOM elements

1450
00:54:03,000 --> 00:54:05,000
and then append them to the page

1451
00:54:05,000 --> 00:54:07,000
as we're seeing here, and there's no

1452
00:54:07,000 --> 00:54:09,000
hydration or server rendering going on, it's just like

1453
00:54:09,000 --> 00:54:11,000
a client that fetches a server

1454
00:54:11,000 --> 00:54:13,000
component and shows it to you

1455
00:54:13,000 --> 00:54:15,000
yeah, first

1456
00:54:15,000 --> 00:54:17,000
do you have any initial questions on

1457
00:54:17,000 --> 00:54:19,000
this setup and everything that I have going on

1458
00:54:19,000 --> 00:54:21,000
because there is a lot under the hood

1459
00:54:21,000 --> 00:54:23,000
are you asking

1460
00:54:23,000 --> 00:54:25,000
me or the viewers?

1461
00:54:25,000 --> 00:54:27,000
a little bit, just to

1462
00:54:27,000 --> 00:54:29,000
slow down for a second

1463
00:54:29,000 --> 00:54:31,000
no, no, I'm saying, is it a question

1464
00:54:31,000 --> 00:54:33,000
to me, do I have questions, or are you

1465
00:54:33,000 --> 00:54:35,000
asking somebody?

1466
00:54:35,000 --> 00:54:37,000
yeah, maybe one thing

1467
00:54:37,000 --> 00:54:39,000
I'm not sure about

1468
00:54:39,000 --> 00:54:41,000
is

1469
00:54:41,000 --> 00:54:43,000
how did you get the build setup?

1470
00:54:43,000 --> 00:54:45,000
you said you did your own

1471
00:54:45,000 --> 00:54:47,000
bundle plugin

1472
00:54:47,000 --> 00:54:49,000
yes, I did

1473
00:54:49,000 --> 00:54:51,000
so, the build

1474
00:54:51,000 --> 00:54:53,000
is actually pretty interesting

1475
00:54:53,000 --> 00:54:55,000
it's inside of this handler.js

1476
00:54:55,000 --> 00:54:57,000
file, and this is going

1477
00:54:57,000 --> 00:54:59,000
right in the weeds, but I don't really mind it

1478
00:54:59,000 --> 00:55:01,000
where

1479
00:55:01,000 --> 00:55:03,000
I set up a simple

1480
00:55:03,000 --> 00:55:05,000
request response handler, that's all this is

1481
00:55:05,000 --> 00:55:07,000
it just takes in a web standard request

1482
00:55:07,000 --> 00:55:09,000
sends a response, and

1483
00:55:09,000 --> 00:55:11,000
in order to get the server

1484
00:55:11,000 --> 00:55:13,000
I set it up to import

1485
00:55:13,000 --> 00:55:15,000
a built server

1486
00:55:15,000 --> 00:55:17,000
and the bundle map is

1487
00:55:17,000 --> 00:55:19,000
something that's generated separately, as it

1488
00:55:19,000 --> 00:55:21,000
crawls through the page, it discovers client

1489
00:55:21,000 --> 00:55:23,000
components, and puts them into this map

1490
00:55:23,000 --> 00:55:25,000
that it's able to match up at the end of the day

1491
00:55:25,000 --> 00:55:27,000
that gets into client components

1492
00:55:27,000 --> 00:55:29,000
which I guess we'll explore in a moment

1493
00:55:29,000 --> 00:55:31,000
but that's all it really

1494
00:55:31,000 --> 00:55:33,000
does for that, the more interesting

1495
00:55:33,000 --> 00:55:35,000
file, actually I just remembered

1496
00:55:35,000 --> 00:55:37,000
that I moved the build step out

1497
00:55:37,000 --> 00:55:39,000
over here

1498
00:55:39,000 --> 00:55:41,000
I can jump over here, but this

1499
00:55:41,000 --> 00:55:43,000
is using esbuild to do everything

1500
00:55:43,000 --> 00:55:45,000
so not necessarily plugins, but

1501
00:55:45,000 --> 00:55:47,000
it's got a two step

1502
00:55:47,000 --> 00:55:49,000
build process right now

1503
00:55:49,000 --> 00:55:51,000
where it looks for that server component

1504
00:55:51,000 --> 00:55:53,000
and it will output it

1505
00:55:53,000 --> 00:55:55,000
just using a JSX transform

1506
00:55:55,000 --> 00:55:57,000
it's not going to resolve any modules or anything

1507
00:55:57,000 --> 00:55:59,000
it's literally just going to output it

1508
00:55:59,000 --> 00:56:01,000
with the JSX transform, leave everything else alone

1509
00:56:01,000 --> 00:56:03,000
and the one weird piece

1510
00:56:03,000 --> 00:56:05,000
is this part right here

1511
00:56:05,000 --> 00:56:07,000
anyone watching at home, don't do

1512
00:56:07,000 --> 00:56:09,000
this, but I am reading

1513
00:56:09,000 --> 00:56:11,000
the file, whenever it discovers

1514
00:56:11,000 --> 00:56:13,000
a client component, I'm checking for

1515
00:56:13,000 --> 00:56:15,000
the use client directive

1516
00:56:15,000 --> 00:56:17,000
and I'm doing this wild line

1517
00:56:17,000 --> 00:56:19,000
right here that

1518
00:56:19,000 --> 00:56:21,000
inserts a few things that Webpack

1519
00:56:21,000 --> 00:56:23,000
looks for in order to decide if something

1520
00:56:23,000 --> 00:56:25,000
is a client component

1521
00:56:25,000 --> 00:56:27,000
so it imports it inline

1522
00:56:27,000 --> 00:56:29,000
it tells it that it's a client

1523
00:56:29,000 --> 00:56:31,000
reference, and then it returns

1524
00:56:31,000 --> 00:56:33,000
that in order to import onto the page

1525
00:56:33,000 --> 00:56:35,000
and I figured out

1526
00:56:35,000 --> 00:56:37,000
it works! It's not using Webpack

1527
00:56:37,000 --> 00:56:39,000
and it still does technically work

1528
00:56:39,000 --> 00:56:41,000
but that's an under the hood view

1529
00:56:41,000 --> 00:56:43,000
I'm sure you don't have

1530
00:56:43,000 --> 00:56:45,000
pleasant opinions about it, but

1531
00:56:45,000 --> 00:56:47,000
it works

1532
00:56:49,000 --> 00:56:51,000
I think I don't fully understand

1533
00:56:51,000 --> 00:56:53,000
the handler part

1534
00:56:53,000 --> 00:56:55,000
this runs

1535
00:56:55,000 --> 00:56:57,000
what is the

1536
00:56:59,000 --> 00:57:01,000
oh sure

1537
00:57:01,000 --> 00:57:03,000
why is there a

1538
00:57:03,000 --> 00:57:05,000
path, oh so this is the thing

1539
00:57:05,000 --> 00:57:07,000
you fetch, right?

1540
00:57:07,000 --> 00:57:09,000
this is the thing you fetch

1541
00:57:09,000 --> 00:57:11,000
yeah, so this is

1542
00:57:11,000 --> 00:57:13,000
the server components endpoint

1543
00:57:13,000 --> 00:57:15,000
so to speak

1544
00:57:15,000 --> 00:57:17,000
yeah, and I could have

1545
00:57:17,000 --> 00:57:19,000
it's a bit confusing because

1546
00:57:19,000 --> 00:57:21,000
it looks like I'm

1547
00:57:21,000 --> 00:57:23,000
fetching JSX and I'm like

1548
00:57:23,000 --> 00:57:25,000
what is this about?

1549
00:57:25,000 --> 00:57:27,000
I named it that thinking that's how it worked

1550
00:57:27,000 --> 00:57:29,000
and realized that's not what I'm doing

1551
00:57:29,000 --> 00:57:31,000
I'm actually sending you the stream

1552
00:57:31,000 --> 00:57:33,000
I'm not sending you the file

1553
00:57:33,000 --> 00:57:35,000
this is kind of more like

1554
00:57:37,000 --> 00:57:39,000
like RSC or

1555
00:57:39,000 --> 00:57:41,000
yeah

1556
00:57:41,000 --> 00:57:43,000
it's just like an API

1557
00:57:43,000 --> 00:57:45,000
it's like a

1558
00:57:45,000 --> 00:57:47,000
GraphQL endpoint I think, except

1559
00:57:47,000 --> 00:57:49,000
instead of GraphQL it's like

1560
00:57:49,000 --> 00:57:51,000
React

1561
00:57:51,000 --> 00:57:53,000
okay, now that makes sense, I get it

1562
00:57:53,000 --> 00:57:55,000
yep, I should have explained that part

1563
00:57:55,000 --> 00:57:57,000
because I realized after the fact that's not

1564
00:57:57,000 --> 00:57:59,000
what it is, and I also looked through

1565
00:57:59,000 --> 00:58:01,000
some of the React docs and

1566
00:58:01,000 --> 00:58:03,000
the content type of what this sends down is

1567
00:58:03,000 --> 00:58:05,000
like X component is

1568
00:58:05,000 --> 00:58:07,000
one way to put it, it's special

1569
00:58:07,000 --> 00:58:09,000
it's something that React understands

1570
00:58:09,000 --> 00:58:11,000
is the way that I would put it

1571
00:58:11,000 --> 00:58:13,000
yeah, okay

1572
00:58:13,000 --> 00:58:15,000
that sounds good

1573
00:58:15,000 --> 00:58:17,000
yeah, I don't

1574
00:58:17,000 --> 00:58:19,000
think I have any more questions

1575
00:58:19,000 --> 00:58:21,000
so we can

1576
00:58:21,000 --> 00:58:23,000
maybe try to do something

1577
00:58:23,000 --> 00:58:25,000
I do want to clarify

1578
00:58:25,000 --> 00:58:27,000
though for people watching that

1579
00:58:27,000 --> 00:58:29,000
if I understood correctly what you're saying

1580
00:58:29,000 --> 00:58:31,000
like, the architecture here essentially

1581
00:58:31,000 --> 00:58:33,000
is that the browser

1582
00:58:33,000 --> 00:58:35,000
will load like an empty HTML shell

1583
00:58:35,000 --> 00:58:37,000
which is kind of like

1584
00:58:37,000 --> 00:58:39,000
a traditional CRA app actually

1585
00:58:39,000 --> 00:58:41,000
like a web app

1586
00:58:41,000 --> 00:58:43,000
it loads empty HTML

1587
00:58:43,000 --> 00:58:45,000
then requests the

1588
00:58:45,000 --> 00:58:47,000
server component endpoint

1589
00:58:47,000 --> 00:58:49,000
and server component streams in

1590
00:58:49,000 --> 00:58:51,000
you know, what the server output is

1591
00:58:51,000 --> 00:58:53,000
so it's not super efficient because

1592
00:58:53,000 --> 00:58:55,000
it has this client-server waterfall

1593
00:58:55,000 --> 00:58:57,000
for the first load

1594
00:58:57,000 --> 00:58:59,000
whereas a proper setup would

1595
00:58:59,000 --> 00:59:01,000
actually do SSR as well

1596
00:59:01,000 --> 00:59:03,000
so it would

1597
00:59:03,000 --> 00:59:05,000
do that on the server instead

1598
00:59:05,000 --> 00:59:07,000
like when it hits index.html

1599
00:59:07,000 --> 00:59:09,000
it would

1600
00:59:09,000 --> 00:59:11,000
actually talk to the RSC endpoint

1601
00:59:11,000 --> 00:59:13,000
on the server

1602
00:59:13,000 --> 00:59:15,000
load that HTML, stream the HTML

1603
00:59:15,000 --> 00:59:17,000
to the client, and that's how the

1604
00:59:17,000 --> 00:59:19,000
initial page would be

1605
00:59:19,000 --> 00:59:21,000
actually have content without

1606
00:59:21,000 --> 00:59:23,000
an extra waterfall

1607
00:59:23,000 --> 00:59:25,000
but this is much harder to do

1608
00:59:25,000 --> 00:59:27,000
manually, and there's already enough

1609
00:59:27,000 --> 00:59:29,000
of manual setup, so this is just

1610
00:59:29,000 --> 00:59:31,000
the simplified version

1611
00:59:31,000 --> 00:59:33,000
yeah, and that's the callout

1612
00:59:33,000 --> 00:59:35,000
that's definitely worth making

1613
00:59:35,000 --> 00:59:37,000
because I'll admit, I tried, but I realized

1614
00:59:37,000 --> 00:59:39,000
doing that without blocking

1615
00:59:39,000 --> 00:59:41,000
on suspense boundaries

1616
00:59:41,000 --> 00:59:43,000
and not just reading the whole stream

1617
00:59:43,000 --> 00:59:45,000
I was like, I can't, I don't know

1618
00:59:45,000 --> 00:59:47,000
what I'm supposed to do here, I know

1619
00:59:47,000 --> 00:59:49,000
Next.js knows, they figured it out

1620
00:59:49,000 --> 00:59:51,000
but yeah, it's a different

1621
00:59:51,000 --> 00:59:53,000
problem

1622
00:59:53,000 --> 00:59:55,000
it's doable, like we actually have

1623
00:59:55,000 --> 00:59:57,000
an example in the React repo

1624
00:59:57,000 --> 00:59:59,000
so we go to fixtures slash

1625
00:59:59,000 --> 01:00:01,000
flight, it has like a super

1626
01:00:01,000 --> 01:00:03,000
believe me, I've had

1627
01:00:03,000 --> 01:00:05,000
every page visited at this point

1628
01:00:05,000 --> 01:00:07,000
yeah, so it shows

1629
01:00:07,000 --> 01:00:09,000
how to do it, but it is confusing

1630
01:00:09,000 --> 01:00:11,000
it's a lot

1631
01:00:11,000 --> 01:00:13,000
oh yeah, for a client

1632
01:00:13,000 --> 01:00:15,000
emulator, this is the page that

1633
01:00:15,000 --> 01:00:17,000
I was reading for a little bit

1634
01:00:17,000 --> 01:00:19,000
I don't actually see

1635
01:00:19,000 --> 01:00:21,000
because I think you're sharing just the part of the screen

1636
01:00:21,000 --> 01:00:23,000
so I don't know

1637
01:00:23,000 --> 01:00:25,000
I shared an individual tab

1638
01:00:25,000 --> 01:00:27,000
which means I would have to visit it in this

1639
01:00:27,000 --> 01:00:29,000
tab, and then it would work

1640
01:00:29,000 --> 01:00:31,000
it also

1641
01:00:31,000 --> 01:00:33,000
might be delayed

1642
01:00:33,000 --> 01:00:35,000
yeah

1643
01:00:35,000 --> 01:00:37,000
this is the weird part, and this

1644
01:00:37,000 --> 01:00:39,000
definitely speaks to what you said about client

1645
01:00:39,000 --> 01:00:41,000
isn't really browser

1646
01:00:41,000 --> 01:00:43,000
client is just whoever wants to consume

1647
01:00:43,000 --> 01:00:45,000
that server component, and it could

1648
01:00:45,000 --> 01:00:47,000
be the server itself in order to render it

1649
01:00:47,000 --> 01:00:49,000
to HTML, or it could be the client

1650
01:00:49,000 --> 01:00:51,000
when you're trying to do client-side routing

1651
01:00:51,000 --> 01:00:53,000
which is usually what you'd end up with

1652
01:00:53,000 --> 01:00:55,000
here, like yeah, the initial load

1653
01:00:55,000 --> 01:00:57,000
of, now I have to hit back

1654
01:00:57,000 --> 01:00:59,000
the initial load of this

1655
01:00:59,000 --> 01:01:01,000
that's not good, you want to have the server rendered

1656
01:01:01,000 --> 01:01:03,000
but if I want to load this as

1657
01:01:03,000 --> 01:01:05,000
another route coming in, then

1658
01:01:05,000 --> 01:01:07,000
it actually makes sense, I actually want to get this

1659
01:01:07,000 --> 01:01:09,000
full stream and just render it onto the page

1660
01:01:09,000 --> 01:01:11,000
of JavaScript

1661
01:01:11,000 --> 01:01:13,000
yeah, I think another thing that's

1662
01:01:13,000 --> 01:01:15,000
worth highlighting maybe is

1663
01:01:15,000 --> 01:01:17,000
I think

1664
01:01:17,000 --> 01:01:19,000
sometimes people have this

1665
01:01:19,000 --> 01:01:21,000
wrong mental model of

1666
01:01:21,000 --> 01:01:23,000
when you have a server component in the tree

1667
01:01:23,000 --> 01:01:25,000
you go to the server, and it's

1668
01:01:25,000 --> 01:01:27,000
like each individual server component

1669
01:01:27,000 --> 01:01:29,000
is kind of rendered independently

1670
01:01:29,000 --> 01:01:31,000
but it's really not like this

1671
01:01:31,000 --> 01:01:33,000
it's more like

1672
01:01:33,000 --> 01:01:35,000
it's just, there's

1673
01:01:35,000 --> 01:01:37,000
I think in a simple setup, like

1674
01:01:37,000 --> 01:01:39,000
the one you have, the only

1675
01:01:39,000 --> 01:01:41,000
server component that you talk

1676
01:01:41,000 --> 01:01:43,000
to or render is the

1677
01:01:43,000 --> 01:01:45,000
top-level one, so it's really about

1678
01:01:45,000 --> 01:01:47,000
top-down rendering

1679
01:01:47,000 --> 01:01:49,000
the whole page, and if you

1680
01:01:49,000 --> 01:01:51,000
refetch, it's going to go to the

1681
01:01:51,000 --> 01:01:53,000
server component

1682
01:01:53,000 --> 01:01:55,000
server and re-render the

1683
01:01:55,000 --> 01:01:57,000
app, the top-level thing

1684
01:01:57,000 --> 01:01:59,000
and get the new output for that

1685
01:01:59,000 --> 01:02:01,000
and then that's of course not super

1686
01:02:01,000 --> 01:02:03,000
efficient, so this is why with something

1687
01:02:03,000 --> 01:02:05,000
like Next.js, you have nested routing

1688
01:02:05,000 --> 01:02:07,000
where the granularity

1689
01:02:07,000 --> 01:02:09,000
is to the

1690
01:02:09,000 --> 01:02:11,000
sub-route level

1691
01:02:11,000 --> 01:02:13,000
so you can't update

1692
01:02:13,000 --> 01:02:15,000
one small server component

1693
01:02:15,000 --> 01:02:17,000
that doesn't make sense in the model, because they

1694
01:02:17,000 --> 01:02:19,000
all have to be consistent

1695
01:02:19,000 --> 01:02:21,000
with each other, but what you can do

1696
01:02:21,000 --> 01:02:23,000
is you can invalidate the sub-route

1697
01:02:23,000 --> 01:02:25,000
so that would be like, for example, if you have

1698
01:02:25,000 --> 01:02:27,000
a shell of the page, and then they have

1699
01:02:27,000 --> 01:02:29,000
some kind of tab interface

1700
01:02:29,000 --> 01:02:31,000
like about, photos,

1701
01:02:31,000 --> 01:02:33,000
memories, whatever,

1702
01:02:33,000 --> 01:02:35,000
then when you switch those things,

1703
01:02:35,000 --> 01:02:37,000
it's just this part that

1704
01:02:37,000 --> 01:02:39,000
gets independently refetched

1705
01:02:39,000 --> 01:02:41,000
from the server, but if you want

1706
01:02:41,000 --> 01:02:43,000
to refetch something

1707
01:02:43,000 --> 01:02:45,000
broader, like you want to change

1708
01:02:45,000 --> 01:02:47,000
there's a mutation that affected something

1709
01:02:47,000 --> 01:02:49,000
else on the screen, you just refetch

1710
01:02:49,000 --> 01:02:51,000
the whole thing, and this might sound like

1711
01:02:51,000 --> 01:02:53,000
oh, this is going to be super slow, but let's remember

1712
01:02:53,000 --> 01:02:55,000
that this is literally what happens if the

1713
01:02:55,000 --> 01:02:57,000
user just opens the page and

1714
01:02:57,000 --> 01:02:59,000
opens the tab, so it's not

1715
01:02:59,000 --> 01:03:01,000
that different from

1716
01:03:01,000 --> 01:03:03,000
traditional web models.

1717
01:03:03,000 --> 01:03:05,000
Yeah, it's not.

1718
01:03:05,000 --> 01:03:07,000
And that is a real big thing of like

1719
01:03:07,000 --> 01:03:09,000
routes aren't necessarily

1720
01:03:09,000 --> 01:03:11,000
full routes, they're layers of an

1721
01:03:11,000 --> 01:03:13,000
onion or individual components

1722
01:03:13,000 --> 01:03:15,000
that you can just slot into view

1723
01:03:15,000 --> 01:03:17,000
like this server component that we've created

1724
01:03:17,000 --> 01:03:19,000
here, this could be fetched from

1725
01:03:19,000 --> 01:03:21,000
some other route on the page, and it could just add

1726
01:03:21,000 --> 01:03:23,000
welcome to server components below

1727
01:03:23,000 --> 01:03:25,000
a navigation bar and other things

1728
01:03:25,000 --> 01:03:27,000
that are being rendered. It's just a way to

1729
01:03:27,000 --> 01:03:29,000
officially fetch server stuff.

1730
01:03:29,000 --> 01:03:31,000
Yeah, but then for that you kind of

1731
01:03:31,000 --> 01:03:33,000
need a framework because

1732
01:03:33,000 --> 01:03:35,000
implementing this kind of nested thing

1733
01:03:35,000 --> 01:03:37,000
in this demo, that's yet

1734
01:03:37,000 --> 01:03:39,000
another level of complexity, and that's why

1735
01:03:39,000 --> 01:03:41,000
DIY is

1736
01:03:41,000 --> 01:03:43,000
actually really hard today because you just

1737
01:03:43,000 --> 01:03:45,000
don't have a router like this

1738
01:03:45,000 --> 01:03:47,000
that's, you know, there is no RSC

1739
01:03:47,000 --> 01:03:49,000
router you can use off the shelf.

1740
01:03:49,000 --> 01:03:51,000
But you can build one.

1741
01:03:51,000 --> 01:03:53,000
You can write one.

1742
01:03:53,000 --> 01:03:55,000
I'm not going to invite myself to do that.

1743
01:03:55,000 --> 01:03:57,000
I've already sunk too much time into this.

1744
01:03:57,000 --> 01:03:59,000
But yeah, that's

1745
01:03:59,000 --> 01:04:01,000
why I guess the main goal of this project

1746
01:04:01,000 --> 01:04:03,000
was like, I just want a way to workbench

1747
01:04:03,000 --> 01:04:05,000
one server component and have a

1748
01:04:05,000 --> 01:04:07,000
dev panel of the stuff coming down the pipe.

1749
01:04:07,000 --> 01:04:09,000
And that's it. Like, no opinions

1750
01:04:09,000 --> 01:04:11,000
on routing because, as you kind of mentioned,

1751
01:04:11,000 --> 01:04:13,000
React is

1752
01:04:13,000 --> 01:04:15,000
I don't know if you said this yet, but React

1753
01:04:15,000 --> 01:04:17,000
is more of an architecture

1754
01:04:17,000 --> 01:04:19,000
and a library than it is a

1755
01:04:19,000 --> 01:04:21,000
framework. And in

1756
01:04:21,000 --> 01:04:23,000
order to have any opinions about, like, where

1757
01:04:23,000 --> 01:04:25,000
do the routes go? What is the

1758
01:04:25,000 --> 01:04:27,000
nesting strategies that you probably

1759
01:04:27,000 --> 01:04:29,000
want? Like, that's immediately framework

1760
01:04:29,000 --> 01:04:31,000
opinions. And that's already taking

1761
01:04:31,000 --> 01:04:33,000
things to a new space.

1762
01:04:33,000 --> 01:04:35,000
Yeah.

1763
01:04:35,000 --> 01:04:37,000
Yeah.

1764
01:04:37,000 --> 01:04:39,000
So with this, I'm thinking

1765
01:04:39,000 --> 01:04:41,000
like, maybe we can put some albums

1766
01:04:41,000 --> 01:04:43,000
on the page and render them out to start.

1767
01:04:43,000 --> 01:04:45,000
I have some

1768
01:04:45,000 --> 01:04:47,000
really basic endpoints here.

1769
01:04:47,000 --> 01:04:49,000
And this is literally just

1770
01:04:49,000 --> 01:04:51,000
fetching some JSON. And I say

1771
01:04:51,000 --> 01:04:53,000
fetch, it's just an

1772
01:04:53,000 --> 01:04:55,000
import with an artificial

1773
01:04:55,000 --> 01:04:57,000
wait time to make it feel like it's a server

1774
01:04:57,000 --> 01:04:59,000
but it's not. It was just

1775
01:04:59,000 --> 01:05:01,000
the easiest way.

1776
01:05:01,000 --> 01:05:03,000
Where should that be looking? I'm not sure.

1777
01:05:03,000 --> 01:05:05,000
Sorry. Right.

1778
01:05:05,000 --> 01:05:07,000
I was just looking at this DB fetch file.

1779
01:05:07,000 --> 01:05:09,000
Oh, okay.

1780
01:05:09,000 --> 01:05:11,000
This part isn't too important

1781
01:05:11,000 --> 01:05:13,000
but I just made some JSON dumps

1782
01:05:13,000 --> 01:05:15,000
of good albums that I

1783
01:05:15,000 --> 01:05:17,000
like. That's why I actually mentioned

1784
01:05:17,000 --> 01:05:19,000
earlier, like, if you want to put an album on here, we can.

1785
01:05:19,000 --> 01:05:21,000
Because you put out those really

1786
01:05:21,000 --> 01:05:23,000
good tweets of just, like, a random song on Spotify.

1787
01:05:23,000 --> 01:05:25,000
Like, this is great. Like, you know

1788
01:05:25,000 --> 01:05:27,000
what, you're right. It's really good.

1789
01:05:27,000 --> 01:05:29,000
But yeah, that's all this is

1790
01:05:29,000 --> 01:05:31,000
doing. I have a get all, which will

1791
01:05:31,000 --> 01:05:33,000
wait 300 milliseconds and send you all the

1792
01:05:33,000 --> 01:05:35,000
albums. And get by ID, where

1793
01:05:35,000 --> 01:05:37,000
you can pass in an individual ID

1794
01:05:37,000 --> 01:05:39,000
slug, whatever you want. So if you

1795
01:05:39,000 --> 01:05:41,000
want to do routing, that's how you would get, like,

1796
01:05:41,000 --> 01:05:43,000
an individual entry.

1797
01:05:43,000 --> 01:05:45,000
But yeah.

1798
01:05:45,000 --> 01:05:47,000
I hopped back over here. I think I have to

1799
01:05:47,000 --> 01:05:49,000
keep, like, focusing you to bring you

1800
01:05:49,000 --> 01:05:51,000
into the model. Yeah, yeah.

1801
01:05:51,000 --> 01:05:53,000
We're trying VS Code live share, by the way.

1802
01:05:53,000 --> 01:05:55,000
So

1803
01:05:55,000 --> 01:05:57,000
we'll see how it goes.

1804
01:05:57,000 --> 01:05:59,000
Anything goes

1805
01:05:59,000 --> 01:06:01,000
is the idea here. If we want to jump

1806
01:06:01,000 --> 01:06:03,000
in and type code, either one of us can do it.

1807
01:06:03,000 --> 01:06:05,000
But yeah.

1808
01:06:05,000 --> 01:06:07,000
In order to render all of the albums

1809
01:06:07,000 --> 01:06:09,000
onto the page,

1810
01:06:09,000 --> 01:06:11,000
well, I've already kind of done it.

1811
01:06:11,000 --> 01:06:13,000
I kind of spoiled it.

1812
01:06:13,000 --> 01:06:15,000
Where in a server company, you can just

1813
01:06:15,000 --> 01:06:17,000
say, wait, get all the albums,

1814
01:06:17,000 --> 01:06:19,000
and then to put them on the page, I guess we could just

1815
01:06:19,000 --> 01:06:21,000
do a map over whatever's

1816
01:06:21,000 --> 01:06:23,000
going on.

1817
01:06:23,000 --> 01:06:25,000
There's one thing I asked about earlier

1818
01:06:25,000 --> 01:06:27,000
where I was wondering

1819
01:06:27,000 --> 01:06:29,000
why you would need an

1820
01:06:29,000 --> 01:06:31,000
ID prop or a key. That's what

1821
01:06:31,000 --> 01:06:33,000
I'm thinking of.

1822
01:06:33,000 --> 01:06:35,000
Because that's always been the thing with React

1823
01:06:35,000 --> 01:06:37,000
Lists that I forget.

1824
01:06:37,000 --> 01:06:39,000
Which is adding a key onto every entry.

1825
01:06:39,000 --> 01:06:41,000
So is that still

1826
01:06:41,000 --> 01:06:43,000
required? And if so,

1827
01:06:43,000 --> 01:06:45,000
what is sort of the benefit to that?

1828
01:06:45,000 --> 01:06:47,000
Yeah, so maybe

1829
01:06:47,000 --> 01:06:49,000
I think to answer that question,

1830
01:06:49,000 --> 01:06:51,000
do you know why it's required?

1831
01:06:51,000 --> 01:06:53,000
If we put server components out of the

1832
01:06:53,000 --> 01:06:55,000
story, do you know why it's required on the client?

1833
01:06:55,000 --> 01:06:57,000
Yeah, I know why it's required

1834
01:06:57,000 --> 01:06:59,000
on the client. Usually for

1835
01:06:59,000 --> 01:07:01,000
if the list updates

1836
01:07:01,000 --> 01:07:03,000
and you need things to

1837
01:07:03,000 --> 01:07:05,000
reorient and you want it to re-render

1838
01:07:05,000 --> 01:07:07,000
efficiently, then a key will actually tell

1839
01:07:07,000 --> 01:07:09,000
React, this is the part that was removed.

1840
01:07:09,000 --> 01:07:11,000
This is the part that got moved up.

1841
01:07:11,000 --> 01:07:13,000
So if you want to animate that transition

1842
01:07:13,000 --> 01:07:15,000
of the

1843
01:07:15,000 --> 01:07:17,000
item with a key of 4 moved

1844
01:07:17,000 --> 01:07:19,000
from this position to this position,

1845
01:07:19,000 --> 01:07:21,000
React can track, oh, that's

1846
01:07:21,000 --> 01:07:23,000
the thing with the key of 4. I know how to animate

1847
01:07:23,000 --> 01:07:25,000
that up if you're using some external

1848
01:07:25,000 --> 01:07:27,000
library for it. Is that kind of right?

1849
01:07:27,000 --> 01:07:29,000
I know there's more reasons.

1850
01:07:29,000 --> 01:07:31,000
Sort of. I think maybe the focus

1851
01:07:31,000 --> 01:07:33,000
on efficiency is a mistake.

1852
01:07:33,000 --> 01:07:35,000
I think we've kind of maybe explained

1853
01:07:35,000 --> 01:07:37,000
it badly in the old docs where

1854
01:07:37,000 --> 01:07:39,000
we explain it as, oh, if

1855
01:07:39,000 --> 01:07:41,000
you want it to be fast, then you should use

1856
01:07:41,000 --> 01:07:43,000
a key. It has nothing to do with being

1857
01:07:43,000 --> 01:07:45,000
fast.

1858
01:07:45,000 --> 01:07:47,000
Yeah, not fast.

1859
01:07:47,000 --> 01:07:49,000
Just to do it at all.

1860
01:07:49,000 --> 01:07:51,000
If you want to do it in transition.

1861
01:07:51,000 --> 01:07:53,000
Well, I don't think it has to do with animations

1862
01:07:53,000 --> 01:07:55,000
either. It's

1863
01:07:55,000 --> 01:07:57,000
really

1864
01:07:57,000 --> 01:07:59,000
about

1865
01:07:59,000 --> 01:08:01,000
kind of identity

1866
01:08:01,000 --> 01:08:03,000
across re-renders.

1867
01:08:03,000 --> 01:08:05,000
So it's

1868
01:08:05,000 --> 01:08:07,000
about state. And I don't mean just

1869
01:08:07,000 --> 01:08:09,000
React state. I mean even

1870
01:08:09,000 --> 01:08:11,000
input state.

1871
01:08:11,000 --> 01:08:13,000
If you just render an input

1872
01:08:13,000 --> 01:08:15,000
that's uncontrolled

1873
01:08:15,000 --> 01:08:17,000
or focus or

1874
01:08:17,000 --> 01:08:19,000
scroll position or any

1875
01:08:19,000 --> 01:08:21,000
of the things that are kind of

1876
01:08:21,000 --> 01:08:23,000
stateful,

1877
01:08:23,000 --> 01:08:25,000
it's about

1878
01:08:25,000 --> 01:08:27,000
like imagine you render

1879
01:08:27,000 --> 01:08:29,000
a list of components

1880
01:08:29,000 --> 01:08:31,000
and then each of those components has

1881
01:08:31,000 --> 01:08:33,000
an input inside. And again,

1882
01:08:33,000 --> 01:08:35,000
this input doesn't have to be

1883
01:08:35,000 --> 01:08:37,000
controlled value

1884
01:08:37,000 --> 01:08:39,000
proper or anything like this. It could just be

1885
01:08:39,000 --> 01:08:41,000
browser input, React doesn't touch it.

1886
01:08:41,000 --> 01:08:43,000
You could do whatever with it.

1887
01:08:43,000 --> 01:08:45,000
And so you type into each of those

1888
01:08:45,000 --> 01:08:47,000
inputs and then suppose

1889
01:08:47,000 --> 01:08:49,000
the first item in the

1890
01:08:49,000 --> 01:08:51,000
list was deleted. And so

1891
01:08:51,000 --> 01:08:53,000
there's a re-render and

1892
01:08:53,000 --> 01:08:55,000
React now sees that

1893
01:08:55,000 --> 01:08:57,000
there's the

1894
01:08:57,000 --> 01:08:59,000
item, like you're

1895
01:08:59,000 --> 01:09:01,000
rendering two items instead

1896
01:09:01,000 --> 01:09:03,000
of three. The first one is gone.

1897
01:09:03,000 --> 01:09:05,000
And so if you don't provide the key,

1898
01:09:05,000 --> 01:09:07,000
React has no idea which of

1899
01:09:07,000 --> 01:09:09,000
these items correspond.

1900
01:09:09,000 --> 01:09:11,000
How do the old items kind of

1901
01:09:11,000 --> 01:09:13,000
match to the new ones?

1902
01:09:13,000 --> 01:09:15,000
Because it could be like this.

1903
01:09:15,000 --> 01:09:17,000
But it could be like this.

1904
01:09:17,000 --> 01:09:19,000
So it can't

1905
01:09:19,000 --> 01:09:21,000
know which one was deleted

1906
01:09:21,000 --> 01:09:23,000
because it

1907
01:09:23,000 --> 01:09:25,000
just doesn't have the knowledge.

1908
01:09:25,000 --> 01:09:27,000
And so if you get

1909
01:09:27,000 --> 01:09:29,000
it wrong, so if it just tries to

1910
01:09:29,000 --> 01:09:31,000
for example, it just matches up

1911
01:09:31,000 --> 01:09:33,000
like this.

1912
01:09:33,000 --> 01:09:35,000
And that's the default.

1913
01:09:35,000 --> 01:09:37,000
It goes in the direction.

1914
01:09:37,000 --> 01:09:39,000
This is the first one, used to be here,

1915
01:09:39,000 --> 01:09:41,000
now it's here. This is the second one, used to be here,

1916
01:09:41,000 --> 01:09:43,000
now it's here.

1917
01:09:43,000 --> 01:09:45,000
So the inputs

1918
01:09:45,000 --> 01:09:47,000
will be preserved.

1919
01:09:47,000 --> 01:09:49,000
And so if what

1920
01:09:49,000 --> 01:09:51,000
actually happened is this,

1921
01:09:51,000 --> 01:09:53,000
so the first item got deleted,

1922
01:09:53,000 --> 01:09:55,000
then you're going to see

1923
01:09:55,000 --> 01:09:57,000
wrong inputs at wrong positions.

1924
01:09:57,000 --> 01:09:59,000
And that is really the issue.

1925
01:09:59,000 --> 01:10:01,000
If you've already modified them,

1926
01:10:01,000 --> 01:10:03,000
but then things shifted, you're just

1927
01:10:03,000 --> 01:10:05,000
going to see

1928
01:10:05,000 --> 01:10:07,000
it's kind of the same.

1929
01:10:07,000 --> 01:10:09,000
Imagine you're in a bus

1930
01:10:09,000 --> 01:10:11,000
and there's like

1931
01:10:11,000 --> 01:10:13,000
20 people in the bus and

1932
01:10:13,000 --> 01:10:15,000
everybody has

1933
01:10:15,000 --> 01:10:17,000
a seat.

1934
01:10:17,000 --> 01:10:19,000
And you leave

1935
01:10:19,000 --> 01:10:21,000
some stuff on your seat. Maybe you leave your

1936
01:10:21,000 --> 01:10:23,000
headphones on the seat. I've done that once

1937
01:10:23,000 --> 01:10:25,000
and they disappeared.

1938
01:10:25,000 --> 01:10:27,000
And so imagine

1939
01:10:27,000 --> 01:10:29,000
the situation.

1940
01:10:29,000 --> 01:10:31,000
You leave the bus.

1941
01:10:31,000 --> 01:10:33,000
When you come back to the bus,

1942
01:10:33,000 --> 01:10:35,000
you want to go to your seat, even

1943
01:10:35,000 --> 01:10:37,000
if there's fewer people. Even if some people

1944
01:10:37,000 --> 01:10:39,000
got off the bus, you want to remember which

1945
01:10:39,000 --> 01:10:41,000
seat is yours. You don't want to

1946
01:10:41,000 --> 01:10:43,000
sit somewhere else. And so what happens

1947
01:10:43,000 --> 01:10:45,000
if you don't specify a key,

1948
01:10:45,000 --> 01:10:47,000
it's like you don't know what

1949
01:10:47,000 --> 01:10:49,000
your seat is.

1950
01:10:49,000 --> 01:10:51,000
So by

1951
01:10:51,000 --> 01:10:53,000
default, you're going to be seated in

1952
01:10:53,000 --> 01:10:55,000
the order.

1953
01:10:55,000 --> 01:10:57,000
That's kind of the default for the key. It's just like index.

1954
01:10:57,000 --> 01:10:59,000
So it's like the first people who gets

1955
01:10:59,000 --> 01:11:01,000
on the bus goes to the first seat.

1956
01:11:01,000 --> 01:11:03,000
The second person

1957
01:11:03,000 --> 01:11:05,000
goes to the second seat and so on.

1958
01:11:05,000 --> 01:11:07,000
And so if one of the people has

1959
01:11:07,000 --> 01:11:09,000
left, then everybody

1960
01:11:09,000 --> 01:11:11,000
else will get the wrong seat because

1961
01:11:11,000 --> 01:11:13,000
the order has shifted. And that's why

1962
01:11:13,000 --> 01:11:15,000
you need keys.

1963
01:11:15,000 --> 01:11:17,000
And so it's the same with

1964
01:11:17,000 --> 01:11:19,000
server components. You don't notice it all the time.

1965
01:11:19,000 --> 01:11:21,000
But I've definitely run into

1966
01:11:21,000 --> 01:11:23,000
why can't you just use the index

1967
01:11:23,000 --> 01:11:25,000
in the array? It's like, well, if you do that,

1968
01:11:25,000 --> 01:11:27,000
you actually get a clearer idea of why

1969
01:11:27,000 --> 01:11:29,000
keys are bad or why

1970
01:11:29,000 --> 01:11:31,000
you need a key. Where if you remove

1971
01:11:31,000 --> 01:11:33,000
the first item in the list, now

1972
01:11:33,000 --> 01:11:35,000
all of a sudden, item 0 became 1,

1973
01:11:35,000 --> 01:11:37,000
item 1 became 2, item 2 became

1974
01:11:37,000 --> 01:11:39,000
3. So it's like they're all different people

1975
01:11:39,000 --> 01:11:41,000
now. It's like everyone on the bus

1976
01:11:41,000 --> 01:11:43,000
traded seats all of a sudden

1977
01:11:43,000 --> 01:11:45,000
when that actually didn't need to happen.

1978
01:11:45,000 --> 01:11:47,000
And you don't always notice it.

1979
01:11:47,000 --> 01:11:49,000
But with efficient libraries, it's like you do.

1980
01:11:49,000 --> 01:11:51,000
Yeah, so this is very interesting

1981
01:11:51,000 --> 01:11:53,000
because you don't always notice it.

1982
01:11:53,000 --> 01:11:55,000
And like one

1983
01:11:55,000 --> 01:11:57,000
way to notice it is, yes, animations,

1984
01:11:57,000 --> 01:11:59,000
because they make it obvious that, wait,

1985
01:11:59,000 --> 01:12:01,000
a thing disappearing is a

1986
01:12:01,000 --> 01:12:03,000
very different thing from, you know, things

1987
01:12:03,000 --> 01:12:05,000
reordering and updating.

1988
01:12:05,000 --> 01:12:07,000
But another way to notice

1989
01:12:07,000 --> 01:12:09,000
it is, and that is

1990
01:12:09,000 --> 01:12:11,000
the most insidious thing, it's like

1991
01:12:11,000 --> 01:12:13,000
initially you don't add a key because

1992
01:12:13,000 --> 01:12:15,000
it seems to work fine. And then

1993
01:12:15,000 --> 01:12:17,000
like five months later,

1994
01:12:17,000 --> 01:12:19,000
somebody adds a little bit piece

1995
01:12:19,000 --> 01:12:21,000
of state somewhere deep down

1996
01:12:21,000 --> 01:12:23,000
in the item components,

1997
01:12:23,000 --> 01:12:25,000
like even like five levels down.

1998
01:12:25,000 --> 01:12:27,000
And this piece

1999
01:12:27,000 --> 01:12:29,000
of state will get misplaced when they

2000
01:12:29,000 --> 01:12:31,000
reorder because you didn't give the right key

2001
01:12:31,000 --> 01:12:33,000
to the top level thing.

2002
01:12:33,000 --> 01:12:35,000
So it's like if everybody leaves the bus

2003
01:12:35,000 --> 01:12:37,000
but nobody has headphones on the seat,

2004
01:12:37,000 --> 01:12:39,000
the seats kind of don't matter.

2005
01:12:39,000 --> 01:12:41,000
It's okay to sit anywhere. But if

2006
01:12:41,000 --> 01:12:43,000
you start leaving your valuables,

2007
01:12:43,000 --> 01:12:45,000
now it becomes

2008
01:12:45,000 --> 01:12:47,000
important. So that's why, and sometimes

2009
01:12:47,000 --> 01:12:49,000
index as a key is fine

2010
01:12:49,000 --> 01:12:51,000
when that actually corresponds to

2011
01:12:51,000 --> 01:12:53,000
the identity. So it's like

2012
01:12:53,000 --> 01:12:55,000
literally it's important, you know, the first thing

2013
01:12:55,000 --> 01:12:57,000
is the first thing, the second thing is the second.

2014
01:12:57,000 --> 01:12:59,000
That's what, you know, like a list of

2015
01:12:59,000 --> 01:13:01,000
words in a sentence or something

2016
01:13:01,000 --> 01:13:03,000
like this, or like the first line

2017
01:13:03,000 --> 01:13:05,000
of code, the second line of code.

2018
01:13:05,000 --> 01:13:07,000
Then it kind of makes sense that, yeah, the index

2019
01:13:07,000 --> 01:13:09,000
is actually the identity

2020
01:13:09,000 --> 01:13:11,000
of that thing. It makes sense that

2021
01:13:11,000 --> 01:13:13,000
the, you know, so.

2022
01:13:13,000 --> 01:13:15,000
Yeah, I agree.

2023
01:13:15,000 --> 01:13:17,000
But I'll say specifically

2024
01:13:17,000 --> 01:13:19,000
the server components part of this is

2025
01:13:19,000 --> 01:13:21,000
it's important for server components too

2026
01:13:21,000 --> 01:13:23,000
because server component output can

2027
01:13:23,000 --> 01:13:25,000
be refreshed. So if you have

2028
01:13:25,000 --> 01:13:27,000
for example like a refresh

2029
01:13:27,000 --> 01:13:29,000
button that will

2030
01:13:29,000 --> 01:13:31,000
cause, you know, the server component output

2031
01:13:31,000 --> 01:13:33,000
to update, maybe you deleted

2032
01:13:33,000 --> 01:13:35,000
that album from the database and they're all

2033
01:13:35,000 --> 01:13:37,000
going to like shift by one. And so this

2034
01:13:37,000 --> 01:13:39,000
is again why you want to have a key.

2035
01:13:39,000 --> 01:13:41,000
Yeah, that's the

2036
01:13:41,000 --> 01:13:43,000
part that I like, I don't know what it looks like

2037
01:13:43,000 --> 01:13:45,000
because I've only played with server components

2038
01:13:45,000 --> 01:13:47,000
in a read only model

2039
01:13:47,000 --> 01:13:49,000
where it's like I funnel all my data down

2040
01:13:49,000 --> 01:13:51,000
it renders on the page and

2041
01:13:51,000 --> 01:13:53,000
any mutations beyond that are

2042
01:13:53,000 --> 01:13:55,000
handled with client. And

2043
01:13:55,000 --> 01:13:57,000
it sounds like there are ways

2044
01:13:57,000 --> 01:13:59,000
with server components to like sort of

2045
01:13:59,000 --> 01:14:01,000
refresh, refetch

2046
01:14:01,000 --> 01:14:03,000
like the same fragment of components

2047
01:14:03,000 --> 01:14:05,000
and actually have it re-render

2048
01:14:05,000 --> 01:14:07,000
like server only search or something like that.

2049
01:14:07,000 --> 01:14:09,000
Yeah, that's exactly the

2050
01:14:09,000 --> 01:14:11,000
point. Like you're not supposed to be

2051
01:14:11,000 --> 01:14:13,000
copying, you know, props

2052
01:14:13,000 --> 01:14:15,000
from the server into state and then like

2053
01:14:15,000 --> 01:14:17,000
updating that state. Like the

2054
01:14:17,000 --> 01:14:19,000
whole point is not to have to do that

2055
01:14:19,000 --> 01:14:21,000
and to just be like something changed

2056
01:14:21,000 --> 01:14:23,000
just like you refresh

2057
01:14:23,000 --> 01:14:25,000
an API call except here you refresh

2058
01:14:25,000 --> 01:14:27,000
the output.

2059
01:14:27,000 --> 01:14:29,000
Yeah, exactly. And I do

2060
01:14:29,000 --> 01:14:31,000
want to try that. We might have to move to Next.js

2061
01:14:31,000 --> 01:14:33,000
to try it, I have no idea.

2062
01:14:33,000 --> 01:14:35,000
But we'll just see.

2063
01:14:35,000 --> 01:14:37,000
But I think that also speaks to like what

2064
01:14:37,000 --> 01:14:39,000
we're getting over here.

2065
01:14:39,000 --> 01:14:41,000
So what I did is

2066
01:14:41,000 --> 01:14:43,000
I just rendered out the album titles

2067
01:14:43,000 --> 01:14:45,000
as list items and

2068
01:14:45,000 --> 01:14:47,000
the immediate thing that

2069
01:14:47,000 --> 01:14:49,000
you sort of notice in that dev panel

2070
01:14:49,000 --> 01:14:51,000
at the bottom is

2071
01:14:51,000 --> 01:14:53,000
it's not passing down the entire

2072
01:14:53,000 --> 01:14:55,000
list of albums. It's only passing

2073
01:14:55,000 --> 01:14:57,000
down a set of like instructions

2074
01:14:57,000 --> 01:14:59,000
to like write out

2075
01:14:59,000 --> 01:15:01,000
the name with the ID and that's

2076
01:15:01,000 --> 01:15:03,000
it. Like there's no images in here,

2077
01:15:03,000 --> 01:15:05,000
there's no albums that we weren't

2078
01:15:05,000 --> 01:15:07,000
searching for. Well, I guess we're getting all of them.

2079
01:15:07,000 --> 01:15:09,000
But there's also a big list of songs

2080
01:15:09,000 --> 01:15:11,000
that could have been sent down the wire.

2081
01:15:11,000 --> 01:15:13,000
But because we're doing all these

2082
01:15:13,000 --> 01:15:15,000
instructions on the server, it's only

2083
01:15:15,000 --> 01:15:17,000
going to send this. We basically wrote our own

2084
01:15:17,000 --> 01:15:19,000
GraphQL query in a way of like

2085
01:15:19,000 --> 01:15:21,000
get album and just the title

2086
01:15:21,000 --> 01:15:23,000
field and then render that

2087
01:15:23,000 --> 01:15:25,000
into something.

2088
01:15:25,000 --> 01:15:27,000
Yeah, I would maybe slightly reframe

2089
01:15:27,000 --> 01:15:29,000
what you're saying instructions

2090
01:15:29,000 --> 01:15:31,000
and it's kind of correct in a way

2091
01:15:31,000 --> 01:15:33,000
but it is a bit

2092
01:15:33,000 --> 01:15:35,000
I think like there's a way to misinterpret it

2093
01:15:35,000 --> 01:15:37,000
where you think the server is kind of sending

2094
01:15:37,000 --> 01:15:39,000
commands whereas

2095
01:15:39,000 --> 01:15:41,000
the mental model is more like

2096
01:15:41,000 --> 01:15:43,000
the server just sends a response

2097
01:15:43,000 --> 01:15:45,000
that's essentially

2098
01:15:45,000 --> 01:15:47,000
you can think of this response

2099
01:15:47,000 --> 01:15:49,000
as it's almost like JSON.

2100
01:15:49,000 --> 01:15:51,000
So it's almost like a big

2101
01:15:51,000 --> 01:15:53,000
JSON tree that

2102
01:15:53,000 --> 01:15:55,000
includes your

2103
01:15:55,000 --> 01:15:57,000
kind of your HTML

2104
01:15:57,000 --> 01:15:59,000
components, like your React

2105
01:15:59,000 --> 01:16:01,000
components, you know like things like

2106
01:16:01,000 --> 01:16:03,000
native and so on except

2107
01:16:03,000 --> 01:16:05,000
formatted as JSON

2108
01:16:05,000 --> 01:16:07,000
kind of like the virtual DOM

2109
01:16:07,000 --> 01:16:09,000
as well as like if you have client components

2110
01:16:09,000 --> 01:16:11,000
it will send also render

2111
01:16:11,000 --> 01:16:13,000
this like like button with these

2112
01:16:13,000 --> 01:16:15,000
props and so these props are also

2113
01:16:15,000 --> 01:16:17,000
going to be kind of like JSON, right?

2114
01:16:17,000 --> 01:16:19,000
So you can imagine the response as

2115
01:16:19,000 --> 01:16:21,000
just like big JSON object

2116
01:16:21,000 --> 01:16:23,000
except that would not be efficient because then

2117
01:16:23,000 --> 01:16:25,000
you would have to wait for that entire

2118
01:16:25,000 --> 01:16:27,000
object before you can like start

2119
01:16:27,000 --> 01:16:29,000
rendering it properly

2120
01:16:29,000 --> 01:16:31,000
Our protocol is just

2121
01:16:31,000 --> 01:16:33,000
a thing that splits this JSON into

2122
01:16:33,000 --> 01:16:35,000
parts. It's like JSON

2123
01:16:35,000 --> 01:16:37,000
with holes. So it says like here's

2124
01:16:37,000 --> 01:16:39,000
a hole that's going to be filled in later

2125
01:16:39,000 --> 01:16:41,000
and so they're sent as

2126
01:16:41,000 --> 01:16:43,000
they become available it sends more

2127
01:16:43,000 --> 01:16:45,000
and more. But conceptually it's more

2128
01:16:45,000 --> 01:16:47,000
like you know

2129
01:16:47,000 --> 01:16:49,000
filling in the remaining content. It's

2130
01:16:49,000 --> 01:16:51,000
not so much like it's not imperative

2131
01:16:51,000 --> 01:16:53,000
as like do this then do this.

2132
01:16:53,000 --> 01:16:55,000
It's just filling in the parts as

2133
01:16:55,000 --> 01:16:57,000
they become available.

2134
01:16:57,000 --> 01:16:59,000
Yep. Yeah I kind of say instructions

2135
01:16:59,000 --> 01:17:01,000
where it's like React is going to

2136
01:17:01,000 --> 01:17:03,000
take this blob and convert it

2137
01:17:03,000 --> 01:17:05,000
to JSX which becomes

2138
01:17:05,000 --> 01:17:07,000
actual like DOM queries to

2139
01:17:07,000 --> 01:17:09,000
render stuff on the page. But

2140
01:17:09,000 --> 01:17:11,000
I agree it's like

2141
01:17:11,000 --> 01:17:13,000
it's not just the data

2142
01:17:13,000 --> 01:17:15,000
it's the HTML

2143
01:17:15,000 --> 01:17:17,000
in a different shape. It's actually

2144
01:17:17,000 --> 01:17:19,000
filtering out what needs to be rendered

2145
01:17:19,000 --> 01:17:21,000
based on well what are you trying to

2146
01:17:21,000 --> 01:17:23,000
render? Like you're not going to use

2147
01:17:23,000 --> 01:17:25,000
we're not going to send the album image down the pipe

2148
01:17:25,000 --> 01:17:27,000
because you didn't render an image. You never

2149
01:17:27,000 --> 01:17:29,000
accessed it. So it's not sending

2150
01:17:29,000 --> 01:17:31,000
down like the album object. It's sending down

2151
01:17:31,000 --> 01:17:33,000
the values that have been

2152
01:17:33,000 --> 01:17:35,000
put in there.

2153
01:17:35,000 --> 01:17:37,000
I'm curious. Do you want to

2154
01:17:37,000 --> 01:17:39,000
kind of

2155
01:17:39,000 --> 01:17:41,000
show what happens if

2156
01:17:41,000 --> 01:17:43,000
we

2157
01:17:43,000 --> 01:17:45,000
if we kind of split it into the components

2158
01:17:45,000 --> 01:17:47,000
so that you can

2159
01:17:47,000 --> 01:17:49,000
delay. So you can send. Okay

2160
01:17:49,000 --> 01:17:51,000
yeah let's do that.

2161
01:17:51,000 --> 01:17:53,000
Let's see it.

2162
01:17:53,000 --> 01:17:55,000
I mean I can type

2163
01:17:55,000 --> 01:17:57,000
it out since I think all we have to do is this.

2164
01:17:57,000 --> 01:17:59,000
So now I'm going to make

2165
01:17:59,000 --> 01:18:01,000
a separate albums call and

2166
01:18:01,000 --> 01:18:03,000
Perdo's curious like

2167
01:18:03,000 --> 01:18:05,000
you know a wait is always going to be

2168
01:18:05,000 --> 01:18:07,000
a blocking thing. It's not going to send

2169
01:18:07,000 --> 01:18:09,000
this until this is done.

2170
01:18:09,000 --> 01:18:11,000
So if you wanted to

2171
01:18:11,000 --> 01:18:13,000
you know delay that or control

2172
01:18:13,000 --> 01:18:15,000
when this runs you can move the query

2173
01:18:15,000 --> 01:18:17,000
somewhere else or even pass down the promise

2174
01:18:17,000 --> 01:18:19,000
as a prop which is something that I've

2175
01:18:19,000 --> 01:18:21,000
seen the experiments with.

2176
01:18:21,000 --> 01:18:23,000
And in here I'm going

2177
01:18:23,000 --> 01:18:25,000
to just pass down the list

2178
01:18:25,000 --> 01:18:27,000
without the other stuff.

2179
01:18:27,000 --> 01:18:29,000
And do you want me

2180
01:18:29,000 --> 01:18:31,000
to put a suspense around this or just put

2181
01:18:31,000 --> 01:18:33,000
albums. Let's maybe start

2182
01:18:33,000 --> 01:18:35,000
with just albums and then we'll add

2183
01:18:35,000 --> 01:18:37,000
suspense and see how it changes

2184
01:18:37,000 --> 01:18:39,000
things. Okay. Oh it's

2185
01:18:39,000 --> 01:18:41,000
thinking that's the thing.

2186
01:18:41,000 --> 01:18:43,000
There we go.

2187
01:18:43,000 --> 01:18:45,000
Too helpful.

2188
01:18:45,000 --> 01:18:47,000
And don't worry about the

2189
01:18:47,000 --> 01:18:49,000
squiggle. That's just because

2190
01:18:49,000 --> 01:18:51,000
it doesn't know about async being a thing.

2191
01:18:51,000 --> 01:18:53,000
I know that's like a patch you can

2192
01:18:53,000 --> 01:18:55,000
make in next JS.

2193
01:18:55,000 --> 01:18:57,000
But yeah what we get here.

2194
01:18:57,000 --> 01:18:59,000
I think you want to get rid of this line too right.

2195
01:18:59,000 --> 01:19:01,000
Oh you're totally right.

2196
01:19:01,000 --> 01:19:03,000
Yeah.

2197
01:19:03,000 --> 01:19:05,000
Okay that's better.

2198
01:19:05,000 --> 01:19:07,000
So now yeah everything comes down in

2199
01:19:07,000 --> 01:19:09,000
one chunk it looks like.

2200
01:19:09,000 --> 01:19:11,000
And this isn't split perfectly.

2201
01:19:11,000 --> 01:19:13,000
This was supposed to split out like this

2202
01:19:13,000 --> 01:19:15,000
part from this part. I'm still trying to figure out how

2203
01:19:15,000 --> 01:19:17,000
to parse it because sometimes things come so

2204
01:19:17,000 --> 01:19:19,000
quickly it's like part of the same message.

2205
01:19:19,000 --> 01:19:21,000
But generally

2206
01:19:21,000 --> 01:19:23,000
what you're going to get is like you're going to get

2207
01:19:23,000 --> 01:19:25,000
the welcome to server components and then

2208
01:19:25,000 --> 01:19:27,000
immediately you're going to get

2209
01:19:27,000 --> 01:19:29,000
the next chunk and

2210
01:19:29,000 --> 01:19:31,000
you're going to load in tandem.

2211
01:19:31,000 --> 01:19:33,000
Yeah so what I want to call attention to

2212
01:19:33,000 --> 01:19:35,000
can I

2213
01:19:35,000 --> 01:19:37,000
like yeah.

2214
01:19:37,000 --> 01:19:39,000
So what I want to call attention to is like this

2215
01:19:39,000 --> 01:19:41,000
protocol that you're showing in the dev panel

2216
01:19:41,000 --> 01:19:43,000
like that's an implementation detail

2217
01:19:43,000 --> 01:19:45,000
so it's not actually something you're supposed to

2218
01:19:45,000 --> 01:19:47,000
be able to like read or care about

2219
01:19:47,000 --> 01:19:49,000
except for I don't know maybe some kind of debugging

2220
01:19:49,000 --> 01:19:51,000
but mostly if you're debugging

2221
01:19:51,000 --> 01:19:53,000
React like if you're working on React yes

2222
01:19:53,000 --> 01:19:55,000
that's useful but it's not something we want

2223
01:19:55,000 --> 01:19:57,000
you to kind of think about and it's going to change

2224
01:19:57,000 --> 01:19:59,000
over time it's not you know it's not

2225
01:19:59,000 --> 01:20:01,000
super optimized yet.

2226
01:20:01,000 --> 01:20:03,000
But if we're

2227
01:20:03,000 --> 01:20:05,000
using it as an instructional tool

2228
01:20:05,000 --> 01:20:07,000
you know to kind of teach how this works

2229
01:20:07,000 --> 01:20:09,000
I think it's interesting to notice

2230
01:20:09,000 --> 01:20:11,000
yeah I see your formatting

2231
01:20:11,000 --> 01:20:13,000
is a bit messed up because you see it says

2232
01:20:13,000 --> 01:20:15,000
0 colon blah blah

2233
01:20:15,000 --> 01:20:17,000
blah and then it says 1 colon blah blah

2234
01:20:17,000 --> 01:20:19,000
blah I think those were supposed to be separate

2235
01:20:19,000 --> 01:20:21,000
lines because like in the response

2236
01:20:21,000 --> 01:20:23,000
there are separate lines

2237
01:20:23,000 --> 01:20:25,000
but I want you to notice how it's

2238
01:20:25,000 --> 01:20:27,000
structured like do you notice

2239
01:20:27,000 --> 01:20:29,000
it's like

2240
01:20:29,000 --> 01:20:31,000
0 is like the first line

2241
01:20:31,000 --> 01:20:33,000
and it says at 1

2242
01:20:33,000 --> 01:20:35,000
and I don't remember the exact syntax again

2243
01:20:35,000 --> 01:20:37,000
that's not the point but it kind of references

2244
01:20:37,000 --> 01:20:39,000
like this is a hole it says like

2245
01:20:39,000 --> 01:20:41,000
the result of 0 is

2246
01:20:41,000 --> 01:20:43,000
going to be streamed under

2247
01:20:43,000 --> 01:20:45,000
number 1 and then you see like number

2248
01:20:45,000 --> 01:20:47,000
1 says you need

2249
01:20:47,000 --> 01:20:49,000
to have like a header with

2250
01:20:49,000 --> 01:20:51,000
welcome to server components

2251
01:20:51,000 --> 01:20:53,000
and then the rest is going to be streamed under

2252
01:20:53,000 --> 01:20:55,000
number 2 you see it says like

2253
01:20:55,000 --> 01:20:57,000
L2 is like I don't remember

2254
01:20:57,000 --> 01:20:59,000
what L means but it says

2255
01:20:59,000 --> 01:21:01,000
that that's going to be coming later and then

2256
01:21:01,000 --> 01:21:03,000
2 is like the remaining response

2257
01:21:03,000 --> 01:21:05,000
and so these are these like

2258
01:21:05,000 --> 01:21:07,000
that's the key thing that makes it possible

2259
01:21:07,000 --> 01:21:09,000
to stream parts because we just leave

2260
01:21:09,000 --> 01:21:11,000
holes and we're like yeah this thing

2261
01:21:11,000 --> 01:21:13,000
number 42 is going to be filled in later

2262
01:21:13,000 --> 01:21:15,000
and then we're able to like stream

2263
01:21:15,000 --> 01:21:17,000
that part

2264
01:21:17,000 --> 01:21:19,000
yep and yeah I agree

2265
01:21:19,000 --> 01:21:21,000
like you're not going to be looking at this

2266
01:21:21,000 --> 01:21:23,000
I didn't really care about the formatting so much

2267
01:21:23,000 --> 01:21:25,000
as like what data is coming down

2268
01:21:25,000 --> 01:21:27,000
and what's the order

2269
01:21:27,000 --> 01:21:29,000
like this data came down a second later

2270
01:21:29,000 --> 01:21:31,000
why and

2271
01:21:31,000 --> 01:21:33,000
yeah the dev tools are split up by like

2272
01:21:33,000 --> 01:21:35,000
the order to stream comes in

2273
01:21:35,000 --> 01:21:37,000
and I don't split it up by these like numbers

2274
01:21:37,000 --> 01:21:39,000
but that's the indicator

2275
01:21:39,000 --> 01:21:41,000
that's where the holes are which is probably what you're looking

2276
01:21:41,000 --> 01:21:43,000
for if you're thinking like

2277
01:21:43,000 --> 01:21:45,000
first bit is this second bit is this

2278
01:21:45,000 --> 01:21:47,000
and you can see like 2 matches up with 2

2279
01:21:47,000 --> 01:21:49,000
and all that stuff

2280
01:21:49,000 --> 01:21:51,000
maybe if I add the

2281
01:21:51,000 --> 01:21:53,000
pre wrap

2282
01:21:53,000 --> 01:21:55,000
or whatever the CSS thing to preserve

2283
01:21:55,000 --> 01:21:57,000
new lines maybe then it will

2284
01:21:57,000 --> 01:21:59,000
split 0 and 1 because

2285
01:21:59,000 --> 01:22:01,000
0 and 1 are I think they arrive

2286
01:22:01,000 --> 01:22:03,000
in the same response chunk

2287
01:22:03,000 --> 01:22:05,000
but they are like separate lines

2288
01:22:05,000 --> 01:22:07,000
they're separate things

2289
01:22:07,000 --> 01:22:09,000
but it doesn't matter

2290
01:22:09,000 --> 01:22:11,000
it doesn't matter

2291
01:22:11,000 --> 01:22:13,000
and sometimes changes where it's like

2292
01:22:13,000 --> 01:22:15,000
I decided this chunk should load with

2293
01:22:15,000 --> 01:22:17,000
the next one and sometimes it's like no it's more

2294
01:22:17,000 --> 01:22:19,000
efficient to put it up here so there's some

2295
01:22:19,000 --> 01:22:21,000
optimization going on but

2296
01:22:21,000 --> 01:22:23,000
in this example am I right

2297
01:22:23,000 --> 01:22:25,000
that at least as

2298
01:22:25,000 --> 01:22:27,000
the user sees it you're going

2299
01:22:27,000 --> 01:22:29,000
to see all of this stuff coming in

2300
01:22:29,000 --> 01:22:31,000
at once like you're not

2301
01:22:31,000 --> 01:22:33,000
going to see like one then the next

2302
01:22:33,000 --> 01:22:35,000
exactly

2303
01:22:35,000 --> 01:22:37,000
and the idea here is

2304
01:22:39,000 --> 01:22:41,000
the way you structure

2305
01:22:41,000 --> 01:22:43,000
your

2306
01:22:43,000 --> 01:22:45,000
the way you decide

2307
01:22:45,000 --> 01:22:47,000
which components do what kind of data

2308
01:22:47,000 --> 01:22:49,000
fetching and like moving

2309
01:22:49,000 --> 01:22:51,000
data fetching calls between them should not

2310
01:22:51,000 --> 01:22:53,000
affect the visual output for

2311
01:22:53,000 --> 01:22:55,000
the user because

2312
01:22:55,000 --> 01:22:57,000
I think that is like

2313
01:22:57,000 --> 01:22:59,000
there's a bunch of things we've learned that

2314
01:22:59,000 --> 01:23:01,000
we haven't communicated super well

2315
01:23:01,000 --> 01:23:03,000
but I think like this is one of them

2316
01:23:03,000 --> 01:23:05,000
like you want to have the freedom to move

2317
01:23:05,000 --> 01:23:07,000
the data fetching code around

2318
01:23:07,000 --> 01:23:09,000
without any effect on the

2319
01:23:09,000 --> 01:23:11,000
user experience or like the way

2320
01:23:11,000 --> 01:23:13,000
the user perceives it and then

2321
01:23:13,000 --> 01:23:15,000
you want the people who are not necessarily

2322
01:23:15,000 --> 01:23:17,000
super skilled

2323
01:23:17,000 --> 01:23:19,000
in like how data fetching

2324
01:23:19,000 --> 01:23:21,000
works like you know like a designer

2325
01:23:21,000 --> 01:23:23,000
to be able to

2326
01:23:23,000 --> 01:23:25,000
say I want like this piece

2327
01:23:25,000 --> 01:23:27,000
of JSX to have its own

2328
01:23:27,000 --> 01:23:29,000
loading indicator

2329
01:23:29,000 --> 01:23:31,000
like its own skeleton

2330
01:23:31,000 --> 01:23:33,000
and to be able to do that completely

2331
01:23:33,000 --> 01:23:35,000
declaratively just by

2332
01:23:35,000 --> 01:23:37,000
you know putting it into JSX

2333
01:23:37,000 --> 01:23:39,000
tree without worrying about

2334
01:23:39,000 --> 01:23:41,000
how you know how it's

2335
01:23:41,000 --> 01:23:43,000
how it's actually kind of streamed

2336
01:23:43,000 --> 01:23:45,000
in so the

2337
01:23:45,000 --> 01:23:47,000
way the loading the progression

2338
01:23:47,000 --> 01:23:49,000
the loading sequence that

2339
01:23:49,000 --> 01:23:51,000
the user sees

2340
01:23:51,000 --> 01:23:53,000
like the visual loading sequence

2341
01:23:53,000 --> 01:23:55,000
is completely decoupled

2342
01:23:55,000 --> 01:23:57,000
from you know the

2343
01:23:57,000 --> 01:23:59,000
the streaming sequence because

2344
01:23:59,000 --> 01:24:01,000
for streaming we want to stream as

2345
01:24:01,000 --> 01:24:03,000
much as we can as early as we

2346
01:24:03,000 --> 01:24:05,000
can as we discover things

2347
01:24:05,000 --> 01:24:07,000
but then you know to the user we

2348
01:24:07,000 --> 01:24:09,000
want to present them like each visual state

2349
01:24:09,000 --> 01:24:11,000
should be intentional and only

2350
01:24:11,000 --> 01:24:13,000
correspond to what the user actually wants to see

2351
01:24:15,000 --> 01:24:17,000
Yeah and definitely

2352
01:24:17,000 --> 01:24:19,000
seeing that here and I know that

2353
01:24:19,000 --> 01:24:21,000
as you sort of cascade down

2354
01:24:21,000 --> 01:24:23,000
multiple fetch calls it's

2355
01:24:23,000 --> 01:24:25,000
really just going to wait for everything before

2356
01:24:25,000 --> 01:24:27,000
going to the user if you aren't suspending

2357
01:24:27,000 --> 01:24:29,000
if you aren't doing anything like that

2358
01:24:29,000 --> 01:24:31,000
it's just going to bunch up all of those requests

2359
01:24:31,000 --> 01:24:33,000
and you can do a promise.all at the top

2360
01:24:33,000 --> 01:24:35,000
level if you really want to be smart

2361
01:24:35,000 --> 01:24:37,000
about like parallelizing each fetch

2362
01:24:37,000 --> 01:24:39,000
but that's exactly what

2363
01:24:39,000 --> 01:24:41,000
we're seeing here of like even though it's in the second

2364
01:24:41,000 --> 01:24:43,000
one it's all going to come down in one

2365
01:24:43,000 --> 01:24:45,000
big chunk and I alluded

2366
01:24:45,000 --> 01:24:47,000
to how you could avoid that

2367
01:24:47,000 --> 01:24:49,000
but well okay I say avoid

2368
01:24:49,000 --> 01:24:51,000
as if it's a bad thing this is actually

2369
01:24:51,000 --> 01:24:53,000
the behavior you probably do want

2370
01:24:53,000 --> 01:24:55,000
but if there is

2371
01:24:55,000 --> 01:24:57,000
like behavior

2372
01:24:57,000 --> 01:24:59,000
when would you say like

2373
01:24:59,000 --> 01:25:01,000
is a good use case for

2374
01:25:01,000 --> 01:25:03,000
wrapping something in a suspense boundary

2375
01:25:03,000 --> 01:25:05,000
it's probably pretty nuanced but

2376
01:25:05,000 --> 01:25:07,000
I'm curious if you have thoughts about

2377
01:25:07,000 --> 01:25:09,000
like where you found it. Yeah I would just say

2378
01:25:09,000 --> 01:25:11,000
like if it feels slow

2379
01:25:11,000 --> 01:25:13,000
because you have a slow data source

2380
01:25:13,000 --> 01:25:15,000
or there's

2381
01:25:15,000 --> 01:25:17,000
a lot of logic that needs to be downloaded

2382
01:25:17,000 --> 01:25:19,000
it's like suspense also

2383
01:25:19,000 --> 01:25:21,000
works for client

2384
01:25:21,000 --> 01:25:23,000
like it's integrated with everything

2385
01:25:23,000 --> 01:25:25,000
right like we're going to integrate it with CSS

2386
01:25:25,000 --> 01:25:27,000
we're already integrating it with images

2387
01:25:27,000 --> 01:25:29,000
so it's already

2388
01:25:29,000 --> 01:25:31,000
integrated with code it's like if you

2389
01:25:31,000 --> 01:25:33,000
render a like button component

2390
01:25:33,000 --> 01:25:35,000
it's a client component and the suspense

2391
01:25:35,000 --> 01:25:37,000
is going to wait automatically

2392
01:25:37,000 --> 01:25:39,000
for that client code

2393
01:25:39,000 --> 01:25:41,000
to load even if it's code split

2394
01:25:41,000 --> 01:25:43,000
like it is code split by

2395
01:25:43,000 --> 01:25:45,000
default like if you import a client

2396
01:25:45,000 --> 01:25:47,000
component from a server component

2397
01:25:47,000 --> 01:25:49,000
it's like there is no

2398
01:25:49,000 --> 01:25:51,000
need to do code splitting it's just code splitting

2399
01:25:51,000 --> 01:25:53,000
is how it works and so it's

2400
01:25:53,000 --> 01:25:55,000
going to wait for that

2401
01:25:55,000 --> 01:25:57,000
code and any data and

2402
01:25:57,000 --> 01:25:59,000
in the future like CSS or images

2403
01:25:59,000 --> 01:26:01,000
to be ready and then

2404
01:26:01,000 --> 01:26:03,000
it flips you know it makes it visible when like

2405
01:26:03,000 --> 01:26:05,000
all the things in that tree resolve

2406
01:26:05,000 --> 01:26:07,000
so I think pragmatically speaking

2407
01:26:07,000 --> 01:26:09,000
it's just you have something that loads

2408
01:26:09,000 --> 01:26:11,000
that takes a bit of time you don't know why

2409
01:26:11,000 --> 01:26:13,000
it takes a bit of time but actually it doesn't matter

2410
01:26:13,000 --> 01:26:15,000
you just wrap it in suspense

2411
01:26:15,000 --> 01:26:17,000
and that kind of lets you unblock

2412
01:26:17,000 --> 01:26:19,000
the rest it's like here's a slow

2413
01:26:19,000 --> 01:26:21,000
part I have some

2414
01:26:21,000 --> 01:26:23,000
I asked the designer like I am the

2415
01:26:23,000 --> 01:26:25,000
designer I designed some visual skeleton

2416
01:26:25,000 --> 01:26:27,000
for that thing I'm just going to plug

2417
01:26:27,000 --> 01:26:29,000
it in here

2418
01:26:29,000 --> 01:26:31,000
yeah I think that's really

2419
01:26:31,000 --> 01:26:33,000
cool that y'all are just seeing is like any

2420
01:26:33,000 --> 01:26:35,000
slow data source no matter what it is

2421
01:26:35,000 --> 01:26:37,000
I don't know what it would look like to say like

2422
01:26:37,000 --> 01:26:39,000
wrapping a style

2423
01:26:39,000 --> 01:26:41,000
sheet in suspense

2424
01:26:41,000 --> 01:26:43,000
or something like that but

2425
01:26:43,000 --> 01:26:45,000
that would be more

2426
01:26:45,000 --> 01:26:47,000
automatic so if you imagine

2427
01:26:47,000 --> 01:26:49,000
for example a component

2428
01:26:49,000 --> 01:26:51,000
imports like a

2429
01:26:51,000 --> 01:26:53,000
CSS module or something like this

2430
01:26:53,000 --> 01:26:55,000
and or

2431
01:26:55,000 --> 01:26:57,000
like some kind of static CSS

2432
01:26:57,000 --> 01:26:59,000
and JS with like static extraction

2433
01:26:59,000 --> 01:27:01,000
then you could imagine

2434
01:27:01,000 --> 01:27:03,000
a compiler or like a framework

2435
01:27:03,000 --> 01:27:05,000
would put the link

2436
01:27:05,000 --> 01:27:07,000
tag for the style sheet

2437
01:27:07,000 --> 01:27:09,000
into component output automatically

2438
01:27:09,000 --> 01:27:11,000
and then the React would know to

2439
01:27:11,000 --> 01:27:13,000
wait for that CSS to

2440
01:27:13,000 --> 01:27:15,000
load before it can display the

2441
01:27:15,000 --> 01:27:17,000
component it would put the link tag into

2442
01:27:17,000 --> 01:27:19,000
the head or something like this

2443
01:27:19,000 --> 01:27:21,000
so it would be automatic it's not something you think about

2444
01:27:21,000 --> 01:27:23,000
but it's just

2445
01:27:23,000 --> 01:27:25,000
it's just better than the

2446
01:27:25,000 --> 01:27:27,000
current best practice of

2447
01:27:27,000 --> 01:27:29,000
like either you load

2448
01:27:29,000 --> 01:27:31,000
all CSS in the beginning

2449
01:27:31,000 --> 01:27:33,000
for like the entire app or

2450
01:27:33,000 --> 01:27:35,000
you do some kind of

2451
01:27:35,000 --> 01:27:37,000
you do some kind of split

2452
01:27:37,000 --> 01:27:39,000
in but then JavaScript can't

2453
01:27:39,000 --> 01:27:41,000
even start executing

2454
01:27:41,000 --> 01:27:43,000
for like independently of CSS

2455
01:27:43,000 --> 01:27:45,000
because like they're grouped together

2456
01:27:45,000 --> 01:27:47,000
and like you want

2457
01:27:47,000 --> 01:27:49,000
to have this ability of start executing

2458
01:27:49,000 --> 01:27:51,000
JavaScript even before CSS loads

2459
01:27:51,000 --> 01:27:53,000
but then hold back

2460
01:27:53,000 --> 01:27:55,000
the rendering until we actually

2461
01:27:55,000 --> 01:27:57,000
have the CSS so that the user doesn't

2462
01:27:57,000 --> 01:27:59,000
see unstyled content so this

2463
01:27:59,000 --> 01:28:01,000
would be automatic or another example

2464
01:28:01,000 --> 01:28:03,000
is like you have an image tag

2465
01:28:03,000 --> 01:28:05,000
for example of like profile cover

2466
01:28:05,000 --> 01:28:07,000
and you might want to kind of hold

2467
01:28:07,000 --> 01:28:09,000
back showing the thing

2468
01:28:09,000 --> 01:28:11,000
until you have the image

2469
01:28:11,000 --> 01:28:13,000
you know unless it's like super slow or

2470
01:28:13,000 --> 01:28:15,000
like there would be like a way to opt out

2471
01:28:15,000 --> 01:28:17,000
so you would be don't wait for this image

2472
01:28:17,000 --> 01:28:19,000
yeah that's the clearer one

2473
01:28:19,000 --> 01:28:21,000
to me because I would love to have an API

2474
01:28:21,000 --> 01:28:23,000
that's like suspense

2475
01:28:25,000 --> 01:28:27,000
suspense fallback

2476
01:28:27,000 --> 01:28:29,000
like blurred image

2477
01:28:29,000 --> 01:28:31,000
and then inside of this

2478
01:28:31,000 --> 01:28:33,000
is like the real image

2479
01:28:33,000 --> 01:28:35,000
that we're going to wait on

2480
01:28:35,000 --> 01:28:37,000
and that's conceptually what it's doing I'm sure

2481
01:28:37,000 --> 01:28:39,000
you wouldn't just pass in blurred image

2482
01:28:39,000 --> 01:28:41,000
but it would be

2483
01:28:41,000 --> 01:28:43,000
it's that hook

2484
01:28:43,000 --> 01:28:45,000
to not ship like

2485
01:28:45,000 --> 01:28:47,000
the massive Gatsby image component to the client

2486
01:28:47,000 --> 01:28:49,000
that does all of these fancy fetches

2487
01:28:49,000 --> 01:28:51,000
like it's just telling the server

2488
01:28:51,000 --> 01:28:53,000
stream in the blurred image then stream

2489
01:28:53,000 --> 01:28:55,000
in the regular image when you're done

2490
01:28:55,000 --> 01:28:57,000
yeah that's one way to do it

2491
01:28:57,000 --> 01:28:59,000
but I think like it also

2492
01:28:59,000 --> 01:29:01,000
it doesn't necessarily have to do with

2493
01:29:01,000 --> 01:29:03,000
blurred images like I think you can

2494
01:29:03,000 --> 01:29:05,000
think of this like blurred images

2495
01:29:05,000 --> 01:29:07,000
as a kind of next level

2496
01:29:07,000 --> 01:29:09,000
optimization that you could do

2497
01:29:09,000 --> 01:29:11,000
but just the capability of

2498
01:29:11,000 --> 01:29:13,000
being able to say

2499
01:29:13,000 --> 01:29:15,000
like don't show until this image

2500
01:29:15,000 --> 01:29:17,000
is ready

2501
01:29:17,000 --> 01:29:19,000
like wait for it

2502
01:29:19,000 --> 01:29:21,000
to pop in

2503
01:29:21,000 --> 01:29:23,000
and then that could be a blurred one

2504
01:29:23,000 --> 01:29:25,000
if you want to make it

2505
01:29:25,000 --> 01:29:27,000
you know like faster

2506
01:29:27,000 --> 01:29:29,000
or it could be that you actually

2507
01:29:29,000 --> 01:29:31,000
wait for the whole thing

2508
01:29:31,000 --> 01:29:33,000
you know with a normal

2509
01:29:33,000 --> 01:29:35,000
image but then you do have blurred one

2510
01:29:35,000 --> 01:29:37,000
as like a placeholder so it really depends

2511
01:29:37,000 --> 01:29:39,000
on like how you put it so

2512
01:29:39,000 --> 01:29:41,000
we'll see but the capability

2513
01:29:41,000 --> 01:29:43,000
like the important part is just like

2514
01:29:43,000 --> 01:29:45,000
it would be hooked up automatically

2515
01:29:45,000 --> 01:29:47,000
to the suspense so suspense

2516
01:29:47,000 --> 01:29:49,000
would act as you know you

2517
01:29:49,000 --> 01:29:51,000
declaratively specify this is

2518
01:29:51,000 --> 01:29:53,000
what I want to see if something

2519
01:29:53,000 --> 01:29:55,000
inside is not ready and then something

2520
01:29:55,000 --> 01:29:57,000
could be like data, it could be code

2521
01:29:57,000 --> 01:29:59,000
it could be images, it could be stylesheets

2522
01:29:59,000 --> 01:30:01,000
it's like anything asynchronous can

2523
01:30:01,000 --> 01:30:03,000
work and you don't have to like do it

2524
01:30:03,000 --> 01:30:05,000
in your head all the time

2525
01:30:05,000 --> 01:30:07,000
yeah

2526
01:30:07,000 --> 01:30:09,000
and that does feel like the message I've been

2527
01:30:09,000 --> 01:30:11,000
getting from Next.js where it's like you know

2528
01:30:11,000 --> 01:30:13,000
don't worry about deployment target

2529
01:30:13,000 --> 01:30:15,000
that's automatic with how you're doing your fetch

2530
01:30:15,000 --> 01:30:17,000
calls, don't worry about

2531
01:30:17,000 --> 01:30:19,000
image optimization, just use the defaults

2532
01:30:19,000 --> 01:30:21,000
and it'll load in the correct

2533
01:30:21,000 --> 01:30:23,000
like webp, avif, whatever

2534
01:30:23,000 --> 01:30:25,000
because

2535
01:30:25,000 --> 01:30:27,000
these are decisions like

2536
01:30:27,000 --> 01:30:29,000
we can make when there's a problem

2537
01:30:29,000 --> 01:30:31,000
but a vast majority of the time

2538
01:30:31,000 --> 01:30:33,000
we don't need to make it ourselves

2539
01:30:33,000 --> 01:30:35,000
like there is a default that the framework

2540
01:30:35,000 --> 01:30:37,000
knows about and it can probably just go ahead

2541
01:30:37,000 --> 01:30:39,000
and do it

2542
01:30:39,000 --> 01:30:41,000
yep

2543
01:30:41,000 --> 01:30:43,000
yeah and I also never demo what this actually

2544
01:30:43,000 --> 01:30:45,000
does and I'm realizing these annotations

2545
01:30:45,000 --> 01:30:47,000
are completely wrong, I'm going to revisit this

2546
01:30:47,000 --> 01:30:49,000
but the main thing

2547
01:30:49,000 --> 01:30:51,000
that we're getting over here is like

2548
01:30:51,000 --> 01:30:53,000
we get our welcome to server components

2549
01:30:53,000 --> 01:30:55,000
and then a flash of fetching albums

2550
01:30:55,000 --> 01:30:57,000
until the albums come down

2551
01:30:57,000 --> 01:30:59,000
and then the only difference in the

2552
01:30:59,000 --> 01:31:01,000
response is that now we have

2553
01:31:01,000 --> 01:31:03,000
this like react suspense

2554
01:31:03,000 --> 01:31:05,000
idea where what I'm assuming

2555
01:31:05,000 --> 01:31:07,000
happens is like if

2556
01:31:07,000 --> 01:31:09,000
it is wrapped in suspense

2557
01:31:09,000 --> 01:31:11,000
it's going to say alright here's that hole

2558
01:31:11,000 --> 01:31:13,000
that you mentioned, here's that

2559
01:31:13,000 --> 01:31:15,000
separate component that you're going to

2560
01:31:15,000 --> 01:31:17,000
slot in when it comes down the pipe

2561
01:31:17,000 --> 01:31:19,000
but I have a fallback for you while you're waiting for

2562
01:31:19,000 --> 01:31:21,000
that, don't like block rendering

2563
01:31:21,000 --> 01:31:23,000
the whole page to the browser, actually

2564
01:31:23,000 --> 01:31:25,000
go ahead and render everything before this

2565
01:31:25,000 --> 01:31:27,000
show this fallback

2566
01:31:27,000 --> 01:31:29,000
and then L3 is going to match up with this 3

2567
01:31:29,000 --> 01:31:31,000
that comes down 300

2568
01:31:31,000 --> 01:31:33,000
milliseconds later based on how we have it set up

2569
01:31:33,000 --> 01:31:35,000
so it's just letting the server

2570
01:31:35,000 --> 01:31:37,000
like show something in the meantime

2571
01:31:37,000 --> 01:31:39,000
and stop blocking if it was actually an issue

2572
01:31:39,000 --> 01:31:41,000
maybe you can increase the delay

2573
01:31:41,000 --> 01:31:43,000
a little bit and then it would be

2574
01:31:43,000 --> 01:31:45,000
more obvious because it's kind of

2575
01:31:45,000 --> 01:31:47,000
really fast now

2576
01:31:47,000 --> 01:31:49,000
yeah and if it

2577
01:31:49,000 --> 01:31:51,000
I know, and if your delay is that

2578
01:31:51,000 --> 01:31:53,000
low you probably don't need suspense

2579
01:31:53,000 --> 01:31:55,000
I don't really know what the threshold is but you feel it out

2580
01:31:55,000 --> 01:31:57,000
so I set it up here

2581
01:31:57,000 --> 01:31:59,000
let's see what that does

2582
01:31:59,000 --> 01:32:01,000
did it not

2583
01:32:01,000 --> 01:32:03,000
oh I don't think it's watching, that's the issue

2584
01:32:03,000 --> 01:32:05,000
yep I think my

2585
01:32:05,000 --> 01:32:07,000
file watcher is only looking at source

2586
01:32:07,000 --> 01:32:09,000
but yeah there we go, now we

2587
01:32:09,000 --> 01:32:11,000
see like a full 2 second delay

2588
01:32:11,000 --> 01:32:13,000
maybe it's getting from like the Discogs

2589
01:32:13,000 --> 01:32:15,000
legacy API which is

2590
01:32:15,000 --> 01:32:17,000
slow, I've used it before

2591
01:32:17,000 --> 01:32:19,000
but yeah

2592
01:32:19,000 --> 01:32:21,000
now you get like fetching albums

2593
01:32:21,000 --> 01:32:23,000
maybe it's a beautiful skeleton that you designed

2594
01:32:23,000 --> 01:32:25,000
and then the 3 is going to become

2595
01:32:25,000 --> 01:32:27,000
this 3 as soon as it's ready

2596
01:32:27,000 --> 01:32:29,000
but now we have a fallback so it doesn't have to

2597
01:32:29,000 --> 01:32:31,000
wait on it

2598
01:32:31,000 --> 01:32:33,000
yep

2599
01:32:33,000 --> 01:32:35,000
cool stuff

2600
01:32:35,000 --> 01:32:37,000
so I mean that's a basic demo

2601
01:32:37,000 --> 01:32:39,000
of like suspense and fallbacks

2602
01:32:39,000 --> 01:32:41,000
I

2603
01:32:41,000 --> 01:32:43,000
well one thing I can do is

2604
01:32:43,000 --> 01:32:45,000
actually top this off with an image

2605
01:32:45,000 --> 01:32:47,000
on the top and then

2606
01:32:47,000 --> 01:32:49,000
I was curious to get into how I could

2607
01:32:49,000 --> 01:32:51,000
generate a search bar for this

2608
01:32:51,000 --> 01:32:53,000
and what would be involved in that

2609
01:32:55,000 --> 01:32:57,000
and I'll go ahead and do

2610
01:32:57,000 --> 01:32:59,000
I think album.

2611
01:32:59,000 --> 01:33:01,000
what do I call it, cover?

2612
01:33:01,000 --> 01:33:03,000
autocomplete

2613
01:33:03,000 --> 01:33:05,000
alt

2614
01:33:05,000 --> 01:33:07,000
that

2615
01:33:07,000 --> 01:33:09,000
album.title again

2616
01:33:09,000 --> 01:33:11,000
that should be good

2617
01:33:11,000 --> 01:33:13,000
now, well I'm going to

2618
01:33:13,000 --> 01:33:15,000
oh god there's no styling

2619
01:33:15,000 --> 01:33:17,000
let me see here

2620
01:33:17,000 --> 01:33:19,000
I tossed tailwind on top of this thing

2621
01:33:19,000 --> 01:33:21,000
just to make us move a little bit faster

2622
01:33:21,000 --> 01:33:23,000
so let's say class name

2623
01:33:23,000 --> 01:33:25,000
with like

2624
01:33:25,000 --> 01:33:27,000
20 just so we don't have to worry about that

2625
01:33:27,000 --> 01:33:29,000
let's see that

2626
01:33:29,000 --> 01:33:31,000
oh yeah way better

2627
01:33:31,000 --> 01:33:33,000
and also turn off the delay

2628
01:33:33,000 --> 01:33:35,000
so we can start working on this more easily

2629
01:33:37,000 --> 01:33:39,000
there we go

2630
01:33:39,000 --> 01:33:41,000
okay and now in our

2631
01:33:41,000 --> 01:33:43,000
server response now we're going to get the image

2632
01:33:43,000 --> 01:33:45,000
but before it's just not going to serialize

2633
01:33:45,000 --> 01:33:47,000
what you don't use

2634
01:33:47,000 --> 01:33:49,000
which is kind of the beauty of it

2635
01:33:49,000 --> 01:33:51,000
so yeah from here

2636
01:33:51,000 --> 01:33:53,000
how could I set up

2637
01:33:53,000 --> 01:33:55,000
a search filter that does it

2638
01:33:55,000 --> 01:33:57,000
maybe server side, maybe client side

2639
01:33:57,000 --> 01:33:59,000
yeah

2640
01:33:59,000 --> 01:34:01,000
so that's really

2641
01:34:01,000 --> 01:34:03,000
your choice

2642
01:34:03,000 --> 01:34:05,000
that's kind of the fun thing about it

2643
01:34:05,000 --> 01:34:07,000
you can do it either way

2644
01:34:07,000 --> 01:34:09,000
and there are different tradeoffs

2645
01:34:09,000 --> 01:34:11,000
so for example

2646
01:34:11,000 --> 01:34:13,000
if you have the entire list

2647
01:34:13,000 --> 01:34:15,000
let's say the thing

2648
01:34:15,000 --> 01:34:17,000
we're talking about is

2649
01:34:17,000 --> 01:34:19,000
it's mostly going to have maybe 50 albums

2650
01:34:19,000 --> 01:34:21,000
or something like this, you want to always load them all

2651
01:34:21,000 --> 01:34:23,000
then maybe

2652
01:34:23,000 --> 01:34:25,000
it makes sense to do client search because

2653
01:34:25,000 --> 01:34:27,000
well then it will be instant

2654
01:34:27,000 --> 01:34:29,000
so it would be, we could just filter on

2655
01:34:29,000 --> 01:34:31,000
the client and show the results

2656
01:34:31,000 --> 01:34:33,000
and that's one way we could go about it

2657
01:34:33,000 --> 01:34:35,000
on the other hand if you have

2658
01:34:35,000 --> 01:34:37,000
thousands of albums and they're

2659
01:34:37,000 --> 01:34:39,000
paginated or whatever

2660
01:34:39,000 --> 01:34:41,000
and you don't want to download them all

2661
01:34:41,000 --> 01:34:43,000
to the client

2662
01:34:43,000 --> 01:34:45,000
then it makes sense to make the search driven by

2663
01:34:45,000 --> 01:34:47,000
the server and just

2664
01:34:47,000 --> 01:34:49,000
pass down the

2665
01:34:49,000 --> 01:34:51,000
update the URL

2666
01:34:51,000 --> 01:34:53,000
as you actually do

2667
01:34:55,000 --> 01:34:57,000
each time you write into the input

2668
01:34:57,000 --> 01:34:59,000
you do a router navigation

2669
01:34:59,000 --> 01:35:01,000
through a different query

2670
01:35:01,000 --> 01:35:03,000
and then on the server you read the query

2671
01:35:03,000 --> 01:35:05,000
and you refresh

2672
01:35:05,000 --> 01:35:07,000
you just send the new output

2673
01:35:07,000 --> 01:35:09,000
so maybe we could do it both ways

2674
01:35:09,000 --> 01:35:11,000
and just compare them

2675
01:35:11,000 --> 01:35:13,000
how do you feel about that?

2676
01:35:13,000 --> 01:35:15,000
Yeah, we can

2677
01:35:15,000 --> 01:35:17,000
I don't know if the server way will work without

2678
01:35:17,000 --> 01:35:19,000
page refreshes

2679
01:35:19,000 --> 01:35:21,000
we have the Next.js

2680
01:35:21,000 --> 01:35:23,000
escape hatch in this repo

2681
01:35:23,000 --> 01:35:25,000
I put a Next app right up here

2682
01:35:25,000 --> 01:35:27,000
so if we need to we can just drag this in

2683
01:35:27,000 --> 01:35:29,000
I'm hoping

2684
01:35:29,000 --> 01:35:31,000
but yeah, I think starting with clients is a good idea

2685
01:35:31,000 --> 01:35:33,000
because we didn't even demo client yet

2686
01:35:33,000 --> 01:35:35,000
or how it even works

2687
01:35:35,000 --> 01:35:37,000
so I can make a separate file

2688
01:35:37,000 --> 01:35:39,000
for that

2689
01:35:39,000 --> 01:35:41,000
.jsx

2690
01:35:41,000 --> 01:35:43,000
and try to call you in here

2691
01:35:45,000 --> 01:35:47,000
and at the top

2692
01:35:47,000 --> 01:35:49,000
you just put use client

2693
01:35:49,000 --> 01:35:51,000
and sure

2694
01:35:53,000 --> 01:35:55,000
no

2695
01:35:55,000 --> 01:35:57,000
but close

2696
01:35:57,000 --> 01:35:59,000
well this will be

2697
01:35:59,000 --> 01:36:01,000
a search box so in this example

2698
01:36:01,000 --> 01:36:03,000
it would pass through all of the

2699
01:36:03,000 --> 01:36:05,000
album info as props I'm assuming

2700
01:36:05,000 --> 01:36:07,000
right? Where it comes from the server

2701
01:36:07,000 --> 01:36:09,000
and this is just

2702
01:36:09,000 --> 01:36:11,000
what do you want, like what component structure

2703
01:36:11,000 --> 01:36:13,000
do you have in mind? I think I'm not fully

2704
01:36:13,000 --> 01:36:15,000
understanding what do you

2705
01:36:15,000 --> 01:36:17,000
want to put where?

2706
01:36:17,000 --> 01:36:19,000
Yeah, so

2707
01:36:19,000 --> 01:36:21,000
the typical way that I would do it

2708
01:36:21,000 --> 01:36:23,000
is this is a client component

2709
01:36:23,000 --> 01:36:25,000
it receives the get

2710
01:36:25,000 --> 01:36:27,000
all result from the server

2711
01:36:27,000 --> 01:36:29,000
so all the albums come in here

2712
01:36:29,000 --> 01:36:31,000
and then it has a form input

2713
01:36:31,000 --> 01:36:33,000
that will filter what's showing

2714
01:36:33,000 --> 01:36:35,000
and then it would render what?

2715
01:36:35,000 --> 01:36:37,000
It would

2716
01:36:37,000 --> 01:36:39,000
render either

2717
01:36:39,000 --> 01:36:41,000
all the albums or the results

2718
01:36:41,000 --> 01:36:43,000
like if your input's blank it would show all

2719
01:36:43,000 --> 01:36:45,000
of them and then as you start typing it would

2720
01:36:45,000 --> 01:36:47,000
filter based on the title

2721
01:36:47,000 --> 01:36:49,000
Yeah, I think I just got confused

2722
01:36:49,000 --> 01:36:51,000
by the file name because it's like album

2723
01:36:51,000 --> 01:36:53,000
but I think it's essentially like searchable

2724
01:36:53,000 --> 01:36:55,000
list or something like this

2725
01:36:55,000 --> 01:36:57,000
Yeah, I think

2726
01:36:57,000 --> 01:36:59,000
that's a good idea

2727
01:36:59,000 --> 01:37:01,000
searchable, yeah searchable list

2728
01:37:01,000 --> 01:37:03,000
is fine

2729
01:37:03,000 --> 01:37:05,000
You like short names

2730
01:37:05,000 --> 01:37:07,000
I do, sometimes

2731
01:37:07,000 --> 01:37:09,000
I either go really short like

2732
01:37:09,000 --> 01:37:11,000
search or really long like searchable album

2733
01:37:11,000 --> 01:37:13,000
list. Yeah, searchable album list

2734
01:37:13,000 --> 01:37:15,000
is nice

2735
01:37:15,000 --> 01:37:17,000
like on the homepage

2736
01:37:17,000 --> 01:37:19,000
I don't know if you've noticed like on the React homepage

2737
01:37:19,000 --> 01:37:21,000
we have kind of a progression of

2738
01:37:21,000 --> 01:37:23,000
examples building up

2739
01:37:23,000 --> 01:37:25,000
and like it starts with like video

2740
01:37:25,000 --> 01:37:27,000
then there's video list then there's like searchable

2741
01:37:27,000 --> 01:37:29,000
video list and then there's

2742
01:37:29,000 --> 01:37:31,000
like conf page or something like this

2743
01:37:31,000 --> 01:37:33,000
so it's actually about

2744
01:37:33,000 --> 01:37:35,000
the canonical example we picked

2745
01:37:35,000 --> 01:37:37,000
so that's kind of funny that

2746
01:37:37,000 --> 01:37:39,000
we're doing that now

2747
01:37:39,000 --> 01:37:41,000
Yeah, I mean it works

2748
01:37:41,000 --> 01:37:43,000
Oh, that's cool that it's called searchable

2749
01:37:43,000 --> 01:37:45,000
Yeah, I've never said searchable

2750
01:37:45,000 --> 01:37:47,000
I would probably say like album list search

2751
01:37:47,000 --> 01:37:49,000
but yeah

2752
01:37:49,000 --> 01:37:51,000
But then it sounds like the search is just

2753
01:37:51,000 --> 01:37:53,000
like I think the thing that's confusing about it

2754
01:37:53,000 --> 01:37:55,000
is it seems like it's just the

2755
01:37:55,000 --> 01:37:57,000
yeah

2756
01:37:57,000 --> 01:37:59,000
Yeah

2757
01:37:59,000 --> 01:38:01,000
and so it's so hard to

2758
01:38:01,000 --> 01:38:03,000
name your Lego bricks

2759
01:38:03,000 --> 01:38:05,000
but this will work

2760
01:38:05,000 --> 01:38:07,000
So yeah, search and set search, that's fine

2761
01:38:07,000 --> 01:38:09,000
and we're not going to use

2762
01:38:09,000 --> 01:38:11,000
like an actual search library for this

2763
01:38:11,000 --> 01:38:13,000
it would just be

2764
01:38:13,000 --> 01:38:15,000
well that's, yeah, you could just do it like this

2765
01:38:15,000 --> 01:38:17,000
and this

2766
01:38:17,000 --> 01:38:19,000
is really good actually

2767
01:38:19,000 --> 01:38:21,000
Dang it Copilot, you took all the fun out of it

2768
01:38:21,000 --> 01:38:23,000
but that is it, that works fine

2769
01:38:23,000 --> 01:38:25,000
So

2770
01:38:25,000 --> 01:38:27,000
Well no, that's actually not very good

2771
01:38:27,000 --> 01:38:29,000
It's not a very good version

2772
01:38:29,000 --> 01:38:31,000
because it

2773
01:38:33,000 --> 01:38:35,000
it would search in the middle

2774
01:38:35,000 --> 01:38:37,000
of the words, right

2775
01:38:37,000 --> 01:38:39,000
so if you

2776
01:38:39,000 --> 01:38:41,000
Oh sure

2777
01:38:41,000 --> 01:38:43,000
I can, let me copy and paste

2778
01:38:43,000 --> 01:38:45,000
I have a version that I

2779
01:38:45,000 --> 01:38:47,000
that I wrote for

2780
01:38:47,000 --> 01:38:49,000
for the React homepage

2781
01:38:49,000 --> 01:38:51,000
that I can

2782
01:38:51,000 --> 01:38:53,000
I can actually

2783
01:38:53,000 --> 01:38:55,000
just copy and paste it

2784
01:38:55,000 --> 01:38:57,000
so this

2785
01:38:57,000 --> 01:38:59,000
is the

2786
01:38:59,000 --> 01:39:01,000
yeah let me

2787
01:39:01,000 --> 01:39:03,000
copy and paste it here except that's going to be

2788
01:39:03,000 --> 01:39:05,000
filter albums, that's going to be

2789
01:39:05,000 --> 01:39:07,000
albums

2790
01:39:07,000 --> 01:39:09,000
that's, that you called this thing

2791
01:39:09,000 --> 01:39:11,000
search, so I'll call this thing search as well

2792
01:39:11,000 --> 01:39:13,000
and then

2793
01:39:13,000 --> 01:39:15,000
the, what is the

2794
01:39:15,000 --> 01:39:17,000
what is the

2795
01:39:17,000 --> 01:39:19,000
we care about title and about

2796
01:39:19,000 --> 01:39:21,000
what is the other thing

2797
01:39:21,000 --> 01:39:23,000
that we care about

2798
01:39:23,000 --> 01:39:25,000
Artist? It's just the title

2799
01:39:25,000 --> 01:39:27,000
That's another field

2800
01:39:27,000 --> 01:39:29,000
Artist, maybe

2801
01:39:29,000 --> 01:39:31,000
Yeah, but does it have

2802
01:39:31,000 --> 01:39:33,000
does it have artist in the album

2803
01:39:33,000 --> 01:39:35,000
info somewhere, like what's the structure

2804
01:39:35,000 --> 01:39:37,000
Yeah, and I can

2805
01:39:37,000 --> 01:39:39,000
actually, I set this up with JS

2806
01:39:39,000 --> 01:39:41,000
Oh yeah, okay yeah

2807
01:39:41,000 --> 01:39:43,000
I'll just go ahead and do that

2808
01:39:43,000 --> 01:39:45,000
Okay

2809
01:39:45,000 --> 01:39:47,000
Yeah

2810
01:39:47,000 --> 01:39:49,000
Yeah, sure

2811
01:39:49,000 --> 01:39:51,000
Wait, what happened

2812
01:39:51,000 --> 01:39:53,000
Oh, I think we're

2813
01:39:53,000 --> 01:39:55,000
I think we're typing at the same time

2814
01:39:55,000 --> 01:39:57,000
Sorry

2815
01:39:57,000 --> 01:39:59,000
That should work, but okay

2816
01:39:59,000 --> 01:40:01,000
Yeah, that should work now

2817
01:40:01,000 --> 01:40:03,000
Yeah, and it's inferring, cool

2818
01:40:03,000 --> 01:40:05,000
Alright

2819
01:40:05,000 --> 01:40:07,000
And this is a nice little function

2820
01:40:07,000 --> 01:40:09,000
So this is just searching

2821
01:40:09,000 --> 01:40:11,000
I guess I'm looking

2822
01:40:11,000 --> 01:40:13,000
at the split here

2823
01:40:13,000 --> 01:40:15,000
So it's looking at each word

2824
01:40:15,000 --> 01:40:17,000
Okay, some of the words start

2825
01:40:17,000 --> 01:40:19,000
with a keyword, nice

2826
01:40:19,000 --> 01:40:21,000
Yeah, it's not super efficient

2827
01:40:21,000 --> 01:40:23,000
like it has some nested loops

2828
01:40:23,000 --> 01:40:25,000
but you know

2829
01:40:25,000 --> 01:40:27,000
not just some, it has like three levels of nested loops

2830
01:40:27,000 --> 01:40:29,000
so it's actually pretty slow

2831
01:40:29,000 --> 01:40:31,000
but it's fast enough for us

2832
01:40:31,000 --> 01:40:33,000
Exactly, yeah, that's what I'm thinking

2833
01:40:33,000 --> 01:40:35,000
Yeah, and does

2834
01:40:35,000 --> 01:40:37,000
this handle the empty state

2835
01:40:37,000 --> 01:40:39,000
where it's like show all of them unless

2836
01:40:39,000 --> 01:40:41,000
you've started typing something

2837
01:40:41,000 --> 01:40:43,000
Yeah, yeah, I think it does

2838
01:40:43,000 --> 01:40:45,000
You know, it's

2839
01:40:45,000 --> 01:40:47,000
Yeah, you can just pass the

2840
01:40:47,000 --> 01:40:49,000
I'll go ahead and just do this

2841
01:40:49,000 --> 01:40:51,000
Albums, search

2842
01:40:51,000 --> 01:40:53,000
Nice

2843
01:40:55,000 --> 01:40:57,000
And what now

2844
01:40:57,000 --> 01:40:59,000
Well, there's no input

2845
01:40:59,000 --> 01:41:01,000
Yep

2846
01:41:01,000 --> 01:41:03,000
Yeah, I've

2847
01:41:03,000 --> 01:41:05,000
heard on input it's a little more reliable

2848
01:41:05,000 --> 01:41:07,000
and it's what I use

2849
01:41:07,000 --> 01:41:09,000
No, no

2850
01:41:09,000 --> 01:41:11,000
Is that the wrong one

2851
01:41:11,000 --> 01:41:13,000
All right

2852
01:41:13,000 --> 01:41:15,000
Never mind

2853
01:41:15,000 --> 01:41:17,000
It's just a weird name in Quark

2854
01:41:17,000 --> 01:41:19,000
It corresponds to on input in the browser

2855
01:41:19,000 --> 01:41:21,000
Oh, it does?

2856
01:41:21,000 --> 01:41:23,000
Okay, that's what I knew

2857
01:41:23,000 --> 01:41:25,000
Oh, that's weird, all right

2858
01:41:25,000 --> 01:41:27,000
The more you know

2859
01:41:27,000 --> 01:41:29,000
So that's gonna be that, yeah

2860
01:41:29,000 --> 01:41:31,000
This should all work

2861
01:41:31,000 --> 01:41:33,000
So the last thing to do is just put it on the page

2862
01:41:33,000 --> 01:41:35,000
So I'll hop back over here

2863
01:41:35,000 --> 01:41:37,000
Let's add suspense again

2864
01:41:37,000 --> 01:41:39,000
because it's annoying that

2865
01:41:39,000 --> 01:41:41,000
I'm gonna do it because it's annoying

2866
01:41:41,000 --> 01:41:43,000
that it waits so much

2867
01:41:43,000 --> 01:41:45,000
So

2868
01:41:45,000 --> 01:41:47,000
I'll just do

2869
01:41:47,000 --> 01:41:49,000
a loading state

2870
01:41:49,000 --> 01:41:51,000
because it kind of looks

2871
01:41:51,000 --> 01:41:53,000
like something's wrong with the server components

2872
01:41:53,000 --> 01:41:55,000
but it's actually just because we don't have suspense

2873
01:41:55,000 --> 01:41:57,000
Okay

2874
01:41:57,000 --> 01:41:59,000
Interesting, okay

2875
01:42:01,000 --> 01:42:03,000
All right, so we have that

2876
01:42:03,000 --> 01:42:05,000
and so

2877
01:42:05,000 --> 01:42:07,000
we would put the client component in here, right

2878
01:42:07,000 --> 01:42:09,000
Yeah

2879
01:42:13,000 --> 01:42:15,000
I'm doing

2880
01:42:15,000 --> 01:42:17,000
Yeah, you have to do that

2881
01:42:17,000 --> 01:42:19,000
We can just do this

2882
01:42:19,000 --> 01:42:21,000
Yeah, sure

2883
01:42:21,000 --> 01:42:23,000
We'll fix it someday

2884
01:42:23,000 --> 01:42:25,000
Someday

2885
01:42:25,000 --> 01:42:27,000
Okay, so everything exploded

2886
01:42:27,000 --> 01:42:29,000
sadly

2887
01:42:29,000 --> 01:42:31,000
That could be on the build tool

2888
01:42:31,000 --> 01:42:33,000
That is me

2889
01:42:33,000 --> 01:42:35,000
Let me double check on that

2890
01:42:35,000 --> 01:42:37,000
The next JS escape patch is looking great

2891
01:42:37,000 --> 01:42:39,000
but that is the response

2892
01:42:39,000 --> 01:42:41,000
that you'll probably get from the server

2893
01:42:41,000 --> 01:42:43,000
because now what we're doing is we didn't filter

2894
01:42:43,000 --> 01:42:45,000
which props that our client cares about

2895
01:42:45,000 --> 01:42:47,000
Now it's passing down everything

2896
01:42:47,000 --> 01:42:49,000
including the song list, which is like

2897
01:42:49,000 --> 01:42:51,000
that little uncanny valley I mentioned

2898
01:42:51,000 --> 01:42:53,000
If you're not aware, you can

2899
01:42:53,000 --> 01:42:55,000
ship a lot of data to the client that you're not expecting

2900
01:42:55,000 --> 01:42:57,000
So we could filter it

2901
01:42:57,000 --> 01:42:59,000
but right now we're just passing down everything

2902
01:42:59,000 --> 01:43:01,000
Yeah, which is what you were

2903
01:43:01,000 --> 01:43:03,000
doing anyway in the single page app

2904
01:43:03,000 --> 01:43:05,000
Yeah

2905
01:43:05,000 --> 01:43:07,000
Can you show what's crashing?

2906
01:43:07,000 --> 01:43:09,000
Because I don't see the

2907
01:43:09,000 --> 01:43:11,000
Yeah, I'll give it a look

2908
01:43:11,000 --> 01:43:13,000
This error doesn't make a lot of sense to me

2909
01:43:13,000 --> 01:43:15,000
I just don't see the error

2910
01:43:15,000 --> 01:43:17,000
I don't know if

2911
01:43:17,000 --> 01:43:19,000
Okay

2912
01:43:19,000 --> 01:43:21,000
Does it not show

2913
01:43:21,000 --> 01:43:23,000
Yeah, it's crashing in the browser, not the server

2914
01:43:23,000 --> 01:43:25,000
Yeah, but I don't see

2915
01:43:25,000 --> 01:43:27,000
I think maybe your screen share

2916
01:43:27,000 --> 01:43:29,000
doesn't show me the DevTools console

2917
01:43:29,000 --> 01:43:31,000
so I have no idea what the error is

2918
01:43:31,000 --> 01:43:33,000
Oh, I thought the screen share might actually show it to you

2919
01:43:33,000 --> 01:43:35,000
Okay

2920
01:43:35,000 --> 01:43:37,000
Interesting

2921
01:43:37,000 --> 01:43:39,000
Yeah, it's being really selective

2922
01:43:39,000 --> 01:43:41,000
But you're right, it doesn't. It actually hides the DevTools

2923
01:43:41,000 --> 01:43:43,000
Alright, let me

2924
01:43:43,000 --> 01:43:45,000
And this shouldn't be affecting anyone

2925
01:43:45,000 --> 01:43:47,000
at home, this is just our crazy setup

2926
01:43:47,000 --> 01:43:49,000
If I do this

2927
01:43:49,000 --> 01:43:51,000
now it should work

2928
01:43:51,000 --> 01:43:53,000
Maybe

2929
01:43:53,000 --> 01:43:55,000
Okay, yeah, now I can actually see it

2930
01:43:55,000 --> 01:43:57,000
Yeah, so

2931
01:43:57,000 --> 01:43:59,000
Okay, this time it actually doesn't show an error

2932
01:43:59,000 --> 01:44:01,000
That's interesting

2933
01:44:01,000 --> 01:44:03,000
It just says loading and it never actually resolves

2934
01:44:03,000 --> 01:44:05,000
I also made the dev panel

2935
01:44:05,000 --> 01:44:07,000
a little too big

2936
01:44:07,000 --> 01:44:09,000
Let's see here

2937
01:44:09,000 --> 01:44:11,000
Well, yeah, on the key

2938
01:44:11,000 --> 01:44:13,000
prompt, but wait, that actually

2939
01:44:13,000 --> 01:44:15,000
doesn't make any sense

2940
01:44:17,000 --> 01:44:19,000
Oh, I put the key on the list item

2941
01:44:19,000 --> 01:44:21,000
instead of on the wrapping div

2942
01:44:21,000 --> 01:44:23,000
I can do that, but that shouldn't crash the server

2943
01:44:23,000 --> 01:44:25,000
No, that shouldn't crash the server

2944
01:44:25,000 --> 01:44:27,000
No, it shouldn't

2945
01:44:27,000 --> 01:44:29,000
Yeah, and it's also still

2946
01:44:29,000 --> 01:44:31,000
Let me just reboot this

2947
01:44:31,000 --> 01:44:33,000
and worst case, I'm assuming

2948
01:44:33,000 --> 01:44:35,000
we can copy-paste

2949
01:44:35,000 --> 01:44:37,000
Oh, there we go

2950
01:44:37,000 --> 01:44:39,000
Okay, something happened in the live reloading

2951
01:44:39,000 --> 01:44:41,000
which happens sometimes

2952
01:44:41,000 --> 01:44:43,000
Yeah

2953
01:44:43,000 --> 01:44:45,000
But we'll just go with it

2954
01:44:45,000 --> 01:44:47,000
But yeah, it looks like it's still rendering

2955
01:44:47,000 --> 01:44:49,000
on the page, which is good

2956
01:44:49,000 --> 01:44:51,000
And we have an input

2957
01:44:51,000 --> 01:44:53,000
but since it's tail-ended, it unstyles everything

2958
01:44:53,000 --> 01:44:55,000
which is a little too aggressive

2959
01:44:55,000 --> 01:44:57,000
Yeah, look at that

2960
01:44:57,000 --> 01:44:59,000
So now we have it interactive

2961
01:44:59,000 --> 01:45:01,000
searching for artists

2962
01:45:01,000 --> 01:45:03,000
and stuff, and I can search by

2963
01:45:03,000 --> 01:45:05,000
that as well

2964
01:45:05,000 --> 01:45:07,000
Oh, I did the fancy O

2965
01:45:07,000 --> 01:45:09,000
Yeah, it's working

2966
01:45:09,000 --> 01:45:11,000
Some reason

2967
01:45:11,000 --> 01:45:13,000
I don't see your screen updating at all

2968
01:45:13,000 --> 01:45:15,000
Oh, really

2969
01:45:15,000 --> 01:45:17,000
Yeah, it's stuck

2970
01:45:17,000 --> 01:45:19,000
Well, I try

2971
01:45:19,000 --> 01:45:21,000
I'm learning this setup as I go

2972
01:45:21,000 --> 01:45:23,000
Maybe let's go back to

2973
01:45:23,000 --> 01:45:25,000
the thing you shared before

2974
01:45:25,000 --> 01:45:27,000
because that definitely was updating

2975
01:45:27,000 --> 01:45:29,000
Alright, let's do that again

2976
01:45:29,000 --> 01:45:31,000
If I do Chromium tab

2977
01:45:31,000 --> 01:45:33,000
You'll have to just read the errors

2978
01:45:33,000 --> 01:45:35,000
Just narrate the error

2979
01:45:35,000 --> 01:45:37,000
Yeah

2980
01:45:41,000 --> 01:45:43,000
Now I'm trying to find which tab it is

2981
01:45:43,000 --> 01:45:45,000
I have too many tabs

2982
01:45:45,000 --> 01:45:47,000
Oh, I called it future of React

2983
01:45:47,000 --> 01:45:49,000
which makes me forget

2984
01:45:49,000 --> 01:45:51,000
Okay

2985
01:45:51,000 --> 01:45:53,000
Can you see that?

2986
01:45:53,000 --> 01:45:55,000
Yeah, now I see it

2987
01:45:55,000 --> 01:45:57,000
But it's really slow updates

2988
01:45:57,000 --> 01:45:59,000
It's really slow

2989
01:45:59,000 --> 01:46:01,000
But it does work

2990
01:46:01,000 --> 01:46:03,000
Do you mean it's slow

2991
01:46:03,000 --> 01:46:05,000
in the browser, or do you mean the stream is slow?

2992
01:46:05,000 --> 01:46:07,000
Definitely on your end

2993
01:46:07,000 --> 01:46:09,000
On the browser, it's immediate

2994
01:46:09,000 --> 01:46:11,000
as we've mentioned before

2995
01:46:11,000 --> 01:46:13,000
Okay

2996
01:46:13,000 --> 01:46:15,000
So maybe one thing that would be

2997
01:46:15,000 --> 01:46:17,000
interesting to show here is

2998
01:46:17,000 --> 01:46:19,000
maybe like

2999
01:46:19,000 --> 01:46:21,000
What happens if you remove useClient?

3000
01:46:21,000 --> 01:46:23,000
What does useClient actually do?

3001
01:46:23,000 --> 01:46:25,000
Maybe we could talk a little bit about this

3002
01:46:25,000 --> 01:46:27,000
Yeah, well I'll confess

3003
01:46:27,000 --> 01:46:29,000
when you remove useClient

3004
01:46:29,000 --> 01:46:31,000
React complains that useState doesn't exist

3005
01:46:31,000 --> 01:46:33,000
and that's just a separate thing

3006
01:46:33,000 --> 01:46:35,000
with bundlers

3007
01:46:35,000 --> 01:46:37,000
Yeah, so it's

3008
01:46:37,000 --> 01:46:39,000
I mean, ideally

3009
01:46:39,000 --> 01:46:41,000
Oh, okay

3010
01:46:41,000 --> 01:46:43,000
It's actually pretty readable now

3011
01:46:45,000 --> 01:46:47,000
So it's supposed to tell you that

3012
01:46:47,000 --> 01:46:49,000
it's not

3013
01:46:49,000 --> 01:46:51,000
like useClient is not supported on the server

3014
01:46:51,000 --> 01:46:53,000
Yep, that's what I'm saying

3015
01:46:53,000 --> 01:46:55,000
Yeah, so it's

3016
01:46:55,000 --> 01:46:57,000
and like the way you would

3017
01:46:57,000 --> 01:46:59,000
I think the mental model

3018
01:46:59,000 --> 01:47:01,000
you would have, I don't know

3019
01:47:01,000 --> 01:47:03,000
Can I draw in your Excalidraw link that you sent to me?

3020
01:47:03,000 --> 01:47:05,000
Like would people see it?

3021
01:47:05,000 --> 01:47:07,000
Sure

3022
01:47:07,000 --> 01:47:09,000
Yeah, I can pull it up right here

3023
01:47:09,000 --> 01:47:11,000
Okay, so let me

3024
01:47:11,000 --> 01:47:13,000
let me try to open it

3025
01:47:13,000 --> 01:47:15,000
One sec

3026
01:47:15,000 --> 01:47:17,000
I just need to find the link

3027
01:47:17,000 --> 01:47:19,000
But I kind of just wanted to show

3028
01:47:19,000 --> 01:47:21,000
what exactly

3029
01:47:21,000 --> 01:47:23,000
Okay, so I'll draw

3030
01:47:23,000 --> 01:47:25,000
just below your diagram

3031
01:47:25,000 --> 01:47:27,000
So let's see, can you see

3032
01:47:27,000 --> 01:47:29,000
I drew a

3033
01:47:29,000 --> 01:47:31,000
I'm supposed to have

3034
01:47:31,000 --> 01:47:33,000
drawn like a rectangle just

3035
01:47:33,000 --> 01:47:35,000
below your thing

3036
01:47:35,000 --> 01:47:37,000
I think I need to click on the link myself

3037
01:47:37,000 --> 01:47:39,000
because if I just go to

3038
01:47:39,000 --> 01:47:41,000
Excalidraw.com, it doesn't show it

3039
01:47:41,000 --> 01:47:43,000
Yeah, yeah, you need to go to the same link

3040
01:47:43,000 --> 01:47:45,000
Go to the DM

3041
01:47:45,000 --> 01:47:47,000
with that

3042
01:47:49,000 --> 01:47:51,000
Excalidraw

3043
01:47:53,000 --> 01:47:55,000
Alright

3044
01:47:55,000 --> 01:47:57,000
I think we're here now

3045
01:47:57,000 --> 01:47:59,000
Yeah, there we go

3046
01:47:59,000 --> 01:48:01,000
Okay, cool

3047
01:48:01,000 --> 01:48:03,000
So if we kind of think about

3048
01:48:03,000 --> 01:48:05,000
our structure

3049
01:48:05,000 --> 01:48:07,000
right now, it's like we have

3050
01:48:07,000 --> 01:48:09,000
the server root

3051
01:48:09,000 --> 01:48:11,000
and we have

3052
01:48:11,000 --> 01:48:13,000
So this is the

3053
01:48:13,000 --> 01:48:15,000
well, okay, so this is the

3054
01:48:15,000 --> 01:48:17,000
module structure, right?

3055
01:48:17,000 --> 01:48:19,000
Well, okay, first I'll draw

3056
01:48:19,000 --> 01:48:21,000
the component structure. So we have the server root

3057
01:48:21,000 --> 01:48:23,000
that renders

3058
01:48:23,000 --> 01:48:25,000
albums

3059
01:48:25,000 --> 01:48:27,000
that

3060
01:48:27,000 --> 01:48:29,000
itself renders

3061
01:48:29,000 --> 01:48:31,000
this searchable

3062
01:48:31,000 --> 01:48:33,000
album list

3063
01:48:37,000 --> 01:48:39,000
So this is

3064
01:48:39,000 --> 01:48:41,000
this is the component structure, but then if we

3065
01:48:41,000 --> 01:48:43,000
if we look at the, maybe I'll use

3066
01:48:43,000 --> 01:48:45,000
like different

3067
01:48:45,000 --> 01:48:47,000
maybe I'll use like a different

3068
01:48:47,000 --> 01:48:49,000
different style

3069
01:48:49,000 --> 01:48:51,000
So if we look at the file structure

3070
01:48:51,000 --> 01:48:53,000
what we see is like there's

3071
01:48:53,000 --> 01:48:55,000
the thing you call root.server.jsx

3072
01:48:55,000 --> 01:48:57,000
it doesn't have to be named that way

3073
01:48:57,000 --> 01:48:59,000
that's what you mentioned

3074
01:48:59,000 --> 01:49:01,000
could have just been named like app

3075
01:49:01,000 --> 01:49:03,000
or something, and so it imports

3076
01:49:03,000 --> 01:49:05,000
the

3077
01:49:05,000 --> 01:49:07,000
searchable album

3078
01:49:07,000 --> 01:49:09,000
album list.js

3079
01:49:09,000 --> 01:49:11,000
and so

3080
01:49:11,000 --> 01:49:13,000
the

3081
01:49:15,000 --> 01:49:17,000
the way to think about it is like

3082
01:49:17,000 --> 01:49:19,000
by default we start with

3083
01:49:19,000 --> 01:49:21,000
everything executing

3084
01:49:21,000 --> 01:49:23,000
so like

3085
01:49:23,000 --> 01:49:25,000
by default everything starts

3086
01:49:25,000 --> 01:49:27,000
and like importing starts

3087
01:49:27,000 --> 01:49:29,000
on the server, right? So like if you imagine like

3088
01:49:29,000 --> 01:49:31,000
this is the server entry point

3089
01:49:31,000 --> 01:49:33,000
it means that each import

3090
01:49:33,000 --> 01:49:35,000
will be followed, you know, like

3091
01:49:35,000 --> 01:49:37,000
like you would expect, and like

3092
01:49:37,000 --> 01:49:39,000
all of this stuff would be on the

3093
01:49:39,000 --> 01:49:41,000
like in the server

3094
01:49:41,000 --> 01:49:43,000
when I say server, I mean

3095
01:49:43,000 --> 01:49:45,000
React server, so like RSC

3096
01:49:45,000 --> 01:49:47,000
React server components, I don't mean

3097
01:49:47,000 --> 01:49:49,000
it doesn't, it's not about like being on

3098
01:49:49,000 --> 01:49:51,000
the server in terms of location

3099
01:49:51,000 --> 01:49:53,000
again, right? Like it's just the concept

3100
01:49:53,000 --> 01:49:55,000
so by default all of these imports

3101
01:49:55,000 --> 01:49:57,000
become

3102
01:49:57,000 --> 01:49:59,000
part of the code that executes

3103
01:49:59,000 --> 01:50:01,000
you know, as part of your server response

3104
01:50:01,000 --> 01:50:03,000
and then like if we

3105
01:50:03,000 --> 01:50:05,000
if we try to

3106
01:50:05,000 --> 01:50:07,000
if you try to use state here

3107
01:50:07,000 --> 01:50:09,000
it doesn't really make sense because

3108
01:50:09,000 --> 01:50:11,000
this thing

3109
01:50:11,000 --> 01:50:13,000
runs only on the server

3110
01:50:13,000 --> 01:50:15,000
and so it's never actually

3111
01:50:15,000 --> 01:50:17,000
going to be able to have event handlers

3112
01:50:17,000 --> 01:50:19,000
or state because this code

3113
01:50:19,000 --> 01:50:21,000
just never exists on the client

3114
01:50:21,000 --> 01:50:23,000
at all, so it can't react to

3115
01:50:23,000 --> 01:50:25,000
user input anyhow

3116
01:50:25,000 --> 01:50:27,000
and so when you say use client

3117
01:50:27,000 --> 01:50:29,000
and for some reason undo

3118
01:50:29,000 --> 01:50:31,000
doesn't work so

3119
01:50:31,000 --> 01:50:33,000
I have to, wait seriously

3120
01:50:33,000 --> 01:50:35,000
oh really? I can undo

3121
01:50:35,000 --> 01:50:37,000
yeah, I can

3122
01:50:37,000 --> 01:50:39,000
undo this for some reason

3123
01:50:39,000 --> 01:50:41,000
so when we do

3124
01:50:41,000 --> 01:50:43,000
so I'll add use client again to

3125
01:50:43,000 --> 01:50:45,000
searchable

3126
01:50:45,000 --> 01:50:47,000
album list

3127
01:50:47,000 --> 01:50:49,000
so if I add use client there, that fixes it

3128
01:50:49,000 --> 01:50:51,000
because that redraws the

3129
01:50:51,000 --> 01:50:53,000
boundaries, like when you say

3130
01:50:53,000 --> 01:50:55,000
use client, you're essentially saying

3131
01:50:55,000 --> 01:50:57,000
like

3132
01:50:57,000 --> 01:50:59,000
cut this off, you're saying

3133
01:50:59,000 --> 01:51:01,000
like

3134
01:51:01,000 --> 01:51:03,000
this

3135
01:51:03,000 --> 01:51:05,000
anything from here, this could

3136
01:51:05,000 --> 01:51:07,000
import other components, this could

3137
01:51:07,000 --> 01:51:09,000
import something else

3138
01:51:09,000 --> 01:51:11,000
and so on, but you're saying

3139
01:51:11,000 --> 01:51:13,000
anything that imports

3140
01:51:13,000 --> 01:51:15,000
searchable list, this thing

3141
01:51:15,000 --> 01:51:17,000
actually doesn't exist

3142
01:51:17,000 --> 01:51:19,000
this should be on the client

3143
01:51:19,000 --> 01:51:21,000
and it's going to client all the way down

3144
01:51:21,000 --> 01:51:23,000
which doesn't mean that

3145
01:51:23,000 --> 01:51:25,000
it doesn't mean that the

3146
01:51:25,000 --> 01:51:27,000
it doesn't mean

3147
01:51:27,000 --> 01:51:29,000
all components, so we're talking about

3148
01:51:29,000 --> 01:51:31,000
files, we're not talking

3149
01:51:31,000 --> 01:51:33,000
we're talking about imports, not about components

3150
01:51:33,000 --> 01:51:35,000
you can still have components

3151
01:51:35,000 --> 01:51:37,000
that are

3152
01:51:37,000 --> 01:51:39,000
server

3153
01:51:39,000 --> 01:51:41,000
components inside client components

3154
01:51:41,000 --> 01:51:43,000
I'll get to that in a moment

3155
01:51:43,000 --> 01:51:45,000
but what I just want to show is like

3156
01:51:45,000 --> 01:51:47,000
you kind of

3157
01:51:47,000 --> 01:51:49,000
sorry, I just can't

3158
01:51:49,000 --> 01:51:51,000
delete anything

3159
01:51:51,000 --> 01:51:53,000
like I have to

3160
01:51:53,000 --> 01:51:55,000
there we go

3161
01:51:55,000 --> 01:51:57,000
by adding use client

3162
01:51:57,000 --> 01:51:59,000
you kind of just like

3163
01:51:59,000 --> 01:52:01,000
limited the server part to

3164
01:52:01,000 --> 01:52:03,000
this

3165
01:52:03,000 --> 01:52:05,000
and then the rest is what

3166
01:52:05,000 --> 01:52:07,000
your bundler will be

3167
01:52:07,000 --> 01:52:09,000
will know to like, oh this needs

3168
01:52:09,000 --> 01:52:11,000
anything from here has to go into the client

3169
01:52:11,000 --> 01:52:13,000
bundle, and so the server

3170
01:52:13,000 --> 01:52:15,000
environment would not even see this

3171
01:52:15,000 --> 01:52:17,000
so from the server environment

3172
01:52:17,000 --> 01:52:19,000
perspective, the searchable

3173
01:52:19,000 --> 01:52:21,000
album list component

3174
01:52:21,000 --> 01:52:23,000
it doesn't even know what's in there

3175
01:52:23,000 --> 01:52:25,000
it doesn't try to render it, it doesn't try

3176
01:52:25,000 --> 01:52:27,000
to do anything with it, it's just completely

3177
01:52:27,000 --> 01:52:29,000
opaque, and then on the client

3178
01:52:29,000 --> 01:52:31,000
from the client perspective

3179
01:52:31,000 --> 01:52:33,000
like when you're actually

3180
01:52:33,000 --> 01:52:35,000
on the client, it's really

3181
01:52:35,000 --> 01:52:37,000
this part, it's like

3182
01:52:37,000 --> 01:52:39,000
it doesn't exist, because

3183
01:52:39,000 --> 01:52:41,000
it's already executed, so

3184
01:52:41,000 --> 01:52:43,000
the client is only aware of

3185
01:52:43,000 --> 01:52:45,000
the output of this thing

3186
01:52:45,000 --> 01:52:47,000
it's aware of the output, right

3187
01:52:47,000 --> 01:52:49,000
so one of the things that gets

3188
01:52:49,000 --> 01:52:51,000
a bit, you know, that always trips

3189
01:52:51,000 --> 01:52:53,000
people up is like, okay

3190
01:52:53,000 --> 01:52:55,000
but does it mean that

3191
01:52:55,000 --> 01:52:57,000
if I just need

3192
01:52:57,000 --> 01:52:59,000
one, you know, component

3193
01:52:59,000 --> 01:53:01,000
with state somewhere close

3194
01:53:01,000 --> 01:53:03,000
to the top, then

3195
01:53:03,000 --> 01:53:05,000
you know, it can't

3196
01:53:05,000 --> 01:53:07,000
it can't contain

3197
01:53:07,000 --> 01:53:09,000
any server components, right

3198
01:53:09,000 --> 01:53:11,000
and we can

3199
01:53:11,000 --> 01:53:13,000
actually, they have like another

3200
01:53:13,000 --> 01:53:15,000
data point that

3201
01:53:15,000 --> 01:53:17,000
we can fetch from, just to kind of

3202
01:53:17,000 --> 01:53:19,000
illustrate this idea

3203
01:53:20,000 --> 01:53:22,000
so you have getById

3204
01:53:22,000 --> 01:53:24,000
maybe I can use that, do you mind

3205
01:53:24,000 --> 01:53:26,000
if I write a bit of code?

3206
01:53:26,000 --> 01:53:28,000
oh yeah, please

3207
01:53:28,000 --> 01:53:30,000
yeah, so I just want to illustrate

3208
01:53:30,000 --> 01:53:32,000
maybe let's go back to the app

3209
01:53:32,000 --> 01:53:34,000
can we make sure the app is working

3210
01:53:34,000 --> 01:53:36,000
so that, you know, it's not completely

3211
01:53:36,000 --> 01:53:38,000
forked

3212
01:53:38,000 --> 01:53:40,000
it's a good thing to check

3213
01:53:40,000 --> 01:53:42,000
yeah, is this

3214
01:53:42,000 --> 01:53:44,000
the screen share you're able to see?

3215
01:53:44,000 --> 01:53:46,000
yeah, yeah

3216
01:53:46,000 --> 01:53:48,000
but I see it like as empty

3217
01:53:48,000 --> 01:53:50,000
so I don't know if it needs to be restarted

3218
01:53:50,000 --> 01:53:52,000
or something

3219
01:53:52,000 --> 01:53:54,000
oh no, we just need to

3220
01:53:54,000 --> 01:53:56,000
well actually, this is on me

3221
01:53:56,000 --> 01:53:58,000
I only detect double quotes

3222
01:53:58,000 --> 01:54:00,000
yeah, compilers

3223
01:54:00,000 --> 01:54:02,000
alright, that works

3224
01:54:02,000 --> 01:54:04,000
oh, okay

3225
01:54:04,000 --> 01:54:06,000
yeah, so maybe we can show

3226
01:54:06,000 --> 01:54:08,000
the problem you might run

3227
01:54:08,000 --> 01:54:10,000
into is

3228
01:54:10,000 --> 01:54:12,000
so let's go back

3229
01:54:12,000 --> 01:54:14,000
to

3230
01:54:14,000 --> 01:54:16,000
for example, index

3231
01:54:16,000 --> 01:54:18,000
oh, you have a

3232
01:54:18,000 --> 01:54:20,000
can I use this Pokemon example?

3233
01:54:20,000 --> 01:54:22,000
you have this Pokemon example in another file

3234
01:54:22,000 --> 01:54:24,000
also Primogen, oh my god

3235
01:54:24,000 --> 01:54:26,000
thank you for the raid

3236
01:54:26,000 --> 01:54:28,000
we have a lot of people pouring in here

3237
01:54:28,000 --> 01:54:30,000
right now, thank y'all so much

3238
01:54:30,000 --> 01:54:32,000
thanks for stopping by

3239
01:54:32,000 --> 01:54:34,000
that is awesome, you're awesome

3240
01:54:34,000 --> 01:54:36,000
we're live with Dan

3241
01:54:36,000 --> 01:54:38,000
playing with React server components

3242
01:54:38,000 --> 01:54:40,000
and learning a ton of things along the way

3243
01:54:40,000 --> 01:54:42,000
and right now we are playing

3244
01:54:42,000 --> 01:54:44,000
with loading things

3245
01:54:44,000 --> 01:54:46,000
asynchronously, seeing the server client

3246
01:54:46,000 --> 01:54:48,000
boundaries, and I guess

3247
01:54:48,000 --> 01:54:50,000
in a minute, trying to render some Pokemon on the page

3248
01:54:50,000 --> 01:54:52,000
if you want to go ahead and try that

3249
01:54:52,000 --> 01:54:54,000
yeah, so

3250
01:54:54,000 --> 01:54:56,000
let's maybe import

3251
01:54:56,000 --> 01:54:58,000
oh, you already imported Pokemon

3252
01:54:58,000 --> 01:55:00,000
so that's great

3253
01:55:00,000 --> 01:55:02,000
so maybe let's first just

3254
01:55:02,000 --> 01:55:04,000
render the Pokemon

3255
01:55:04,000 --> 01:55:06,000
above

3256
01:55:08,000 --> 01:55:10,000
above the

3257
01:55:10,000 --> 01:55:12,000
code is so

3258
01:55:12,000 --> 01:55:14,000
I just can't get used to

3259
01:55:14,000 --> 01:55:16,000
VS Code, but I'm just trying to

3260
01:55:16,000 --> 01:55:18,000
render the Pokemon above the

3261
01:55:20,000 --> 01:55:22,000
what is it, the album list

3262
01:55:22,000 --> 01:55:24,000
actually

3263
01:55:24,000 --> 01:55:26,000
I'm gonna pull it

3264
01:55:26,000 --> 01:55:28,000
yeah, okay, yeah

3265
01:55:28,000 --> 01:55:30,000
I'm gonna pull it out of the suspense

3266
01:55:30,000 --> 01:55:32,000
because the suspense is super slow

3267
01:55:32,000 --> 01:55:34,000
because we

3268
01:55:34,000 --> 01:55:36,000
let's maybe reduce the delay

3269
01:55:36,000 --> 01:55:38,000
I'll set the delay to something that's

3270
01:55:38,000 --> 01:55:40,000
oh, we changed

3271
01:55:40,000 --> 01:55:42,000
the delay back to be really short

3272
01:55:42,000 --> 01:55:44,000
yeah, that should be short now

3273
01:55:44,000 --> 01:55:46,000
yeah, okay, so we have a

3274
01:55:46,000 --> 01:55:48,000
if we go to root.server.js

3275
01:55:48,000 --> 01:55:50,000
you see there's like, we're rendering

3276
01:55:50,000 --> 01:55:52,000
Pokemon, and we're also rendering

3277
01:55:52,000 --> 01:55:54,000
this album list

3278
01:55:54,000 --> 01:55:56,000
and so, suppose that we

3279
01:55:56,000 --> 01:55:58,000
for some reason we wanted, like Pokemon

3280
01:55:58,000 --> 01:56:00,000
is a server component, right, if you go there

3281
01:56:00,000 --> 01:56:02,000
you see it has async await

3282
01:56:02,000 --> 01:56:04,000
that's currently

3283
01:56:04,000 --> 01:56:06,000
only supported on the server

3284
01:56:06,000 --> 01:56:08,000
so, but imagine that in our

3285
01:56:08,000 --> 01:56:10,000
app we want to

3286
01:56:10,000 --> 01:56:12,000
render the Pokemon from a client

3287
01:56:12,000 --> 01:56:14,000
component, right, like let's say we want

3288
01:56:14,000 --> 01:56:16,000
to render it between the

3289
01:56:16,000 --> 01:56:18,000
search bar and the list of

3290
01:56:18,000 --> 01:56:20,000
items

3291
01:56:20,000 --> 01:56:22,000
so, if you just try to do it

3292
01:56:22,000 --> 01:56:24,000
kind of naively, it won't work

3293
01:56:24,000 --> 01:56:26,000
so if I go to

3294
01:56:28,000 --> 01:56:30,000
to the

3295
01:56:30,000 --> 01:56:32,000
searchable album list, and I'm gonna add

3296
01:56:32,000 --> 01:56:34,000
an import for Pokemon

3297
01:56:34,000 --> 01:56:36,000
I'm gonna delete the

3298
01:56:36,000 --> 01:56:38,000
I'm gonna delete

3299
01:56:38,000 --> 01:56:40,000
the Pokemon from

3300
01:56:40,000 --> 01:56:42,000
root.server.js

3301
01:56:42,000 --> 01:56:44,000
completely, so I will

3302
01:56:44,000 --> 01:56:46,000
get rid of it here

3303
01:56:46,000 --> 01:56:48,000
and I will add it to our client

3304
01:56:48,000 --> 01:56:50,000
searchable album list component

3305
01:56:50,000 --> 01:56:52,000
between the input

3306
01:56:52,000 --> 01:56:54,000
and the

3307
01:56:54,000 --> 01:56:56,000
and the list

3308
01:56:56,000 --> 01:56:58,000
and so if you run it now

3309
01:56:58,000 --> 01:57:00,000
I think it should crash

3310
01:57:00,000 --> 01:57:02,000
like, what does it tell you if you

3311
01:57:02,000 --> 01:57:04,000
if you try to run it now

3312
01:57:04,000 --> 01:57:06,000
I'm so curious why, but it didn't crash

3313
01:57:06,000 --> 01:57:08,000
and it actually ran

3314
01:57:08,000 --> 01:57:10,000
that should not work

3315
01:57:10,000 --> 01:57:12,000
hang on, what's going on

3316
01:57:12,000 --> 01:57:14,000
here

3317
01:57:14,000 --> 01:57:16,000
yeah, it's working

3318
01:57:16,000 --> 01:57:18,000
wait a minute

3319
01:57:18,000 --> 01:57:20,000
but is it between

3320
01:57:20,000 --> 01:57:22,000
can you tell the input so that we can actually see the input

3321
01:57:22,000 --> 01:57:24,000
because I don't see the input at all

3322
01:57:24,000 --> 01:57:26,000
absolutely

3323
01:57:26,000 --> 01:57:28,000
yeah, it's right there, it's adding a focus

3324
01:57:28,000 --> 01:57:30,000
ring to that

3325
01:57:30,000 --> 01:57:32,000
let me add border

3326
01:57:32,000 --> 01:57:34,000
solid

3327
01:57:34,000 --> 01:57:36,000
okay

3328
01:57:36,000 --> 01:57:38,000
yeah, maybe it's not

3329
01:57:38,000 --> 01:57:40,000
I guess it's because it's using fetch

3330
01:57:40,000 --> 01:57:42,000
so maybe we already

3331
01:57:42,000 --> 01:57:44,000
support it on the client as well

3332
01:57:44,000 --> 01:57:46,000
so ideally it would be something

3333
01:57:46,000 --> 01:57:48,000
that would not be supported

3334
01:57:48,000 --> 01:57:50,000
on the client, like a database call

3335
01:57:50,000 --> 01:57:52,000
or something like this

3336
01:57:52,000 --> 01:57:54,000
right

3337
01:57:54,000 --> 01:57:56,000
maybe we can read something from a file

3338
01:57:56,000 --> 01:57:58,000
to make this more

3339
01:57:58,000 --> 01:58:00,000
make it more obvious

3340
01:58:00,000 --> 01:58:02,000
sure, yeah, let's read something from the

3341
01:58:02,000 --> 01:58:04,000
file so that we know definitely that

3342
01:58:06,000 --> 01:58:08,000
yeah, can we do like

3343
01:58:08,000 --> 01:58:10,000
okay, instead of

3344
01:58:10,000 --> 01:58:12,000
pokemon, we're gonna do

3345
01:58:14,000 --> 01:58:16,000
fs, let's see

3346
01:58:16,000 --> 01:58:18,000
I haven't used

3347
01:58:20,000 --> 01:58:22,000
can you write some

3348
01:58:22,000 --> 01:58:24,000
yeah, I can throw that down, I've only been writing fs calls

3349
01:58:24,000 --> 01:58:26,000
for the past however long

3350
01:58:26,000 --> 01:58:28,000
yeah, can you do like

3351
01:58:28,000 --> 01:58:30,000
readdir, like a list of files

3352
01:58:30,000 --> 01:58:32,000
for example, in your

3353
01:58:32,000 --> 01:58:34,000
yeah, fs

3354
01:58:34,000 --> 01:58:36,000
promises, readfile

3355
01:58:36,000 --> 01:58:38,000
maybe readdir

3356
01:58:38,000 --> 01:58:40,000
to kind of see the list of

3357
01:58:40,000 --> 01:58:42,000
files in the directory or something like this

3358
01:58:42,000 --> 01:58:44,000
yeah

3359
01:58:44,000 --> 01:58:46,000
or I guess, yeah

3360
01:58:46,000 --> 01:58:48,000
that's a thought too, yeah, I can read anything

3361
01:58:48,000 --> 01:58:50,000
okay, yeah, whatever

3362
01:58:50,000 --> 01:58:52,000
yeah, this isn't

3363
01:58:52,000 --> 01:58:54,000
the best thing, maybe if I

3364
01:58:54,000 --> 01:58:56,000
tried to read from the db

3365
01:58:56,000 --> 01:58:58,000
that would make more sense

3366
01:58:58,000 --> 01:59:00,000
sure, there's a thing you could do

3367
01:59:00,000 --> 01:59:02,000
db, data

3368
01:59:06,000 --> 01:59:08,000
data

3369
01:59:08,000 --> 01:59:10,000
at slug there, which is a real

3370
01:59:10,000 --> 01:59:12,000
slug

3371
01:59:12,000 --> 01:59:14,000
yep

3372
01:59:14,000 --> 01:59:16,000
and that, yeah

3373
01:59:16,000 --> 01:59:18,000
and then you want to do that

3374
01:59:18,000 --> 01:59:20,000
return

3375
01:59:20,000 --> 01:59:22,000
you know, a dump

3376
01:59:22,000 --> 01:59:24,000
a dump of information

3377
01:59:24,000 --> 01:59:26,000
sure

3378
01:59:26,000 --> 01:59:28,000
what's that

3379
01:59:28,000 --> 01:59:30,000
awesome

3380
01:59:30,000 --> 01:59:32,000
yes, maybe let's

3381
01:59:32,000 --> 01:59:34,000
see what happens if we try

3382
01:59:34,000 --> 01:59:36,000
to do this

3383
01:59:36,000 --> 01:59:38,000
or it's already stringified, silly me

3384
01:59:38,000 --> 01:59:40,000
alright, so we do that

3385
01:59:40,000 --> 01:59:42,000
and then it says, can't resolve node fs

3386
01:59:42,000 --> 01:59:44,000
that does make sense

3387
01:59:44,000 --> 01:59:46,000
yeah, it's built into node, are you trying to bundle for node

3388
01:59:46,000 --> 01:59:48,000
this is an esbuild specific thing

3389
01:59:48,000 --> 01:59:50,000
but this is what you would run into with the bundler

3390
01:59:50,000 --> 01:59:52,000
where it tries to bundle

3391
01:59:52,000 --> 01:59:54,000
this into the client

3392
01:59:54,000 --> 01:59:56,000
and it decides, well, you can't import

3393
01:59:56,000 --> 01:59:58,000
from node on the client, so I'm gonna

3394
01:59:58,000 --> 02:00:00,000
fail out

3395
02:00:00,000 --> 02:00:02,000
right, and so the way

3396
02:00:02,000 --> 02:00:04,000
and then the way you fix it

3397
02:00:04,000 --> 02:00:06,000
the way you kind of do this thing

3398
02:00:06,000 --> 02:00:08,000
where, you know, the

3399
02:00:08,000 --> 02:00:10,000
I'll switch back to Excalibur

3400
02:00:10,000 --> 02:00:12,000
can I see the Excalibur

3401
02:00:12,000 --> 02:00:14,000
yep

3402
02:00:14,000 --> 02:00:16,000
okay, so, yeah, so the problem we have

3403
02:00:16,000 --> 02:00:18,000
right now is like, we're doing this

3404
02:00:18,000 --> 02:00:20,000
and, again, this thing

3405
02:00:20,000 --> 02:00:22,000
is, this

3406
02:00:22,000 --> 02:00:24,000
is rendering, like, Pokemon

3407
02:00:24,000 --> 02:00:26,000
which is not actually Pokemon

3408
02:00:26,000 --> 02:00:28,000
it's a York album, but let's say it's Pokemon

3409
02:00:28,000 --> 02:00:30,000
and then this thing is actually

3410
02:00:30,000 --> 02:00:32,000
like, it can only

3411
02:00:32,000 --> 02:00:34,000
work on the server

3412
02:00:34,000 --> 02:00:36,000
right, so because it uses, like, node

3413
02:00:36,000 --> 02:00:38,000
or something, so it actually, like, this

3414
02:00:38,000 --> 02:00:40,000
is why it errors

3415
02:00:40,000 --> 02:00:42,000
and so the way

3416
02:00:42,000 --> 02:00:44,000
you would fix it is

3417
02:00:44,000 --> 02:00:46,000
you can

3418
02:00:46,000 --> 02:00:48,000
but, and, like, you're

3419
02:00:48,000 --> 02:00:50,000
the component structure that you want to have

3420
02:00:50,000 --> 02:00:52,000
looks like

3421
02:00:52,000 --> 02:00:54,000
this, so

3422
02:00:54,000 --> 02:00:56,000
this is what you're trying to do

3423
02:00:56,000 --> 02:00:58,000
but the problem is, like

3424
02:00:58,000 --> 02:01:00,000
this is a client component

3425
02:01:00,000 --> 02:01:02,000
and so you can't import the server component

3426
02:01:02,000 --> 02:01:04,000
from client component

3427
02:01:04,000 --> 02:01:06,000
but what you can do is

3428
02:01:06,000 --> 02:01:08,000
keep the component structure

3429
02:01:08,000 --> 02:01:10,000
kind of

3430
02:01:10,000 --> 02:01:12,000
the same

3431
02:01:12,000 --> 02:01:14,000
except you render

3432
02:01:14,000 --> 02:01:16,000
there's not a great way to show it

3433
02:01:16,000 --> 02:01:18,000
but they kind of

3434
02:01:18,000 --> 02:01:20,000
render it

3435
02:01:20,000 --> 02:01:22,000
let me try to

3436
02:01:22,000 --> 02:01:24,000
make this a bit nicer

3437
02:01:28,000 --> 02:01:30,000
I don't know why this didn't work

3438
02:01:30,000 --> 02:01:32,000
let me just show it in code

3439
02:01:32,000 --> 02:01:34,000
and then I'll try to redraw the picture

3440
02:01:34,000 --> 02:01:36,000
so in code what you do

3441
02:01:36,000 --> 02:01:38,000
is you

3442
02:01:38,000 --> 02:01:40,000
so you go back

3443
02:01:40,000 --> 02:01:42,000
to here, so

3444
02:01:42,000 --> 02:01:44,000
we go back to searchable

3445
02:01:44,000 --> 02:01:46,000
album list, we can't render

3446
02:01:46,000 --> 02:01:48,000
Pokemon here because it's a server component

3447
02:01:48,000 --> 02:01:50,000
so what we're going to do instead

3448
02:01:50,000 --> 02:01:52,000
we're going to make a hole in our component

3449
02:01:52,000 --> 02:01:54,000
so we're going to accept children as a prop

3450
02:01:54,000 --> 02:01:56,000
from above

3451
02:01:56,000 --> 02:01:58,000
so now we

3452
02:01:58,000 --> 02:02:00,000
it's just like, you know, it's the same way

3453
02:02:00,000 --> 02:02:02,000
it's not server component specific thing

3454
02:02:02,000 --> 02:02:04,000
it's just how you make a hole in the component

3455
02:02:04,000 --> 02:02:06,000
that the parent can fill in

3456
02:02:06,000 --> 02:02:08,000
and so we copy and paste

3457
02:02:08,000 --> 02:02:10,000
Pokemon again, we

3458
02:02:10,000 --> 02:02:12,000
go back to our server component

3459
02:02:12,000 --> 02:02:14,000
we paste Pokemon import here

3460
02:02:14,000 --> 02:02:16,000
and so we

3461
02:02:16,000 --> 02:02:18,000
this is not necessary

3462
02:02:18,000 --> 02:02:20,000
and so what we do is this

3463
02:02:20,000 --> 02:02:22,000
we pass Pokemon as a child

3464
02:02:22,000 --> 02:02:24,000
to searchable album list

3465
02:02:24,000 --> 02:02:26,000
and so

3466
02:02:26,000 --> 02:02:28,000
yeah

3467
02:02:28,000 --> 02:02:30,000
and so I think this should work

3468
02:02:30,000 --> 02:02:32,000
if you, I don't know, can you try it

3469
02:02:32,000 --> 02:02:34,000
yeah

3470
02:02:34,000 --> 02:02:36,000
let's give it a try

3471
02:02:36,000 --> 02:02:38,000
and also just for my own

3472
02:02:38,000 --> 02:02:40,000
sanity, I just want to rename

3473
02:02:40,000 --> 02:02:42,000
the component

3474
02:02:42,000 --> 02:02:44,000
if anyone's popping in, because apparently there's

3475
02:02:44,000 --> 02:02:46,000
2,000 people

3476
02:02:46,000 --> 02:02:48,000
if that's true

3477
02:02:48,000 --> 02:02:50,000
hello, and thank you

3478
02:02:50,000 --> 02:02:52,000
so much

3479
02:02:52,000 --> 02:02:54,000
let's pass that in

3480
02:02:54,000 --> 02:02:56,000
so this is a file system call

3481
02:02:56,000 --> 02:02:58,000
that we're passing down as a prop basically

3482
02:02:58,000 --> 02:03:00,000
in order to slot it into our page

3483
02:03:00,000 --> 02:03:02,000
so I'll go ahead and do that

3484
02:03:02,000 --> 02:03:04,000
and hopefully that's

3485
02:03:04,000 --> 02:03:06,000
everything working

3486
02:03:06,000 --> 02:03:08,000
so we head over here

3487
02:03:08,000 --> 02:03:10,000
we should see that

3488
02:03:10,000 --> 02:03:12,000
and then, oh no, things have happened

3489
02:03:12,000 --> 02:03:14,000
okay, that's

3490
02:03:14,000 --> 02:03:16,000
it's just trying to fetch a file that it can't find

3491
02:03:16,000 --> 02:03:18,000
yeah, that's just me

3492
02:03:18,000 --> 02:03:20,000
getting file paths wrong

3493
02:03:20,000 --> 02:03:22,000
I'll head over here

3494
02:03:22,000 --> 02:03:24,000
and because it gets built to a dist folder

3495
02:03:24,000 --> 02:03:26,000
it's actually different, that's the issue

3496
02:03:26,000 --> 02:03:28,000
there we go

3497
02:03:28,000 --> 02:03:30,000
alright, so now we actually get

3498
02:03:30,000 --> 02:03:32,000
the readout from the file system

3499
02:03:32,000 --> 02:03:34,000
passed down

3500
02:03:34,000 --> 02:03:36,000
the server component output

3501
02:03:36,000 --> 02:03:38,000
so the thing that

3502
02:03:38,000 --> 02:03:40,000
in our case is just

3503
02:03:40,000 --> 02:03:42,000
it's reading from a file, but

3504
02:03:42,000 --> 02:03:44,000
it's kind of stuffed into

3505
02:03:44,000 --> 02:03:46,000
between the parts

3506
02:03:46,000 --> 02:03:48,000
the client parts

3507
02:03:48,000 --> 02:03:50,000
and the way we can maybe

3508
02:03:50,000 --> 02:03:52,000
like the way

3509
02:03:52,000 --> 02:03:54,000
let me try to update my diagram

3510
02:03:54,000 --> 02:03:56,000
so in

3511
02:03:56,000 --> 02:03:58,000
this example

3512
02:03:58,000 --> 02:04:00,000
if I'm using blue

3513
02:04:00,000 --> 02:04:02,000
for

3514
02:04:02,000 --> 02:04:04,000
so we've moved

3515
02:04:04,000 --> 02:04:06,000
you see the way we import things

3516
02:04:06,000 --> 02:04:08,000
has changed, right, so the component

3517
02:04:08,000 --> 02:04:10,000
tree is still the same

3518
02:04:10,000 --> 02:04:12,000
like the pokemon is kind of rendered

3519
02:04:12,000 --> 02:04:14,000
inside of searchable album list

3520
02:04:14,000 --> 02:04:16,000
but the way the imports

3521
02:04:16,000 --> 02:04:18,000
are structured is that actually

3522
02:04:18,000 --> 02:04:20,000
root.server.js

3523
02:04:20,000 --> 02:04:22,000
imports searchable

3524
02:04:22,000 --> 02:04:24,000
album list and it also

3525
02:04:24,000 --> 02:04:26,000
imports pokemon.js

3526
02:04:26,000 --> 02:04:28,000
sorry

3527
02:04:28,000 --> 02:04:30,000
it's not pokemon anymore

3528
02:04:30,000 --> 02:04:32,000
it's searchable

3529
02:04:32,000 --> 02:04:34,000
so yeah, I'm going to change that here as well

3530
02:04:34,000 --> 02:04:36,000
and so it

3531
02:04:36,000 --> 02:04:38,000
it imports this file as well

3532
02:04:38,000 --> 02:04:40,000
and the use client

3533
02:04:40,000 --> 02:04:42,000
is only

3534
02:04:42,000 --> 02:04:44,000
let me take this

3535
02:04:44,000 --> 02:04:46,000
so now use client works because

3536
02:04:46,000 --> 02:04:48,000
I think I can just change this

3537
02:04:48,000 --> 02:04:50,000
to like blue, right?

3538
02:04:50,000 --> 02:04:52,000
sorry, I forgot about

3539
02:04:52,000 --> 02:04:54,000
the

3540
02:04:54,000 --> 02:04:56,000
so it's kind of

3541
02:04:56,000 --> 02:04:58,000
like an island, yeah, sort of

3542
02:04:58,000 --> 02:05:00,000
like anything imports will also

3543
02:05:00,000 --> 02:05:02,000
be like in the client bundle

3544
02:05:02,000 --> 02:05:04,000
but then the remaining stuff like

3545
02:05:04,000 --> 02:05:06,000
that

3546
02:05:06,000 --> 02:05:08,000
still executes

3547
02:05:08,000 --> 02:05:10,000
on the server only and so that's

3548
02:05:10,000 --> 02:05:12,000
why it works

3549
02:05:12,000 --> 02:05:14,000
yeah, exactly

3550
02:05:14,000 --> 02:05:16,000
and I mean you're using all the terms

3551
02:05:16,000 --> 02:05:18,000
that we've used at Astro

3552
02:05:18,000 --> 02:05:20,000
I was kind of freaking out a little bit when you said

3553
02:05:20,000 --> 02:05:22,000
donut islands on a stream the other day

3554
02:05:22,000 --> 02:05:24,000
I was like that's what we call them

3555
02:05:24,000 --> 02:05:26,000
where what you're doing is

3556
02:05:26,000 --> 02:05:28,000
you've created this

3557
02:05:28,000 --> 02:05:30,000
an island of client-side

3558
02:05:30,000 --> 02:05:32,000
logic and you

3559
02:05:32,000 --> 02:05:34,000
want to pass something through a hole

3560
02:05:34,000 --> 02:05:36,000
in the middle as a prop

3561
02:05:36,000 --> 02:05:38,000
where really anything can be

3562
02:05:38,000 --> 02:05:40,000
a prop that's passed down, it can be

3563
02:05:40,000 --> 02:05:42,000
data or it can be JSX

3564
02:05:42,000 --> 02:05:44,000
and in this case that's what

3565
02:05:44,000 --> 02:05:46,000
React is doing, like Bjork album has

3566
02:05:46,000 --> 02:05:48,000
become

3567
02:05:48,000 --> 02:05:50,000
a prop that is going to

3568
02:05:50,000 --> 02:05:52,000
render this stuff out on the server

3569
02:05:52,000 --> 02:05:54,000
get that data and then

3570
02:05:54,000 --> 02:05:56,000
pass it into the client

3571
02:05:56,000 --> 02:05:58,000
so that's another thing about fetching too

3572
02:05:58,000 --> 02:06:00,000
what's going to happen is it's going to fetch all the albums

3573
02:06:00,000 --> 02:06:02,000
in this setup right now

3574
02:06:02,000 --> 02:06:04,000
then it's going to fetch the Bjork album

3575
02:06:04,000 --> 02:06:06,000
with the file system call

3576
02:06:06,000 --> 02:06:08,000
and once both of those are resolved

3577
02:06:08,000 --> 02:06:10,000
it'll pass this guy down

3578
02:06:10,000 --> 02:06:12,000
do I have that right?

3579
02:06:12,000 --> 02:06:14,000
not quite, so in this example

3580
02:06:14,000 --> 02:06:16,000
I think if we

3581
02:06:16,000 --> 02:06:18,000
specifically talk about the ordering

3582
02:06:18,000 --> 02:06:20,000
I believe it will

3583
02:06:20,000 --> 02:06:22,000
try the

3584
02:06:22,000 --> 02:06:24,000
oh yeah

3585
02:06:24,000 --> 02:06:26,000
because await is

3586
02:06:26,000 --> 02:06:28,000
above it

3587
02:06:28,000 --> 02:06:30,000
so it's going to fetch the list of

3588
02:06:30,000 --> 02:06:32,000
albums and then it's going to

3589
02:06:32,000 --> 02:06:34,000
get here, it's going to render the Bjork

3590
02:06:34,000 --> 02:06:36,000
album and then it's going to tell

3591
02:06:36,000 --> 02:06:38,000
the client, hey here's

3592
02:06:38,000 --> 02:06:40,000
the thing you should slot into

3593
02:06:40,000 --> 02:06:42,000
the donut and here are

3594
02:06:42,000 --> 02:06:44,000
other, because children

3595
02:06:44,000 --> 02:06:46,000
is just another prop

3596
02:06:46,000 --> 02:06:48,000
there is actually no specific

3597
02:06:48,000 --> 02:06:50,000
it could have been called

3598
02:06:50,000 --> 02:06:52,000
donut content

3599
02:06:52,000 --> 02:06:54,000
equals this

3600
02:06:54,000 --> 02:06:56,000
right, and then you would

3601
02:06:56,000 --> 02:06:58,000
you would also

3602
02:06:58,000 --> 02:07:00,000
because it's just a prop that you pass

3603
02:07:00,000 --> 02:07:02,000
and then with

3604
02:07:02,000 --> 02:07:04,000
server components, when it

3605
02:07:04,000 --> 02:07:06,000
meets a client component

3606
02:07:06,000 --> 02:07:08,000
with a bunch of props

3607
02:07:08,000 --> 02:07:10,000
it tries to serialize those

3608
02:07:10,000 --> 02:07:12,000
props into JSON

3609
02:07:12,000 --> 02:07:14,000
and when it meets more JSX

3610
02:07:14,000 --> 02:07:16,000
it's like, oh I guess I have more server things to do

3611
02:07:16,000 --> 02:07:18,000
so that's why it kind of steps into

3612
02:07:18,000 --> 02:07:20,000
the Bjork album and tries to resolve that

3613
02:07:20,000 --> 02:07:22,000
and that becomes part of the stream

3614
02:07:22,000 --> 02:07:24,000
so that's how it works

3615
02:07:24,000 --> 02:07:26,000
very cool stuff

3616
02:07:26,000 --> 02:07:28,000
and yeah I was

3617
02:07:28,000 --> 02:07:30,000
hoping these devlogs would kind of show you

3618
02:07:30,000 --> 02:07:32,000
that but I think these headers are

3619
02:07:32,000 --> 02:07:34,000
completely wrong, the important part here

3620
02:07:34,000 --> 02:07:36,000
is like, well what's

3621
02:07:36,000 --> 02:07:38,000
coming down the wire on this part

3622
02:07:38,000 --> 02:07:40,000
and I hope you can still see it, there we go

3623
02:07:40,000 --> 02:07:42,000
maybe we can make

3624
02:07:42,000 --> 02:07:44,000
the, I think it's just confusing that

3625
02:07:44,000 --> 02:07:46,000
it's such a long output

3626
02:07:46,000 --> 02:07:48,000
let's just slice

3627
02:07:48,000 --> 02:07:50,000
the first 10 letters

3628
02:07:50,000 --> 02:07:52,000
or something like this, is that

3629
02:07:52,000 --> 02:07:54,000
how you, no I think

3630
02:07:54,000 --> 02:07:56,000
0, 10, maybe something like this

3631
02:07:56,000 --> 02:07:58,000
oh yeah we can do that too

3632
02:07:58,000 --> 02:08:00,000
so maybe let's look for

3633
02:08:00,000 --> 02:08:02,000
let's have a look at what's happening

3634
02:08:02,000 --> 02:08:04,000
in the dev panel

3635
02:08:06,000 --> 02:08:08,000
maybe also let's show just

3636
02:08:08,000 --> 02:08:10,000
one first album

3637
02:08:10,000 --> 02:08:12,000
so that we

3638
02:08:12,000 --> 02:08:14,000
don't have so much to read so I'm gonna make

3639
02:08:14,000 --> 02:08:16,000
it like albums, album

3640
02:08:16,000 --> 02:08:18,000
0, so I've dated

3641
02:08:18,000 --> 02:08:20,000
that you only see one

3642
02:08:20,000 --> 02:08:22,000
nice, okay

3643
02:08:22,000 --> 02:08:24,000
and let's now have a look at what's actually

3644
02:08:24,000 --> 02:08:26,000
happening in the

3645
02:08:26,000 --> 02:08:28,000
response from the beginning

3646
02:08:28,000 --> 02:08:30,000
yeah

3647
02:08:30,000 --> 02:08:32,000
so I mean what I'm seeing

3648
02:08:32,000 --> 02:08:34,000
is it starts from showing

3649
02:08:34,000 --> 02:08:36,000
you welcome to server components

3650
02:08:36,000 --> 02:08:38,000
then we show our loading spinner and we're gonna

3651
02:08:38,000 --> 02:08:40,000
wait for the next chunk to come down to replace

3652
02:08:40,000 --> 02:08:42,000
that loading spinner

3653
02:08:42,000 --> 02:08:44,000
and that's actually here

3654
02:08:44,000 --> 02:08:46,000
interestingly, so the 4 and the

3655
02:08:46,000 --> 02:08:48,000
3 are a little out of order with what it

3656
02:08:48,000 --> 02:08:50,000
decided, it can always

3657
02:08:50,000 --> 02:08:52,000
change, but the client part

3658
02:08:52,000 --> 02:08:54,000
is just gonna be an import

3659
02:08:54,000 --> 02:08:56,000
so this is gonna go import that

3660
02:08:56,000 --> 02:08:58,000
file and we don't care what it does

3661
02:08:58,000 --> 02:09:00,000
we're just gonna import it and assume it's browser

3662
02:09:00,000 --> 02:09:02,000
ready javascript that we can throw on there

3663
02:09:02,000 --> 02:09:04,000
and the

3664
02:09:04,000 --> 02:09:06,000
information is gonna be there

3665
02:09:06,000 --> 02:09:08,000
maybe the way I would describe

3666
02:09:08,000 --> 02:09:10,000
it is, if you scroll back

3667
02:09:10,000 --> 02:09:12,000
up a little bit

3668
02:09:12,000 --> 02:09:14,000
in the

3669
02:09:14,000 --> 02:09:16,000
response, notice that

3670
02:09:16,000 --> 02:09:18,000
in the protocol we have

3671
02:09:18,000 --> 02:09:20,000
for example like h1 or

3672
02:09:20,000 --> 02:09:22,000
there's like names of

3673
02:09:22,000 --> 02:09:24,000
the tags, right, so we

3674
02:09:24,000 --> 02:09:26,000
kind of say, this is a react element

3675
02:09:26,000 --> 02:09:28,000
this is a part of the react tree that's like

3676
02:09:28,000 --> 02:09:30,000
h1, but then

3677
02:09:30,000 --> 02:09:32,000
if we also want to be able to

3678
02:09:32,000 --> 02:09:34,000
say, here's

3679
02:09:34,000 --> 02:09:36,000
a react component

3680
02:09:36,000 --> 02:09:38,000
you need to download

3681
02:09:38,000 --> 02:09:40,000
from a script tag

3682
02:09:40,000 --> 02:09:42,000
and render, and so if you look a little

3683
02:09:42,000 --> 02:09:44,000
bit below

3684
02:09:44,000 --> 02:09:46,000
where it says later response

3685
02:09:46,000 --> 02:09:48,000
instead of h1, you see

3686
02:09:48,000 --> 02:09:50,000
this $l4

3687
02:09:50,000 --> 02:09:52,000
which is again implementation detail, it doesn't

3688
02:09:52,000 --> 02:09:54,000
actually matter, but this is

3689
02:09:54,000 --> 02:09:56,000
a reference to the

3690
02:09:56,000 --> 02:09:58,000
previous thing in the response

3691
02:09:58,000 --> 02:10:00,000
so instead of h1, you're rendering

3692
02:10:00,000 --> 02:10:02,000
searchable album list

3693
02:10:02,000 --> 02:10:04,000
so this instruction tells react, here's

3694
02:10:04,000 --> 02:10:06,000
where to download this code, it exists

3695
02:10:06,000 --> 02:10:08,000
in this script tag

3696
02:10:08,000 --> 02:10:10,000
so this is what I meant

3697
02:10:10,000 --> 02:10:12,000
by automatic code splitting

3698
02:10:12,000 --> 02:10:14,000
because if we remove

3699
02:10:14,000 --> 02:10:16,000
searchable, like if we edit our

3700
02:10:16,000 --> 02:10:18,000
server with

3701
02:10:18,000 --> 02:10:20,000
component for example

3702
02:10:20,000 --> 02:10:22,000
to check your

3703
02:10:22,000 --> 02:10:24,000
privileges and be like, if you're not an admin

3704
02:10:24,000 --> 02:10:26,000
don't show searchable

3705
02:10:26,000 --> 02:10:28,000
album list, then

3706
02:10:28,000 --> 02:10:30,000
the server will not send the instruction

3707
02:10:30,000 --> 02:10:32,000
to download searchable album list

3708
02:10:32,000 --> 02:10:34,000
so you wouldn't even have it, you know, you wouldn't

3709
02:10:34,000 --> 02:10:36,000
load that bundle at all

3710
02:10:36,000 --> 02:10:38,000
because it's just not necessary

3711
02:10:38,000 --> 02:10:40,000
so this is what I mean by automatic code splitting

3712
02:10:40,000 --> 02:10:42,000
but yeah, other

3713
02:10:42,000 --> 02:10:44,000
than that, it kind of says

3714
02:10:44,000 --> 02:10:46,000
the later part of the tree is

3715
02:10:46,000 --> 02:10:48,000
this module called searchable album list

3716
02:10:48,000 --> 02:10:50,000
that exists in your bundle

3717
02:10:50,000 --> 02:10:52,000
in your example, it seems like

3718
02:10:52,000 --> 02:10:54,000
it's like a separate file

3719
02:10:54,000 --> 02:10:56,000
like in optimized bundler

3720
02:10:56,000 --> 02:10:58,000
you would have them split into chunks

3721
02:10:58,000 --> 02:11:00,000
that have more than

3722
02:11:00,000 --> 02:11:02,000
one component of course in them, otherwise

3723
02:11:02,000 --> 02:11:04,000
you'd be downloading too many script tags

3724
02:11:04,000 --> 02:11:06,000
but yeah, you can see

3725
02:11:06,000 --> 02:11:08,000
it says render this thing

3726
02:11:08,000 --> 02:11:10,000
that's like a client component

3727
02:11:10,000 --> 02:11:12,000
and here are its

3728
02:11:12,000 --> 02:11:14,000
props, and so you see album's prop

3729
02:11:14,000 --> 02:11:16,000
contains the

3730
02:11:16,000 --> 02:11:18,000
album stuff

3731
02:11:18,000 --> 02:11:20,000
and then if you scroll down

3732
02:11:20,000 --> 02:11:22,000
it says children L5

3733
02:11:22,000 --> 02:11:24,000
which is like

3734
02:11:24,000 --> 02:11:26,000
reference to some content chunk

3735
02:11:26,000 --> 02:11:28,000
that arrives later

3736
02:11:28,000 --> 02:11:30,000
It's actually the Bjork album, but we

3737
02:11:30,000 --> 02:11:32,000
chopped off very few characters

3738
02:11:32,000 --> 02:11:34,000
Yeah, yeah

3739
02:11:34,000 --> 02:11:36,000
I might bump that to like 50 or something

3740
02:11:36,000 --> 02:11:38,000
and then it'll show you just a little bit

3741
02:11:38,000 --> 02:11:40,000
it actually shows you a lot more, doesn't it?

3742
02:11:40,000 --> 02:11:42,000
Oh yeah, right here, so this is the later later

3743
02:11:42,000 --> 02:11:44,000
chunk once that is resolved

3744
02:11:44,000 --> 02:11:46,000
and that gets

3745
02:11:46,000 --> 02:11:48,000
passed in as a prop

3746
02:11:48,000 --> 02:11:50,000
it gets harder to trace the more components you have obviously

3747
02:11:50,000 --> 02:11:52,000
which makes sense

3748
02:11:52,000 --> 02:11:54,000
because this is just a dump of what it's actually sending down

3749
02:11:54,000 --> 02:11:56,000
but I see what you mean

3750
02:11:56,000 --> 02:11:58,000
like oh, it would be right here

3751
02:11:58,000 --> 02:12:00,000
so the children of this

3752
02:12:00,000 --> 02:12:02,000
component are going to be 5

3753
02:12:02,000 --> 02:12:04,000
whenever it resolves, and then here it is

3754
02:12:04,000 --> 02:12:06,000
here is that dump

3755
02:12:06,000 --> 02:12:08,000
from the Bjork album file

3756
02:12:08,000 --> 02:12:10,000
and we're going to pass it into this component

3757
02:12:10,000 --> 02:12:12,000
which I think we can trace back up

3758
02:12:12,000 --> 02:12:14,000
to

3759
02:12:14,000 --> 02:12:16,000
somewhere

3760
02:12:16,000 --> 02:12:18,000
5 is

3761
02:12:18,000 --> 02:12:20,000
right at the end

3762
02:12:20,000 --> 02:12:22,000
5 is children L5

3763
02:12:22,000 --> 02:12:24,000
Yep, and that's being

3764
02:12:24,000 --> 02:12:26,000
passed into searchable album list

3765
02:12:26,000 --> 02:12:28,000
so the numbers correspond

3766
02:12:28,000 --> 02:12:30,000
where it's like that's the data

3767
02:12:30,000 --> 02:12:32,000
that's the children prop that we're going to pass in

3768
02:12:32,000 --> 02:12:34,000
and all of this corresponds to number 4

3769
02:12:34,000 --> 02:12:36,000
which is

3770
02:12:36,000 --> 02:12:38,000
the actual album list that we're rendering

3771
02:12:38,000 --> 02:12:40,000
onto the page

3772
02:12:40,000 --> 02:12:42,000
and all of this is

3773
02:12:42,000 --> 02:12:44,000
composable, so of course if you put

3774
02:12:44,000 --> 02:12:46,000
suspense

3775
02:12:46,000 --> 02:12:48,000
around the Bjork album

3776
02:12:48,000 --> 02:12:50,000
now, so you do

3777
02:12:50,000 --> 02:12:52,000
like, I don't know

3778
02:12:52,000 --> 02:12:54,000
let me try to

3779
02:12:54,000 --> 02:12:56,000
do something here

3780
02:13:00,000 --> 02:13:02,000
I'm also forcing

3781
02:13:02,000 --> 02:13:04,000
Dan Abramov to use VS Code, I'm sorry

3782
02:13:04,000 --> 02:13:06,000
people, are you a Vim user?

3783
02:13:06,000 --> 02:13:08,000
No, no, I can't

3784
02:13:08,000 --> 02:13:10,000
but I'm a happy

3785
02:13:10,000 --> 02:13:12,000
Sublime user, I don't understand why it keeps

3786
02:13:12,000 --> 02:13:14,000
trying to close my tags, like it never

3787
02:13:14,000 --> 02:13:16,000
does it the way that I want

3788
02:13:16,000 --> 02:13:18,000
Yeah, it's a Prime Machine raid

3789
02:13:18,000 --> 02:13:20,000
so I have to ask about Vim, so

3790
02:13:20,000 --> 02:13:22,000
it's neither, you use Sublime tags, interesting

3791
02:13:22,000 --> 02:13:24,000
So I'm also

3792
02:13:24,000 --> 02:13:26,000
going to add an artificial delay

3793
02:13:26,000 --> 02:13:28,000
here so that we

3794
02:13:28,000 --> 02:13:30,000
can, let's say, wait for

3795
02:13:32,000 --> 02:13:34,000
wait for like 2 seconds

3796
02:13:34,000 --> 02:13:36,000
like imagine this file system

3797
02:13:36,000 --> 02:13:38,000
call is super expensive

3798
02:13:38,000 --> 02:13:40,000
so maybe let's have a look at what

3799
02:13:40,000 --> 02:13:42,000
happens after this

3800
02:13:44,000 --> 02:13:46,000
Yeah, let's see what happens

3801
02:13:46,000 --> 02:13:48,000
Okay, something

3802
02:13:48,000 --> 02:13:50,000
failed with just parsing

3803
02:13:50,000 --> 02:13:52,000
the file

3804
02:13:52,000 --> 02:13:54,000
Don't know what happened there, let me double check

3805
02:13:54,000 --> 02:13:56,000
It might have tried to save at the wrong time

3806
02:13:56,000 --> 02:13:58,000
I know VS Code can get out of sync with that

3807
02:13:58,000 --> 02:14:00,000
Yeah, there we go

3808
02:14:00,000 --> 02:14:02,000
Okay, and yeah, now we have this out of order

3809
02:14:02,000 --> 02:14:04,000
streaming setup

3810
02:14:04,000 --> 02:14:06,000
where when you load the page first

3811
02:14:06,000 --> 02:14:08,000
it loads everything

3812
02:14:08,000 --> 02:14:10,000
then it does the file system call and it slots

3813
02:14:10,000 --> 02:14:12,000
it in here later

3814
02:14:12,000 --> 02:14:14,000
while preserving the other markup

3815
02:14:14,000 --> 02:14:16,000
that you have

3816
02:14:16,000 --> 02:14:18,000
Yeah, and so the cool

3817
02:14:18,000 --> 02:14:20,000
about it from my perspective is

3818
02:14:20,000 --> 02:14:22,000
like in

3819
02:14:22,000 --> 02:14:24,000
you know, we parse some

3820
02:14:24,000 --> 02:14:26,000
server stuff that still might be

3821
02:14:26,000 --> 02:14:28,000
waiting for something, but we kind of

3822
02:14:28,000 --> 02:14:30,000
unblock the rest of the

3823
02:14:30,000 --> 02:14:32,000
even like client stuff from rendering by

3824
02:14:32,000 --> 02:14:34,000
just putting suspense in there

3825
02:14:34,000 --> 02:14:36,000
Yeah, exactly

3826
02:14:36,000 --> 02:14:38,000
It's the easiest switch to slot into

3827
02:14:38,000 --> 02:14:40,000
where the default is like wait for everything

3828
02:14:40,000 --> 02:14:42,000
which is usually what you want so you don't

3829
02:14:42,000 --> 02:14:44,000
have layout shift, and then it's like

3830
02:14:44,000 --> 02:14:46,000
well actually I do have

3831
02:14:46,000 --> 02:14:48,000
I actually have a way to handle layout shift

3832
02:14:48,000 --> 02:14:50,000
I have like a loading spinner that's a perfectly sized

3833
02:14:50,000 --> 02:14:52,000
skeleton, so I'm going to see

3834
02:14:52,000 --> 02:14:54,000
Yeah, here it's not really ideal

3835
02:14:54,000 --> 02:14:56,000
what we're doing where it like bops things

3836
02:14:56,000 --> 02:14:58,000
down the page as soon as it comes in

3837
02:14:58,000 --> 02:15:00,000
because you know, if that's like above the

3838
02:15:00,000 --> 02:15:02,000
fold on your hero banner

3839
02:15:02,000 --> 02:15:04,000
you probably want to have like a loading state

3840
02:15:04,000 --> 02:15:06,000
that's matched up to it

3841
02:15:06,000 --> 02:15:08,000
Yeah

3842
02:15:08,000 --> 02:15:10,000
So I don't know how much

3843
02:15:10,000 --> 02:15:12,000
time to have

3844
02:15:12,000 --> 02:15:14,000
but how deep do we want to go

3845
02:15:14,000 --> 02:15:16,000
because it would be fun to also

3846
02:15:16,000 --> 02:15:18,000
like I added a bunch of hacks just to

3847
02:15:18,000 --> 02:15:20,000
kind of show the idea

3848
02:15:20,000 --> 02:15:22,000
but I think it might be fun to

3849
02:15:22,000 --> 02:15:24,000
get rid of the weird

3850
02:15:24,000 --> 02:15:26,000
PR problem component and instead look at

3851
02:15:26,000 --> 02:15:28,000
what it would look like to

3852
02:15:28,000 --> 02:15:30,000
refetch, like to do

3853
02:15:30,000 --> 02:15:32,000
search on the server, I think that's like one

3854
02:15:32,000 --> 02:15:34,000
That would be very cool

3855
02:15:34,000 --> 02:15:36,000
Yeah, I mean I only

3856
02:15:36,000 --> 02:15:38,000
booked two hours to like be conscious of your time

3857
02:15:38,000 --> 02:15:40,000
but if you're good to keep going, I am

3858
02:15:40,000 --> 02:15:42,000
as well

3859
02:15:42,000 --> 02:15:44,000
I think I have some more time

3860
02:15:44,000 --> 02:15:46,000
I don't have to run anywhere

3861
02:15:46,000 --> 02:15:48,000
Okay

3862
02:15:48,000 --> 02:15:50,000
So to do that, I'm wondering if

3863
02:15:50,000 --> 02:15:52,000
we can, should we hop over

3864
02:15:52,000 --> 02:15:54,000
to the Next.js example to try server search

3865
02:15:54,000 --> 02:15:56,000
or are we still comfortable here?

3866
02:15:56,000 --> 02:15:58,000
I think we can try to do it here

3867
02:15:58,000 --> 02:16:00,000
like if it doesn't work, we can do

3868
02:16:00,000 --> 02:16:02,000
you know, we can use Next.js but now I'm kind of like

3869
02:16:02,000 --> 02:16:04,000
you seem to have a setup that kind of

3870
02:16:04,000 --> 02:16:06,000
works and I like the

3871
02:16:06,000 --> 02:16:08,000
you know, I like your

3872
02:16:08,000 --> 02:16:10,000
I like your, it's

3873
02:16:10,000 --> 02:16:12,000
no small effort because like none of it is documented

3874
02:16:12,000 --> 02:16:14,000
so it's

3875
02:16:14,000 --> 02:16:16,000
yeah, it is

3876
02:16:16,000 --> 02:16:18,000
impressive, so I'd say

3877
02:16:18,000 --> 02:16:20,000
let's keep going until your setup breaks

3878
02:16:20,000 --> 02:16:22,000
I like it, it's gotten

3879
02:16:22,000 --> 02:16:24,000
close, it's definitely gotten close

3880
02:16:24,000 --> 02:16:26,000
but the duct tape's holding

3881
02:16:26,000 --> 02:16:28,000
Yeah, I really like your development panel

3882
02:16:28,000 --> 02:16:30,000
I think I'm a bit conflicted

3883
02:16:30,000 --> 02:16:32,000
about it because I'm worried

3884
02:16:32,000 --> 02:16:34,000
that like people on the stream would be like

3885
02:16:34,000 --> 02:16:36,000
oh, this is so complicated, like

3886
02:16:36,000 --> 02:16:38,000
this whole output, but it's really

3887
02:16:38,000 --> 02:16:40,000
kind of like reading the network tab

3888
02:16:40,000 --> 02:16:42,000
so the point is not, you know

3889
02:16:42,000 --> 02:16:44,000
you wouldn't see this as a user

3890
02:16:44,000 --> 02:16:46,000
but I do see the value, you know, as an

3891
02:16:46,000 --> 02:16:48,000
instructional tool of here's how it actually

3892
02:16:48,000 --> 02:16:50,000
works, because it's not that

3893
02:16:50,000 --> 02:16:52,000
complicated if you think, you know

3894
02:16:52,000 --> 02:16:54,000
about what it's

3895
02:16:54,000 --> 02:16:56,000
trying to do

3896
02:16:56,000 --> 02:16:58,000
Yeah, exactly. Yeah, the dev panel

3897
02:16:58,000 --> 02:17:00,000
was really, I just intended it for

3898
02:17:00,000 --> 02:17:02,000
like the first 30 minutes to show

3899
02:17:02,000 --> 02:17:04,000
oh, here's the data streaming down and now

3900
02:17:04,000 --> 02:17:06,000
it waits for suspense, but it's like

3901
02:17:06,000 --> 02:17:08,000
it's also kind of useful to see like how much

3902
02:17:08,000 --> 02:17:10,000
stuff is coming down, like when we

3903
02:17:10,000 --> 02:17:12,000
pass down albums as a prop

3904
02:17:12,000 --> 02:17:14,000
suddenly the response got huge

3905
02:17:14,000 --> 02:17:16,000
because now it's passing down like all the songs

3906
02:17:16,000 --> 02:17:18,000
and stuff that you don't care about, so

3907
02:17:18,000 --> 02:17:20,000
it's useful to just see like volume and time

3908
02:17:20,000 --> 02:17:22,000
not necessarily the details

3909
02:17:22,000 --> 02:17:24,000
so maybe just like showing

3910
02:17:24,000 --> 02:17:26,000
well, it's always dangerous to show kilobyte

3911
02:17:26,000 --> 02:17:28,000
numbers because they're lies, but there's probably

3912
02:17:28,000 --> 02:17:30,000
a way to do it

3913
02:17:30,000 --> 02:17:32,000
Yeah, I'd love to see them both

3914
02:17:32,000 --> 02:17:34,000
so let's

3915
02:17:34,000 --> 02:17:36,000
let me just clean up, I want to

3916
02:17:36,000 --> 02:17:38,000
get rid of this part that doesn't

3917
02:17:38,000 --> 02:17:40,000
make sense because we just added it

3918
02:17:40,000 --> 02:17:42,000
as a demo, so let me

3919
02:17:42,000 --> 02:17:44,000
clean it back up to what

3920
02:17:44,000 --> 02:17:46,000
we had that

3921
02:17:46,000 --> 02:17:48,000
still made sense

3922
02:17:48,000 --> 02:17:50,000
as an example, I'm gonna get

3923
02:17:50,000 --> 02:17:52,000
rid of this children prop as well

3924
02:17:54,000 --> 02:17:56,000
Yeah, so I think

3925
02:17:56,000 --> 02:17:58,000
we should be back to our previous

3926
02:17:58,000 --> 02:18:00,000
example

3927
02:18:00,000 --> 02:18:02,000
and instant

3928
02:18:02,000 --> 02:18:04,000
search

3929
02:18:04,000 --> 02:18:06,000
and yeah, do you want to

3930
02:18:06,000 --> 02:18:08,000
do you want to try to add the

3931
02:18:08,000 --> 02:18:10,000
like the add in the

3932
02:18:10,000 --> 02:18:12,000
so what do we want

3933
02:18:12,000 --> 02:18:14,000
to do, right? Like we want to

3934
02:18:16,000 --> 02:18:18,000
we want to refetch

3935
02:18:18,000 --> 02:18:20,000
the server component tree

3936
02:18:20,000 --> 02:18:22,000
when you type into the input

3937
02:18:22,000 --> 02:18:24,000
right? Right

3938
02:18:24,000 --> 02:18:26,000
so maybe we want to

3939
02:18:26,000 --> 02:18:28,000
do like search on the server

3940
02:18:28,000 --> 02:18:30,000
maybe we show like just the first

3941
02:18:30,000 --> 02:18:32,000
like, I don't

3942
02:18:32,000 --> 02:18:34,000
know, two results

3943
02:18:34,000 --> 02:18:36,000
it doesn't seem to have like much data here

3944
02:18:36,000 --> 02:18:38,000
anyway, right? But maybe we

3945
02:18:38,000 --> 02:18:40,000
Yeah, there's only three albums

3946
02:18:40,000 --> 02:18:42,000
Okay, yeah

3947
02:18:42,000 --> 02:18:44,000
Yeah, so do you want to

3948
02:18:44,000 --> 02:18:46,000
do you want to drive

3949
02:18:46,000 --> 02:18:48,000
edit and we'll see

3950
02:18:48,000 --> 02:18:50,000
where it becomes confusing

3951
02:18:50,000 --> 02:18:52,000
I can try to do that

3952
02:18:52,000 --> 02:18:54,000
and one thing before we go

3953
02:18:54,000 --> 02:18:56,000
I'm actually going to

3954
02:18:56,000 --> 02:18:58,000
make the dev panel just a little bit

3955
02:18:58,000 --> 02:19:00,000
less tall in case

3956
02:19:00,000 --> 02:19:02,000
we have issues with that

3957
02:19:02,000 --> 02:19:04,000
I, oh man, I thought it would be an easy switch

3958
02:19:04,000 --> 02:19:06,000
where did I put it

3959
02:19:06,000 --> 02:19:08,000
yeah, okay

3960
02:19:08,000 --> 02:19:10,000
72

3961
02:19:10,000 --> 02:19:12,000
yeah, alright

3962
02:19:12,000 --> 02:19:14,000
and it scrolls for the rest, perfect

3963
02:19:14,000 --> 02:19:16,000
so in order to

3964
02:19:16,000 --> 02:19:18,000
do something like that

3965
02:19:18,000 --> 02:19:20,000
well the first thing

3966
02:19:20,000 --> 02:19:22,000
I'm going to do, I guess

3967
02:19:22,000 --> 02:19:24,000
and this feels like a coding interview right now

3968
02:19:24,000 --> 02:19:26,000
I'm thinking, but

3969
02:19:26,000 --> 02:19:28,000
yeah, we can remove that

3970
02:19:28,000 --> 02:19:30,000
we're not going to use that anymore

3971
02:19:30,000 --> 02:19:32,000
no use state

3972
02:19:32,000 --> 02:19:34,000
the filter album function is fine

3973
02:19:34,000 --> 02:19:36,000
to keep around

3974
02:19:38,000 --> 02:19:40,000
and as you input things

3975
02:19:40,000 --> 02:19:42,000
I assume we're going to

3976
02:19:42,000 --> 02:19:44,000
well, if we put query parameters

3977
02:19:44,000 --> 02:19:46,000
on the top of the page, it's going to refresh the

3978
02:19:46,000 --> 02:19:48,000
browser on every

3979
02:19:48,000 --> 02:19:50,000
input, but if we did like

3980
02:19:50,000 --> 02:19:52,000
JSON requests, then we could avoid

3981
02:19:52,000 --> 02:19:54,000
refreshing the page every time

3982
02:19:54,000 --> 02:19:56,000
I don't know, there's two ways to do it

3983
02:19:56,000 --> 02:19:58,000
so I think

3984
02:19:58,000 --> 02:20:00,000
the, maybe you're kind of

3985
02:20:00,000 --> 02:20:02,000
approaching it from the perspective of like

3986
02:20:02,000 --> 02:20:04,000
how would I do this in a client-side application

3987
02:20:04,000 --> 02:20:06,000
so you're like

3988
02:20:06,000 --> 02:20:08,000
yeah, well I'm thinking form requests, I guess

3989
02:20:08,000 --> 02:20:10,000
like literally just using form action

3990
02:20:10,000 --> 02:20:12,000
and submitting it and using stuff

3991
02:20:12,000 --> 02:20:14,000
but I assume you have

3992
02:20:14,000 --> 02:20:16,000
something else in mind that isn't just a form action

3993
02:20:16,000 --> 02:20:18,000
yeah, so if form action

3994
02:20:18,000 --> 02:20:20,000
is usually used for stuff

3995
02:20:20,000 --> 02:20:22,000
like post, I guess

3996
02:20:22,000 --> 02:20:24,000
here we kind of just want to refresh

3997
02:20:24,000 --> 02:20:26,000
the output

3998
02:20:26,000 --> 02:20:28,000
so I think I would probably use get

3999
02:20:28,000 --> 02:20:30,000
but also form action

4000
02:20:30,000 --> 02:20:32,000
yes, like default browser

4001
02:20:32,000 --> 02:20:34,000
handling of forms, like that would reload

4002
02:20:34,000 --> 02:20:36,000
the page completely

4003
02:20:36,000 --> 02:20:38,000
so it makes sense that that's not

4004
02:20:38,000 --> 02:20:40,000
quite what we want

4005
02:20:40,000 --> 02:20:42,000
I think the

4006
02:20:44,000 --> 02:20:46,000
so let me maybe think a little bit

4007
02:20:46,000 --> 02:20:48,000
about this as well

4008
02:20:48,000 --> 02:20:50,000
so I think we still need

4009
02:20:50,000 --> 02:20:52,000
I think we still need

4010
02:20:52,000 --> 02:20:54,000
state, actually, because we want

4011
02:20:54,000 --> 02:20:56,000
the

4012
02:20:58,000 --> 02:21:00,000
well, not

4013
02:21:00,000 --> 02:21:02,000
okay

4014
02:21:08,000 --> 02:21:10,000
okay, so there's a question

4015
02:21:10,000 --> 02:21:12,000
of like how deep

4016
02:21:12,000 --> 02:21:14,000
do we want, because this is the stuff that

4017
02:21:14,000 --> 02:21:16,000
Next.js or an RSE

4018
02:21:16,000 --> 02:21:18,000
framework is supposed to handle

4019
02:21:18,000 --> 02:21:20,000
so I think there's kind of two

4020
02:21:20,000 --> 02:21:22,000
levels to this, like we can

4021
02:21:22,000 --> 02:21:24,000
do this with

4022
02:21:24,000 --> 02:21:26,000
like do we want to hook it up to the URL

4023
02:21:26,000 --> 02:21:28,000
because one option is to

4024
02:21:28,000 --> 02:21:30,000
hook it up to the URL

4025
02:21:30,000 --> 02:21:32,000
and other options like not to

4026
02:21:32,000 --> 02:21:34,000
I think

4027
02:21:34,000 --> 02:21:36,000
probably not hooking it up to the URL

4028
02:21:36,000 --> 02:21:38,000
might be a bit less code

4029
02:21:38,000 --> 02:21:40,000
so maybe we

4030
02:21:40,000 --> 02:21:42,000
sure, yeah

4031
02:21:42,000 --> 02:21:44,000
maybe that's

4032
02:21:44,000 --> 02:21:46,000
maybe that's what

4033
02:21:46,000 --> 02:21:48,000
yeah, because I guess what I'm wondering

4034
02:21:48,000 --> 02:21:50,000
is, because what we're trying to avoid is

4035
02:21:50,000 --> 02:21:52,000
passing the whole album list as

4036
02:21:52,000 --> 02:21:54,000
a prop and doing the filter logic on

4037
02:21:54,000 --> 02:21:56,000
the client, so I assume

4038
02:21:56,000 --> 02:21:58,000
that would also mean if we're not passing down the

4039
02:21:58,000 --> 02:22:00,000
prop, where

4040
02:22:00,000 --> 02:22:02,000
if we're doing anything client-side, it's just

4041
02:22:02,000 --> 02:22:04,000
going to be the search box, but not the

4042
02:22:04,000 --> 02:22:06,000
Yeah, exactly, yeah, so maybe let's

4043
02:22:06,000 --> 02:22:08,000
do you want to like rearrange

4044
02:22:08,000 --> 02:22:10,000
the code a little bit, like I think I would

4045
02:22:10,000 --> 02:22:12,000
just move the

4046
02:22:12,000 --> 02:22:14,000
yeah, so maybe we do like

4047
02:22:14,000 --> 02:22:16,000
the search box component

4048
02:22:16,000 --> 02:22:18,000
and we make that a client component

4049
02:22:18,000 --> 02:22:20,000
and then we extract it to like a new

4050
02:22:20,000 --> 02:22:22,000
file and then we keep this file

4051
02:22:22,000 --> 02:22:24,000
as it is

4052
02:22:24,000 --> 02:22:26,000
Yeah, let's go ahead and do that

4053
02:22:26,000 --> 02:22:28,000
I'll make a search over here

4054
02:22:30,000 --> 02:22:32,000
and pull that out

4055
02:22:32,000 --> 02:22:34,000
and also, I'm actually just going to

4056
02:22:34,000 --> 02:22:36,000
undo my way back here

4057
02:22:38,000 --> 02:22:40,000
I won't save that because I think that

4058
02:22:40,000 --> 02:22:42,000
breaks everything

4059
02:22:42,000 --> 02:22:44,000
Okay, I'm in the search now

4060
02:22:46,000 --> 02:22:48,000
and in here, I will

4061
02:22:48,000 --> 02:22:50,000
do input

4062
02:22:50,000 --> 02:22:52,000
Oh, it doesn't know about state yet

4063
02:22:52,000 --> 02:22:54,000
so let me introduce that

4064
02:23:02,000 --> 02:23:04,000
This is so much fun, I'm really enjoying it

4065
02:23:06,000 --> 02:23:08,000
Oh, it remembered my styles

4066
02:23:08,000 --> 02:23:10,000
It remembered my styles

4067
02:23:10,000 --> 02:23:12,000
Oh, that's so good

4068
02:23:12,000 --> 02:23:14,000
Okay

4069
02:23:14,000 --> 02:23:16,000
I don't even understand, like, you're

4070
02:23:16,000 --> 02:23:18,000
using Copilot or something

4071
02:23:18,000 --> 02:23:20,000
because I've never used it, I don't even know how

4072
02:23:20,000 --> 02:23:22,000
what it is

4073
02:23:22,000 --> 02:23:24,000
So, I think Copilot

4074
02:23:24,000 --> 02:23:26,000
and actually the Prime Engine had a good

4075
02:23:26,000 --> 02:23:28,000
video on this, where like for

4076
02:23:28,000 --> 02:23:30,000
migrations, it's really good

4077
02:23:30,000 --> 02:23:32,000
at knowing context, of like

4078
02:23:32,000 --> 02:23:34,000
it knows I typed a search box before

4079
02:23:34,000 --> 02:23:36,000
and now it's picking up like, oh, you're probably

4080
02:23:36,000 --> 02:23:38,000
extracting this to a separate component

4081
02:23:38,000 --> 02:23:40,000
Let me pull in those styles that you wrote earlier

4082
02:23:40,000 --> 02:23:42,000
So does it like

4083
02:23:42,000 --> 02:23:44,000
stuff it into the prompt? Like, how

4084
02:23:44,000 --> 02:23:46,000
does it keep track of the context?

4085
02:23:46,000 --> 02:23:48,000
Well, it understands

4086
02:23:48,000 --> 02:23:50,000
your code base, as far as I know

4087
02:23:50,000 --> 02:23:52,000
and it is

4088
02:23:52,000 --> 02:23:54,000
I don't know how much of it is local

4089
02:23:54,000 --> 02:23:56,000
versus network requests

4090
02:23:56,000 --> 02:23:58,000
but, yeah

4091
02:23:58,000 --> 02:24:00,000
We should have a dev panel to see

4092
02:24:00,000 --> 02:24:02,000
what it sends and what it receives

4093
02:24:02,000 --> 02:24:04,000
That would be nice to know

4094
02:24:04,000 --> 02:24:06,000
because like, yeah

4095
02:24:06,000 --> 02:24:08,000
if it's sending your code base over to

4096
02:24:08,000 --> 02:24:10,000
Wired, that is a massive problem

4097
02:24:10,000 --> 02:24:12,000
I don't know what it

4098
02:24:12,000 --> 02:24:14,000
does. That's the scary part

4099
02:24:14,000 --> 02:24:16,000
I don't know what it says

4100
02:24:16,000 --> 02:24:18,000
It's fine. Yeah, so let's

4101
02:24:18,000 --> 02:24:20,000
Okay, let's go. Let's get this working

4102
02:24:20,000 --> 02:24:22,000
Yep

4103
02:24:22,000 --> 02:24:24,000
And everyone is searching for what my

4104
02:24:24,000 --> 02:24:26,000
theme and font are. Just calm down

4105
02:24:26,000 --> 02:24:28,000
I'll make extensions someday, people

4106
02:24:28,000 --> 02:24:30,000
But I use Monolisa font and the

4107
02:24:30,000 --> 02:24:32,000
Houston theme, made by Astro

4108
02:24:32,000 --> 02:24:34,000
and by using it, you get access

4109
02:24:34,000 --> 02:24:36,000
to this beautiful little Houston floating guy

4110
02:24:36,000 --> 02:24:38,000
in your editor, anytime you want it

4111
02:24:38,000 --> 02:24:40,000
So, you know, go ahead and use that

4112
02:24:40,000 --> 02:24:42,000
Dan, you actually can't see that, sadly

4113
02:24:42,000 --> 02:24:44,000
No, no, I see the default theme

4114
02:24:44,000 --> 02:24:46,000
Yeah, dang

4115
02:24:46,000 --> 02:24:48,000
Yeah, we have this little

4116
02:24:48,000 --> 02:24:50,000
Houston animation

4117
02:24:50,000 --> 02:24:52,000
where it's just a Houston panel, if you want to

4118
02:24:52,000 --> 02:24:54,000
just have him watch what you're doing

4119
02:24:54,000 --> 02:24:56,000
and he gets progressively more sad

4120
02:24:56,000 --> 02:24:58,000
the more syntax errors you have

4121
02:24:58,000 --> 02:25:00,000
Okay. Yeah, I have no idea

4122
02:25:00,000 --> 02:25:02,000
what you're talking about, but

4123
02:25:02,000 --> 02:25:04,000
Don't worry about it

4124
02:25:04,000 --> 02:25:06,000
I can send a screenshot later

4125
02:25:06,000 --> 02:25:08,000
Okay, okay

4126
02:25:08,000 --> 02:25:10,000
But yeah, we have our search box here

4127
02:25:10,000 --> 02:25:12,000
and

4128
02:25:12,000 --> 02:25:14,000
well, we can render

4129
02:25:14,000 --> 02:25:16,000
that inside of our root server, I guess

4130
02:25:16,000 --> 02:25:18,000
We can hop all the way back

4131
02:25:18,000 --> 02:25:20,000
Well, why though?

4132
02:25:20,000 --> 02:25:22,000
Can't we just render it in

4133
02:25:22,000 --> 02:25:24,000
the component

4134
02:25:24,000 --> 02:25:26,000
you extracted it from?

4135
02:25:26,000 --> 02:25:28,000
That's a good point

4136
02:25:28,000 --> 02:25:30,000
You already have it here

4137
02:25:30,000 --> 02:25:32,000
And I guess our filter code

4138
02:25:32,000 --> 02:25:34,000
is going to go over there, too

4139
02:25:34,000 --> 02:25:36,000
No, I mean, I don't think you have

4140
02:25:36,000 --> 02:25:38,000
to change anything

4141
02:25:38,000 --> 02:25:40,000
Oh wait, no, it doesn't go over there, that's the whole point

4142
02:25:40,000 --> 02:25:42,000
Yeah, yeah

4143
02:25:42,000 --> 02:25:44,000
Here is where it goes in

4144
02:25:44,000 --> 02:25:46,000
Yeah

4145
02:25:48,000 --> 02:25:50,000
Yeah, so the problem

4146
02:25:50,000 --> 02:25:52,000
right now is that you don't really have

4147
02:25:52,000 --> 02:25:54,000
Yeah, you don't really have filtered albums

4148
02:25:54,000 --> 02:25:56,000
yet, but we'll add it back

4149
02:25:56,000 --> 02:25:58,000
later

4150
02:25:58,000 --> 02:26:00,000
So I think for

4151
02:26:02,000 --> 02:26:04,000
I would write it like this

4152
02:26:08,000 --> 02:26:10,000
And then the thing you want to

4153
02:26:10,000 --> 02:26:12,000
render is this

4154
02:26:12,000 --> 02:26:14,000
Let's just verify that it still works

4155
02:26:16,000 --> 02:26:18,000
Yeah, it is working

4156
02:26:20,000 --> 02:26:22,000
But then typing into the input

4157
02:26:22,000 --> 02:26:24,000
doesn't really do anything, right?

4158
02:26:24,000 --> 02:26:26,000
Right

4159
02:26:26,000 --> 02:26:28,000
So I think maybe

4160
02:26:28,000 --> 02:26:30,000
again, there's two ways we could go

4161
02:26:30,000 --> 02:26:32,000
about this, either

4162
02:26:32,000 --> 02:26:34,000
with the URL or

4163
02:26:34,000 --> 02:26:36,000
without

4164
02:26:36,000 --> 02:26:38,000
I think with the URL probably makes

4165
02:26:38,000 --> 02:26:40,000
more sense, because if we're

4166
02:26:40,000 --> 02:26:42,000
going

4167
02:26:42,000 --> 02:26:44,000
to show what frameworks do, we might as well

4168
02:26:44,000 --> 02:26:46,000
just try to do it

4169
02:26:46,000 --> 02:26:48,000
ourselves

4170
02:26:48,000 --> 02:26:50,000
So maybe let's make it so that when you type

4171
02:26:50,000 --> 02:26:52,000
into the input

4172
02:26:52,000 --> 02:26:54,000
let's make the URL update

4173
02:26:54,000 --> 02:26:56,000
using client-side

4174
02:26:56,000 --> 02:26:58,000
like history.pushState

4175
02:27:00,000 --> 02:27:02,000
We could use the history package

4176
02:27:02,000 --> 02:27:04,000
I think it's a bit more

4177
02:27:06,000 --> 02:27:08,000
But we could probably just use the browser API as well

4178
02:27:08,000 --> 02:27:10,000
Let's start with the browser API and then see

4179
02:27:10,000 --> 02:27:12,000
if we need anything more

4180
02:27:12,000 --> 02:27:14,000
But let's try to make it so that when you type

4181
02:27:14,000 --> 02:27:16,000
into the input, we also update

4182
02:27:16,000 --> 02:27:18,000
the URL

4183
02:27:18,000 --> 02:27:20,000
Gotcha

4184
02:27:20,000 --> 02:27:22,000
Yeah, for something like that

4185
02:27:22,000 --> 02:27:24,000
On

4186
02:27:24,000 --> 02:27:26,000
change, sure

4187
02:27:26,000 --> 02:27:28,000
Basically that

4188
02:27:28,000 --> 02:27:30,000
But then we want to also

4189
02:27:30,000 --> 02:27:32,000
I have to think about this

4190
02:27:32,000 --> 02:27:34,000
So is it window.location

4191
02:27:34,000 --> 02:27:36,000
pushState

4192
02:27:36,000 --> 02:27:38,000
It's been a while since I've used this API

4193
02:27:38,000 --> 02:27:40,000
I think it's history.pushState

4194
02:27:40,000 --> 02:27:42,000
Yeah, I think it is

4195
02:27:42,000 --> 02:27:44,000
history.

4196
02:27:44,000 --> 02:27:46,000
Yep, yep, yep

4197
02:27:46,000 --> 02:27:48,000
pushState

4198
02:27:48,000 --> 02:27:50,000
I think

4199
02:27:50,000 --> 02:27:52,000
So there's like pushState and a replaceState

4200
02:27:52,000 --> 02:27:54,000
I don't know if the search bar

4201
02:27:54,000 --> 02:27:56,000
is like

4202
02:27:56,000 --> 02:27:58,000
Yeah, that will

4203
02:27:58,000 --> 02:28:00,000
We don't want history

4204
02:28:00,000 --> 02:28:02,000
as we type

4205
02:28:02,000 --> 02:28:04,000
So maybe let's check

4206
02:28:04,000 --> 02:28:06,000
if this works

4207
02:28:06,000 --> 02:28:08,000
I don't actually see your address bar

4208
02:28:08,000 --> 02:28:10,000
so I don't know if it works, you'll have to tell me

4209
02:28:10,000 --> 02:28:12,000
It's really tiny at the top

4210
02:28:12,000 --> 02:28:14,000
but it's up there

4211
02:28:14,000 --> 02:28:16,000
When you bump the font size

4212
02:28:16,000 --> 02:28:18,000
it doesn't bump the size of that, sadly

4213
02:28:18,000 --> 02:28:20,000
I don't see it because

4214
02:28:20,000 --> 02:28:22,000
it doesn't share

4215
02:28:22,000 --> 02:28:24,000
Oh, it doesn't

4216
02:28:24,000 --> 02:28:26,000
That's so silly

4217
02:28:26,000 --> 02:28:28,000
Well, it is working

4218
02:28:28,000 --> 02:28:30,000
I can tell you that much

4219
02:28:30,000 --> 02:28:32,000
It is working

4220
02:28:32,000 --> 02:28:34,000
Just putting up search equals

4221
02:28:34,000 --> 02:28:36,000
Okay, I'll have to believe you on this

4222
02:28:36,000 --> 02:28:38,000
So

4223
02:28:38,000 --> 02:28:40,000
Okay, so maybe let's

4224
02:28:40,000 --> 02:28:42,000
I think I might

4225
02:28:42,000 --> 02:28:44,000
have to drive this a little bit

4226
02:28:44,000 --> 02:28:46,000
if you don't mind

4227
02:28:46,000 --> 02:28:48,000
I will need your help

4228
02:28:48,000 --> 02:28:50,000
as well, I think, because I

4229
02:28:50,000 --> 02:28:52,000
can only do the parts that I know about

4230
02:28:52,000 --> 02:28:54,000
So I'm gonna

4231
02:28:54,000 --> 02:28:56,000
go to the thing

4232
02:28:56,000 --> 02:28:58,000
called root.client.js

4233
02:28:58,000 --> 02:29:00,000
and it's kind of interesting

4234
02:29:00,000 --> 02:29:02,000
You do have

4235
02:29:02,000 --> 02:29:04,000
kind of the server entry point and the client

4236
02:29:04,000 --> 02:29:06,000
entry point

4237
02:29:06,000 --> 02:29:08,000
and it's a bit confusing because conceptually

4238
02:29:08,000 --> 02:29:10,000
it's the server entry point that's

4239
02:29:10,000 --> 02:29:12,000
the real root of your app

4240
02:29:12,000 --> 02:29:14,000
It's the real root

4241
02:29:14,000 --> 02:29:16,000
where things start conceptually

4242
02:29:16,000 --> 02:29:18,000
but then

4243
02:29:18,000 --> 02:29:20,000
in reality, you do need this bootstrapping

4244
02:29:20,000 --> 02:29:22,000
thing that makes

4245
02:29:22,000 --> 02:29:24,000
this real root appear somewhere on the page

4246
02:29:24,000 --> 02:29:26,000
Yeah, what I really want to call it is

4247
02:29:26,000 --> 02:29:28,000
bootstrapping and index

4248
02:29:28,000 --> 02:29:30,000
Yeah

4249
02:29:30,000 --> 02:29:32,000
I think that's what it is

4250
02:29:32,000 --> 02:29:34,000
It's also kind of like, if you think about

4251
02:29:34,000 --> 02:29:36,000
how would it work with nested routing

4252
02:29:36,000 --> 02:29:38,000
you would also

4253
02:29:38,000 --> 02:29:40,000
have the server

4254
02:29:40,000 --> 02:29:42,000
be the root

4255
02:29:42,000 --> 02:29:44,000
It would also be possible to start

4256
02:29:44,000 --> 02:29:46,000
from the middle of

4257
02:29:46,000 --> 02:29:48,000
some nested route and treat that

4258
02:29:48,000 --> 02:29:50,000
as a root, and that's what happens with

4259
02:29:50,000 --> 02:29:52,000
navigations in NextAppRouter

4260
02:29:52,000 --> 02:29:54,000
and then this thing

4261
02:29:54,000 --> 02:29:56,000
that you have here, this bootstrapping

4262
02:29:56,000 --> 02:29:58,000
thing, that would turn

4263
02:29:58,000 --> 02:30:00,000
into the client-side

4264
02:30:00,000 --> 02:30:02,000
routing part

4265
02:30:02,000 --> 02:30:04,000
that bootstraps

4266
02:30:04,000 --> 02:30:06,000
the top-level thing, but also

4267
02:30:06,000 --> 02:30:08,000
bootstraps these holes

4268
02:30:08,000 --> 02:30:10,000
and manages

4269
02:30:10,000 --> 02:30:12,000
how to slot in the server responses

4270
02:30:12,000 --> 02:30:14,000
into them

4271
02:30:14,000 --> 02:30:16,000
This is hidden in a framework, that's what

4272
02:30:16,000 --> 02:30:18,000
Next.js does, for example

4273
02:30:18,000 --> 02:30:20,000
but we're going to do a simple

4274
02:30:20,000 --> 02:30:22,000
version of that where it only bootstraps

4275
02:30:22,000 --> 02:30:24,000
them at the top, but I'm just saying

4276
02:30:24,000 --> 02:30:26,000
if you were building a nested router

4277
02:30:26,000 --> 02:30:28,000
you would have to

4278
02:30:28,000 --> 02:30:30,000
have a very similar thing

4279
02:30:30,000 --> 02:30:32,000
managing it somewhere

4280
02:30:32,000 --> 02:30:34,000
around your

4281
02:30:34,000 --> 02:30:36,000
route holes

4282
02:30:36,000 --> 02:30:38,000
to replace them

4283
02:30:38,000 --> 02:30:40,000
if necessary

4284
02:30:40,000 --> 02:30:42,000
But yeah, so

4285
02:30:42,000 --> 02:30:44,000
you have this thing where here

4286
02:30:44,000 --> 02:30:46,000
so these are internal APIs

4287
02:30:46,000 --> 02:30:48,000
this file is the

4288
02:30:48,000 --> 02:30:50,000
kind of stuff that, as a product developer, you

4289
02:30:50,000 --> 02:30:52,000
wouldn't touch or do any of

4290
02:30:52,000 --> 02:30:54,000
that, and I also

4291
02:30:54,000 --> 02:30:56,000
want to make clear that

4292
02:30:56,000 --> 02:30:58,000
all of this stuff below is

4293
02:30:58,000 --> 02:31:00,000
for debugging, because it's

4294
02:31:00,000 --> 02:31:02,000
your dev panel component

4295
02:31:02,000 --> 02:31:04,000
so it actually has nothing to do with React

4296
02:31:04,000 --> 02:31:06,000
but then

4297
02:31:06,000 --> 02:31:08,000
as a framework developer

4298
02:31:08,000 --> 02:31:10,000
this part is kind of the bootstrap

4299
02:31:10,000 --> 02:31:12,000
where you're like

4300
02:31:12,000 --> 02:31:14,000
okay, here's where

4301
02:31:14,000 --> 02:31:16,000
I'm going to move this here because it's unrelated

4302
02:31:16,000 --> 02:31:18,000
Yep

4303
02:31:18,000 --> 02:31:20,000
Like

4304
02:31:20,000 --> 02:31:22,000
Honestly, all of this is unrelated

4305
02:31:22,000 --> 02:31:24,000
This was me trying to

4306
02:31:24,000 --> 02:31:26,000
I never finished it

4307
02:31:26,000 --> 02:31:28,000
Wait, show me

4308
02:31:28,000 --> 02:31:30,000
what did you delete?

4309
02:31:30,000 --> 02:31:32,000
Yeah, this was some code I was writing

4310
02:31:32,000 --> 02:31:34,000
to allow multiple routes

4311
02:31:34,000 --> 02:31:36,000
and all it was really doing is getting

4312
02:31:36,000 --> 02:31:38,000
the current window location and fetching the

4313
02:31:38,000 --> 02:31:40,000
file that corresponds to that location

4314
02:31:40,000 --> 02:31:42,000
Okay, yeah, no, we don't need

4315
02:31:42,000 --> 02:31:44,000
that, but we are going to need something

4316
02:31:44,000 --> 02:31:46,000
similar, but let's

4317
02:31:46,000 --> 02:31:48,000
delete this for now, it's fine, let's delete this

4318
02:31:50,000 --> 02:31:52,000
So what I'm going to do is

4319
02:31:52,000 --> 02:31:54,000
what it currently does

4320
02:31:54,000 --> 02:31:56,000
I don't love this, can I just rename this

4321
02:31:56,000 --> 02:31:58,000
to slash

4322
02:31:58,000 --> 02:32:00,000
Yeah

4323
02:32:00,000 --> 02:32:02,000
I'll see what source code needs to be fixed to make that work

4324
02:32:02,000 --> 02:32:04,000
but yeah, that's what it is

4325
02:32:04,000 --> 02:32:06,000
I think it's in the

4326
02:32:06,000 --> 02:32:08,000
handler, right?

4327
02:32:08,000 --> 02:32:10,000
Yeah, I think it might just be this

4328
02:32:10,000 --> 02:32:12,000
So maybe let's change this

4329
02:32:12,000 --> 02:32:14,000
to rsc, let's verify that it

4330
02:32:14,000 --> 02:32:16,000
still loads

4331
02:32:16,000 --> 02:32:18,000
I mean, obviously it doesn't have to be called that way

4332
02:32:18,000 --> 02:32:20,000
I just kind of want to stress that

4333
02:32:20,000 --> 02:32:22,000
Okay, yeah, so there's just one

4334
02:32:22,000 --> 02:32:24,000
endpoint, it's not like multiple files

4335
02:32:24,000 --> 02:32:26,000
or anything, it's just one endpoint

4336
02:32:26,000 --> 02:32:28,000
And so I'm going to make a react

4337
02:32:28,000 --> 02:32:30,000
component that's like

4338
02:32:30,000 --> 02:32:32,000
I don't know, I'm going to call it

4339
02:32:32,000 --> 02:32:34,000
like boots

4340
02:32:34,000 --> 02:32:36,000
I don't know, client

4341
02:32:36,000 --> 02:32:38,000
root or something like this

4342
02:32:38,000 --> 02:32:40,000
which is just this bootstrapping

4343
02:32:40,000 --> 02:32:42,000
thing

4344
02:32:42,000 --> 02:32:44,000
And currently

4345
02:32:46,000 --> 02:32:48,000
Yeah, I'm going to move

4346
02:32:48,000 --> 02:32:50,000
I'm going to move this a little bit, so I'll make it

4347
02:32:50,000 --> 02:32:52,000
render restrict

4348
02:32:52,000 --> 02:32:54,000
mode, and I'm just going to do this

4349
02:32:54,000 --> 02:32:56,000
client root thing here

4350
02:32:56,000 --> 02:32:58,000
Okay

4351
02:32:58,000 --> 02:33:00,000
Our

4352
02:33:00,000 --> 02:33:02,000
component

4353
02:33:02,000 --> 02:33:04,000
And then I'm going to

4354
02:33:04,000 --> 02:33:06,000
So again, this

4355
02:33:06,000 --> 02:33:08,000
is like create from fetch

4356
02:33:08,000 --> 02:33:10,000
This is like an internal API

4357
02:33:10,000 --> 02:33:12,000
for framework developers

4358
02:33:12,000 --> 02:33:14,000
This is the protocol reader

4359
02:33:14,000 --> 02:33:16,000
So we have a protocol writer

4360
02:33:16,000 --> 02:33:18,000
that runs on the server, so if you go

4361
02:33:18,000 --> 02:33:20,000
to

4362
02:33:20,000 --> 02:33:22,000
the

4363
02:33:22,000 --> 02:33:24,000
Yeah, so if you

4364
02:33:24,000 --> 02:33:26,000
go to the handler, this is where

4365
02:33:26,000 --> 02:33:28,000
you wrote this logic

4366
02:33:28,000 --> 02:33:30,000
for the actual handler

4367
02:33:30,000 --> 02:33:32,000
of this endpoint that runs

4368
02:33:32,000 --> 02:33:34,000
server components, you'll see

4369
02:33:34,000 --> 02:33:36,000
you have

4370
02:33:36,000 --> 02:33:38,000
So you call this react-server-dom

4371
02:33:38,000 --> 02:33:40,000
which is maybe a bit

4372
02:33:40,000 --> 02:33:42,000
confusing because people might think it's

4373
02:33:42,000 --> 02:33:44,000
like react-dom-server

4374
02:33:44,000 --> 02:33:46,000
I didn't know what to call it

4375
02:33:46,000 --> 02:33:48,000
Yeah, I don't know either

4376
02:33:48,000 --> 02:33:50,000
React-server-dom-webpack

4377
02:33:50,000 --> 02:33:52,000
And I thought, is that really what it is?

4378
02:33:52,000 --> 02:33:54,000
But that's the package

4379
02:33:54,000 --> 02:33:56,000
I don't think we actually figured out

4380
02:33:56,000 --> 02:33:58,000
how to name this thing

4381
02:33:58,000 --> 02:34:00,000
This is not

4382
02:34:00,000 --> 02:34:02,000
SSR, this is not

4383
02:34:02,000 --> 02:34:04,000
the react-dom-server

4384
02:34:04,000 --> 02:34:06,000
that emits HTML

4385
02:34:06,000 --> 02:34:08,000
This is the thing that emits

4386
02:34:08,000 --> 02:34:10,000
This is the protocol writer

4387
02:34:10,000 --> 02:34:12,000
This is the thing that executes

4388
02:34:12,000 --> 02:34:14,000
your server components

4389
02:34:14,000 --> 02:34:16,000
and emits this protocol

4390
02:34:16,000 --> 02:34:18,000
this streaming thing that you show

4391
02:34:18,000 --> 02:34:20,000
in the dev panel

4392
02:34:20,000 --> 02:34:22,000
And so the

4393
02:34:22,000 --> 02:34:24,000
it comes from this package

4394
02:34:24,000 --> 02:34:26,000
I don't actually think you need

4395
02:34:26,000 --> 02:34:28,000
that browser here, I think this should just work

4396
02:34:28,000 --> 02:34:30,000
Can you check if that

4397
02:34:30,000 --> 02:34:32,000
Oh, I guess I broke some other

4398
02:34:32,000 --> 02:34:34,000
I think it'll try to import

4399
02:34:34,000 --> 02:34:36,000
the node version, and that uses

4400
02:34:36,000 --> 02:34:38,000
pipes, and I was like, I think I can do it simpler

4401
02:34:38,000 --> 02:34:40,000
So I did it this way

4402
02:34:40,000 --> 02:34:42,000
Okay, cool

4403
02:34:42,000 --> 02:34:44,000
Alright, and then

4404
02:34:46,000 --> 02:34:48,000
Yeah, if I go to the correspondent

4405
02:34:48,000 --> 02:34:50,000
this is the reader

4406
02:34:50,000 --> 02:34:52,000
This is the thing that

4407
02:34:52,000 --> 02:34:54,000
reads the client protocol

4408
02:34:54,000 --> 02:34:56,000
and really, all it does

4409
02:34:56,000 --> 02:34:58,000
is it turns it into

4410
02:34:58,000 --> 02:35:00,000
JSX, essentially

4411
02:35:00,000 --> 02:35:02,000
So it converts the

4412
02:35:02,000 --> 02:35:04,000
it streams the output

4413
02:35:04,000 --> 02:35:06,000
from the server, and it converts it

4414
02:35:06,000 --> 02:35:08,000
to a tree of

4415
02:35:08,000 --> 02:35:10,000
lazy components that get

4416
02:35:10,000 --> 02:35:12,000
filled in later

4417
02:35:12,000 --> 02:35:14,000
And this is why

4418
02:35:14,000 --> 02:35:16,000
it's kind of funny, React

4419
02:35:16,000 --> 02:35:18,000
the React library

4420
02:35:18,000 --> 02:35:20,000
doesn't really have any code to support

4421
02:35:20,000 --> 02:35:22,000
server components

4422
02:35:22,000 --> 02:35:24,000
because it's

4423
02:35:24,000 --> 02:35:26,000
like, this ability to

4424
02:35:26,000 --> 02:35:28,000
render a tree from the server

4425
02:35:28,000 --> 02:35:30,000
it relies on exactly the same

4426
02:35:30,000 --> 02:35:32,000
mechanism that, for example, React.lazy

4427
02:35:32,000 --> 02:35:34,000
uses, which is just

4428
02:35:34,000 --> 02:35:36,000
this built-in support in React

4429
02:35:36,000 --> 02:35:38,000
to have a tree where some parts

4430
02:35:38,000 --> 02:35:40,000
are not ready, and then suspense will catch

4431
02:35:40,000 --> 02:35:42,000
them, and so this is the thing that

4432
02:35:42,000 --> 02:35:44,000
translates from the protocol

4433
02:35:44,000 --> 02:35:46,000
to a lazy React tree, and then

4434
02:35:46,000 --> 02:35:48,000
React knows how to deal with lazy trees

4435
02:35:50,000 --> 02:35:52,000
And so the

4436
02:35:52,000 --> 02:35:54,000
we could maybe

4437
02:35:54,000 --> 02:35:56,000
call this stream

4438
02:35:56,000 --> 02:35:58,000
create from fetch, and then you have

4439
02:35:58,000 --> 02:36:00,000
fetch from this

4440
02:36:00,000 --> 02:36:02,000
RSC endpoint, I think that's how it

4441
02:36:02,000 --> 02:36:04,000
worked, and

4442
02:36:04,000 --> 02:36:06,000
I guess we can just say this is

4443
02:36:06,000 --> 02:36:08,000
just JSX

4444
02:36:08,000 --> 02:36:10,000
maybe, well, lazy JSX

4445
02:36:10,000 --> 02:36:12,000
I don't know. Yeah, lazy JSX

4446
02:36:12,000 --> 02:36:14,000
Yeah, the best

4447
02:36:14,000 --> 02:36:16,000
way is like, that's the interpreter

4448
02:36:16,000 --> 02:36:18,000
that's going to take these instructions and

4449
02:36:18,000 --> 02:36:20,000
turn them into JSX, and that

4450
02:36:20,000 --> 02:36:22,000
is actually what we get

4451
02:36:22,000 --> 02:36:24,000
Yeah, so maybe let's see if

4452
02:36:24,000 --> 02:36:26,000
this works so far, because I'm going to

4453
02:36:26,000 --> 02:36:28,000
add a few things

4454
02:36:28,000 --> 02:36:30,000
Okay, can I

4455
02:36:30,000 --> 02:36:32,000
refresh it?

4456
02:36:32,000 --> 02:36:34,000
Yeah, it's working

4457
02:36:34,000 --> 02:36:36,000
Awesome, and so the thing that we want

4458
02:36:36,000 --> 02:36:38,000
to be able to do now is

4459
02:36:38,000 --> 02:36:40,000
before we deal with client-side

4460
02:36:40,000 --> 02:36:42,000
navigations and stuff, I think

4461
02:36:42,000 --> 02:36:44,000
what we want to do is just

4462
02:36:44,000 --> 02:36:46,000
to be able to pass

4463
02:36:46,000 --> 02:36:48,000
something during the initial load to the

4464
02:36:48,000 --> 02:36:50,000
server, right? That's the easiest part

4465
02:36:50,000 --> 02:36:52,000
It's like, if you have some

4466
02:36:52,000 --> 02:36:54,000
query in the query string and you

4467
02:36:54,000 --> 02:36:56,000
refresh the page, at least we should be

4468
02:36:56,000 --> 02:36:58,000
able to ask the server to

4469
02:36:58,000 --> 02:37:00,000
filter for that

4470
02:37:00,000 --> 02:37:02,000
It's like with manual refreshes for now

4471
02:37:02,000 --> 02:37:04,000
and then we'll fix that

4472
02:37:04,000 --> 02:37:06,000
So I think what we want to do is

4473
02:37:06,000 --> 02:37:08,000
we can look at

4474
02:37:08,000 --> 02:37:10,000
I don't actually remember

4475
02:37:10,000 --> 02:37:12,000
how to do it, but

4476
02:37:14,000 --> 02:37:16,000
Okay, so here's what I want

4477
02:37:16,000 --> 02:37:18,000
I want to

4478
02:37:20,000 --> 02:37:22,000
search equals

4479
02:37:22,000 --> 02:37:24,000
Okay, so

4480
02:37:24,000 --> 02:37:26,000
let's actually start there

4481
02:37:26,000 --> 02:37:28,000
I want to search for

4482
02:37:28,000 --> 02:37:30,000
what is it?

4483
02:37:30,000 --> 02:37:32,000
Yeah, let's say

4484
02:37:32,000 --> 02:37:34,000
fame, that's what I'm searching for

4485
02:37:34,000 --> 02:37:36,000
This is my search query

4486
02:37:36,000 --> 02:37:38,000
So I'm going to look for the album

4487
02:37:38,000 --> 02:37:40,000
of fame

4488
02:37:40,000 --> 02:37:42,000
And then I will go to

4489
02:37:42,000 --> 02:37:44,000
the server handler

4490
02:37:44,000 --> 02:37:46,000
So now we need to plumb that information

4491
02:37:46,000 --> 02:37:48,000
into your root server

4492
02:37:48,000 --> 02:37:50,000
component so that it knows

4493
02:37:50,000 --> 02:37:52,000
what the search

4494
02:37:52,000 --> 02:37:54,000
parameter is

4495
02:37:54,000 --> 02:37:56,000
And so I'll go to the

4496
02:37:56,000 --> 02:37:58,000
your server

4497
02:37:58,000 --> 02:38:00,000
handler. Again, this is the framework

4498
02:38:00,000 --> 02:38:02,000
part, like a framework

4499
02:38:02,000 --> 02:38:04,000
Yeah

4500
02:38:04,000 --> 02:38:06,000
And they have path name

4501
02:38:06,000 --> 02:38:08,000
So that we pass the query

4502
02:38:08,000 --> 02:38:10,000
Like we pass

4503
02:38:10,000 --> 02:38:12,000
all the query arguments as

4504
02:38:12,000 --> 02:38:14,000
props to

4505
02:38:14,000 --> 02:38:16,000
Yeah, it should be right up here

4506
02:38:16,000 --> 02:38:18,000
So it's just a web-friendly URL

4507
02:38:18,000 --> 02:38:20,000
So we can just do search params

4508
02:38:20,000 --> 02:38:22,000
and grab that

4509
02:38:24,000 --> 02:38:26,000
I'm so bad at these APIs

4510
02:38:26,000 --> 02:38:28,000
I'm like, I don't remember

4511
02:38:28,000 --> 02:38:30,000
I think it should be like has and get

4512
02:38:30,000 --> 02:38:32,000
in order to access

4513
02:38:32,000 --> 02:38:34,000
what we're looking for

4514
02:38:34,000 --> 02:38:36,000
Yeah, it can be turned into

4515
02:38:36,000 --> 02:38:38,000
just plain JSONs so that we can

4516
02:38:38,000 --> 02:38:40,000
spread it as props to the

4517
02:38:40,000 --> 02:38:42,000
Docker component

4518
02:38:42,000 --> 02:38:44,000
I think there's a way to do it

4519
02:38:44,000 --> 02:38:46,000
if you do like

4520
02:38:48,000 --> 02:38:50,000
Ah, there's a simple way

4521
02:38:50,000 --> 02:38:52,000
and I can't remember what it is

4522
02:38:52,000 --> 02:38:54,000
search params

4523
02:38:54,000 --> 02:38:56,000
JSON

4524
02:38:56,000 --> 02:38:58,000
equals, yes! That's it

4525
02:38:58,000 --> 02:39:00,000
Yeah, you convert it to an object

4526
02:39:00,000 --> 02:39:02,000
and then JSON stringify it, thanks

4527
02:39:02,000 --> 02:39:04,000
Well, okay, then you would have to parse it again

4528
02:39:04,000 --> 02:39:06,000
But

4529
02:39:06,000 --> 02:39:08,000
Hang on

4530
02:39:08,000 --> 02:39:10,000
No, just this

4531
02:39:10,000 --> 02:39:12,000
Yeah, just this

4532
02:39:14,000 --> 02:39:16,000
Okay, is that

4533
02:39:16,000 --> 02:39:18,000
Okay, we'll see

4534
02:39:18,000 --> 02:39:20,000
Let's see if it works

4535
02:39:20,000 --> 02:39:22,000
So now we want to

4536
02:39:22,000 --> 02:39:24,000
Yeah, and now we want to

4537
02:39:24,000 --> 02:39:26,000
This is your app here

4538
02:39:26,000 --> 02:39:28,000
This is the rooted-server.js expert

4539
02:39:28,000 --> 02:39:30,000
So this is your

4540
02:39:30,000 --> 02:39:32,000
It's actually

4541
02:39:32,000 --> 02:39:34,000
Oh, okay, you're calling it

4542
02:39:34,000 --> 02:39:36,000
I think that's a bit wrong

4543
02:39:36,000 --> 02:39:38,000
I mean, it ends up working

4544
02:39:38,000 --> 02:39:40,000
Yeah, I couldn't get it working without calling it

4545
02:39:40,000 --> 02:39:42,000
I don't know why

4546
02:39:42,000 --> 02:39:44,000
Like, I think this is supposed to work

4547
02:39:44,000 --> 02:39:46,000
So I think you're supposed to

4548
02:39:46,000 --> 02:39:48,000
I mean, you're like server root

4549
02:39:48,000 --> 02:39:50,000
That's how you call it, right?

4550
02:39:50,000 --> 02:39:52,000
That's just the expert of this thing

4551
02:39:52,000 --> 02:39:54,000
And I think you're supposed to be

4552
02:39:54,000 --> 02:39:56,000
Can I use just the expert?

4553
02:39:56,000 --> 02:39:58,000
Yeah, no

4554
02:39:58,000 --> 02:40:00,000
I don't know how to process on this thing

4555
02:40:00,000 --> 02:40:02,000
You could use react-create-element, right?

4556
02:40:02,000 --> 02:40:04,000
Yeah, yeah, that's what I'm going to do

4557
02:40:04,000 --> 02:40:06,000
So I'm going to do like

4558
02:40:06,000 --> 02:40:08,000
convert createElement

4559
02:40:08,000 --> 02:40:10,000
from react

4560
02:40:10,000 --> 02:40:12,000
And I'm going to do

4561
02:40:12,000 --> 02:40:14,000
createElement for server root

4562
02:40:14,000 --> 02:40:16,000
And I'm going to parse it

4563
02:40:16,000 --> 02:40:18,000
Well, I'm just going to parse

4564
02:40:18,000 --> 02:40:20,000
the search

4565
02:40:20,000 --> 02:40:22,000
params object as props

4566
02:40:22,000 --> 02:40:24,000
And then in the server root

4567
02:40:24,000 --> 02:40:26,000
I'm going to try to

4568
02:40:26,000 --> 02:40:28,000
read the

4569
02:40:28,000 --> 02:40:30,000
What did I call it?

4570
02:40:30,000 --> 02:40:32,000
I call it search

4571
02:40:32,000 --> 02:40:34,000
Which has nothing to do with search API

4572
02:40:34,000 --> 02:40:36,000
It's just like our variable name

4573
02:40:36,000 --> 02:40:38,000
And I'll say

4574
02:40:38,000 --> 02:40:40,000
we are

4575
02:40:40,000 --> 02:40:42,000
the bytes of keeping certain things

4576
02:40:42,000 --> 02:40:44,000
in the wrong place

4577
02:40:44,000 --> 02:40:46,000
I'm looking for search

4578
02:40:48,000 --> 02:40:50,000
So let's see if that works

4579
02:40:50,000 --> 02:40:52,000
Try to load it with like

4580
02:40:52,000 --> 02:40:54,000
search

4581
02:40:54,000 --> 02:40:56,000
Construct your search of undefined

4582
02:40:56,000 --> 02:40:58,000
Okay, so the props aren't being passed

4583
02:40:58,000 --> 02:41:00,000
but I think we have to restart

4584
02:41:00,000 --> 02:41:02,000
Because it's not going to

4585
02:41:02,000 --> 02:41:04,000
Okay!

4586
02:41:04,000 --> 02:41:06,000
Oh my god! It's working

4587
02:41:06,000 --> 02:41:08,000
Okay, nice, nice

4588
02:41:08,000 --> 02:41:10,000
Whoa! Oh, that's cool

4589
02:41:10,000 --> 02:41:12,000
Okay, so now your task

4590
02:41:12,000 --> 02:41:14,000
is to

4591
02:41:14,000 --> 02:41:16,000
I want you to do the

4592
02:41:16,000 --> 02:41:18,000
to take search into account

4593
02:41:18,000 --> 02:41:20,000
and do the filtering, like add the filtering back in

4594
02:41:20,000 --> 02:41:22,000
Mm-hmm

4595
02:41:22,000 --> 02:41:24,000
Yeah, that's interesting

4596
02:41:24,000 --> 02:41:26,000
Because I would want to do it from here, right?

4597
02:41:26,000 --> 02:41:28,000
Because I need to trigger a new

4598
02:41:28,000 --> 02:41:30,000
create from fetch

4599
02:41:30,000 --> 02:41:32,000
Well, let's not think about this yet

4600
02:41:32,000 --> 02:41:34,000
So for now I just want to do it for the first render

4601
02:41:34,000 --> 02:41:36,000
So it's not going to respond

4602
02:41:36,000 --> 02:41:38,000
to input, but let's just make it

4603
02:41:38,000 --> 02:41:40,000
respect the initial URL

4604
02:41:40,000 --> 02:41:42,000
Mm, okay

4605
02:41:42,000 --> 02:41:44,000
So for now

4606
02:41:44,000 --> 02:41:46,000
you just need to plumb down

4607
02:41:46,000 --> 02:41:48,000
We got it in the root components

4608
02:41:48,000 --> 02:41:50,000
Connect the logic so it actually does the search

4609
02:41:50,000 --> 02:41:52,000
on the server

4610
02:41:52,000 --> 02:41:54,000
Okay, so we would need

4611
02:41:54,000 --> 02:41:56,000
to pass this search down

4612
02:41:56,000 --> 02:41:58,000
Yeah

4613
02:41:58,000 --> 02:42:00,000
I mean, ideally a framework would make

4614
02:42:00,000 --> 02:42:02,000
So the way this works in Next

4615
02:42:02,000 --> 02:42:04,000
is they make it available as

4616
02:42:04,000 --> 02:42:06,000
import

4617
02:42:06,000 --> 02:42:08,000
I don't know, import search

4618
02:42:08,000 --> 02:42:10,000
part

4619
02:42:10,000 --> 02:42:12,000
I think there's some way to get it without

4620
02:42:12,000 --> 02:42:14,000
plumbing it down in Next

4621
02:42:14,000 --> 02:42:16,000
Mm-hmm

4622
02:42:16,000 --> 02:42:18,000
Maybe I'm confusing it with headers

4623
02:42:18,000 --> 02:42:20,000
I can actually check

4624
02:42:20,000 --> 02:42:22,000
Yeah, because you can't do hooks

4625
02:42:22,000 --> 02:42:24,000
when you're passing down server

4626
02:42:24,000 --> 02:42:26,000
contacts, that's still like an unexplored thing

4627
02:42:26,000 --> 02:42:28,000
Yeah

4628
02:42:28,000 --> 02:42:30,000
Yeah, okay

4629
02:42:30,000 --> 02:42:32,000
Page params are props

4630
02:42:32,000 --> 02:42:34,000
like they become props to your page

4631
02:42:34,000 --> 02:42:36,000
function, so it's

4632
02:42:36,000 --> 02:42:38,000
pretty much almost exactly

4633
02:42:38,000 --> 02:42:40,000
as Next.js would do it

4634
02:42:40,000 --> 02:42:42,000
So yeah

4635
02:42:42,000 --> 02:42:44,000
let's keep passing it down

4636
02:42:44,000 --> 02:42:46,000
So I do that

4637
02:42:46,000 --> 02:42:48,000
and

4638
02:42:48,000 --> 02:42:50,000
we've done that

4639
02:42:50,000 --> 02:42:52,000
I don't think you passed it to this album component

4640
02:42:52,000 --> 02:42:54,000
I think you missed it here

4641
02:42:54,000 --> 02:42:56,000
Oh, did I?

4642
02:42:56,000 --> 02:42:58,000
Okay

4643
02:42:58,000 --> 02:43:00,000
I passed it down to searchable album list

4644
02:43:00,000 --> 02:43:02,000
and I passed it to search

4645
02:43:02,000 --> 02:43:04,000
Yeah, but you don't pass it to album search

4646
02:43:04,000 --> 02:43:06,000
It's undefined

4647
02:43:06,000 --> 02:43:08,000
Oh, yeah

4648
02:43:08,000 --> 02:43:10,000
That's actually good, Squiggles

4649
02:43:10,000 --> 02:43:12,000
Yeah

4650
02:43:12,000 --> 02:43:14,000
Squiggles

4651
02:43:14,000 --> 02:43:16,000
Yeah, the squiggles are really annoying

4652
02:43:16,000 --> 02:43:18,000
There's some kind of thing in TypeScript

4653
02:43:18,000 --> 02:43:20,000
where we need a solution

4654
02:43:20,000 --> 02:43:22,000
to allow

4655
02:43:22,000 --> 02:43:24,000
async await

4656
02:43:24,000 --> 02:43:26,000
Right

4657
02:43:26,000 --> 02:43:28,000
Okay, and we have it

4658
02:43:28,000 --> 02:43:30,000
in our input right here

4659
02:43:30,000 --> 02:43:32,000
Okay, but we also want to have it

4660
02:43:32,000 --> 02:43:34,000
in the... wait, what did you do?

4661
02:43:34,000 --> 02:43:36,000
Let me see what you did

4662
02:43:36,000 --> 02:43:38,000
So this should...

4663
02:43:38,000 --> 02:43:40,000
Yeah, so that makes sure the input matches

4664
02:43:40,000 --> 02:43:42,000
what's actually being passed to the server

4665
02:43:42,000 --> 02:43:44,000
and now we can also use it here

4666
02:43:44,000 --> 02:43:46,000
which I assume is actually what you're asking for

4667
02:43:46,000 --> 02:43:48,000
to start with

4668
02:43:48,000 --> 02:43:50,000
So we have filtered albums

4669
02:43:50,000 --> 02:43:52,000
and that can just be

4670
02:43:52,000 --> 02:43:54,000
filter albums, pass in the search

4671
02:43:54,000 --> 02:43:56,000
Yep

4672
02:44:02,000 --> 02:44:04,000
Okay

4673
02:44:04,000 --> 02:44:06,000
It works

4674
02:44:06,000 --> 02:44:08,000
Nice

4675
02:44:08,000 --> 02:44:10,000
So it works for the first load

4676
02:44:10,000 --> 02:44:12,000
but then it doesn't... like if you type

4677
02:44:12,000 --> 02:44:14,000
if you type into the input

4678
02:44:14,000 --> 02:44:16,000
Yeah, it's not refetching

4679
02:44:16,000 --> 02:44:18,000
It's not refetching

4680
02:44:18,000 --> 02:44:20,000
Okay, so I'll try

4681
02:44:20,000 --> 02:44:22,000
the refetching piece for a little bit

4682
02:44:22,000 --> 02:44:24,000
So I think

4683
02:44:24,000 --> 02:44:26,000
for refetching

4684
02:44:26,000 --> 02:44:28,000
the way we would do it in the framework

4685
02:44:30,000 --> 02:44:32,000
That's my...

4686
02:44:32,000 --> 02:44:34,000
Wait, let me open the right file

4687
02:44:34,000 --> 02:44:36,000
Okay, so I'm going back to this

4688
02:44:36,000 --> 02:44:38,000
I don't actually know, do you see where I am

4689
02:44:38,000 --> 02:44:40,000
in VS Code?

4690
02:44:40,000 --> 02:44:42,000
How do you know which file I'm in?

4691
02:44:42,000 --> 02:44:44,000
Does it show you?

4692
02:44:48,000 --> 02:44:50,000
Or which part are you asking about?

4693
02:44:50,000 --> 02:44:52,000
Do you know where...

4694
02:44:52,000 --> 02:44:54,000
Do you track where I am in VS Code?

4695
02:44:54,000 --> 02:44:56,000
Oh yes

4696
02:44:56,000 --> 02:44:58,000
No, I can't. I'm in the file

4697
02:44:58,000 --> 02:45:00,000
Okay, cool

4698
02:45:00,000 --> 02:45:02,000
So what we want to do here

4699
02:45:02,000 --> 02:45:04,000
is essentially...

4700
02:45:04,000 --> 02:45:06,000
This is the framework bit

4701
02:45:08,000 --> 02:45:10,000
But what we want to do here

4702
02:45:10,000 --> 02:45:12,000
is we want to

4703
02:45:12,000 --> 02:45:14,000
replace this thing with

4704
02:45:14,000 --> 02:45:16,000
another stream essentially

4705
02:45:16,000 --> 02:45:18,000
and show that JSX tree

4706
02:45:18,000 --> 02:45:20,000
instead

4707
02:45:20,000 --> 02:45:22,000
So

4708
02:45:22,000 --> 02:45:24,000
the way we could do this

4709
02:45:24,000 --> 02:45:26,000
is... let me

4710
02:45:26,000 --> 02:45:28,000
think a little bit

4711
02:45:30,000 --> 02:45:32,000
So

4712
02:45:32,000 --> 02:45:34,000
I think

4713
02:45:34,000 --> 02:45:36,000
the way we would do it

4714
02:45:36,000 --> 02:45:38,000
let me write a little bit of code

4715
02:45:38,000 --> 02:45:40,000
So

4716
02:45:40,000 --> 02:45:42,000
I think we would hold the...

4717
02:45:42,000 --> 02:45:44,000
So we need to create a cache

4718
02:45:44,000 --> 02:45:46,000
Yeah, this is what I was trying to build

4719
02:45:46,000 --> 02:45:48,000
a little bit ago

4720
02:45:48,000 --> 02:45:50,000
where I wanted to call createFromFetch

4721
02:45:50,000 --> 02:45:52,000
inside of here

4722
02:45:52,000 --> 02:45:54,000
and be able to

4723
02:45:54,000 --> 02:45:56,000
store the lazy JSX

4724
02:45:56,000 --> 02:45:58,000
in a state variable

4725
02:45:58,000 --> 02:46:00,000
and return that result

4726
02:46:00,000 --> 02:46:02,000
to re-render

4727
02:46:02,000 --> 02:46:04,000
Yeah, yeah

4728
02:46:04,000 --> 02:46:06,000
So I think that's kind of what we want to do

4729
02:46:06,000 --> 02:46:08,000
and

4730
02:46:08,000 --> 02:46:10,000
maybe

4731
02:46:10,000 --> 02:46:12,000
maybe we can make

4732
02:46:12,000 --> 02:46:14,000
actually like this

4733
02:46:14,000 --> 02:46:16,000
ClientRoot, I'm going to call

4734
02:46:16,000 --> 02:46:18,000
I'm going to have a component called

4735
02:46:18,000 --> 02:46:20,000
a router

4736
02:46:20,000 --> 02:46:22,000
that renders ClientRoot

4737
02:46:22,000 --> 02:46:24,000
and I think

4738
02:46:24,000 --> 02:46:26,000
from the perspective of the ClientRoot

4739
02:46:26,000 --> 02:46:28,000
I think I'd like it to receive

4740
02:46:28,000 --> 02:46:30,000
the

4741
02:46:34,000 --> 02:46:36,000
should it receive the search params

4742
02:46:36,000 --> 02:46:38,000
or

4743
02:46:44,000 --> 02:46:46,000
I'll just

4744
02:46:46,000 --> 02:46:48,000
call it router for now and I'll write

4745
02:46:48,000 --> 02:46:50,000
the line in the router and then maybe I'll split

4746
02:46:50,000 --> 02:46:52,000
the components

4747
02:46:52,000 --> 02:46:54,000
But I think I want to have a

4748
02:46:54,000 --> 02:46:56,000
I want to have a cache

4749
02:46:56,000 --> 02:46:58,000
so

4750
02:46:58,000 --> 02:47:00,000
it's just going to be

4751
02:47:00,000 --> 02:47:02,000
just a regular map

4752
02:47:02,000 --> 02:47:04,000
So I want to

4753
02:47:04,000 --> 02:47:06,000
I think I want to keep a

4754
02:47:06,000 --> 02:47:08,000
this

4755
02:47:08,000 --> 02:47:10,000
createFromFetch

4756
02:47:10,000 --> 02:47:12,000
this represents build the stream

4757
02:47:12,000 --> 02:47:14,000
and kind of response you can use later

4758
02:47:14,000 --> 02:47:16,000
because it's

4759
02:47:16,000 --> 02:47:18,000
as long as we don't create it during rendering

4760
02:47:18,000 --> 02:47:20,000
it's going to be showing the same thing

4761
02:47:20,000 --> 02:47:22,000
So I think

4762
02:47:22,000 --> 02:47:24,000
what we want to do is we want to

4763
02:47:24,000 --> 02:47:26,000
I'm going to turn

4764
02:47:26,000 --> 02:47:28,000
off the light because it's getting really dark

4765
02:47:28,000 --> 02:47:30,000
Oh, okay

4766
02:47:32,000 --> 02:47:34,000
So I think we want to keep it

4767
02:47:34,000 --> 02:47:36,000
keep

4768
02:47:36,000 --> 02:47:38,000
a response cache per

4769
02:47:38,000 --> 02:47:40,000
this string

4770
02:47:40,000 --> 02:47:42,000
This is going to be the key

4771
02:47:42,000 --> 02:47:44,000
of how we're going to

4772
02:47:44,000 --> 02:47:46,000
cache it. So I'm going to have a map

4773
02:47:46,000 --> 02:47:48,000
Oh, yeah, you're already

4774
02:47:48,000 --> 02:47:50,000
jumping ahead to caching there

4775
02:47:50,000 --> 02:47:52,000
Yeah

4776
02:47:52,000 --> 02:47:54,000
So the initial

4777
02:47:54,000 --> 02:47:56,000
version I'm going to do is like

4778
02:47:58,000 --> 02:48:00,000
if the cache does

4779
02:48:00,000 --> 02:48:02,000
not have anything for

4780
02:48:02,000 --> 02:48:04,000
Yeah, so the

4781
02:48:04,000 --> 02:48:06,000
router

4782
02:48:06,000 --> 02:48:08,000
Okay

4783
02:48:08,000 --> 02:48:10,000
Okay, so I'm going to

4784
02:48:10,000 --> 02:48:12,000
I would assume

4785
02:48:12,000 --> 02:48:14,000
that this is like an effect

4786
02:48:14,000 --> 02:48:16,000
that's going to update as the

4787
02:48:16,000 --> 02:48:18,000
window updates and we're going to use

4788
02:48:18,000 --> 02:48:20,000
that to trigger

4789
02:48:20,000 --> 02:48:22,000
I think we're going

4790
02:48:22,000 --> 02:48:24,000
to do that, but

4791
02:48:26,000 --> 02:48:28,000
we're going to get there

4792
02:48:28,000 --> 02:48:30,000
Give me a moment

4793
02:48:30,000 --> 02:48:32,000
I wrote this kind of code like a couple

4794
02:48:32,000 --> 02:48:34,000
of times, so

4795
02:48:34,000 --> 02:48:36,000
I'm still not sure what's the best way to structure it

4796
02:48:38,000 --> 02:48:40,000
But I think

4797
02:48:40,000 --> 02:48:42,000
maybe I can call this component

4798
02:48:42,000 --> 02:48:44,000
server output

4799
02:48:44,000 --> 02:48:46,000
That's kind of what it is

4800
02:48:46,000 --> 02:48:48,000
And then this

4801
02:48:48,000 --> 02:48:50,000
is kind of the URL

4802
02:48:50,000 --> 02:48:52,000
I'll use URL as the key

4803
02:48:52,000 --> 02:48:54,000
And so I think that is the part

4804
02:48:54,000 --> 02:48:56,000
Yeah, and then the router will

4805
02:48:56,000 --> 02:48:58,000
return server

4806
02:48:58,000 --> 02:49:00,000
output

4807
02:49:00,000 --> 02:49:02,000
And I'll just hard code the URL here

4808
02:49:02,000 --> 02:49:04,000
So that will be the

4809
02:49:04,000 --> 02:49:06,000
kind of the initial URL

4810
02:49:06,000 --> 02:49:08,000
And later we'll make it

4811
02:49:08,000 --> 02:49:10,000
respond to

4812
02:49:10,000 --> 02:49:12,000
the client-side routing

4813
02:49:14,000 --> 02:49:16,000
But I think what we want to do

4814
02:49:16,000 --> 02:49:18,000
is

4815
02:49:18,000 --> 02:49:20,000
I don't need this anymore

4816
02:49:20,000 --> 02:49:22,000
Instead, the router

4817
02:49:22,000 --> 02:49:24,000
renders this thing and this thing

4818
02:49:24,000 --> 02:49:26,000
I guess maybe I call

4819
02:49:26,000 --> 02:49:28,000
this server

4820
02:49:28,000 --> 02:49:30,000
endpoint

4821
02:49:30,000 --> 02:49:32,000
server endpoint

4822
02:49:34,000 --> 02:49:36,000
Nah, it's going to be

4823
02:49:36,000 --> 02:49:38,000
a cold URL, sorry

4824
02:49:38,000 --> 02:49:40,000
So if it's not in the

4825
02:49:40,000 --> 02:49:42,000
If the URL is

4826
02:49:42,000 --> 02:49:44,000
not in the cache, I think we'll want to

4827
02:49:44,000 --> 02:49:46,000
put it

4828
02:49:46,000 --> 02:49:48,000
put this

4829
02:49:48,000 --> 02:49:50,000
into the cache

4830
02:49:50,000 --> 02:49:52,000
Let me see

4831
02:49:52,000 --> 02:49:54,000
So this is going to be

4832
02:49:54,000 --> 02:49:56,000
URL

4833
02:49:58,000 --> 02:50:00,000
And then

4834
02:50:00,000 --> 02:50:02,000
I think we just want to return

4835
02:50:02,000 --> 02:50:04,000
what's in the cache for this URL

4836
02:50:04,000 --> 02:50:06,000
And so

4837
02:50:06,000 --> 02:50:08,000
this might be

4838
02:50:08,000 --> 02:50:10,000
Yeah, that's interesting

4839
02:50:10,000 --> 02:50:12,000
I don't actually use set cache here

4840
02:50:12,000 --> 02:50:14,000
Although there is a use case

4841
02:50:14,000 --> 02:50:16,000
It's a ref as it stands

4842
02:50:16,000 --> 02:50:18,000
That's what it's acting like

4843
02:50:18,000 --> 02:50:20,000
Yeah

4844
02:50:20,000 --> 02:50:22,000
But I think we do need it for some

4845
02:50:22,000 --> 02:50:24,000
Like I think we would need this for invalidation

4846
02:50:24,000 --> 02:50:26,000
It's just, in our case, we don't have

4847
02:50:26,000 --> 02:50:28,000
Invalidation, so we don't have a reason

4848
02:50:28,000 --> 02:50:30,000
to do this

4849
02:50:30,000 --> 02:50:32,000
Because it's always, like it's caching everything forever

4850
02:50:32,000 --> 02:50:34,000
But if we had

4851
02:50:34,000 --> 02:50:36,000
invalidation where we want to say

4852
02:50:36,000 --> 02:50:38,000
throw away the cache you had

4853
02:50:38,000 --> 02:50:40,000
because something got modified

4854
02:50:40,000 --> 02:50:42,000
Then we would model it as

4855
02:50:42,000 --> 02:50:44,000
a set state where we

4856
02:50:44,000 --> 02:50:46,000
set state to a new map

4857
02:50:46,000 --> 02:50:48,000
So it would be like an empty cache

4858
02:50:48,000 --> 02:50:50,000
And that's why, like, conceptually

4859
02:50:50,000 --> 02:50:52,000
I think it should leave in state

4860
02:50:52,000 --> 02:50:54,000
That's why it's not like a ref

4861
02:50:54,000 --> 02:50:56,000
And maybe we can actually

4862
02:50:56,000 --> 02:50:58,000
also show it

4863
02:50:58,000 --> 02:51:00,000
We could have a small example that shows it

4864
02:51:00,000 --> 02:51:02,000
Yeah

4865
02:51:02,000 --> 02:51:04,000
Also, sorry that

4866
02:51:04,000 --> 02:51:06,000
Sorry I just do, can we do a quick pause

4867
02:51:06,000 --> 02:51:08,000
for like a bathroom break, get some more water

4868
02:51:08,000 --> 02:51:10,000
Yeah, yeah, sure

4869
02:51:10,000 --> 02:51:12,000
Okay, cool. I also don't have a standby screen

4870
02:51:12,000 --> 02:51:14,000
So, uh, yeah

4871
02:51:14,000 --> 02:51:16,000
BRB

4872
02:51:16,000 --> 02:51:18,000
Okay, one second

4873
02:51:18,000 --> 02:51:20,000
Alright

4874
02:51:20,000 --> 02:51:22,000
Am I still on the

4875
02:51:22,000 --> 02:51:24,000
stream? Like, I don't know, are people there?

4876
02:51:24,000 --> 02:51:26,000
I guess

4877
02:51:26,000 --> 02:51:28,000
maybe

4878
02:51:28,000 --> 02:51:30,000
Um

4879
02:51:30,000 --> 02:51:32,000
Yeah, I don't really have access to the

4880
02:51:32,000 --> 02:51:34,000
I don't have access

4881
02:51:34,000 --> 02:51:36,000
to the actual server, so I have

4882
02:51:36,000 --> 02:51:38,000
I have no idea if this

4883
02:51:38,000 --> 02:51:40,000
if this code works

4884
02:51:40,000 --> 02:51:42,000
because I can't, for some reason I can't

4885
02:51:42,000 --> 02:51:44,000
I can't

4886
02:51:44,000 --> 02:51:46,000
Like, the VS Code tunneling

4887
02:51:46,000 --> 02:51:48,000
doesn't work for me, I think it's

4888
02:51:48,000 --> 02:51:50,000
maybe

4889
02:51:50,000 --> 02:51:52,000
because of a firewall

4890
02:51:52,000 --> 02:51:54,000
or something

4891
02:51:54,000 --> 02:51:56,000
But maybe if, yeah, maybe for now I could

4892
02:51:56,000 --> 02:51:58,000
just go over this a little bit

4893
02:51:58,000 --> 02:52:00,000
So, yeah, we render

4894
02:52:00,000 --> 02:52:02,000
this router that, like, renders

4895
02:52:02,000 --> 02:52:04,000
this server output

4896
02:52:04,000 --> 02:52:06,000
for this key

4897
02:52:06,000 --> 02:52:08,000
and then, this might look a bit

4898
02:52:08,000 --> 02:52:10,000
weird, because this might look, you know, like

4899
02:52:10,000 --> 02:52:12,000
aren't you supposed, like, aren't components

4900
02:52:12,000 --> 02:52:14,000
supposed to be pure, like, isn't this

4901
02:52:14,000 --> 02:52:16,000
a mutation? And so

4902
02:52:16,000 --> 02:52:18,000
the key thing here is that

4903
02:52:18,000 --> 02:52:20,000
it's completely unobservable

4904
02:52:20,000 --> 02:52:22,000
So

4905
02:52:22,000 --> 02:52:24,000
it's, um

4906
02:52:26,000 --> 02:52:28,000
because, like, the state

4907
02:52:28,000 --> 02:52:30,000
the state is, like, local to this component

4908
02:52:30,000 --> 02:52:32,000
and this lazily

4909
02:52:32,000 --> 02:52:34,000
kind of fills it in the first time

4910
02:52:34,000 --> 02:52:36,000
you ask for it, it kind of acts

4911
02:52:36,000 --> 02:52:38,000
as

4912
02:52:38,000 --> 02:52:40,000
you know, it is going to give you, like, the same

4913
02:52:40,000 --> 02:52:42,000
result for, like

4914
02:52:42,000 --> 02:52:44,000
multiple attempts, regardless of

4915
02:52:44,000 --> 02:52:46,000
in, like, which order you do them

4916
02:52:46,000 --> 02:52:48,000
and this is why it's okay to

4917
02:52:48,000 --> 02:52:50,000
mutate in this particular

4918
02:52:50,000 --> 02:52:52,000
example

4919
02:52:56,000 --> 02:52:58,000
Yeah, so maybe let's see if this

4920
02:52:58,000 --> 02:53:00,000
works at all, like, can we

4921
02:53:00,000 --> 02:53:02,000
Did I break it?

4922
02:53:02,000 --> 02:53:04,000
I don't know yet

4923
02:53:04,000 --> 02:53:06,000
This should, I mean, as it looks

4924
02:53:06,000 --> 02:53:08,000
it should be fine

4925
02:53:08,000 --> 02:53:10,000
but if we save it, we get

4926
02:53:10,000 --> 02:53:12,000
something

4927
02:53:12,000 --> 02:53:14,000
Okay

4928
02:53:14,000 --> 02:53:16,000
properties of undefined reading to lowercase

4929
02:53:16,000 --> 02:53:18,000
Okay, so

4930
02:53:18,000 --> 02:53:20,000
Something's trying to render

4931
02:53:20,000 --> 02:53:22,000
that shouldn't be

4932
02:53:22,000 --> 02:53:24,000
Well, wait, are we currently

4933
02:53:24,000 --> 02:53:26,000
do you have question mark

4934
02:53:26,000 --> 02:53:28,000
search equals blah blah in your

4935
02:53:28,000 --> 02:53:30,000
URL bar? I do

4936
02:53:30,000 --> 02:53:32,000
Oh, actually, no, wait, no, we're not using that

4937
02:53:32,000 --> 02:53:34,000
we've hardcoded it

4938
02:53:34,000 --> 02:53:36,000
Create from

4939
02:53:36,000 --> 02:53:38,000
fetch fetch URL

4940
02:53:38,000 --> 02:53:40,000
Yeah, it's happening server-side

4941
02:53:40,000 --> 02:53:42,000
So

4942
02:53:42,000 --> 02:53:44,000
it's trying to, okay

4943
02:53:44,000 --> 02:53:46,000
I think it's because the dev panel

4944
02:53:46,000 --> 02:53:48,000
assumes that you're fetching the same thing

4945
02:53:48,000 --> 02:53:50,000
so if we just stop rendering the

4946
02:53:50,000 --> 02:53:52,000
dev panel, I think it'll just go away

4947
02:53:52,000 --> 02:53:54,000
Oh, no, that's, wait

4948
02:53:54,000 --> 02:53:56,000
let's just fix it, it's fine

4949
02:53:56,000 --> 02:53:58,000
I'll fix it

4950
02:53:58,000 --> 02:54:00,000
Let's just make it so that

4951
02:54:00,000 --> 02:54:02,000
the, so since the URL

4952
02:54:02,000 --> 02:54:04,000
is owned by the router, I'm just

4953
02:54:04,000 --> 02:54:06,000
I'm just gonna

4954
02:54:06,000 --> 02:54:08,000
Yeah, I'm just gonna render dev panel here

4955
02:54:08,000 --> 02:54:10,000
myself

4956
02:54:10,000 --> 02:54:12,000
So we can

4957
02:54:12,000 --> 02:54:14,000
put dev panel

4958
02:54:14,000 --> 02:54:16,000
and I'm gonna make this URL

4959
02:54:16,000 --> 02:54:18,000
a constant

4960
02:54:18,000 --> 02:54:20,000
and

4961
02:54:20,000 --> 02:54:22,000
I'm gonna pass it to both

4962
02:54:22,000 --> 02:54:24,000
things

4963
02:54:24,000 --> 02:54:26,000
so that

4964
02:54:26,000 --> 02:54:28,000
I guess I don't actually know how your

4965
02:54:28,000 --> 02:54:30,000
dev panel works, let me have a look

4966
02:54:30,000 --> 02:54:32,000
So I'm gonna get rid of, oh, you have like

4967
02:54:32,000 --> 02:54:34,000
a separate root

4968
02:54:34,000 --> 02:54:36,000
It's just a separate root and separate call

4969
02:54:36,000 --> 02:54:38,000
I ideally wanted it to trace

4970
02:54:38,000 --> 02:54:40,000
what was happening

4971
02:54:40,000 --> 02:54:42,000
Oh, I see

4972
02:54:42,000 --> 02:54:44,000
And I couldn't find a way to do it, so I just

4973
02:54:44,000 --> 02:54:46,000
do another fetch at the same time

4974
02:54:46,000 --> 02:54:48,000
and apparently it wasn't, I did two roots

4975
02:54:48,000 --> 02:54:50,000
I see, I see

4976
02:54:50,000 --> 02:54:52,000
Interesting

4977
02:54:52,000 --> 02:54:54,000
Yeah, right

4978
02:54:54,000 --> 02:54:56,000
because you're not hooking into the same

4979
02:54:56,000 --> 02:54:58,000
stream, but okay, that's fine

4980
02:54:58,000 --> 02:55:00,000
so we'll do the same thing

4981
02:55:00,000 --> 02:55:02,000
except it would, you know, do it with a different

4982
02:55:02,000 --> 02:55:04,000
different URL

4983
02:55:04,000 --> 02:55:06,000
because if I just pass the URL here

4984
02:55:06,000 --> 02:55:08,000
and I also make it dependency of the

4985
02:55:08,000 --> 02:55:10,000
effect

4986
02:55:10,000 --> 02:55:12,000
I think it would, well I guess

4987
02:55:12,000 --> 02:55:14,000
like our panel would behave maybe a bit

4988
02:55:14,000 --> 02:55:16,000
weirdly

4989
02:55:16,000 --> 02:55:18,000
if the URL changes

4990
02:55:18,000 --> 02:55:20,000
but maybe not, so let's just see if it works

4991
02:55:20,000 --> 02:55:22,000
And then can we

4992
02:55:22,000 --> 02:55:24,000
where's the HTML for

4993
02:55:24,000 --> 02:55:26,000
your thing, so that

4994
02:55:26,000 --> 02:55:28,000
Oh yeah, that

4995
02:55:28,000 --> 02:55:30,000
should be in a public folder, but I

4996
02:55:30,000 --> 02:55:32,000
didn't have time for it, so I think it's inside of this

4997
02:55:32,000 --> 02:55:34,000
templates index file

4998
02:55:34,000 --> 02:55:36,000
I'll bring it over here

4999
02:55:36,000 --> 02:55:38,000
But yeah, it's very simple

5000
02:55:38,000 --> 02:55:40,000
This is all it's doing

5001
02:55:40,000 --> 02:55:42,000
I can just remove it from here, right

5002
02:55:42,000 --> 02:55:44,000
and make it like a regular

5003
02:55:44,000 --> 02:55:46,000
Okay, yeah, so I'll just

5004
02:55:46,000 --> 02:55:48,000
get rid of this

5005
02:55:48,000 --> 02:55:50,000
and then I'll

5006
02:55:50,000 --> 02:55:52,000
and so this is not going to be like a separate root

5007
02:55:52,000 --> 02:55:54,000
it's just a React component that we're

5008
02:55:54,000 --> 02:55:56,000
rendering

5009
02:55:56,000 --> 02:55:58,000
Does it have any styles

5010
02:55:58,000 --> 02:56:00,000
that are, that depend on that

5011
02:56:00,000 --> 02:56:02,000
ID

5012
02:56:02,000 --> 02:56:04,000
Uh

5013
02:56:04,000 --> 02:56:06,000
I don't think so

5014
02:56:06,000 --> 02:56:08,000
Oh, because you're using

5015
02:56:08,000 --> 02:56:10,000
Tailwind, there's no styles

5016
02:56:10,000 --> 02:56:12,000
Love it, love it

5017
02:56:12,000 --> 02:56:14,000
Yep, hacks for everything

5018
02:56:14,000 --> 02:56:16,000
That's the amazing thing about

5019
02:56:16,000 --> 02:56:18,000
You just copy and paste things

5020
02:56:18,000 --> 02:56:20,000
move them around

5021
02:56:20,000 --> 02:56:22,000
Works fine

5022
02:56:22,000 --> 02:56:24,000
So style files

5023
02:56:24,000 --> 02:56:26,000
Okay, so let's see if

5024
02:56:26,000 --> 02:56:28,000
Okay, does this work

5025
02:56:28,000 --> 02:56:30,000
So if you

5026
02:56:30,000 --> 02:56:32,000
try it now

5027
02:56:32,000 --> 02:56:34,000
Did we fix it

5028
02:56:34,000 --> 02:56:36,000
Yeah, we got no errors

5029
02:56:36,000 --> 02:56:38,000
and we just get fetching from server

5030
02:56:38,000 --> 02:56:40,000
which I think is right, since we're not

5031
02:56:40,000 --> 02:56:42,000
rendering anything yet

5032
02:56:42,000 --> 02:56:44,000
But we are, no I think we are

5033
02:56:44,000 --> 02:56:46,000
rendering, like we're supposed to be

5034
02:56:46,000 --> 02:56:48,000
rendering that JSX tree for that

5035
02:56:48,000 --> 02:56:50,000
URL

5036
02:56:50,000 --> 02:56:52,000
Oh, okay, that actually should work, huh

5037
02:56:52,000 --> 02:56:54,000
So it does fetching from server

5038
02:56:54,000 --> 02:56:56,000
Can you see if there are any errors in the console

5039
02:56:56,000 --> 02:56:58,000
Yeah, let's see, there's no server errors

5040
02:57:00,000 --> 02:57:02,000
The client console, it looks like it's just getting

5041
02:57:02,000 --> 02:57:04,000
the first one, but it's not reading the rest of the

5042
02:57:04,000 --> 02:57:06,000
stream onto the page

5043
02:57:06,000 --> 02:57:08,000
And I remember that earlier

5044
02:57:08,000 --> 02:57:10,000
we removed the function

5045
02:57:10,000 --> 02:57:12,000
call and changed it to createL

5046
02:57:12,000 --> 02:57:14,000
That was working

5047
02:57:14,000 --> 02:57:16,000
So this is the part

5048
02:57:20,000 --> 02:57:22,000
Okay, maybe let's

5049
02:57:22,000 --> 02:57:24,000
go back a little bit

5050
02:57:24,000 --> 02:57:26,000
and simplify it

5051
02:57:26,000 --> 02:57:28,000
and then see if it still breaks

5052
02:57:28,000 --> 02:57:30,000
So I'm gonna make

5053
02:57:30,000 --> 02:57:32,000
a fake thing

5054
02:57:32,000 --> 02:57:34,000
and I'm gonna

5055
02:57:34,000 --> 02:57:36,000
instead of router, I'm gonna render this fake thing

5056
02:57:36,000 --> 02:57:38,000
It's a bit hard

5057
02:57:38,000 --> 02:57:40,000
for me to debug because I don't see the output

5058
02:57:40,000 --> 02:57:42,000
and I don't see

5059
02:57:42,000 --> 02:57:44,000
I can't actually check anything

5060
02:57:44,000 --> 02:57:46,000
But maybe

5061
02:57:46,000 --> 02:57:48,000
let's go back to

5062
02:57:48,000 --> 02:57:50,000
like

5063
02:57:50,000 --> 02:57:52,000
if I know

5064
02:57:52,000 --> 02:57:54,000
my URL

5065
02:57:54,000 --> 02:57:56,000
my thing

5066
02:57:56,000 --> 02:57:58,000
equals

5067
02:57:58,000 --> 02:58:00,000
Sorry

5068
02:58:00,000 --> 02:58:02,000
I'm gonna name it in my

5069
02:58:02,000 --> 02:58:04,000
weird ways

5070
02:58:04,000 --> 02:58:06,000
Yeah, so I'm gonna create from fetch

5071
02:58:06,000 --> 02:58:08,000
for my URL

5072
02:58:08,000 --> 02:58:10,000
Oops, that's gonna be my

5073
02:58:10,000 --> 02:58:12,000
URL

5074
02:58:12,000 --> 02:58:14,000
And we're gonna render this

5075
02:58:16,000 --> 02:58:18,000
Okay, so can we just get this thing

5076
02:58:18,000 --> 02:58:20,000
working? Does it still break?

5077
02:58:20,000 --> 02:58:22,000
This works

5078
02:58:22,000 --> 02:58:24,000
Okay, this works

5079
02:58:24,000 --> 02:58:26,000
And then

5080
02:58:26,000 --> 02:58:28,000
if I swap it out with the router

5081
02:58:28,000 --> 02:58:30,000
I can confirm that it doesn't

5082
02:58:30,000 --> 02:58:32,000
work again

5083
02:58:34,000 --> 02:58:36,000
Okay, it doesn't work

5084
02:58:36,000 --> 02:58:38,000
So let's switch it back to fake thing

5085
02:58:38,000 --> 02:58:40,000
It is trying to resolve the client-side

5086
02:58:40,000 --> 02:58:42,000
component import though, which is interesting

5087
02:58:42,000 --> 02:58:44,000
But yeah, that's working

5088
02:58:44,000 --> 02:58:46,000
Okay, so let's

5089
02:58:46,000 --> 02:58:48,000
maybe now change this to just

5090
02:58:48,000 --> 02:58:50,000
use this

5091
02:58:50,000 --> 02:58:52,000
component to see if the problem is with this

5092
02:58:52,000 --> 02:58:54,000
component. Try it again

5093
02:58:54,000 --> 02:58:56,000
That is not

5094
02:58:56,000 --> 02:58:58,000
working

5095
02:58:58,000 --> 02:59:00,000
That is not working, so that's where the problem is

5096
02:59:00,000 --> 02:59:02,000
It's the cache

5097
02:59:02,000 --> 02:59:04,000
Okay, that's good though because it means

5098
02:59:04,000 --> 02:59:06,000
something here

5099
02:59:08,000 --> 02:59:10,000
What am I doing wrong?

5100
02:59:10,000 --> 02:59:12,000
Okay

5101
02:59:12,000 --> 02:59:14,000
Cache, if not cache

5102
02:59:14,000 --> 02:59:16,000
has cache set

5103
02:59:16,000 --> 02:59:18,000
cache is

5104
02:59:18,000 --> 02:59:20,000
a piece of state

5105
02:59:20,000 --> 02:59:22,000
If it doesn't have this URL

5106
02:59:22,000 --> 02:59:24,000
put this

5107
02:59:24,000 --> 02:59:26,000
thing into it and then

5108
02:59:26,000 --> 02:59:28,000
read it. Yeah, I don't see

5109
02:59:28,000 --> 02:59:30,000
a mistake in the code, but maybe let's

5110
02:59:30,000 --> 02:59:32,000
keep, you know, let's keep

5111
02:59:32,000 --> 02:59:34,000
I mean, we can log what this is

5112
02:59:34,000 --> 02:59:36,000
Yeah, let's log what this is

5113
02:59:36,000 --> 02:59:38,000
But I'm not going to see the log because I don't see

5114
02:59:38,000 --> 02:59:40,000
the console

5115
02:59:40,000 --> 02:59:42,000
It should be the browser console, so I can at least

5116
02:59:42,000 --> 02:59:44,000
bump up the font size on the screen share

5117
02:59:44,000 --> 02:59:46,000
No, no, your tab share

5118
02:59:46,000 --> 02:59:48,000
doesn't show me anything

5119
02:59:48,000 --> 02:59:50,000
You're right

5120
02:59:50,000 --> 02:59:52,000
Alright, you get chunk pending, which is a familiar

5121
02:59:52,000 --> 02:59:54,000
site

5122
02:59:54,000 --> 02:59:56,000
Yeah, that seems legit. Okay, no, it's fine

5123
02:59:56,000 --> 02:59:58,000
I think I have a way to debug it, like I have

5124
02:59:58,000 --> 03:00:00,000
a methodology. I'm just going to

5125
03:00:00,000 --> 03:00:02,000
put it piece by piece and then we'll find

5126
03:00:02,000 --> 03:00:04,000
where the mistake is

5127
03:00:04,000 --> 03:00:06,000
Okay, so the next thing is I'm going to

5128
03:00:06,000 --> 03:00:08,000
copy and paste like this

5129
03:00:08,000 --> 03:00:10,000
part into the fake

5130
03:00:10,000 --> 03:00:12,000
thing

5131
03:00:12,000 --> 03:00:14,000
It's also doing an infinite loop, which might

5132
03:00:14,000 --> 03:00:16,000
be something

5133
03:00:16,000 --> 03:00:18,000
Yeah, that seems

5134
03:00:18,000 --> 03:00:20,000
good to know

5135
03:00:20,000 --> 03:00:22,000
if not cache, but I don't know

5136
03:00:22,000 --> 03:00:24,000
why it... Yeah, because I was getting infinite

5137
03:00:24,000 --> 03:00:26,000
logs

5138
03:00:26,000 --> 03:00:28,000
Interesting

5139
03:00:29,000 --> 03:00:31,000
Yeah, yeah, yeah, yeah

5140
03:00:31,000 --> 03:00:33,000
Interesting

5141
03:00:33,000 --> 03:00:35,000
Very interesting

5142
03:00:37,000 --> 03:00:39,000
Yeah, well, let's

5143
03:00:39,000 --> 03:00:41,000
keep going. I think I should be able to

5144
03:00:41,000 --> 03:00:43,000
figure it out

5145
03:00:45,000 --> 03:00:47,000
Okay, just

5146
03:00:47,000 --> 03:00:49,000
Okay, so the first thing I could maybe

5147
03:00:49,000 --> 03:00:51,000
try is just like

5148
03:00:51,000 --> 03:00:53,000
for now, I'll move this cache

5149
03:00:53,000 --> 03:00:55,000
outside maybe

5150
03:00:55,000 --> 03:00:57,000
So I've had this issue in the past for

5151
03:00:57,000 --> 03:00:59,000
when I tried to use use

5152
03:00:59,000 --> 03:01:01,000
and I didn't put any

5153
03:01:01,000 --> 03:01:03,000
wrappers around it, I didn't

5154
03:01:03,000 --> 03:01:05,000
put a cache, and it was calling my

5155
03:01:05,000 --> 03:01:07,000
useFetch infinitely

5156
03:01:07,000 --> 03:01:09,000
because it was a weighted

5157
03:01:09,000 --> 03:01:11,000
promise, and I don't know if that's why

5158
03:01:11,000 --> 03:01:13,000
because this is definitely another case of returning a

5159
03:01:13,000 --> 03:01:15,000
promise and passing it

5160
03:01:15,000 --> 03:01:17,000
Yeah, maybe

5161
03:01:17,000 --> 03:01:19,000
that is...

5162
03:01:19,000 --> 03:01:21,000
Yeah, maybe actually, maybe you're right. Let me see

5163
03:01:21,000 --> 03:01:23,000
Maybe that's not... Let me check

5164
03:01:23,000 --> 03:01:25,000
how our

5165
03:01:25,000 --> 03:01:27,000
our

5166
03:01:27,000 --> 03:01:29,000
fixture does it, because maybe I'm

5167
03:01:29,000 --> 03:01:31,000
just supposed to use use, and we

5168
03:01:31,000 --> 03:01:33,000
don't have warnings yet, so

5169
03:01:33,000 --> 03:01:35,000
that's why

5170
03:01:35,000 --> 03:01:37,000
Yeah, okay, let's try this

5171
03:01:37,000 --> 03:01:39,000
actually. Maybe that's how it's

5172
03:01:39,000 --> 03:01:41,000
supposed to work. So I'll import

5173
03:01:41,000 --> 03:01:43,000
use from React

5174
03:01:43,000 --> 03:01:45,000
and let's...

5175
03:01:45,000 --> 03:01:47,000
instead of fakeThing, let's render the

5176
03:01:47,000 --> 03:01:49,000
router again, and let's

5177
03:01:49,000 --> 03:01:51,000
get this back, except

5178
03:01:51,000 --> 03:01:53,000
this will be just

5179
03:01:53,000 --> 03:01:55,000
lazyJSX

5180
03:01:55,000 --> 03:01:57,000
and then I'll say return

5181
03:01:57,000 --> 03:01:59,000
use lazyJSX

5182
03:01:59,000 --> 03:02:01,000
because I think we haven't implemented

5183
03:02:01,000 --> 03:02:03,000
support for this yet, but we also haven't

5184
03:02:03,000 --> 03:02:05,000
implemented good error messages

5185
03:02:05,000 --> 03:02:07,000
Interesting. Let's see if that's better

5186
03:02:07,000 --> 03:02:09,000
That's the same

5187
03:02:09,000 --> 03:02:11,000
Now it's the same

5188
03:02:11,000 --> 03:02:13,000
Yeah, we're still getting nothing

5189
03:02:13,000 --> 03:02:15,000
back. Okay, now

5190
03:02:15,000 --> 03:02:17,000
let's try this

5191
03:02:17,000 --> 03:02:19,000
thing next. Can you

5192
03:02:19,000 --> 03:02:21,000
refresh?

5193
03:02:21,000 --> 03:02:23,000
Ooh, things are happening

5194
03:02:25,000 --> 03:02:27,000
Okay, I don't...

5195
03:02:27,000 --> 03:02:29,000
Let me look here. Okay, we do have something on the page

5196
03:02:29,000 --> 03:02:31,000
Okay, so this

5197
03:02:31,000 --> 03:02:33,000
works. This works

5198
03:02:33,000 --> 03:02:35,000
Interesting

5199
03:02:35,000 --> 03:02:37,000
So what was the important bit? Wait, what changed?

5200
03:02:37,000 --> 03:02:39,000
Well, the part that changed

5201
03:02:39,000 --> 03:02:41,000
is the... No longer useState

5202
03:02:41,000 --> 03:02:43,000
Okay

5203
03:02:43,000 --> 03:02:45,000
Yeah, I don't understand

5204
03:02:45,000 --> 03:02:47,000
It definitely works like in

5205
03:02:47,000 --> 03:02:49,000
the example I wrote a few days ago

5206
03:02:49,000 --> 03:02:51,000
Yeah

5207
03:02:51,000 --> 03:02:53,000
Oh, wait, maybe we can remove strictMode

5208
03:02:53,000 --> 03:02:55,000
I mean, I wouldn't necessarily...

5209
03:02:55,000 --> 03:02:57,000
I couldn't get anything

5210
03:02:57,000 --> 03:02:59,000
to work without strictMode

5211
03:02:59,000 --> 03:03:01,000
Oh, it works! Okay, nevermind

5212
03:03:01,000 --> 03:03:03,000
Okay, if we remove strictMode

5213
03:03:03,000 --> 03:03:05,000
and I put this back

5214
03:03:05,000 --> 03:03:07,000
Let's see

5215
03:03:07,000 --> 03:03:09,000
I think maybe we just have a bug there

5216
03:03:09,000 --> 03:03:11,000
Is it still broken?

5217
03:03:11,000 --> 03:03:13,000
Yeah

5218
03:03:13,000 --> 03:03:15,000
Yeah, maybe it's like a different React

5219
03:03:15,000 --> 03:03:17,000
version

5220
03:03:17,000 --> 03:03:19,000
Yeah, I'm on an experimental

5221
03:03:19,000 --> 03:03:21,000
18 release because it's the only thing that

5222
03:03:21,000 --> 03:03:23,000
worked with createFromFetch

5223
03:03:23,000 --> 03:03:25,000
But yeah

5224
03:03:25,000 --> 03:03:27,000
Okay, let me see

5225
03:03:27,000 --> 03:03:29,000
Experiment. Yeah, I don't...

5226
03:03:29,000 --> 03:03:31,000
I think...

5227
03:03:31,000 --> 03:03:33,000
Let's try to

5228
03:03:33,000 --> 03:03:35,000
Let's try to

5229
03:03:35,000 --> 03:03:37,000
use a different React version

5230
03:03:37,000 --> 03:03:39,000
I will copy and paste the version that

5231
03:03:39,000 --> 03:03:41,000
I think should work

5232
03:03:41,000 --> 03:03:43,000
Can we

5233
03:03:43,000 --> 03:03:45,000
Can we

5234
03:03:45,000 --> 03:03:47,000
yarn and

5235
03:03:47,000 --> 03:03:49,000
whatever

5236
03:03:49,000 --> 03:03:51,000
It like upgrade to

5237
03:03:51,000 --> 03:03:53,000
a new experimental release?

5238
03:03:53,000 --> 03:03:55,000
No, it's actually

5239
03:03:55,000 --> 03:03:57,000
different. It's like the next

5240
03:03:57,000 --> 03:03:59,000
It's like a canary

5241
03:03:59,000 --> 03:04:01,000
Because I don't know what's...

5242
03:04:01,000 --> 03:04:03,000
Experimental might have too many things

5243
03:04:03,000 --> 03:04:05,000
enabled that could be broken

5244
03:04:05,000 --> 03:04:07,000
Could be

5245
03:04:07,000 --> 03:04:09,000
That could be the reason

5246
03:04:09,000 --> 03:04:11,000
I mean, can't we just roll without the state variable

5247
03:04:11,000 --> 03:04:13,000
though? Because I feel like...

5248
03:04:13,000 --> 03:04:15,000
I just want to see if that helps

5249
03:04:15,000 --> 03:04:17,000
If it doesn't help, we'll just roll without it

5250
03:04:17,000 --> 03:04:19,000
It's just annoying because like

5251
03:04:19,000 --> 03:04:21,000
I do have this working in literally

5252
03:04:21,000 --> 03:04:23,000
I know

5253
03:04:23,000 --> 03:04:25,000
It's written the same way in a different project

5254
03:04:25,000 --> 03:04:27,000
and I'm like, why doesn't

5255
03:04:27,000 --> 03:04:29,000
it work if I have it working in another

5256
03:04:29,000 --> 03:04:31,000
file

5257
03:04:31,000 --> 03:04:33,000
Yeah, as a framework maintainer, whenever something goes wrong in Astra

5258
03:04:33,000 --> 03:04:35,000
I'm like, no, no, no, what is it?

5259
03:04:35,000 --> 03:04:37,000
What version is it?

5260
03:04:37,000 --> 03:04:39,000
No, I already did

5261
03:04:39,000 --> 03:04:41,000
You don't need to specify versions. I already put them in package.json

5262
03:04:41,000 --> 03:04:43,000
You could just like re-run this

5263
03:04:43,000 --> 03:04:45,000
Perfect

5264
03:04:45,000 --> 03:04:47,000
Oh, you just found it

5265
03:04:47,000 --> 03:04:49,000
Alright

5266
03:04:49,000 --> 03:04:51,000
That'll do

5267
03:04:51,000 --> 03:04:53,000
So these are next releases instead of experimental

5268
03:04:53,000 --> 03:04:55,000
Yeah

5269
03:04:55,000 --> 03:04:57,000
These are a bit more kind of stable

5270
03:04:57,000 --> 03:04:59,000
Okay

5271
03:04:59,000 --> 03:05:01,000
And yeah, this is where you get funny peer dependency issues

5272
03:05:01,000 --> 03:05:03,000
Yeah

5273
03:05:07,000 --> 03:05:09,000
And it's the same thing, I think

5274
03:05:11,000 --> 03:05:13,000
Interesting

5275
03:05:17,000 --> 03:05:19,000
Yeah, so it's

5276
03:05:19,000 --> 03:05:21,000
Yeah, it's running infinitely

5277
03:05:23,000 --> 03:05:25,000
Can we wrap this

5278
03:05:25,000 --> 03:05:27,000
with the actual cache helper

5279
03:05:27,000 --> 03:05:29,000
from React?

5280
03:05:31,000 --> 03:05:33,000
No, we don't use that anymore

5281
03:05:33,000 --> 03:05:35,000
Okay, yeah

5282
03:05:35,000 --> 03:05:37,000
Okay

5283
03:05:37,000 --> 03:05:39,000
Okay, let's

5284
03:05:39,000 --> 03:05:41,000
Okay, let's forget about

5285
03:05:41,000 --> 03:05:43,000
I mean, it doesn't matter that much because we're not doing

5286
03:05:43,000 --> 03:05:45,000
invalidation anyway, so

5287
03:05:45,000 --> 03:05:47,000
let's just, I'll add back the strict mode

5288
03:05:47,000 --> 03:05:49,000
and I will

5289
03:05:51,000 --> 03:05:53,000
Yeah, I will remove the state variable

5290
03:05:53,000 --> 03:05:55,000
I'm not sure why it doesn't work

5291
03:05:55,000 --> 03:05:57,000
without it, but maybe we just broke something

5292
03:05:59,000 --> 03:06:01,000
So, yeah, I'll just keep it global

5293
03:06:03,000 --> 03:06:05,000
But I think at least like this

5294
03:06:05,000 --> 03:06:07,000
this is actually supposed to

5295
03:06:07,000 --> 03:06:09,000
I don't need use here in that case

5296
03:06:09,000 --> 03:06:11,000
I think

5297
03:06:11,000 --> 03:06:13,000
So I think this is supposed to work

5298
03:06:15,000 --> 03:06:17,000
I know, we definitely need use

5299
03:06:17,000 --> 03:06:19,000
What's going on?

5300
03:06:19,000 --> 03:06:21,000
Oh, we do? Okay, I can add that

5301
03:06:21,000 --> 03:06:23,000
Yeah, objects, okay, it's saying promise

5302
03:06:23,000 --> 03:06:25,000
is invalid

5303
03:06:25,000 --> 03:06:27,000
Okay, yeah, so we

5304
03:06:27,000 --> 03:06:29,000
didn't implement this yet, so let's

5305
03:06:29,000 --> 03:06:31,000
Okay, let's put it back

5306
03:06:31,000 --> 03:06:33,000
If anyone at home is wondering

5307
03:06:33,000 --> 03:06:35,000
like what's going on, we've kind of graduated

5308
03:06:35,000 --> 03:06:37,000
from exploring Rack server components

5309
03:06:37,000 --> 03:06:39,000
to like how do they really work

5310
03:06:39,000 --> 03:06:41,000
within a framework if you're trying

5311
03:06:41,000 --> 03:06:43,000
to build one

5312
03:06:43,000 --> 03:06:45,000
So this is going more in the weeds for sure

5313
03:06:45,000 --> 03:06:47,000
but one interesting fact is like when you want to

5314
03:06:47,000 --> 03:06:49,000
unwrap asynchronous stuff

5315
03:06:49,000 --> 03:06:51,000
on the client, use is

5316
03:06:51,000 --> 03:06:53,000
basically in a wait for the client, right?

5317
03:06:53,000 --> 03:06:55,000
But it can also do other things

5318
03:06:55,000 --> 03:06:57,000
beyond a wait

5319
03:06:57,000 --> 03:06:59,000
Yeah, yeah

5320
03:06:59,000 --> 03:07:01,000
Okay, so I think that

5321
03:07:01,000 --> 03:07:03,000
actually should be enough for now, I don't think we need

5322
03:07:03,000 --> 03:07:05,000
more fancy

5323
03:07:05,000 --> 03:07:07,000
So let's just hook up the router

5324
03:07:07,000 --> 03:07:09,000
to the actual routing

5325
03:07:09,000 --> 03:07:11,000
Right, so let's

5326
03:07:11,000 --> 03:07:13,000
Maybe you can drive this bit

5327
03:07:13,000 --> 03:07:15,000
What we want to have in the router

5328
03:07:15,000 --> 03:07:17,000
we have the URL

5329
03:07:17,000 --> 03:07:19,000
variable, so let's make that

5330
03:07:19,000 --> 03:07:21,000
initialized to

5331
03:07:21,000 --> 03:07:23,000
window.location

5332
03:07:23,000 --> 03:07:25,000
Let's take

5333
03:07:25,000 --> 03:07:27,000
the search query from

5334
03:07:27,000 --> 03:07:29,000
the actual location

5335
03:07:29,000 --> 03:07:31,000
and let's make it update

5336
03:07:31,000 --> 03:07:33,000
as the location updates

5337
03:07:35,000 --> 03:07:37,000
Yeah, so for that

5338
03:07:37,000 --> 03:07:39,000
Well, I'm wondering

5339
03:07:39,000 --> 03:07:41,000
where it would go

5340
03:07:41,000 --> 03:07:43,000
but first I'll just do

5341
03:07:43,000 --> 03:07:45,000
window.location.

5342
03:07:47,000 --> 03:07:49,000
We want it as a prop yet, let's just do search

5343
03:07:51,000 --> 03:07:53,000
Do that

5344
03:07:53,000 --> 03:07:55,000
and we want

5345
03:07:55,000 --> 03:07:57,000
Oh boy

5346
03:07:57,000 --> 03:07:59,000
I don't really want all of that

5347
03:07:59,000 --> 03:08:01,000
but

5348
03:08:01,000 --> 03:08:03,000
yeah, that's fine

5349
03:08:03,000 --> 03:08:05,000
Clean up, I don't know yet

5350
03:08:05,000 --> 03:08:07,000
but to do

5351
03:08:07,000 --> 03:08:09,000
abort controller

5352
03:08:09,000 --> 03:08:11,000
for create fetch

5353
03:08:11,000 --> 03:08:13,000
Oh no, you don't need to do this part

5354
03:08:13,000 --> 03:08:15,000
We already have this part down below

5355
03:08:15,000 --> 03:08:17,000
Like all we want to do is

5356
03:08:17,000 --> 03:08:19,000
Yeah, all we want to do is

5357
03:08:19,000 --> 03:08:21,000
we want to have

5358
03:08:21,000 --> 03:08:23,000
we want to have something that gives us

5359
03:08:23,000 --> 03:08:25,000
window.location.search

5360
03:08:25,000 --> 03:08:27,000
all the time

5361
03:08:27,000 --> 03:08:29,000
Okay, so literally that

5362
03:08:29,000 --> 03:08:31,000
Yeah, but

5363
03:08:31,000 --> 03:08:33,000
Okay, so we're going to build this in later

5364
03:08:33,000 --> 03:08:35,000
because right now it's not going to be reactive

5365
03:08:35,000 --> 03:08:37,000
to anything, it's just going to render the initial

5366
03:08:37,000 --> 03:08:39,000
cache

5367
03:08:39,000 --> 03:08:41,000
Yeah, so I think maybe I can try to do

5368
03:08:41,000 --> 03:08:43,000
so what does window.location.search

5369
03:08:43,000 --> 03:08:45,000
return, what kind of file

5370
03:08:45,000 --> 03:08:47,000
is it like a string or

5371
03:08:47,000 --> 03:08:49,000
Yeah, that'll just be the string, so question mark

5372
03:08:49,000 --> 03:08:51,000
Yeah, that, so it's a key that we could use

5373
03:08:51,000 --> 03:08:53,000
Okay, so we do need

5374
03:08:53,000 --> 03:08:55,000
this thing

5375
03:08:55,000 --> 03:08:57,000
Do we need to

5376
03:08:57,000 --> 03:08:59,000
encode the URI component

5377
03:08:59,000 --> 03:09:01,000
or is it already encoded?

5378
03:09:01,000 --> 03:09:03,000
Yeah, I think we can put this

5379
03:09:03,000 --> 03:09:05,000
in the create from fetch actually

5380
03:09:05,000 --> 03:09:07,000
Might make a little more sense, I don't know

5381
03:09:07,000 --> 03:09:09,000
But yeah, this would be right

5382
03:09:09,000 --> 03:09:11,000
Okay

5383
03:09:11,000 --> 03:09:13,000
You could also just do

5384
03:09:13,000 --> 03:09:15,000
window.location.pathname if that's what we're looking for

5385
03:09:15,000 --> 03:09:17,000
Okay

5386
03:09:17,000 --> 03:09:19,000
Or actually no, that's the query we're making

5387
03:09:19,000 --> 03:09:21,000
so this is right

5388
03:09:21,000 --> 03:09:23,000
Okay, let me just

5389
03:09:23,000 --> 03:09:25,000
see, yeah, I think we can just

5390
03:09:25,000 --> 03:09:27,000
so we don't need this, I think that's

5391
03:09:27,000 --> 03:09:29,000
that's the URL we want

5392
03:09:29,000 --> 03:09:31,000
to get, and I think we

5393
03:09:31,000 --> 03:09:33,000
I agree, maybe this makes sense to actually

5394
03:09:33,000 --> 03:09:35,000
put here, but maybe

5395
03:09:35,000 --> 03:09:37,000
let's just do like a

5396
03:09:37,000 --> 03:09:39,000
useEffect thing that's going to

5397
03:09:39,000 --> 03:09:41,000
be

5398
03:09:41,000 --> 03:09:43,000
so I think this, we're going to model

5399
03:09:43,000 --> 03:09:45,000
this as like, you know, a state

5400
03:09:45,000 --> 03:09:47,000
so this is the

5401
03:09:47,000 --> 03:09:49,000
kind of the initial

5402
03:09:49,000 --> 03:09:51,000
state, and then

5403
03:09:51,000 --> 03:09:53,000
when we have a

5404
03:09:53,000 --> 03:09:55,000
so I think it's

5405
03:09:55,000 --> 03:09:57,000
window.addEventListener

5406
03:09:57,000 --> 03:09:59,000
popState, I think

5407
03:09:59,000 --> 03:10:01,000
that's the thing that

5408
03:10:01,000 --> 03:10:03,000
Oh yeah

5409
03:10:03,000 --> 03:10:05,000
That's the thing that's supposed

5410
03:10:05,000 --> 03:10:07,000
to be

5411
03:10:07,000 --> 03:10:09,000
to be doing this

5412
03:10:11,000 --> 03:10:13,000
And then

5413
03:10:13,000 --> 03:10:15,000
this is

5414
03:10:15,000 --> 03:10:17,000
where we

5415
03:10:17,000 --> 03:10:19,000
I

5416
03:10:19,000 --> 03:10:21,000
don't know if

5417
03:10:21,000 --> 03:10:23,000
this will

5418
03:10:23,000 --> 03:10:25,000
work, but maybe it

5419
03:10:25,000 --> 03:10:27,000
does, so let's

5420
03:10:27,000 --> 03:10:29,000
can we

5421
03:10:29,000 --> 03:10:31,000
see if this works?

5422
03:10:31,000 --> 03:10:33,000
That should do it, I think

5423
03:10:33,000 --> 03:10:35,000
so

5424
03:10:35,000 --> 03:10:37,000
yeah, is this actually

5425
03:10:37,000 --> 03:10:39,000
going to log anything?

5426
03:10:39,000 --> 03:10:41,000
So this is going to re-render

5427
03:10:41,000 --> 03:10:43,000
Oh, yeah, this might actually do

5428
03:10:43,000 --> 03:10:45,000
a lot more, so as I

5429
03:10:45,000 --> 03:10:47,000
start typing, nothing is changing

5430
03:10:48,000 --> 03:10:50,000
Does it

5431
03:10:50,000 --> 03:10:52,000
Let's see handlePopState

5432
03:10:58,000 --> 03:11:00,000
Well, only I can see it, sadly

5433
03:11:00,000 --> 03:11:02,000
But as I, okay, it's not

5434
03:11:02,000 --> 03:11:04,000
doing handlePopState

5435
03:11:04,000 --> 03:11:06,000
It's not calling it? Maybe I

5436
03:11:06,000 --> 03:11:08,000
miss, is that wrong?

5437
03:11:08,000 --> 03:11:10,000
Because I think you

5438
03:11:10,000 --> 03:11:12,000
were calling the replaceState, right?

5439
03:11:12,000 --> 03:11:14,000
I think you're right

5440
03:11:14,000 --> 03:11:16,000
windowPopState

5441
03:11:16,000 --> 03:11:18,000
I don't think it's going to

5442
03:11:18,000 --> 03:11:20,000
fire

5443
03:11:20,000 --> 03:11:22,000
navigateSessionHistory, right

5444
03:11:24,000 --> 03:11:26,000
It changes the currentHistory

5445
03:11:26,000 --> 03:11:28,000
entry to that of the last page

5446
03:11:28,000 --> 03:11:30,000
of the, right, so it might

5447
03:11:30,000 --> 03:11:32,000
require pushState instead of

5448
03:11:32,000 --> 03:11:34,000
replaceState in order for it to work

5449
03:11:34,000 --> 03:11:36,000
No, that

5450
03:11:36,000 --> 03:11:38,000
doesn't sound plausible

5451
03:11:38,000 --> 03:11:40,000
to me

5452
03:11:40,000 --> 03:11:42,000
I think

5453
03:11:42,000 --> 03:11:44,000
replaceState should trigger

5454
03:11:44,000 --> 03:11:46,000
the browser

5455
03:11:46,000 --> 03:11:48,000
I would think so

5456
03:11:48,000 --> 03:11:50,000
Is this

5457
03:11:52,000 --> 03:11:54,000
Okay, maybe

5458
03:11:56,000 --> 03:11:58,000
Sorry, I'm just going to debug this

5459
03:11:58,000 --> 03:12:00,000
locally in, like, Chrome

5460
03:12:00,000 --> 03:12:02,000
I don't see anything that's happening

5461
03:12:02,000 --> 03:12:04,000
It's very hard to do anything

5462
03:12:04,000 --> 03:12:06,000
if I don't have the console

5463
03:12:06,000 --> 03:12:08,000
I can do one last try

5464
03:12:08,000 --> 03:12:10,000
on just sharing the browser window

5465
03:12:10,000 --> 03:12:12,000
instead and see if it actually

5466
03:12:12,000 --> 03:12:14,000
Yeah, let's try sharing the browser window

5467
03:12:14,000 --> 03:12:16,000
Yeah

5468
03:12:16,000 --> 03:12:18,000
I can do that

5469
03:12:18,000 --> 03:12:20,000
shareScreen

5470
03:12:20,000 --> 03:12:22,000
window

5471
03:12:22,000 --> 03:12:24,000
There

5472
03:12:24,000 --> 03:12:26,000
All right, and I'm going to start typing

5473
03:12:26,000 --> 03:12:28,000
It is working, I think

5474
03:12:28,000 --> 03:12:30,000
Oh, but then it stopped

5475
03:12:30,000 --> 03:12:32,000
Okay, no, I see

5476
03:12:32,000 --> 03:12:34,000
typing, okay, so

5477
03:12:34,000 --> 03:12:36,000
Does it understand correctly that

5478
03:12:36,000 --> 03:12:38,000
handled never runs?

5479
03:12:38,000 --> 03:12:40,000
Yeah, handledPopState

5480
03:12:40,000 --> 03:12:42,000
Yeah, handledPopState's never running

5481
03:12:42,000 --> 03:12:44,000
HandledPopState is not

5482
03:12:44,000 --> 03:12:46,000
But we do have

5483
03:12:46,000 --> 03:12:48,000
We do have it

5484
03:12:48,000 --> 03:12:50,000
That's so weird

5485
03:12:50,000 --> 03:12:52,000
Let me just try this

5486
03:12:52,000 --> 03:12:54,000
Let me try this locally

5487
03:12:54,000 --> 03:12:56,000
I'll just try to do

5488
03:12:56,000 --> 03:12:58,000
window.addEventListener

5489
03:12:58,000 --> 03:13:00,000
popState

5490
03:13:00,000 --> 03:13:02,000
with some

5491
03:13:02,000 --> 03:13:04,000
log

5492
03:13:04,000 --> 03:13:06,000
Sure

5493
03:13:06,000 --> 03:13:08,000
listener, and then I'm going to try to

5494
03:13:08,000 --> 03:13:10,000
window.history.replaceState

5495
03:13:12,000 --> 03:13:14,000
with some

5496
03:13:16,000 --> 03:13:18,000
Oh, yeah, that doesn't

5497
03:13:18,000 --> 03:13:20,000
run it for some reason for me either

5498
03:13:20,000 --> 03:13:22,000
Let me try pushState

5499
03:13:22,000 --> 03:13:24,000
Maybe you were right

5500
03:13:24,000 --> 03:13:26,000
No, pushState doesn't do this either

5501
03:13:28,000 --> 03:13:30,000
handledPopState

5502
03:13:32,000 --> 03:13:34,000
Does anyone, can you ask somebody

5503
03:13:34,000 --> 03:13:36,000
who knows how

5504
03:13:36,000 --> 03:13:38,000
browsers work?

5505
03:13:38,000 --> 03:13:40,000
Why is this not doing anything?

5506
03:13:40,000 --> 03:13:42,000
Yeah, I'm sure there's a lot of people in chat

5507
03:13:42,000 --> 03:13:44,000
who know how browsers work

5508
03:13:44,000 --> 03:13:46,000
I can also

5509
03:13:46,000 --> 03:13:48,000
Well

5510
03:13:48,000 --> 03:13:50,000
There's people I can message

5511
03:13:50,000 --> 03:13:52,000
Because like the

5512
03:13:52,000 --> 03:13:54,000
mdn, I'm looking at the mdn examples

5513
03:13:54,000 --> 03:13:56,000
It's right here

5514
03:13:56,000 --> 03:13:58,000
They show the exact same thing

5515
03:13:58,000 --> 03:14:00,000
Right?

5516
03:14:00,000 --> 03:14:02,000
What is different in what we're doing?

5517
03:14:02,000 --> 03:14:04,000
Oh

5518
03:14:04,000 --> 03:14:06,000
Oh, interesting

5519
03:14:06,000 --> 03:14:08,000
Yeah, notice that the pushStates don't

5520
03:14:08,000 --> 03:14:10,000
do it, but back and go will

5521
03:14:10,000 --> 03:14:12,000
log

5522
03:14:12,000 --> 03:14:14,000
Oh

5523
03:14:14,000 --> 03:14:16,000
I forgot that's how it works

5524
03:14:16,000 --> 03:14:18,000
This is so confusing

5525
03:14:18,000 --> 03:14:20,000
Because this API was invented

5526
03:14:20,000 --> 03:14:22,000
before client-side routing

5527
03:14:22,000 --> 03:14:24,000
Yeah, so there's a new

5528
03:14:24,000 --> 03:14:26,000
transitions API, which I don't know enough

5529
03:14:26,000 --> 03:14:28,000
about, but that can be

5530
03:14:28,000 --> 03:14:30,000
one way to try

5531
03:14:30,000 --> 03:14:32,000
Let's see, I think I saw something like this

5532
03:14:32,000 --> 03:14:34,000
recently

5533
03:14:34,000 --> 03:14:36,000
So, replacement for history

5534
03:14:36,000 --> 03:14:38,000
Yeah, that's why people use this history

5535
03:14:38,000 --> 03:14:40,000
package, I think that's

5536
03:14:40,000 --> 03:14:42,000
Oh yeah, that's it

5537
03:14:42,000 --> 03:14:44,000
New API for

5538
03:14:44,000 --> 03:14:46,000
How do I search this?

5539
03:14:46,000 --> 03:14:48,000
Like, mdn

5540
03:14:48,000 --> 03:14:50,000
history, API

5541
03:14:50,000 --> 03:14:52,000
replacement

5542
03:14:54,000 --> 03:14:56,000
I don't remember the new name

5543
03:14:56,000 --> 03:14:58,000
What is the new

5544
03:14:58,000 --> 03:15:00,000
Can I ask chatGP?

5545
03:15:00,000 --> 03:15:02,000
Maybe it doesn't know

5546
03:15:02,000 --> 03:15:04,000
We can ask

5547
03:15:04,000 --> 03:15:06,000
What's the name of the spec

5548
03:15:06,000 --> 03:15:08,000
that

5549
03:15:08,000 --> 03:15:10,000
supersedes

5550
03:15:10,000 --> 03:15:12,000
history API

5551
03:15:12,000 --> 03:15:14,000
for browsers

5552
03:15:14,000 --> 03:15:16,000
I've definitely read about

5553
03:15:16,000 --> 03:15:18,000
Yeah

5554
03:15:18,000 --> 03:15:20,000
There is, yeah, the new transition is going to

5555
03:15:20,000 --> 03:15:22,000
assume a navigation is happening

5556
03:15:22,000 --> 03:15:24,000
and it's going to slide in a new page

5557
03:15:24,000 --> 03:15:26,000
which is actually not what we're trying to do

5558
03:15:26,000 --> 03:15:28,000
viewTransitions

5559
03:15:28,000 --> 03:15:30,000
No, I think viewTransitions

5560
03:15:30,000 --> 03:15:32,000
has something to do with

5561
03:15:32,000 --> 03:15:34,000
I think that's different

5562
03:15:36,000 --> 03:15:38,000
It's about

5563
03:15:38,000 --> 03:15:40,000
making it look

5564
03:15:40,000 --> 03:15:42,000
nicer, right?

5565
03:15:42,000 --> 03:15:44,000
It's about navigating

5566
03:15:44,000 --> 03:15:46,000
It's meant to be different

5567
03:15:46,000 --> 03:15:48,000
than doing a manual push

5568
03:15:48,000 --> 03:15:50,000
state and changing parts of the page

5569
03:15:50,000 --> 03:15:52,000
where you can say start viewTransition

5570
03:15:52,000 --> 03:15:54,000
get a snapshot of what's on the page right now

5571
03:15:54,000 --> 03:15:56,000
and then replace the DOM here

5572
03:15:56,000 --> 03:15:58,000
It assumes DOM's being replaced

5573
03:15:58,000 --> 03:16:00,000
Yes, I found it

5574
03:16:00,000 --> 03:16:02,000
The new thing is called navigation API

5575
03:16:02,000 --> 03:16:04,000
It's window.navigation

5576
03:16:04,000 --> 03:16:06,000
Let's see if that's

5577
03:16:06,000 --> 03:16:08,000
Is that different?

5578
03:16:08,000 --> 03:16:10,000
Yeah

5579
03:16:10,000 --> 03:16:12,000
So maybe window.navigation

5580
03:16:14,000 --> 03:16:16,000
Let's see if I can

5581
03:16:16,000 --> 03:16:18,000
navigation API

5582
03:16:18,000 --> 03:16:20,000
blah blah blah

5583
03:16:20,000 --> 03:16:22,000
navigate

5584
03:16:22,000 --> 03:16:24,000
How do you

5585
03:16:24,000 --> 03:16:26,000
replace?

5586
03:16:26,000 --> 03:16:28,000
I actually don't see that

5587
03:16:28,000 --> 03:16:30,000
navigate

5588
03:16:30,000 --> 03:16:32,000
So if I go to navigate

5589
03:16:32,000 --> 03:16:34,000
options

5590
03:16:34,000 --> 03:16:36,000
the current state

5591
03:16:36,000 --> 03:16:38,000
info

5592
03:16:38,000 --> 03:16:40,000
history, replace

5593
03:16:40,000 --> 03:16:42,000
Okay, you can do that

5594
03:16:42,000 --> 03:16:44,000
Where is that?

5595
03:16:44,000 --> 03:16:46,000
I'm looking

5596
03:16:46,000 --> 03:16:48,000
through, oh yeah, it's addEventList or

5597
03:16:48,000 --> 03:16:50,000
navigate, this could work

5598
03:16:50,000 --> 03:16:52,000
So what you would do instead of history

5599
03:16:52,000 --> 03:16:54,000
is

5600
03:16:54,000 --> 03:16:56,000
inside of search

5601
03:16:56,000 --> 03:16:58,000
just search

5602
03:16:58,000 --> 03:17:00,000
It should be window.navigation

5603
03:17:02,000 --> 03:17:04,000
Oh, I'm actually not getting

5604
03:17:04,000 --> 03:17:06,000
the API

5605
03:17:06,000 --> 03:17:08,000
Is it too new?

5606
03:17:08,000 --> 03:17:10,000
I'm just going to try and navigate

5607
03:17:10,000 --> 03:17:12,000
Yeah, it's too new, it's experimental

5608
03:17:12,000 --> 03:17:14,000
Yeah, that's fine

5609
03:17:14,000 --> 03:17:16,000
So yeah, we navigate to that

5610
03:17:16,000 --> 03:17:18,000
and then options you can say

5611
03:17:18,000 --> 03:17:20,000
not replace

5612
03:17:20,000 --> 03:17:22,000
true, it's

5613
03:17:24,000 --> 03:17:26,000
history, replace

5614
03:17:26,000 --> 03:17:28,000
Okay

5615
03:17:30,000 --> 03:17:32,000
That'll do it

5616
03:17:32,000 --> 03:17:34,000
And let's try to

5617
03:17:34,000 --> 03:17:36,000
listen to, what is the

5618
03:17:36,000 --> 03:17:38,000
event handler on?

5619
03:17:38,000 --> 03:17:40,000
Just navigate

5620
03:17:40,000 --> 03:17:42,000
And it's also suggesting

5621
03:17:42,000 --> 03:17:44,000
an event.intercept

5622
03:17:44,000 --> 03:17:46,000
I don't know why

5623
03:17:46,000 --> 03:17:48,000
I don't know what that is, let's for now

5624
03:17:48,000 --> 03:17:50,000
ignore whatever that is

5625
03:17:50,000 --> 03:17:52,000
Yeah, that's intercepting

5626
03:17:52,000 --> 03:17:54,000
Yeah, I don't know

5627
03:17:54,000 --> 03:17:56,000
because you're already intercepting if you're listening

5628
03:17:56,000 --> 03:17:58,000
I guess

5629
03:17:58,000 --> 03:18:00,000
So I'm going to change this to

5630
03:18:00,000 --> 03:18:02,000
handleNavigate

5631
03:18:02,000 --> 03:18:04,000
and let's see if that

5632
03:18:04,000 --> 03:18:06,000
even gets triggered

5633
03:18:06,000 --> 03:18:08,000
Can you check?

5634
03:18:08,000 --> 03:18:10,000
Let's check

5635
03:18:11,000 --> 03:18:13,000
All right

5636
03:18:13,000 --> 03:18:15,000
Reload here

5637
03:18:17,000 --> 03:18:19,000
And as we type, it's actually not

5638
03:18:19,000 --> 03:18:21,000
It's not letting me type

5639
03:18:23,000 --> 03:18:25,000
Let me see here

5640
03:18:25,000 --> 03:18:27,000
It's not letting me

5641
03:18:27,000 --> 03:18:29,000
type

5642
03:18:29,000 --> 03:18:31,000
It's not letting me type

5643
03:18:31,000 --> 03:18:33,000
Uh

5644
03:18:39,000 --> 03:18:41,000
I just

5645
03:18:41,000 --> 03:18:43,000
I wonder if it's

5646
03:18:43,000 --> 03:18:45,000
re-fetching the page when I type

5647
03:18:45,000 --> 03:18:47,000
it's losing the context and then it's all

5648
03:18:47,000 --> 03:18:49,000
gone

5649
03:18:49,000 --> 03:18:51,000
Maybe we need to disable

5650
03:18:51,000 --> 03:18:53,000
some things that are happening, just to be sure

5651
03:18:53,000 --> 03:18:55,000
Yeah

5652
03:18:59,000 --> 03:19:01,000
Yeah, just don't do this part

5653
03:19:01,000 --> 03:19:03,000
but log it

5654
03:19:03,000 --> 03:19:05,000
Yeah, okay, let's do this

5655
03:19:07,000 --> 03:19:09,000
Oh, now I get

5656
03:19:09,000 --> 03:19:11,000
actual errors

5657
03:19:11,000 --> 03:19:13,000
Navigate is not defined. What?

5658
03:19:13,000 --> 03:19:15,000
Okay, okay

5659
03:19:15,000 --> 03:19:17,000
This is all, like, we're going down

5660
03:19:17,000 --> 03:19:19,000
the rabbit hole. Let's do it completely differently

5661
03:19:19,000 --> 03:19:21,000
I'm just going to

5662
03:19:21,000 --> 03:19:23,000
This is too much

5663
03:19:23,000 --> 03:19:25,000
We're going to do this

5664
03:19:25,000 --> 03:19:27,000
I wanted to know about the browser APIs, though

5665
03:19:27,000 --> 03:19:29,000
It's a shame

5666
03:19:29,000 --> 03:19:31,000
The browser API

5667
03:19:31,000 --> 03:19:33,000
We're going to invent our own browser APIs

5668
03:19:33,000 --> 03:19:35,000
I was thinking some custom events or something

5669
03:19:35,000 --> 03:19:37,000
We can do this

5670
03:19:37,000 --> 03:19:39,000
Yeah, we're just going to be

5671
03:19:39,000 --> 03:19:41,000
window on

5672
03:19:41,000 --> 03:19:43,000
URL changed

5673
03:19:43,000 --> 03:19:45,000
That's going to be our custom

5674
03:19:45,000 --> 03:19:47,000
I mean, this doesn't make any sense

5675
03:19:47,000 --> 03:19:49,000
but I don't want to

5676
03:19:50,000 --> 03:19:52,000
I think my patience

5677
03:19:52,000 --> 03:19:54,000
is a bit

5678
03:19:54,000 --> 03:19:56,000
Yeah, we're just going to have

5679
03:19:56,000 --> 03:19:58,000
Yeah, that'll do. Let's do that

5680
03:19:58,000 --> 03:20:00,000
That's, you know

5681
03:20:00,000 --> 03:20:02,000
callbacks

5682
03:20:02,000 --> 03:20:04,000
Yeah, I was going to do it a little bit more politely

5683
03:20:04,000 --> 03:20:06,000
This is fine

5684
03:20:06,000 --> 03:20:08,000
Yeah, we're just going to do this

5685
03:20:08,000 --> 03:20:10,000
and then we're going to

5686
03:20:10,000 --> 03:20:12,000
we're just going to do, like, callbacks

5687
03:20:12,000 --> 03:20:14,000
push

5688
03:20:14,000 --> 03:20:16,000
navigate

5689
03:20:16,000 --> 03:20:18,000
and then this is going to be

5690
03:20:18,000 --> 03:20:20,000
something like

5691
03:20:20,000 --> 03:20:22,000
callbacks

5692
03:20:22,000 --> 03:20:24,000
Yeah, just pop it off

5693
03:20:24,000 --> 03:20:26,000
or slice

5694
03:20:30,000 --> 03:20:32,000
Oh

5695
03:20:32,000 --> 03:20:34,000
Yeah, that worked

5696
03:20:34,000 --> 03:20:36,000
Maybe like this

5697
03:20:36,000 --> 03:20:38,000
Can we see if that

5698
03:20:38,000 --> 03:20:40,000
is called?

5699
03:20:40,000 --> 03:20:42,000
Let's see

5700
03:20:42,000 --> 03:20:44,000
Handled

5701
03:20:44,000 --> 03:20:46,000
Yeah

5702
03:20:46,000 --> 03:20:48,000
Okay, so now let's try to update

5703
03:20:48,000 --> 03:20:50,000
the state as well

5704
03:20:54,000 --> 03:20:56,000
Oh, it's filtering

5705
03:20:56,000 --> 03:20:58,000
Is it working?

5706
03:20:58,000 --> 03:21:00,000
Oh my god!

5707
03:21:00,000 --> 03:21:02,000
Okay, it hides the search box

5708
03:21:02,000 --> 03:21:04,000
while we're searching because we put it

5709
03:21:04,000 --> 03:21:06,000
behind the wrong suspense

5710
03:21:06,000 --> 03:21:08,000
but oh my god, it works

5711
03:21:08,000 --> 03:21:10,000
So, wait, this is actually the part

5712
03:21:10,000 --> 03:21:12,000
that we can fix

5713
03:21:12,000 --> 03:21:14,000
So the issue is that

5714
03:21:14,000 --> 03:21:16,000
Can you demonstrate the problem?

5715
03:21:16,000 --> 03:21:18,000
Yeah

5716
03:21:20,000 --> 03:21:22,000
Yeah, I can follow you

5717
03:21:22,000 --> 03:21:24,000
Perfect

5718
03:21:24,000 --> 03:21:26,000
Can you show the

5719
03:21:26,000 --> 03:21:28,000
I guess I don't see it because the stream is not fast enough

5720
03:21:28,000 --> 03:21:30,000
I don't know if people see it

5721
03:21:30,000 --> 03:21:32,000
The problem is

5722
03:21:32,000 --> 03:21:34,000
Let's increase the delay so that

5723
03:21:34,000 --> 03:21:36,000
it's, yeah, okay

5724
03:21:36,000 --> 03:21:38,000
So the search bar disappears

5725
03:21:38,000 --> 03:21:40,000
because we actually need to get

5726
03:21:40,000 --> 03:21:42,000
the server component output

5727
03:21:42,000 --> 03:21:44,000
And the server component output is waiting

5728
03:21:44,000 --> 03:21:46,000
for that filter

5729
03:21:46,000 --> 03:21:48,000
or whatever

5730
03:21:48,000 --> 03:21:50,000
to fetch the data before

5731
03:21:50,000 --> 03:21:52,000
we can even know what to show

5732
03:21:52,000 --> 03:21:54,000
and so it suspends

5733
03:21:54,000 --> 03:21:56,000
And so the way

5734
03:21:56,000 --> 03:21:58,000
the way you handle it

5735
03:22:00,000 --> 03:22:02,000
One thing we could do

5736
03:22:02,000 --> 03:22:04,000
is maybe restructure it a little bit

5737
03:22:04,000 --> 03:22:06,000
so that the

5738
03:22:06,000 --> 03:22:08,000
search input isn't kind of blocked

5739
03:22:08,000 --> 03:22:10,000
on anything

5740
03:22:10,000 --> 03:22:12,000
But the

5741
03:22:12,000 --> 03:22:14,000
idiomatic solution in React is

5742
03:22:16,000 --> 03:22:18,000
router changes

5743
03:22:18,000 --> 03:22:20,000
Again, this is

5744
03:22:20,000 --> 03:22:22,000
primarily if you're developing the framework

5745
03:22:22,000 --> 03:22:24,000
I think this is something like

5746
03:22:24,000 --> 03:22:26,000
if you're making a framework for

5747
03:22:26,000 --> 03:22:28,000
server components, this is something

5748
03:22:28,000 --> 03:22:30,000
you should probably know, is that

5749
03:22:30,000 --> 03:22:32,000
the route changes

5750
03:22:32,000 --> 03:22:34,000
so the set states

5751
03:22:34,000 --> 03:22:36,000
that lead the route changes

5752
03:22:36,000 --> 03:22:38,000
should be wrapped into transitions

5753
03:22:38,000 --> 03:22:40,000
So what I'm going to do is

5754
03:22:40,000 --> 03:22:42,000
I'm going to import startTransition

5755
03:22:42,000 --> 03:22:44,000
from React here

5756
03:22:44,000 --> 03:22:46,000
Ooh, yes

5757
03:22:46,000 --> 03:22:48,000
I wanted a transition demo

5758
03:22:48,000 --> 03:22:50,000
Okay

5759
03:22:50,000 --> 03:22:52,000
And so I'm going to wrap the set state

5760
03:22:52,000 --> 03:22:54,000
into a transition

5761
03:22:54,000 --> 03:22:56,000
And so this tells React that

5762
03:22:56,000 --> 03:22:58,000
actually it's okay for

5763
03:22:58,000 --> 03:23:00,000
the screen to be inconsistent

5764
03:23:00,000 --> 03:23:02,000
So even though we know we're fetching something

5765
03:23:02,000 --> 03:23:04,000
we're waiting for something to happen

5766
03:23:04,000 --> 03:23:06,000
it's okay to let that

5767
03:23:06,000 --> 03:23:08,000
We don't need to immediately

5768
03:23:08,000 --> 03:23:10,000
show the spinner, we can actually wait

5769
03:23:10,000 --> 03:23:12,000
for that thing to be

5770
03:23:12,000 --> 03:23:14,000
complete enough that

5771
03:23:14,000 --> 03:23:16,000
Oh!

5772
03:23:16,000 --> 03:23:18,000
I've been wanting to understand transition for so

5773
03:23:18,000 --> 03:23:20,000
long and I get it

5774
03:23:20,000 --> 03:23:22,000
I see the use case there

5775
03:23:22,000 --> 03:23:24,000
And everything works

5776
03:23:24,000 --> 03:23:26,000
Yeah, and so what should also

5777
03:23:26,000 --> 03:23:28,000
work now is

5778
03:23:28,000 --> 03:23:30,000
Cached ones are faster

5779
03:23:30,000 --> 03:23:32,000
Yeah, so now if you type the same thing again because you've

5780
03:23:32,000 --> 03:23:34,000
cached the server component

5781
03:23:34,000 --> 03:23:36,000
the response is

5782
03:23:36,000 --> 03:23:38,000
Ooh, yeah

5783
03:23:38,000 --> 03:23:40,000
Oh, this is mind-blowing

5784
03:23:40,000 --> 03:23:42,000
I love that cache was involved too

5785
03:23:42,000 --> 03:23:44,000
The other thing we can try

5786
03:23:44,000 --> 03:23:46,000
which I don't know if it's going to work

5787
03:23:46,000 --> 03:23:48,000
because we had a bug related to this

5788
03:23:48,000 --> 03:23:50,000
but I think maybe it works

5789
03:23:50,000 --> 03:23:52,000
is I'm going to go to search.jsx

5790
03:23:52,000 --> 03:23:54,000
and I'm also going

5791
03:23:54,000 --> 03:23:56,000
to

5792
03:23:56,000 --> 03:23:58,000
Yeah, so

5793
03:23:58,000 --> 03:24:00,000
Okay, yeah

5794
03:24:00,000 --> 03:24:02,000
Okay

5795
03:24:02,000 --> 03:24:04,000
I'm also going to

5796
03:24:04,000 --> 03:24:06,000
add useTransition here

5797
03:24:06,000 --> 03:24:08,000
So if you only want to start a transition

5798
03:24:08,000 --> 03:24:10,000
you can just start a transition

5799
03:24:10,000 --> 03:24:12,000
But if you want to show visual feedback in the

5800
03:24:12,000 --> 03:24:14,000
component tree itself

5801
03:24:14,000 --> 03:24:16,000
when something is being refetched

5802
03:24:16,000 --> 03:24:18,000
and you don't want it to be just

5803
03:24:18,000 --> 03:24:20,000
like the user doesn't know what's happening

5804
03:24:20,000 --> 03:24:22,000
you can

5805
03:24:22,000 --> 03:24:24,000
have useTransition here

5806
03:24:24,000 --> 03:24:26,000
And that gives you this

5807
03:24:28,000 --> 03:24:30,000
Let's call it startTransition

5808
03:24:30,000 --> 03:24:32,000
useTransition

5809
03:24:32,000 --> 03:24:34,000
So that gives you this expanding Boolean

5810
03:24:34,000 --> 03:24:36,000
And so what you can do is

5811
03:24:36,000 --> 03:24:38,000
I know that

5812
03:24:40,000 --> 03:24:42,000
You know, this is

5813
03:24:42,000 --> 03:24:44,000
I'm actually going to

5814
03:24:44,000 --> 03:24:46,000
I'm going to rename this

5815
03:24:46,000 --> 03:24:48,000
I'll call this

5816
03:24:48,000 --> 03:24:50,000
Well, okay, that's what I'm going to do

5817
03:24:50,000 --> 03:24:52,000
I'm going to call this window.router.navigate

5818
03:24:54,000 --> 03:24:56,000
to here

5819
03:24:56,000 --> 03:24:58,000
And I'll just

5820
03:24:58,000 --> 03:25:00,000
That's supposed to be

5821
03:25:00,000 --> 03:25:02,000
your framework

5822
03:25:02,000 --> 03:25:04,000
I mean, you wouldn't put it on the window variable, of course

5823
03:25:06,000 --> 03:25:08,000
But it would be like

5824
03:25:08,000 --> 03:25:10,000
Yeah, but that's

5825
03:25:10,000 --> 03:25:12,000
We're going to go back to the root.client

5826
03:25:12,000 --> 03:25:14,000
And I'll just

5827
03:25:14,000 --> 03:25:16,000
This is going to be our toy router that has

5828
03:25:16,000 --> 03:25:18,000
navigate the URL

5829
03:25:18,000 --> 03:25:20,000
And so this is the part that actually does

5830
03:25:20,000 --> 03:25:22,000
the

5831
03:25:22,000 --> 03:25:24,000
This is the URL

5832
03:25:24,000 --> 03:25:26,000
It does the state and then

5833
03:25:26,000 --> 03:25:28,000
It calls

5834
03:25:28,000 --> 03:25:30,000
the callbacks we registered

5835
03:25:30,000 --> 03:25:32,000
So I

5836
03:25:32,000 --> 03:25:34,000
think

5837
03:25:34,000 --> 03:25:36,000
window.router.navigate

5838
03:25:36,000 --> 03:25:38,000
replace state URL

5839
03:25:38,000 --> 03:25:40,000
Okay

5840
03:25:40,000 --> 03:25:42,000
Yeah, and so this is

5841
03:25:44,000 --> 03:25:46,000
Say again

5842
03:25:48,000 --> 03:25:50,000
We're hitting a client error

5843
03:25:50,000 --> 03:25:52,000
What is the error?

5844
03:25:52,000 --> 03:25:54,000
The user, no, no, not that

5845
03:25:54,000 --> 03:25:56,000
Callbacks is not defined. Okay

5846
03:25:56,000 --> 03:25:58,000
It's just a

5847
03:25:58,000 --> 03:26:00,000
Yeah, it's just a typo

5848
03:26:02,000 --> 03:26:04,000
I think I deleted it accidentally

5849
03:26:04,000 --> 03:26:06,000
Yeah, we just deleted it

5850
03:26:08,000 --> 03:26:10,000
Okay, let's try again

5851
03:26:10,000 --> 03:26:12,000
Okay, that's working

5852
03:26:12,000 --> 03:26:14,000
Yeah, so now let's go back to the search

5853
03:26:14,000 --> 03:26:16,000
And let's say

5854
03:26:18,000 --> 03:26:20,000
Oh, and look at this

5855
03:26:20,000 --> 03:26:22,000
We can actually see all the requests coming down the wire too

5856
03:26:22,000 --> 03:26:24,000
It's going to

5857
03:26:24,000 --> 03:26:26,000
keep doing this

5858
03:26:26,000 --> 03:26:28,000
So let's add a little bit

5859
03:26:28,000 --> 03:26:30,000
Yeah, that's a new

5860
03:26:30,000 --> 03:26:32,000
Can I add this back?

5861
03:26:34,000 --> 03:26:36,000
This is going to look a little bit ugly

5862
03:26:36,000 --> 03:26:38,000
But I'm just going to add like a

5863
03:26:38,000 --> 03:26:40,000
Also like if is pending

5864
03:26:40,000 --> 03:26:42,000
Then I'm going to

5865
03:26:42,000 --> 03:26:44,000
add like a little

5866
03:26:46,000 --> 03:26:48,000
You know, like a little

5867
03:26:48,000 --> 03:26:50,000
I don't know

5868
03:26:50,000 --> 03:26:52,000
Margin left

5869
03:26:52,000 --> 03:26:54,000
Two or something

5870
03:26:56,000 --> 03:26:58,000
I don't remember how to do it

5871
03:26:58,000 --> 03:27:00,000
Sure

5872
03:27:00,000 --> 03:27:02,000
But let's see

5873
03:27:02,000 --> 03:27:04,000
Yeah

5874
03:27:04,000 --> 03:27:06,000
Yeah, I think italics are what we want here

5875
03:27:06,000 --> 03:27:08,000
That should work

5876
03:27:08,000 --> 03:27:10,000
So can we see

5877
03:27:10,000 --> 03:27:12,000
if that does anything?

5878
03:27:12,000 --> 03:27:14,000
It looks like it is

5879
03:27:14,000 --> 03:27:16,000
Yeah, we get a little

5880
03:27:16,000 --> 03:27:18,000
We get a little loading

5881
03:27:18,000 --> 03:27:20,000
flash

5882
03:27:20,000 --> 03:27:22,000
But if we do something

5883
03:27:22,000 --> 03:27:24,000
and it's cached

5884
03:27:24,000 --> 03:27:26,000
It's pretty much instant

5885
03:27:26,000 --> 03:27:28,000
It shows a little flash of it

5886
03:27:28,000 --> 03:27:30,000
while it fetches from the cache

5887
03:27:30,000 --> 03:27:32,000
Yeah

5888
03:27:32,000 --> 03:27:34,000
So the way you deal with like

5889
03:27:34,000 --> 03:27:36,000
So what we kind of want to do here

5890
03:27:36,000 --> 03:27:38,000
is like we want to show

5891
03:27:40,000 --> 03:27:42,000
You see like

5892
03:27:42,000 --> 03:27:44,000
this you are looking for

5893
03:27:44,000 --> 03:27:46,000
So this is the

5894
03:27:46,000 --> 03:27:48,000
example that we have

5895
03:27:48,000 --> 03:27:50,000
It doesn't quite make sense

5896
03:27:50,000 --> 03:27:52,000
Well

5897
03:27:52,000 --> 03:27:54,000
So this is the thing that will be updated later

5898
03:27:54,000 --> 03:27:56,000
Because like we need to go to the server

5899
03:27:56,000 --> 03:27:58,000
And like that part is like on the server

5900
03:27:58,000 --> 03:28:00,000
And we could have moved that to the client

5901
03:28:00,000 --> 03:28:02,000
And like show it in the search box instead

5902
03:28:02,000 --> 03:28:04,000
So I think it just depends on like

5903
03:28:04,000 --> 03:28:06,000
What kind of UI do you want?

5904
03:28:06,000 --> 03:28:08,000
Like do you want

5905
03:28:08,000 --> 03:28:10,000
You know

5906
03:28:10,000 --> 03:28:12,000
Like other patterns could be

5907
03:28:12,000 --> 03:28:14,000
Like grayed out

5908
03:28:14,000 --> 03:28:16,000
While the

5909
03:28:16,000 --> 03:28:18,000
While you're refetching it

5910
03:28:18,000 --> 03:28:20,000
So that's another

5911
03:28:20,000 --> 03:28:22,000
kind of common pattern

5912
03:28:22,000 --> 03:28:24,000
Yeah

5913
03:28:24,000 --> 03:28:26,000
Maybe do you want to

5914
03:28:26,000 --> 03:28:28,000
try to do that?

5915
03:28:28,000 --> 03:28:30,000
Sure, yeah

5916
03:28:30,000 --> 03:28:32,000
Could be fun

5917
03:28:36,000 --> 03:28:38,000
It's a little bit

5918
03:28:38,000 --> 03:28:40,000
It's a little bit trickier

5919
03:28:40,000 --> 03:28:42,000
to figure out how to do this

5920
03:28:42,000 --> 03:28:44,000
Yeah, okay, I'll be honest

5921
03:28:44,000 --> 03:28:46,000
I was reading something from chat and missed the last 20 seconds

5922
03:28:46,000 --> 03:28:48,000
of what you said. Can you say that again?

5923
03:28:48,000 --> 03:28:50,000
Yeah, I was saying

5924
03:28:50,000 --> 03:28:52,000
Now like we

5925
03:28:52,000 --> 03:28:54,000
We can kind of

5926
03:28:54,000 --> 03:28:56,000
I don't know

5927
03:28:56,000 --> 03:28:58,000
Maybe we should go through the code

5928
03:28:58,000 --> 03:29:00,000
And just kind of recap

5929
03:29:00,000 --> 03:29:02,000
Because like we have a solution now

5930
03:29:02,000 --> 03:29:04,000
So it seems like a good time

5931
03:29:04,000 --> 03:29:06,000
Like we built a tiny framework

5932
03:29:06,000 --> 03:29:08,000
That does a little bit of routing

5933
03:29:08,000 --> 03:29:10,000
In a way that

5934
03:29:10,000 --> 03:29:12,000
Works with server components

5935
03:29:12,000 --> 03:29:14,000
So maybe it's a good time to recap

5936
03:29:14,000 --> 03:29:16,000
What's going on in our

5937
03:29:16,000 --> 03:29:18,000
setup. Do you want to try to do that?

5938
03:29:18,000 --> 03:29:20,000
Let's do it

5939
03:29:20,000 --> 03:29:22,000
Yeah, so I

5940
03:29:22,000 --> 03:29:24,000
Will try to trace it from the top

5941
03:29:24,000 --> 03:29:26,000
But basically what we built

5942
03:29:26,000 --> 03:29:28,000
Is a

5943
03:29:28,000 --> 03:29:30,000
Search box

5944
03:29:30,000 --> 03:29:32,000
That's able to have just a little bit

5945
03:29:32,000 --> 03:29:34,000
Of client-side JavaScript in order to

5946
03:29:34,000 --> 03:29:36,000
Store a state

5947
03:29:36,000 --> 03:29:38,000
Of what you're trying to search for

5948
03:29:38,000 --> 03:29:40,000
And then anytime you put in an input

5949
03:29:40,000 --> 03:29:42,000
We're updating the URL bar up here

5950
03:29:42,000 --> 03:29:44,000
At the top

5951
03:29:44,000 --> 03:29:46,000
And anytime that you update the URL

5952
03:29:46,000 --> 03:29:48,000
We want to re-render

5953
03:29:48,000 --> 03:29:50,000
The parts of the page that depends on that URL

5954
03:29:50,000 --> 03:29:52,000
Here the part that depends is

5955
03:29:52,000 --> 03:29:54,000
The amount of albums that we're showing

5956
03:29:54,000 --> 03:29:56,000
So when we say search post, we want to

5957
03:29:56,000 --> 03:29:58,000
Go to the server, figure out which albums

5958
03:29:58,000 --> 03:30:00,000
Actually have the word post in them

5959
03:30:00,000 --> 03:30:02,000
And then send that new result

5960
03:30:02,000 --> 03:30:04,000
Down to the client

5961
03:30:04,000 --> 03:30:06,000
Without actually having to render all of those albums

5962
03:30:06,000 --> 03:30:08,000
With client-side JavaScript

5963
03:30:08,000 --> 03:30:10,000
So if we head over to our root

5964
03:30:10,000 --> 03:30:12,000
Client where we're doing this

5965
03:30:12,000 --> 03:30:14,000
Slight hack, but you could formalize

5966
03:30:14,000 --> 03:30:16,000
This into a framework as Dan mentioned

5967
03:30:16,000 --> 03:30:18,000
In here

5968
03:30:18,000 --> 03:30:20,000
The client is able to trigger

5969
03:30:20,000 --> 03:30:22,000
Navigate, or any client component

5970
03:30:22,000 --> 03:30:24,000
Is able to trigger a navigate command

5971
03:30:24,000 --> 03:30:26,000
Which will tell it the URL

5972
03:30:26,000 --> 03:30:28,000
It wants to go to, we're going to use

5973
03:30:28,000 --> 03:30:30,000
The web standard history API to update

5974
03:30:30,000 --> 03:30:32,000
That state, and then pass in

5975
03:30:32,000 --> 03:30:34,000
A callback here that's going

5976
03:30:34,000 --> 03:30:36,000
To trigger

5977
03:30:36,000 --> 03:30:38,000
Actual navigation events

5978
03:30:38,000 --> 03:30:40,000
So we mentioned it a little bit earlier

5979
03:30:40,000 --> 03:30:42,000
But we had a, now I'm actually

5980
03:30:42,000 --> 03:30:44,000
Losing where it is, but yeah

5981
03:30:44,000 --> 03:30:46,000
Way down here is where we're actually going to

5982
03:30:46,000 --> 03:30:48,000
Fetch the server component and render it

5983
03:30:48,000 --> 03:30:50,000
Onto the page

5984
03:30:50,000 --> 03:30:52,000
But up here we're using an effect

5985
03:30:52,000 --> 03:30:54,000
To say anytime that you

5986
03:30:54,000 --> 03:30:56,000
Navigate on the page, first off we're going to

5987
03:30:56,000 --> 03:30:58,000
Start a transition, which

5988
03:30:58,000 --> 03:31:00,000
I'm still wrapping my head around a little bit

5989
03:31:00,000 --> 03:31:02,000
But it's basically saying, keep the DOM

5990
03:31:02,000 --> 03:31:04,000
That you already have

5991
03:31:04,000 --> 03:31:06,000
Until all the other async stuff has resolved

5992
03:31:06,000 --> 03:31:08,000
And then replace it

5993
03:31:08,000 --> 03:31:10,000
Once all of that is settled, is that kind of what it's doing?

5994
03:31:12,000 --> 03:31:14,000
It's, yeah, I would maybe

5995
03:31:14,000 --> 03:31:16,000
And again, just to clarify

5996
03:31:16,000 --> 03:31:18,000
This file we're looking at, that's not

5997
03:31:18,000 --> 03:31:20,000
That is the part that's the framework part

5998
03:31:20,000 --> 03:31:22,000
This is the framework part

5999
03:31:22,000 --> 03:31:24,000
It's not the part that you're

6000
03:31:24,000 --> 03:31:26,000
You don't need any effects here

6001
03:31:26,000 --> 03:31:28,000
As a server components user or something like this

6002
03:31:28,000 --> 03:31:30,000
So this is like the framework router part

6003
03:31:30,000 --> 03:31:32,000
Really

6004
03:31:32,000 --> 03:31:34,000
Actually I just realized that we made one

6005
03:31:34,000 --> 03:31:36,000
Omission, which is, I think we still need

6006
03:31:36,000 --> 03:31:38,000
To handle pop state

6007
03:31:38,000 --> 03:31:40,000
Because we want the back button to work, right?

6008
03:31:40,000 --> 03:31:42,000
So we want the back button to also

6009
03:31:42,000 --> 03:31:44,000
Update the

6010
03:31:46,000 --> 03:31:48,000
So I think that should

6011
03:31:48,000 --> 03:31:50,000
That should give us the

6012
03:31:50,000 --> 03:31:52,000
Well, I guess we don't, we replaced

6013
03:31:52,000 --> 03:31:54,000
State, so it's, you're not going to see it

6014
03:31:54,000 --> 03:31:56,000
Yeah, you're not going to see it

6015
03:31:56,000 --> 03:31:58,000
But yeah, this is another thing

6016
03:31:58,000 --> 03:32:00,000
That frameworks deal with, where if you

6017
03:32:00,000 --> 03:32:02,000
Don't want to have like a full page refresh

6018
03:32:02,000 --> 03:32:04,000
Every time, because if you did this fully server

6019
03:32:04,000 --> 03:32:06,000
Side, we could anytime

6020
03:32:06,000 --> 03:32:08,000
You type in the input, send a form request

6021
03:32:08,000 --> 03:32:10,000
Refresh the page

6022
03:32:10,000 --> 03:32:12,000
And send that new stuff down

6023
03:32:12,000 --> 03:32:14,000
But here we want to say, don't refresh the whole page

6024
03:32:14,000 --> 03:32:16,000
Keep it where it is, we're going to

6025
03:32:16,000 --> 03:32:18,000
Handle those changes to the URL

6026
03:32:18,000 --> 03:32:20,000
Bar ourselves, and we're going to

6027
03:32:20,000 --> 03:32:22,000
Make sure like, when you do all your web standard

6028
03:32:22,000 --> 03:32:24,000
Back buttons, they still work

6029
03:32:24,000 --> 03:32:26,000
And when you actually navigate

6030
03:32:26,000 --> 03:32:28,000
We don't want to blow away the app

6031
03:32:28,000 --> 03:32:30,000
And re-render it top to bottom, we want to keep it where it is

6032
03:32:30,000 --> 03:32:32,000
And trigger anyone that

6033
03:32:32,000 --> 03:32:34,000
Cares about the transition to also

6034
03:32:34,000 --> 03:32:36,000
Show little loading states

6035
03:32:36,000 --> 03:32:38,000
Yeah, so just to clarify

6036
03:32:38,000 --> 03:32:40,000
The start transition stuff here

6037
03:32:40,000 --> 03:32:42,000
It doesn't prevent

6038
03:32:42,000 --> 03:32:44,000
It doesn't have anything to do with

6039
03:32:44,000 --> 03:32:46,000
Reloading the page completely

6040
03:32:46,000 --> 03:32:48,000
Because React wouldn't reload the page

6041
03:32:48,000 --> 03:32:50,000
We're just set in state

6042
03:32:50,000 --> 03:32:52,000
There's no reason to reload the page

6043
03:32:52,000 --> 03:32:54,000
What happens here

6044
03:32:54,000 --> 03:32:56,000
Is it just prevents

6045
03:32:56,000 --> 03:32:58,000
React from hiding content

6046
03:32:58,000 --> 03:33:00,000
That was already visible

6047
03:33:00,000 --> 03:33:02,000
Like if you're interacting with

6048
03:33:02,000 --> 03:33:04,000
A search input, you don't want that

6049
03:33:04,000 --> 03:33:06,000
Input to get hidden, because

6050
03:33:06,000 --> 03:33:08,000
We're waiting

6051
03:33:08,000 --> 03:33:10,000
Our new state is this response

6052
03:33:10,000 --> 03:33:12,000
From the server that's still streaming in

6053
03:33:12,000 --> 03:33:14,000
So start transition just says

6054
03:33:14,000 --> 03:33:16,000
This state update is not urgent

6055
03:33:16,000 --> 03:33:18,000
You don't have to

6056
03:33:18,000 --> 03:33:20,000
React doesn't have to

6057
03:33:20,000 --> 03:33:22,000
React can wait

6058
03:33:22,000 --> 03:33:24,000
Until we have something

6059
03:33:24,000 --> 03:33:26,000
Meaningful to show

6060
03:33:26,000 --> 03:33:28,000
So in reality what that means

6061
03:33:28,000 --> 03:33:30,000
Is it wouldn't wait

6062
03:33:30,000 --> 03:33:32,000
It will wait long enough

6063
03:33:32,000 --> 03:33:34,000
Not so that

6064
03:33:34,000 --> 03:33:36,000
It doesn't have to hide any existing content

6065
03:33:36,000 --> 03:33:38,000
But for example

6066
03:33:38,000 --> 03:33:40,000
If your server response

6067
03:33:40,000 --> 03:33:42,000
Includes some new suspense boundary

6068
03:33:42,000 --> 03:33:44,000
With a bunch of stuff inside

6069
03:33:44,000 --> 03:33:46,000
It's not going to wait for that

6070
03:33:46,000 --> 03:33:48,000
Because there's no reason to

6071
03:33:48,000 --> 03:33:50,000
But start transition

6072
03:33:50,000 --> 03:33:52,000
Is this opt-in

6073
03:33:52,000 --> 03:33:54,000
This is not urgent

6074
03:33:54,000 --> 03:33:56,000
So you don't have to hide a bunch of stuff

6075
03:33:56,000 --> 03:33:58,000
While we're waiting

6076
03:33:58,000 --> 03:34:00,000
Keep things as they are

6077
03:34:00,000 --> 03:34:02,000
And then we can keep track of them

6078
03:34:02,000 --> 03:34:04,000
Inline in the search component

6079
03:34:04,000 --> 03:34:06,000
It has an inline indicator

6080
03:34:06,000 --> 03:34:08,000
That it's parent

6081
03:34:08,000 --> 03:34:10,000
Is actually refetching

6082
03:34:10,000 --> 03:34:12,000
But yeah

6083
03:34:12,000 --> 03:34:14,000
This is kind of what it is

6084
03:34:14,000 --> 03:34:16,000
That's what happens inside the framework

6085
03:34:16,000 --> 03:34:18,000
But if we forget this file exists

6086
03:34:18,000 --> 03:34:20,000
And we just approach it from

6087
03:34:20,000 --> 03:34:22,000
I think it's helpful to describe it

6088
03:34:22,000 --> 03:34:24,000
From the server components

6089
03:34:24,000 --> 03:34:26,000
Point of view

6090
03:34:26,000 --> 03:34:28,000
As a user you don't even have this root client.js file

6091
03:34:28,000 --> 03:34:30,000
It's somewhere in the framework

6092
03:34:30,000 --> 03:34:32,000
But as a user where do you start

6093
03:34:32,000 --> 03:34:34,000
Where does the story start

6094
03:34:34,000 --> 03:34:36,000
For a user

6095
03:34:36,000 --> 03:34:38,000
Gotcha

6096
03:34:38,000 --> 03:34:40,000
Because that's the boundary that we set

6097
03:34:40,000 --> 03:34:42,000
With suspense

6098
03:34:42,000 --> 03:34:44,000
Anytime you

6099
03:34:44,000 --> 03:34:46,000
Well we can't see it anymore

6100
03:34:46,000 --> 03:34:48,000
But it used to

6101
03:34:48,000 --> 03:34:50,000
It'll sort of show that fallback

6102
03:34:50,000 --> 03:34:52,000
And then show the whole result

6103
03:34:52,000 --> 03:34:54,000
But what we've done is we've put the search box

6104
03:34:54,000 --> 03:34:56,000
Alongside the stuff that's loading

6105
03:34:56,000 --> 03:34:58,000
So in order to make sure all of

6106
03:34:58,000 --> 03:35:00,000
The stuff you're looking at in the search box itself

6107
03:35:00,000 --> 03:35:02,000
Aren't as you mentioned

6108
03:35:02,000 --> 03:35:04,000
Removed from the page

6109
03:35:04,000 --> 03:35:06,000
Or changed in some way

6110
03:35:06,000 --> 03:35:08,000
Transition is the way to do that

6111
03:35:08,000 --> 03:35:10,000
And I'm assuming

6112
03:35:10,000 --> 03:35:12,000
Use transition is a pretty global thing

6113
03:35:12,000 --> 03:35:14,000
So when you start transition

6114
03:35:14,000 --> 03:35:16,000
Is it based on parents

6115
03:35:16,000 --> 03:35:18,000
Where if a parent starts a transition

6116
03:35:18,000 --> 03:35:20,000
The child picks it up here

6117
03:35:20,000 --> 03:35:22,000
No

6118
03:35:22,000 --> 03:35:24,000
It's really about the state updates

6119
03:35:24,000 --> 03:35:26,000
It's like whatever you

6120
03:35:26,000 --> 03:35:28,000
Whichever set state calls happen

6121
03:35:28,000 --> 03:35:30,000
Inside of a strategic goal

6122
03:35:30,000 --> 03:35:32,000
They are kind of marked as

6123
03:35:32,000 --> 03:35:34,000
This stuff is not urgent

6124
03:35:34,000 --> 03:35:36,000
And react will display the output

6125
03:35:36,000 --> 03:35:38,000
When the stuff is ready

6126
03:35:38,000 --> 03:35:40,000
But what I meant more

6127
03:35:40,000 --> 03:35:42,000
I think if we ignore all this wiring

6128
03:35:42,000 --> 03:35:44,000
And we focus on how you approach it as a user

6129
03:35:44,000 --> 03:35:46,000
The entry point

6130
03:35:46,000 --> 03:35:48,000
Is really root.server.js

6131
03:35:48,000 --> 03:35:50,000
That's where the story starts

6132
03:35:50,000 --> 03:35:52,000
From the user perspective

6133
03:35:52,000 --> 03:35:54,000
And so you kind of just see it as

6134
03:35:54,000 --> 03:35:56,000
You have a root component

6135
03:35:56,000 --> 03:35:58,000
Like in this case server root

6136
03:35:58,000 --> 03:36:00,000
That accepts the search

6137
03:36:00,000 --> 03:36:02,000
And it doesn't matter if it's the first time it loads

6138
03:36:02,000 --> 03:36:04,000
Or if it's like a refresh

6139
03:36:04,000 --> 03:36:06,000
The way you think about it is the same

6140
03:36:06,000 --> 03:36:08,000
It's like you got a response

6141
03:36:08,000 --> 03:36:10,000
You got a request

6142
03:36:10,000 --> 03:36:12,000
You're going to re-render the tree

6143
03:36:12,000 --> 03:36:14,000
And so you think about it as

6144
03:36:14,000 --> 03:36:16,000
I received some search query

6145
03:36:16,000 --> 03:36:18,000
I'm going to pass it to albums

6146
03:36:18,000 --> 03:36:20,000
Albums passes it to

6147
03:36:20,000 --> 03:36:22,000
This searchable album list

6148
03:36:22,000 --> 03:36:24,000
Which also runs on the server

6149
03:36:24,000 --> 03:36:26,000
This is where we

6150
03:36:26,000 --> 03:36:28,000
Actually do the filtering

6151
03:36:28,000 --> 03:36:30,000
And then we render the search box

6152
03:36:30,000 --> 03:36:32,000
And the list of albums

6153
03:36:32,000 --> 03:36:34,000
And so the search box

6154
03:36:34,000 --> 03:36:36,000
Is kind of

6155
03:36:36,000 --> 03:36:38,000
This is where

6156
03:36:38,000 --> 03:36:40,000
This is where this other side

6157
03:36:40,000 --> 03:36:42,000
Of the flow triggers

6158
03:36:42,000 --> 03:36:44,000
Where it's like when I tap into the search

6159
03:36:44,000 --> 03:36:46,000
I want to navigate

6160
03:36:46,000 --> 03:36:48,000
As a user

6161
03:36:48,000 --> 03:36:50,000
I just want to navigate here

6162
03:36:50,000 --> 03:36:52,000
And then that's

6163
03:36:52,000 --> 03:36:54,000
The whole story

6164
03:36:54,000 --> 03:36:56,000
Because now it's the server

6165
03:36:56,000 --> 03:36:58,000
Like we're again in the server

6166
03:36:58,000 --> 03:37:00,000
In root.server.js

6167
03:37:00,000 --> 03:37:02,000
And we just kind of render again

6168
03:37:02,000 --> 03:37:04,000
Using the new search value

6169
03:37:04,000 --> 03:37:06,000
So you don't really

6170
03:37:06,000 --> 03:37:08,000
Think of it as state management

6171
03:37:08,000 --> 03:37:10,000
Right

6172
03:37:10,000 --> 03:37:12,000
In fact we could even

6173
03:37:12,000 --> 03:37:14,000
Just for fun we could even delete

6174
03:37:14,000 --> 03:37:16,000
The state here

6175
03:37:16,000 --> 03:37:18,000
I believe we could get rid of the

6176
03:37:18,000 --> 03:37:20,000
State completely

6177
03:37:20,000 --> 03:37:22,000
And this could just be uncontrolled input

6178
03:37:22,000 --> 03:37:24,000
That has default value

6179
03:37:24,000 --> 03:37:26,000
Equals initial search

6180
03:37:26,000 --> 03:37:28,000
And it has this onChangeHandler

6181
03:37:28,000 --> 03:37:30,000
That just does the navigation

6182
03:37:30,000 --> 03:37:32,000
Doesn't do anything else

6183
03:37:32,000 --> 03:37:34,000
And I think it should still work

6184
03:37:34,000 --> 03:37:36,000
It actually does

6185
03:37:36,000 --> 03:37:38,000
Yeah so there's like no state management

6186
03:37:38,000 --> 03:37:40,000
Here

6187
03:37:40,000 --> 03:37:42,000
There's no managing caches yourself

6188
03:37:42,000 --> 03:37:44,000
Or you just want to change some data

6189
03:37:44,000 --> 03:37:46,000
You just

6190
03:37:46,000 --> 03:37:48,000
Re-render the page

6191
03:37:48,000 --> 03:37:50,000
But then it doesn't recreate the DOM

6192
03:37:50,000 --> 03:37:52,000
It doesn't recreate the DOM

6193
03:37:52,000 --> 03:37:54,000
Yeah

6194
03:37:54,000 --> 03:37:56,000
And the boundary that was like

6195
03:37:56,000 --> 03:37:58,000
If you don't have a transition

6196
03:37:58,000 --> 03:38:00,000
It will use the suspense fallback

6197
03:38:00,000 --> 03:38:02,000
So one thing I'm wondering

6198
03:38:02,000 --> 03:38:04,000
Inside of root server

6199
03:38:04,000 --> 03:38:06,000
If we remove the suspense wrapper

6200
03:38:06,000 --> 03:38:08,000
What will happen?

6201
03:38:08,000 --> 03:38:10,000
Do we need transition anymore?

6202
03:38:10,000 --> 03:38:12,000
Let's try

6203
03:38:12,000 --> 03:38:14,000
I don't know

6204
03:38:14,000 --> 03:38:16,000
I think maybe it would

6205
03:38:16,000 --> 03:38:18,000
Work without a transition

6206
03:38:18,000 --> 03:38:20,000
I think

6207
03:38:20,000 --> 03:38:22,000
But it's

6208
03:38:22,000 --> 03:38:24,000
Well

6209
03:38:24,000 --> 03:38:26,000
I guess it depends on where you want

6210
03:38:26,000 --> 03:38:28,000
To remove the transition

6211
03:38:28,000 --> 03:38:30,000
They're nested

6212
03:38:30,000 --> 03:38:32,000
Just to be able to show the

6213
03:38:32,000 --> 03:38:34,000
IsPending

6214
03:38:34,000 --> 03:38:36,000
Because the routers should always

6215
03:38:36,000 --> 03:38:38,000
Navigate in transitions

6216
03:38:38,000 --> 03:38:40,000
But we can also wrap it in extra time

6217
03:38:40,000 --> 03:38:42,000
To get this

6218
03:38:42,000 --> 03:38:44,000
Is it happening

6219
03:38:44,000 --> 03:38:46,000
For feedback

6220
03:38:46,000 --> 03:38:48,000
Yeah

6221
03:38:48,000 --> 03:38:50,000
And so how does it know when

6222
03:38:50,000 --> 03:38:52,000
IsPending is done?

6223
03:38:52,000 --> 03:38:54,000
Is that when everything down the parent

6224
03:38:54,000 --> 03:38:56,000
Chain of components is now rendered?

6225
03:38:56,000 --> 03:38:58,000
Not quite

6226
03:38:58,000 --> 03:39:00,000
It's

6227
03:39:00,000 --> 03:39:02,000
I think conceptually

6228
03:39:02,000 --> 03:39:04,000
The way it's implemented

6229
03:39:06,000 --> 03:39:08,000
There are different ways to do it

6230
03:39:08,000 --> 03:39:10,000
But I think conceptually you can imagine it

6231
03:39:10,000 --> 03:39:12,000
As

6232
03:39:12,000 --> 03:39:14,000
It kind of spawns

6233
03:39:14,000 --> 03:39:16,000
A new parallel universe

6234
03:39:16,000 --> 03:39:18,000
Where the state is

6235
03:39:18,000 --> 03:39:20,000
If we go to

6236
03:39:20,000 --> 03:39:22,000
root.client.js

6237
03:39:22,000 --> 03:39:24,000
And you see that

6238
03:39:24,000 --> 03:39:26,000
It does this set URL

6239
03:39:26,000 --> 03:39:28,000
Call

6240
03:39:28,000 --> 03:39:30,000
Traditionally this would mean

6241
03:39:30,000 --> 03:39:32,000
The state changed

6242
03:39:32,000 --> 03:39:34,000
Get the new thing on the screen

6243
03:39:34,000 --> 03:39:36,000
Immediately

6244
03:39:36,000 --> 03:39:38,000
If we get rid of startTransition

6245
03:39:38,000 --> 03:39:40,000
In both places

6246
03:39:40,000 --> 03:39:42,000
We would see traditional re-rendering

6247
03:39:42,000 --> 03:39:44,000
Behavior where

6248
03:39:44,000 --> 03:39:46,000
It's kind of

6249
03:39:46,000 --> 03:39:48,000
We changed this, now it has to update

6250
03:39:48,000 --> 03:39:50,000
To reflect what's in the state

6251
03:39:50,000 --> 03:39:52,000
We don't have the

6252
03:39:52,000 --> 03:39:54,000
JSX tree for what's in the state

6253
03:39:54,000 --> 03:39:56,000
That's why it's showing

6254
03:39:56,000 --> 03:39:58,000
The closest suspense spinner

6255
03:39:58,000 --> 03:40:00,000
Which

6256
03:40:00,000 --> 03:40:02,000
You would need to add

6257
03:40:02,000 --> 03:40:04,000
And the analogy that I like to use

6258
03:40:04,000 --> 03:40:06,000
For this is git

6259
03:40:06,000 --> 03:40:08,000
So if you work on main

6260
03:40:08,000 --> 03:40:10,000
If you only work on main

6261
03:40:10,000 --> 03:40:12,000
And then

6262
03:40:12,000 --> 03:40:14,000
You

6263
03:40:14,000 --> 03:40:16,000
Make a change that

6264
03:40:16,000 --> 03:40:18,000
You start refactoring something

6265
03:40:18,000 --> 03:40:20,000
And you change

6266
03:40:20,000 --> 03:40:22,000
One file

6267
03:40:22,000 --> 03:40:24,000
And

6268
03:40:24,000 --> 03:40:26,000
It's not done until you finish refactoring

6269
03:40:26,000 --> 03:40:28,000
Your project is kind of

6270
03:40:28,000 --> 03:40:30,000
In the loading state

6271
03:40:30,000 --> 03:40:32,000
It's not ready

6272
03:40:32,000 --> 03:40:34,000
And the users would see

6273
03:40:34,000 --> 03:40:36,000
Imagine you refactored in production

6274
03:40:36,000 --> 03:40:38,000
Your users would see

6275
03:40:38,000 --> 03:40:40,000
That you're doing it

6276
03:40:40,000 --> 03:40:42,000
And that's why we don't do it this way

6277
03:40:42,000 --> 03:40:44,000
We start a branch, we work in a branch

6278
03:40:44,000 --> 03:40:46,000
And then we think

6279
03:40:46,000 --> 03:40:48,000
This is enough to ship

6280
03:40:48,000 --> 03:40:50,000
To the main branch

6281
03:40:50,000 --> 03:40:52,000
And so transitions are kind of the same concept

6282
03:40:52,000 --> 03:40:54,000
It's like branches

6283
03:40:54,000 --> 03:40:56,000
It's like you're telling React

6284
03:40:56,000 --> 03:40:58,000
Here's a set state I want you to do

6285
03:40:58,000 --> 03:41:00,000
But actually start

6286
03:41:00,000 --> 03:41:02,000
Working on it

6287
03:41:02,000 --> 03:41:04,000
In background

6288
03:41:04,000 --> 03:41:06,000
Start preparing it

6289
03:41:06,000 --> 03:41:08,000
You can almost imagine

6290
03:41:08,000 --> 03:41:10,000
You had two screens

6291
03:41:10,000 --> 03:41:12,000
And one screen was what the user sees

6292
03:41:12,000 --> 03:41:14,000
And the other screen

6293
03:41:14,000 --> 03:41:16,000
Is background stuff

6294
03:41:16,000 --> 03:41:18,000
And on the screen

6295
03:41:18,000 --> 03:41:20,000
With the background stuff

6296
03:41:20,000 --> 03:41:22,000
You would see a big loading indicator

6297
03:41:22,000 --> 03:41:24,000
Because nothing is ready yet

6298
03:41:24,000 --> 03:41:26,000
And then it would kind of gradually refine

6299
03:41:26,000 --> 03:41:28,000
To get

6300
03:41:28,000 --> 03:41:30,000
With the server data

6301
03:41:30,000 --> 03:41:32,000
And at some point you have enough server data

6302
03:41:32,000 --> 03:41:34,000
That you don't

6303
03:41:34,000 --> 03:41:36,000
You wouldn't need to hide anything to show it

6304
03:41:36,000 --> 03:41:38,000
You wouldn't need to hide any

6305
03:41:38,000 --> 03:41:40,000
Existing content

6306
03:41:40,000 --> 03:41:42,000
So this is where React commits the transition

6307
03:41:42,000 --> 03:41:44,000
So React is like

6308
03:41:44,000 --> 03:41:46,000
We have enough of the tree

6309
03:41:46,000 --> 03:41:48,000
That we wouldn't need to hide anything

6310
03:41:48,000 --> 03:41:50,000
Nothing would

6311
03:41:50,000 --> 03:41:52,000
Disappear under you

6312
03:41:52,000 --> 03:41:54,000
It's automatic

6313
03:41:54,000 --> 03:41:56,000
You don't think about this as a user

6314
03:41:56,000 --> 03:41:58,000
But that's the heuristic we use

6315
03:41:58,000 --> 03:42:00,000
We're going to show you

6316
03:42:00,000 --> 03:42:02,000
The output as soon as we have enough

6317
03:42:02,000 --> 03:42:04,000
That

6318
03:42:04,000 --> 03:42:06,000
It doesn't feel disruptive

6319
03:42:06,000 --> 03:42:08,000
Because nothing disappears

6320
03:42:08,000 --> 03:42:10,000
From under you

6321
03:42:10,000 --> 03:42:12,000
Right

6322
03:42:12,000 --> 03:42:14,000
So React commits transitions off

6323
03:42:14,000 --> 03:42:16,000
To decide what if I delete it here

6324
03:42:16,000 --> 03:42:18,000
What if I remove it here

6325
03:42:18,000 --> 03:42:20,000
What if we remove the suspense boundary

6326
03:42:20,000 --> 03:42:22,000
And I think it will still take some time

6327
03:42:22,000 --> 03:42:24,000
To really feel it out

6328
03:42:24,000 --> 03:42:26,000
Because I'm sure you use it

6329
03:42:26,000 --> 03:42:28,000
In a lot of different contexts

6330
03:42:28,000 --> 03:42:30,000
But for the search box it makes sense to me

6331
03:42:30,000 --> 03:42:32,000
Where you definitely want to start transition here

6332
03:42:32,000 --> 03:42:34,000
Because we want

6333
03:42:34,000 --> 03:42:36,000
To be able to track

6334
03:42:36,000 --> 03:42:38,000
Like okay this

6335
03:42:38,000 --> 03:42:40,000
We've started something

6336
03:42:40,000 --> 03:42:42,000
We don't know when it's done

6337
03:42:42,000 --> 03:42:44,000
All we want to do is show that it is pending

6338
03:42:44,000 --> 03:42:46,000
And then as soon as React

6339
03:42:46,000 --> 03:42:48,000
Has figured out

6340
03:42:48,000 --> 03:42:50,000
Everything

6341
03:42:50,000 --> 03:42:52,000
It's resolved all the components down the tree

6342
03:42:52,000 --> 03:42:54,000
I'm trying to find the perfect vocabulary here

6343
03:42:54,000 --> 03:42:56,000
And I don't think I have it yet

6344
03:42:56,000 --> 03:42:58,000
I wouldn't say

6345
03:42:58,000 --> 03:43:00,000
It doesn't need to resolve everything

6346
03:43:00,000 --> 03:43:02,000
Because maybe you have some new components

6347
03:43:02,000 --> 03:43:04,000
And there's no reason to wait for them

6348
03:43:04,000 --> 03:43:06,000
So as soon as you have enough

6349
03:43:06,000 --> 03:43:08,000
That would be not embarrassing

6350
03:43:08,000 --> 03:43:10,000
To show

6351
03:43:10,000 --> 03:43:12,000
That's kind of how I explain it

6352
03:43:12,000 --> 03:43:14,000
As soon as you have a decent

6353
03:43:14,000 --> 03:43:16,000
Floating state

6354
03:43:16,000 --> 03:43:18,000
And it's determined automatically

6355
03:43:18,000 --> 03:43:20,000
So you don't need to think about it

6356
03:43:20,000 --> 03:43:22,000
Yeah

6357
03:43:22,000 --> 03:43:24,000
It's contextual

6358
03:43:24,000 --> 03:43:26,000
We know you called this from the search box

6359
03:43:26,000 --> 03:43:28,000
So we know what this search box

6360
03:43:28,000 --> 03:43:30,000
Depends on

6361
03:43:30,000 --> 03:43:32,000
The parents that it has in order to render that search box again

6362
03:43:32,000 --> 03:43:34,000
No

6363
03:43:34,000 --> 03:43:36,000
That's not how it works

6364
03:43:36,000 --> 03:43:38,000
It's not conceptual

6365
03:43:38,000 --> 03:43:40,000
I think that's kind of the cool thing

6366
03:43:40,000 --> 03:43:42,000
About this

6367
03:43:42,000 --> 03:43:44,000
It really doesn't care

6368
03:43:44,000 --> 03:43:46,000
Because you could be navigating to another page

6369
03:43:46,000 --> 03:43:48,000
You could be navigating

6370
03:43:48,000 --> 03:43:50,000
From a feed page

6371
03:43:50,000 --> 03:43:52,000
To a profile page

6372
03:43:52,000 --> 03:43:54,000
And then let's say on the profile page

6373
03:43:54,000 --> 03:43:56,000
You have profile cover

6374
03:43:56,000 --> 03:43:58,000
And then you have

6375
03:43:58,000 --> 03:44:00,000
Profile timeline inside of suspense

6376
03:44:00,000 --> 03:44:02,000
So what that means

6377
03:44:02,000 --> 03:44:04,000
And then

6378
03:44:04,000 --> 03:44:06,000
My start transition is built into the router

6379
03:44:06,000 --> 03:44:08,000
So it's not

6380
03:44:08,000 --> 03:44:10,000
Just for this search box

6381
03:44:10,000 --> 03:44:12,000
Like here

6382
03:44:12,000 --> 03:44:14,000
We could completely remove start transition

6383
03:44:14,000 --> 03:44:16,000
Like we just want to show a state

6384
03:44:16,000 --> 03:44:18,000
Tracking what's going on

6385
03:44:18,000 --> 03:44:20,000
Yeah so here it's not essential

6386
03:44:20,000 --> 03:44:22,000
Because we only added it here

6387
03:44:22,000 --> 03:44:24,000
To get this access to this is pending

6388
03:44:24,000 --> 03:44:26,000
Where it's important

6389
03:44:26,000 --> 03:44:28,000
Is only at the router level

6390
03:44:28,000 --> 03:44:30,000
And so what this does

6391
03:44:30,000 --> 03:44:32,000
What this does

6392
03:44:32,000 --> 03:44:34,000
Here for example

6393
03:44:34,000 --> 03:44:36,000
If we're moving from feed to profile

6394
03:44:36,000 --> 03:44:38,000
And then profile has like a cover

6395
03:44:38,000 --> 03:44:40,000
And a timeline

6396
03:44:40,000 --> 03:44:42,000
Wrapped in suspense

6397
03:44:42,000 --> 03:44:44,000
What's going to happen is that

6398
03:44:44,000 --> 03:44:46,000
If profile cover needs to load some data

6399
03:44:46,000 --> 03:44:48,000
For example profile name

6400
03:44:48,000 --> 03:44:50,000
And your avatar

6401
03:44:50,000 --> 03:44:52,000
Then the router will wait

6402
03:44:52,000 --> 03:44:54,000
For that to be ready

6403
03:44:54,000 --> 03:44:56,000
It won't teleport you to this empty profile page

6404
03:44:56,000 --> 03:44:58,000
That doesn't have anything

6405
03:44:58,000 --> 03:45:00,000
Because we don't have a decent loading state

6406
03:45:00,000 --> 03:45:02,000
For it

6407
03:45:02,000 --> 03:45:04,000
We don't have something to show yet

6408
03:45:04,000 --> 03:45:06,000
But then as soon as

6409
03:45:06,000 --> 03:45:08,000
The profile cover is ready

6410
03:45:08,000 --> 03:45:10,000
And the remaining stuff is wrapped in suspense

6411
03:45:10,000 --> 03:45:12,000
It will be like

6412
03:45:12,000 --> 03:45:14,000
Now I can actually move to this page

6413
03:45:14,000 --> 03:45:16,000
Because I can show the cover

6414
03:45:16,000 --> 03:45:18,000
And then the rest will have a spinner

6415
03:45:18,000 --> 03:45:20,000
So this is what it does

6416
03:45:20,000 --> 03:45:22,000
It just opts you into this

6417
03:45:22,000 --> 03:45:24,000
It doesn't have to happen right away

6418
03:45:24,000 --> 03:45:26,000
But we're going to wait enough

6419
03:45:26,000 --> 03:45:28,000
Until we have something decent to show

6420
03:45:28,000 --> 03:45:30,000
And it's based on this heuristic

6421
03:45:30,000 --> 03:45:32,000
So it doesn't really care

6422
03:45:32,000 --> 03:45:34,000
From which component

6423
03:45:34,000 --> 03:45:36,000
Because like you see here

6424
03:45:36,000 --> 03:45:38,000
It's really at the root level

6425
03:45:38,000 --> 03:45:40,000
So it doesn't even know

6426
03:45:40,000 --> 03:45:42,000
You're calling it from search input

6427
03:45:42,000 --> 03:45:44,000
It doesn't care where you're calling it from

6428
03:45:44,000 --> 03:45:46,000
Yeah

6429
03:45:46,000 --> 03:45:48,000
I guess in the other example I was trying to figure out

6430
03:45:48,000 --> 03:45:50,000
When is pending resolved

6431
03:45:50,000 --> 03:45:52,000
And it sounds like there's more heuristics involved

6432
03:45:52,000 --> 03:45:54,000
Than just like

6433
03:45:54,000 --> 03:45:56,000
Everything down the tree has re-rendered

6434
03:45:56,000 --> 03:45:58,000
There's a lot more to it

6435
03:45:58,000 --> 03:46:00,000
Well it's not a lot more

6436
03:46:00,000 --> 03:46:02,000
It's a very simple heuristic

6437
03:46:02,000 --> 03:46:04,000
But it's very non-intuitive

6438
03:46:04,000 --> 03:46:06,000
Because we only figured it out

6439
03:46:06,000 --> 03:46:08,000
In the initial design

6440
03:46:08,000 --> 03:46:10,000
It didn't work like this

6441
03:46:10,000 --> 03:46:12,000
And this is the most natural

6442
03:46:12,000 --> 03:46:14,000
It's a bit weird

6443
03:46:14,000 --> 03:46:16,000
Because understanding the heuristic

6444
03:46:16,000 --> 03:46:18,000
Is pretty difficult

6445
03:46:18,000 --> 03:46:20,000
But then the way it works is very natural

6446
03:46:20,000 --> 03:46:22,000
So you don't have to think about it

6447
03:46:22,000 --> 03:46:24,000
You don't need to know about it as a user

6448
03:46:24,000 --> 03:46:26,000
If you're curious

6449
03:46:26,000 --> 03:46:28,000
As a framework author

6450
03:46:28,000 --> 03:46:30,000
How it works

6451
03:46:30,000 --> 03:46:32,000
Then it's really

6452
03:46:32,000 --> 03:46:34,000
Can we

6453
03:46:34,000 --> 03:46:36,000
Every time

6454
03:46:36,000 --> 03:46:38,000
We're about to

6455
03:46:38,000 --> 03:46:40,000
We got some new data

6456
03:46:40,000 --> 03:46:42,000
We could maybe make some progress

6457
03:46:42,000 --> 03:46:44,000
On rendering the tree

6458
03:46:44,000 --> 03:46:46,000
And then every time

6459
03:46:46,000 --> 03:46:48,000
We're like okay

6460
03:46:48,000 --> 03:46:50,000
For now it seems like we're done

6461
03:46:50,000 --> 03:46:52,000
We've done everything we could

6462
03:46:52,000 --> 03:46:54,000
And we make a decision

6463
03:46:54,000 --> 03:46:56,000
Is this enough to

6464
03:46:56,000 --> 03:46:58,000
Show this to the user now

6465
03:46:58,000 --> 03:47:00,000
Or do we have to keep waiting longer

6466
03:47:00,000 --> 03:47:02,000
And the way we make the

6467
03:47:02,000 --> 03:47:04,000
Decision is pretty simple

6468
03:47:04,000 --> 03:47:06,000
It's if we

6469
03:47:06,000 --> 03:47:08,000
Have rendered it now

6470
03:47:08,000 --> 03:47:10,000
Would we have to hide any

6471
03:47:10,000 --> 03:47:12,000
Existing content

6472
03:47:12,000 --> 03:47:14,000
So this moment

6473
03:47:14,000 --> 03:47:16,000
Where the search bar disappeared

6474
03:47:16,000 --> 03:47:18,000
Because something there was not ready

6475
03:47:18,000 --> 03:47:20,000
And there was a suspense boundary above

6476
03:47:20,000 --> 03:47:22,000
It kind of means we're

6477
03:47:22,000 --> 03:47:24,000
Resuspending it

6478
03:47:24,000 --> 03:47:26,000
It wasn't here

6479
03:47:26,000 --> 03:47:28,000
But it has to disappear

6480
03:47:28,000 --> 03:47:30,000
Because some part of the tree is not ready

6481
03:47:30,000 --> 03:47:32,000
And so if we have to do this

6482
03:47:32,000 --> 03:47:34,000
We're not going to commit it

6483
03:47:34,000 --> 03:47:36,000
No, let's keep waiting a bit longer

6484
03:47:36,000 --> 03:47:38,000
But

6485
03:47:38,000 --> 03:47:40,000
If we have enough of the tree

6486
03:47:40,000 --> 03:47:42,000
That we don't need to hide any

6487
03:47:42,000 --> 03:47:44,000
Existing content

6488
03:47:44,000 --> 03:47:46,000
It's just maybe we have some new content

6489
03:47:46,000 --> 03:47:48,000
That's not fully fetched yet

6490
03:47:48,000 --> 03:47:50,000
We would be like, yeah, sure, let's go ahead

6491
03:47:50,000 --> 03:47:52,000
Let's show it

6492
03:47:52,000 --> 03:47:54,000
I think I'm getting it then

6493
03:47:54,000 --> 03:47:56,000
It's definitely based on what you have now

6494
03:47:56,000 --> 03:47:58,000
And what you're trying to get

6495
03:47:58,000 --> 03:48:00,000
And if

6496
03:48:00,000 --> 03:48:02,000
You have enough of a match

6497
03:48:02,000 --> 03:48:04,000
In what you're trying to get that you're not going to hide anything

6498
03:48:04,000 --> 03:48:06,000
Then we'll go ahead and resolve it

6499
03:48:06,000 --> 03:48:08,000
Exactly

6500
03:48:08,000 --> 03:48:10,000
That's how it works

6501
03:48:10,000 --> 03:48:12,000
It's a very simple thing

6502
03:48:12,000 --> 03:48:14,000
But it's hard to wrap your mind around it

6503
03:48:14,000 --> 03:48:16,000
But I find it

6504
03:48:16,000 --> 03:48:18,000
Kind of fascinating

6505
03:48:18,000 --> 03:48:20,000
Because it is a solution

6506
03:48:20,000 --> 03:48:22,000
To the

6507
03:48:22,000 --> 03:48:24,000
If you ever developed a router

6508
03:48:24,000 --> 03:48:26,000
In traditional kind of JavaScript

6509
03:48:26,000 --> 03:48:28,000
Ecosystem

6510
03:48:28,000 --> 03:48:30,000
There were always

6511
03:48:30,000 --> 03:48:32,000
You always had to make

6512
03:48:32,000 --> 03:48:34,000
This tradeoff between

6513
03:48:34,000 --> 03:48:36,000
How do I know

6514
03:48:36,000 --> 03:48:38,000
When to show the route

6515
03:48:38,000 --> 03:48:40,000
During navigation

6516
03:48:40,000 --> 03:48:42,000
And different routers solve this

6517
03:48:42,000 --> 03:48:44,000
Differently

6518
03:48:44,000 --> 03:48:46,000
So

6519
03:48:46,000 --> 03:48:48,000
In some routers

6520
03:48:48,000 --> 03:48:50,000
I think maybe Ember router

6521
03:48:50,000 --> 03:48:52,000
I'm not sure

6522
03:48:52,000 --> 03:48:54,000
But in some routers

6523
03:48:54,000 --> 03:48:56,000
They wait for all data

6524
03:48:56,000 --> 03:48:58,000
For the new route to be ready

6525
03:48:58,000 --> 03:49:00,000
And then they transition you

6526
03:49:00,000 --> 03:49:02,000
To the new route

6527
03:49:02,000 --> 03:49:04,000
And so the benefit of this is that the user

6528
03:49:04,000 --> 03:49:06,000
Doesn't see this immediate

6529
03:49:06,000 --> 03:49:08,000
Big spinner

6530
03:49:08,000 --> 03:49:10,000
That's like, you're pressing a link

6531
03:49:10,000 --> 03:49:12,000
And you have nothing to show yet

6532
03:49:12,000 --> 03:49:14,000
And you have to wait for everything to load

6533
03:49:14,000 --> 03:49:16,000
Which could be slow

6534
03:49:16,000 --> 03:49:18,000
So ideally

6535
03:49:18,000 --> 03:49:20,000
You wouldn't have to

6536
03:49:20,000 --> 03:49:22,000
And then the other extreme

6537
03:49:22,000 --> 03:49:24,000
Which I think most React solutions

6538
03:49:24,000 --> 03:49:26,000
At least for some time

6539
03:49:26,000 --> 03:49:28,000
It depends on how we configure it

6540
03:49:28,000 --> 03:49:30,000
But at least it was very common

6541
03:49:30,000 --> 03:49:32,000
That routing happens immediately

6542
03:49:32,000 --> 03:49:34,000
So you press a link

6543
03:49:34,000 --> 03:49:36,000
You immediately re-render

6544
03:49:36,000 --> 03:49:38,000
Like you rendered a new page

6545
03:49:38,000 --> 03:49:40,000
But maybe it's not ready

6546
03:49:40,000 --> 03:49:42,000
And so I think the beautiful thing

6547
03:49:42,000 --> 03:49:44,000
About this paradigm

6548
03:49:44,000 --> 03:49:46,000
Is that it lets you draw

6549
03:49:46,000 --> 03:49:48,000
The boundary exactly where you want

6550
03:49:48,000 --> 03:49:50,000
Just by placing suspense

6551
03:49:50,000 --> 03:49:52,000
Around it

6552
03:49:52,000 --> 03:49:54,000
Because the router

6553
03:49:54,000 --> 03:49:56,000
Uses transitions by default

6554
03:49:56,000 --> 03:49:58,000
So you don't have to

6555
03:49:58,000 --> 03:50:00,000
By default everything is sticky

6556
03:50:00,000 --> 03:50:02,000
So until everything is ready

6557
03:50:02,000 --> 03:50:04,000
It doesn't do it

6558
03:50:04,000 --> 03:50:06,000
But then suspense lets you say

6559
03:50:06,000 --> 03:50:08,000
No, actually this part of the tree

6560
03:50:08,000 --> 03:50:10,000
That's okay to wait a little bit

6561
03:50:10,000 --> 03:50:12,000
It doesn't have to wait for it

6562
03:50:12,000 --> 03:50:14,000
So it's kind of like inverse await

6563
03:50:14,000 --> 03:50:16,000
Where you say

6564
03:50:16,000 --> 03:50:18,000
This part, it's independent

6565
03:50:18,000 --> 03:50:20,000
I wrap it in a loading state

6566
03:50:20,000 --> 03:50:22,000
Now transitions won't wait for it anymore

6567
03:50:22,000 --> 03:50:24,000
And I think that's maybe

6568
03:50:24,000 --> 03:50:26,000
A natural way to explain it

6569
03:50:26,000 --> 03:50:28,000
It's like by default

6570
03:50:28,000 --> 03:50:30,000
Everything is sticky

6571
03:50:30,000 --> 03:50:32,000
And suspense is what unsticks it

6572
03:50:32,000 --> 03:50:34,000
Yeah

6573
03:50:34,000 --> 03:50:36,000
That's a wild way to think about it

6574
03:50:36,000 --> 03:50:38,000
Because there wasn't really

6575
03:50:38,000 --> 03:50:40,000
A convention for this before

6576
03:50:40,000 --> 03:50:42,000
You were just going to grab whatever the tree is

6577
03:50:42,000 --> 03:50:44,000
And plop it on the page

6578
03:50:44,000 --> 03:50:46,000
You can't use heuristics to know

6579
03:50:46,000 --> 03:50:48,000
What was there before in the new thing

6580
03:50:48,000 --> 03:50:50,000
It's not really like diffing

6581
03:50:50,000 --> 03:50:52,000
But it is figuring out

6582
03:50:52,000 --> 03:50:54,000
You don't really want to suspend again

6583
03:50:54,000 --> 03:50:56,000
We don't want to keep suspending every time we type in the search box

6584
03:50:56,000 --> 03:50:58,000
We've suspended before

6585
03:50:58,000 --> 03:51:00,000
And we don't want the user to see it

6586
03:51:00,000 --> 03:51:02,000
So if we do a start transition

6587
03:51:02,000 --> 03:51:04,000
We can still get the new state

6588
03:51:04,000 --> 03:51:06,000
Or the new text inside the search box

6589
03:51:06,000 --> 03:51:08,000
But we're going to avoid

6590
03:51:08,000 --> 03:51:10,000
Blowing it away while we're doing it

6591
03:51:10,000 --> 03:51:12,000
Yep

6592
03:51:12,000 --> 03:51:14,000
Very cool

6593
03:51:14,000 --> 03:51:16,000
Okay, I'll also admit that I'm like

6594
03:51:16,000 --> 03:51:18,000
I'm running on fumes

6595
03:51:18,000 --> 03:51:20,000
I had breakfast like eight hours ago

6596
03:51:20,000 --> 03:51:22,000
At this point

6597
03:51:22,000 --> 03:51:24,000
I didn't think we would go this long

6598
03:51:24,000 --> 03:51:26,000
I definitely thought we were going to go for like two hours

6599
03:51:26,000 --> 03:51:28,000
Maybe two hours thirty

6600
03:51:28,000 --> 03:51:30,000
You've been super generous with your time

6601
03:51:30,000 --> 03:51:32,000
But I'm going to push this up

6602
03:51:32,000 --> 03:51:34,000
To make a separate branch

6603
03:51:34,000 --> 03:51:36,000
Just in case people want to see

6604
03:51:36,000 --> 03:51:38,000
Co-authored by Danny Ramone

6605
03:51:38,000 --> 03:51:40,000
Absolutely

6606
03:51:40,000 --> 03:51:42,000
We'll call it, oh boy, Router Toy

6607
03:51:42,000 --> 03:51:44,000
It's what I kind of liked

6608
03:51:44,000 --> 03:51:46,000
RSC Demo also

6609
03:51:46,000 --> 03:51:48,000
RSC Stream Demo

6610
03:51:48,000 --> 03:51:50,000
If anyone's wondering what the Twitch Stream Demo had

6611
03:51:50,000 --> 03:51:52,000
Yeah, we'll do that

6612
03:51:54,000 --> 03:51:56,000
And if anyone wants to play with this

6613
03:51:56,000 --> 03:51:58,000
I'm tired from just following along

6614
03:51:58,000 --> 03:52:00,000
Man, thanks for sticking through here

6615
03:52:00,000 --> 03:52:02,000
In the chat, thank you

6616
03:52:02,000 --> 03:52:04,000
But I shared it just above

6617
03:52:04,000 --> 03:52:06,000
If anyone wants to play with this

6618
03:52:06,000 --> 03:52:08,000
Toy implementation of React Server

6619
03:52:08,000 --> 03:52:10,000
Components, we never actually got to look

6620
03:52:10,000 --> 03:52:12,000
At a framework, we built our own

6621
03:52:12,000 --> 03:52:14,000
But this is simple RSC

6622
03:52:14,000 --> 03:52:16,000
It doesn't even have a readme at the moment

6623
03:52:16,000 --> 03:52:18,000
I was very undergun trying to get it in

6624
03:52:18,000 --> 03:52:20,000
For the stream today

6625
03:52:20,000 --> 03:52:22,000
So I'll try to add some docs

6626
03:52:22,000 --> 03:52:24,000
And maybe explain the dev panel a little bit more

6627
03:52:24,000 --> 03:52:26,000
But the goal is to not add

6628
03:52:26,000 --> 03:52:28,000
Any more features to this

6629
03:52:28,000 --> 03:52:30,000
Maybe delete the files that we don't use

6630
03:52:30,000 --> 03:52:32,000
So that, like, I think you have

6631
03:52:32,000 --> 03:52:34,000
A bunch of files that we didn't end up using

6632
03:52:34,000 --> 03:52:36,000
Yeah, I think the Bjork album's gone

6633
03:52:36,000 --> 03:52:38,000
The like button was never pulled in

6634
03:52:38,000 --> 03:52:40,000
Counter was never pulled in

6635
03:52:40,000 --> 03:52:42,000
That should be it

6636
03:52:46,000 --> 03:52:48,000
And I'll double check on this

6637
03:52:48,000 --> 03:52:50,000
In case it was floating around somewhere

6638
03:52:50,000 --> 03:52:52,000
Yeah, it still is

6639
03:52:52,000 --> 03:52:54,000
Maybe let's rename root.server.js

6640
03:52:54,000 --> 03:52:56,000
To something like

6641
03:52:56,000 --> 03:52:58,000
Server root, and then

6642
03:52:58,000 --> 03:53:00,000
The root.client.js to something like

6643
03:53:00,000 --> 03:53:02,000
Router, or I don't know

6644
03:53:02,000 --> 03:53:04,000
Ideally we would

6645
03:53:04,000 --> 03:53:06,000
Maybe make a

6646
03:53:06,000 --> 03:53:08,000
I'd like to see some separation so that it's clear

6647
03:53:08,000 --> 03:53:10,000
This is the framework part, this is not the part

6648
03:53:10,000 --> 03:53:12,000
You're supposed to be writing

6649
03:53:12,000 --> 03:53:14,000
No, exactly

6650
03:53:14,000 --> 03:53:16,000
Yeah, I definitely prefer to

6651
03:53:16,000 --> 03:53:18,000
Oh, did we actually get an index file?

6652
03:53:18,000 --> 03:53:20,000
Where did this come from?

6653
03:53:20,000 --> 03:53:22,000
I think this is just like an old thing

6654
03:53:22,000 --> 03:53:24,000
Yeah, this is not being used

6655
03:53:24,000 --> 03:53:26,000
I wanted to call it

6656
03:53:26,000 --> 03:53:28,000
We decided on index and bootstrapping

6657
03:53:28,000 --> 03:53:30,000
As like loose names

6658
03:53:30,000 --> 03:53:32,000
I don't mind it

6659
03:53:32,000 --> 03:53:34,000
But index feels right for that

6660
03:53:34,000 --> 03:53:36,000
Because that's like the index route

6661
03:53:36,000 --> 03:53:38,000
And this is just

6662
03:53:38,000 --> 03:53:40,000
Yeah, there's a few ways to put this one

6663
03:53:40,000 --> 03:53:42,000
Maybe not the index

6664
03:53:42,000 --> 03:53:44,000
Maybe like page

6665
03:53:44,000 --> 03:53:46,000
Or something

6666
03:53:46,000 --> 03:53:48,000
Oh, page is good

6667
03:53:48,000 --> 03:53:50,000
Next.js style

6668
03:53:50,000 --> 03:53:52,000
This can be

6669
03:53:52,000 --> 03:53:54,000
Route handler

6670
03:53:54,000 --> 03:53:56,000
Well, it does a lot of things

6671
03:53:56,000 --> 03:53:58,000
It mounts it onto the page

6672
03:53:58,000 --> 03:54:00,000
Yeah

6673
03:54:00,000 --> 03:54:02,000
Client

6674
03:54:02,000 --> 03:54:04,000
I think

6675
03:54:04,000 --> 03:54:06,000
Can we move it

6676
03:54:06,000 --> 03:54:08,000
Out of the source directory

6677
03:54:08,000 --> 03:54:10,000
And put it

6678
03:54:10,000 --> 03:54:12,000
Closer to the handler

6679
03:54:12,000 --> 03:54:14,000
I think conceptually

6680
03:54:14,000 --> 03:54:16,000
It's related to this handler.js

6681
03:54:16,000 --> 03:54:18,000
In a way

6682
03:54:18,000 --> 03:54:20,000
It's like the client part of it

6683
03:54:22,000 --> 03:54:24,000
I hear what you're saying

6684
03:54:24,000 --> 03:54:26,000
Or maybe you could move to source

6685
03:54:26,000 --> 03:54:28,000
Like make a directory called framework

6686
03:54:28,000 --> 03:54:30,000
And then there would be

6687
03:54:30,000 --> 03:54:32,000
Like server.js

6688
03:54:32,000 --> 03:54:34,000
And client.js

6689
03:54:34,000 --> 03:54:36,000
Yeah

6690
03:54:36,000 --> 03:54:38,000
Router.server.js

6691
03:54:38,000 --> 03:54:40,000
I don't know

6692
03:54:40,000 --> 03:54:42,000
I went back and forth so long

6693
03:54:42,000 --> 03:54:44,000
I landed on the remix names

6694
03:54:44,000 --> 03:54:46,000
And I still don't like them

6695
03:54:46,000 --> 03:54:48,000
So

6696
03:54:48,000 --> 03:54:50,000
I just think it's important to

6697
03:54:50,000 --> 03:54:52,000
Make sure that people don't think that this is the stuff

6698
03:54:52,000 --> 03:54:54,000
You're supposed to be writing

6699
03:54:54,000 --> 03:54:56,000
The actual application code is just

6700
03:54:56,000 --> 03:54:58,000
Page.js

6701
03:54:58,000 --> 03:55:00,000
Search.js and searchablealbum.js

6702
03:55:00,000 --> 03:55:02,000
Yeah

6703
03:55:02,000 --> 03:55:04,000
We could call it

6704
03:55:04,000 --> 03:55:06,000
Underscore internals

6705
03:55:06,000 --> 03:55:08,000
Yeah

6706
03:55:08,000 --> 03:55:10,000
Bubble it up

6707
03:55:10,000 --> 03:55:12,000
The only thing left to do is to

6708
03:55:12,000 --> 03:55:14,000
Track down a couple hard-coded things

6709
03:55:14,000 --> 03:55:16,000
I think I was pretty

6710
03:55:16,000 --> 03:55:18,000
I wasn't great about this

6711
03:55:18,000 --> 03:55:20,000
So that would be page now

6712
03:55:20,000 --> 03:55:22,000
I'm hoping

6713
03:55:22,000 --> 03:55:24,000
Also this is not the client part anymore

6714
03:55:24,000 --> 03:55:26,000
Yeah

6715
03:55:30,000 --> 03:55:32,000
Wherever we did root.client

6716
03:55:32,000 --> 03:55:34,000
We did that

6717
03:55:34,000 --> 03:55:36,000
Okay

6718
03:55:36,000 --> 03:55:38,000
Yeah

6719
03:55:38,000 --> 03:55:40,000
Oh so let's rename search to

6720
03:55:40,000 --> 03:55:42,000
Searchbox because that's how you named it

6721
03:55:42,000 --> 03:55:44,000
Oh yeah I noticed

6722
03:55:44,000 --> 03:55:46,000
We were a little inconsistent

6723
03:55:46,000 --> 03:55:48,000
Okay I renamed it

6724
03:55:48,000 --> 03:55:50,000
Okay

6725
03:55:50,000 --> 03:55:52,000
And I'll move

6726
03:55:52,000 --> 03:55:54,000
The filter albums function down

6727
03:55:54,000 --> 03:55:56,000
So that it doesn't obscure the

6728
03:55:56,000 --> 03:55:58,000
Component

6729
03:55:58,000 --> 03:56:00,000
Build successfully

6730
03:56:00,000 --> 03:56:02,000
I think everything works

6731
03:56:02,000 --> 03:56:04,000
What?

6732
03:56:04,000 --> 03:56:06,000
Awesome

6733
03:56:06,000 --> 03:56:08,000
That's searchbox

6734
03:56:08,000 --> 03:56:10,000
That's that

6735
03:56:10,000 --> 03:56:12,000
This index file is just not a thing

6736
03:56:12,000 --> 03:56:14,000
I don't know why it keeps coming back actually

6737
03:56:14,000 --> 03:56:16,000
Why does it keep coming back

6738
03:56:22,000 --> 03:56:24,000
Nice

6739
03:56:24,000 --> 03:56:26,000
Maybe stick it in support

6740
03:56:26,000 --> 03:56:28,000
I hear you

6741
03:56:28,000 --> 03:56:30,000
I don't know about that

6742
03:56:30,000 --> 03:56:32,000
I don't know

6743
03:56:32,000 --> 03:56:34,000
Yeah I think internals is still

6744
03:56:34,000 --> 03:56:36,000
Where I'm sitting

6745
03:56:36,000 --> 03:56:38,000
I've also seen engine as a convention

6746
03:56:38,000 --> 03:56:40,000
But that's a little more

6747
03:56:40,000 --> 03:56:42,000
We can also call it

6748
03:56:42,000 --> 03:56:44,000
Yeah

6749
03:56:44,000 --> 03:56:46,000
That's fine

6750
03:56:46,000 --> 03:56:48,000
It does kind of indicate you can have

6751
03:56:48,000 --> 03:56:50,000
Multiple routes but

6752
03:56:50,000 --> 03:56:52,000
It is a router

6753
03:56:54,000 --> 03:56:56,000
It's like toy router

6754
03:56:56,000 --> 03:56:58,000
Toy router

6755
03:56:58,000 --> 03:57:00,000
Yeah I mean the whole thing's

6756
03:57:00,000 --> 03:57:02,000
A toy so I'm not going to call it that

6757
03:57:02,000 --> 03:57:04,000
Yeah that's good

6758
03:57:04,000 --> 03:57:06,000
Yeah that'll

6759
03:57:06,000 --> 03:57:08,000
Work fine

6760
03:57:13,000 --> 03:57:15,000
Okay

6761
03:57:15,000 --> 03:57:17,000
I'm feeling good about these names

6762
03:57:19,000 --> 03:57:21,000
And the only squiggles we have should just be

6763
03:57:21,000 --> 03:57:23,000
Yeah we're abusing window

6764
03:57:23,000 --> 03:57:25,000
And async

6765
03:57:25,000 --> 03:57:27,000
Is not part of like the

6766
03:57:27,000 --> 03:57:29,000
Built in TypeScript JSX thing

6767
03:57:29,000 --> 03:57:31,000
It's kind of funny that JSX has been hijacked

6768
03:57:31,000 --> 03:57:33,000
As like this standard that can be highlighted

6769
03:57:33,000 --> 03:57:35,000
The same way for everyone

6770
03:57:35,000 --> 03:57:37,000
Because you can use it different ways

6771
03:57:37,000 --> 03:57:39,000
And you end up with funky situations like this

6772
03:57:39,000 --> 03:57:41,000
Where some people support promises

6773
03:57:41,000 --> 03:57:43,000
And some people don't

6774
03:57:43,000 --> 03:57:45,000
But it's still JSX

6775
03:57:45,000 --> 03:57:47,000
Yeah

6776
03:57:47,000 --> 03:57:49,000
Why does it keep showing client part

6777
03:57:49,000 --> 03:57:51,000
I think I deleted this comment before

6778
03:57:51,000 --> 03:57:53,000
Yeah

6779
03:57:53,000 --> 03:57:55,000
Sometimes LiveShare

6780
03:57:55,000 --> 03:57:57,000
Gets out of sync

6781
03:57:57,000 --> 03:57:59,000
And luckily we've been pretty in sync this whole time

6782
03:58:01,000 --> 03:58:03,000
Perfactor

6783
03:58:03,000 --> 03:58:05,000
New naming

6784
03:58:06,000 --> 03:58:08,000
All right

6785
03:58:08,000 --> 03:58:10,000
That's up

6786
03:58:10,000 --> 03:58:12,000
Beautiful

6787
03:58:12,000 --> 03:58:14,000
Beautiful

6788
03:58:14,000 --> 03:58:16,000
Yeah

6789
03:58:16,000 --> 03:58:18,000
Well I'll go back to our big faces I think

6790
03:58:18,000 --> 03:58:20,000
Your lighting's gone down a bit

6791
03:58:20,000 --> 03:58:22,000
I have some more time

6792
03:58:22,000 --> 03:58:24,000
But yeah let me

6793
03:58:24,000 --> 03:58:26,000
Make sure of the branch

6794
03:58:26,000 --> 03:58:28,000
Before we sign off

6795
03:58:28,000 --> 03:58:30,000
Okay my computer's chugging

6796
03:58:30,000 --> 03:58:32,000
Y'all can find the branch don't worry about it

6797
03:58:32,000 --> 03:58:34,000
But hey if you enjoyed the stream

6798
03:58:35,000 --> 03:58:37,000
I try to do Twitch streams

6799
03:58:37,000 --> 03:58:39,000
Every week

6800
03:58:39,000 --> 03:58:41,000
Thursdays at

6801
03:58:41,000 --> 03:58:43,000
What is it now

6802
03:58:43,000 --> 03:58:45,000
It should be 3pm eastern

6803
03:58:45,000 --> 03:58:47,000
But we bumped it forward a little bit

6804
03:58:47,000 --> 03:58:49,000
For this special edition stream

6805
03:58:49,000 --> 03:58:51,000
But I've been doing React server components a lot

6806
03:58:51,000 --> 03:58:53,000
I've been going really deep on it

6807
03:58:53,000 --> 03:58:55,000
Because I'm also someone who works on Astro

6808
03:58:55,000 --> 03:58:57,000
Which is a meta framework

6809
03:58:57,000 --> 03:58:59,000
It would be cool to support some implementation

6810
03:58:59,000 --> 03:59:01,000
Of server components if not for the migration story

6811
03:59:01,000 --> 03:59:03,000
So I'm going to be playing with it a lot more

6812
03:59:04,000 --> 03:59:06,000
And yeah

6813
03:59:06,000 --> 03:59:08,000
Drop a follow if that interests you

6814
03:59:08,000 --> 03:59:10,000
You can also of course follow Dan

6815
03:59:10,000 --> 03:59:12,000
If you're not I don't know why

6816
03:59:12,000 --> 03:59:14,000
But he's around Twitter

6817
03:59:14,000 --> 03:59:16,000
Dan underscore Abramov

6818
03:59:16,000 --> 03:59:18,000
You can see the title of this stream

6819
03:59:18,000 --> 03:59:20,000
I think that is the Twitter handle

6820
03:59:20,000 --> 03:59:22,000
Is there anyone else

6821
03:59:22,000 --> 03:59:24,000
That you want people to find you

6822
03:59:24,000 --> 03:59:26,000
Or any closing thoughts

6823
03:59:26,000 --> 03:59:28,000
I don't think I want people to find me

6824
03:59:28,000 --> 03:59:30,000
All right

6825
03:59:30,000 --> 03:59:32,000
Enough of them have found me

6826
03:59:33,000 --> 03:59:35,000
I just want to say I really appreciate you

6827
03:59:35,000 --> 03:59:37,000
Offering

6828
03:59:37,000 --> 03:59:39,000
For me to be on this stream

6829
03:59:41,000 --> 03:59:43,000
And also

6830
03:59:43,000 --> 03:59:45,000
You really did the homework

6831
03:59:45,000 --> 03:59:47,000
I mean the only reason

6832
03:59:47,000 --> 03:59:49,000
We were even able to

6833
03:59:49,000 --> 03:59:51,000
Build a mini framework

6834
03:59:51,000 --> 03:59:53,000
Is because you've already built 80% of it

6835
03:59:53,000 --> 03:59:55,000
So I really appreciate

6836
03:59:55,000 --> 03:59:57,000
Doing the homework

6837
03:59:57,000 --> 03:59:59,000
So well

6838
03:59:59,000 --> 04:00:01,000
It's really impressive

6839
04:00:01,000 --> 04:00:03,000
And there aren't

6840
04:00:03,000 --> 04:00:05,000
There isn't that much documentation around it

6841
04:00:05,000 --> 04:00:07,000
But yeah

6842
04:00:07,000 --> 04:00:09,000
Thank you so much for

6843
04:00:09,000 --> 04:00:11,000
Creating this opportunity

6844
04:00:11,000 --> 04:00:13,000
It was really fun

6845
04:00:13,000 --> 04:00:15,000
Yeah

6846
04:00:15,000 --> 04:00:17,000
I mean thanks for just saying yes

6847
04:00:17,000 --> 04:00:19,000
On a random Twitter DM

6848
04:00:19,000 --> 04:00:21,000
I wasn't sure

6849
04:00:21,000 --> 04:00:23,000
But I thought like

6850
04:00:23,000 --> 04:00:25,000
Because I saw the stream you did with

6851
04:00:25,000 --> 04:00:27,000
Ken C Dodds and others

6852
04:00:27,000 --> 04:00:29,000
And it was like this stream was great

6853
04:00:29,000 --> 04:00:31,000
And I was like

6854
04:00:31,000 --> 04:00:33,000
Can we actually

6855
04:00:33,000 --> 04:00:35,000
Draw a flow diagram

6856
04:00:35,000 --> 04:00:37,000
And see some code

6857
04:00:37,000 --> 04:00:39,000
Because conceptually

6858
04:00:39,000 --> 04:00:41,000
There's a lot going on

6859
04:00:41,000 --> 04:00:43,000
So yeah

6860
04:00:43,000 --> 04:00:45,000
I think this went over really well

6861
04:00:45,000 --> 04:00:47,000
And the replay will be on YouTube also

6862
04:00:47,000 --> 04:00:49,000
I'll share the link in the chat again

6863
04:00:49,000 --> 04:00:51,000
But I'll try to upload this live stream over there

6864
04:00:51,000 --> 04:00:53,000
It might go up by tomorrow

6865
04:00:53,000 --> 04:00:55,000
Because downloading four hours of stream from Twitch

6866
04:00:55,000 --> 04:00:57,000
And uploading four hours of stream to YouTube

6867
04:00:57,000 --> 04:00:59,000
It might be a little bit

6868
04:00:59,000 --> 04:01:01,000
To see if we can get like

6869
04:01:01,000 --> 04:01:03,000
The let's build a router part

6870
04:01:03,000 --> 04:01:05,000
Separate from the let's understand server components

6871
04:01:05,000 --> 04:01:07,000
Because one's more intermediate and advanced

6872
04:01:07,000 --> 04:01:09,000
Than the other

6873
04:01:09,000 --> 04:01:11,000
But yeah

6874
04:01:11,000 --> 04:01:13,000
Okay

6875
04:01:13,000 --> 04:01:15,000
Yeah well good having you

6876
04:01:15,000 --> 04:01:17,000
Thanks for stopping in

6877
04:01:17,000 --> 04:01:19,000
And oh

6878
04:01:19,000 --> 04:01:21,000
Let's actually find someone to raid

6879
04:01:21,000 --> 04:01:23,000
Before I hop off

6880
04:01:23,000 --> 04:01:25,000
Does anyone have suggestions

6881
04:01:25,000 --> 04:01:27,000
What does it mean

6882
04:01:27,000 --> 04:01:29,000
What is raiding

6883
04:01:29,000 --> 04:01:31,000
I don't understand

6884
04:01:31,000 --> 04:01:33,000
It's something you can do on Twitch

6885
04:01:33,000 --> 04:01:35,000
To take your audience and push them

6886
04:01:35,000 --> 04:01:37,000
Into another stream that's active

6887
04:01:37,000 --> 04:01:39,000
Oh

6888
04:01:39,000 --> 04:01:41,000
Are they like forced

6889
04:01:41,000 --> 04:01:43,000
To do that

6890
04:01:43,000 --> 04:01:45,000
Well I mean you can just stop watching

6891
04:01:45,000 --> 04:01:47,000
If you don't want to do that

6892
04:01:47,000 --> 04:01:49,000
It's kind of like YouTube autoplay

6893
04:01:49,000 --> 04:01:51,000
Yeah

6894
04:01:51,000 --> 04:01:53,000
But it hosts inside of yours

6895
04:01:53,000 --> 04:01:55,000
And you can leave

6896
04:01:55,000 --> 04:01:57,000
It's I don't know it's a fun system

6897
04:01:57,000 --> 04:01:59,000
But I'll raid Cassidy

6898
04:01:59,000 --> 04:02:01,000
Because she's great and does a ton of React tutorials

6899
04:02:01,000 --> 04:02:03,000
And everything

6900
04:02:03,000 --> 04:02:05,000
We still had a ton of people sticking around

6901
04:02:05,000 --> 04:02:07,000
Thank y'all so much

6902
04:02:07,000 --> 04:02:09,000
Drop a follow for the next stream

6903
04:02:09,000 --> 04:02:11,000
Obviously do all of that

6904
04:02:11,000 --> 04:02:13,000
But yeah

6905
04:02:13,000 --> 04:02:15,000
See y'all around

6906
04:02:15,000 --> 04:02:17,000
Bye

6907
04:02:17,000 --> 04:02:19,000
Okay

